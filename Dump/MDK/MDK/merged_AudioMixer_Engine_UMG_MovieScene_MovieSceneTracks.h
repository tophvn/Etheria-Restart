
/********************************************************
*                                                       *
*   Package generated using UEDumper by Spuckwaffel.    *
*                                                       *
********************************************************/

/// dependency: BasicType
/// dependency: AssetRegistry
/// dependency: AudioExtensions
/// dependency: AudioPlatformConfiguration
/// dependency: Chaos
/// dependency: ClothingSystemRuntimeInterface
/// dependency: CoreUObject
/// dependency: DeveloperSettings
/// dependency: InputCore
/// dependency: PacketHandler
/// dependency: PhysicsCore
/// dependency: PropertyAccess
/// dependency: PropertyPath
/// dependency: Slate
/// dependency: SlateCore
/// dependency: StaticMeshDescription

/// Struct /Script/Engine.TickFunction
/// Size: 0x0028 (0x000000 - 0x000028)
class FTickFunction : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TEnumAsByte<ETickingGroup>)                TickGroup                                                   OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(TEnumAsByte<ETickingGroup>)                EndTickGroup                                                OFFSET(get<T>, {0x9, 1, 0, 0})
	DMember(bool)                                      bTickEvenWhenPaused                                         OFFSET(get<bool>, {0xA, 1, 1, 0})
	DMember(bool)                                      bCanEverTick                                                OFFSET(get<bool>, {0xA, 1, 1, 1})
	DMember(bool)                                      bStartWithTickEnabled                                       OFFSET(get<bool>, {0xA, 1, 1, 2})
	DMember(bool)                                      bAllowTickOnDedicatedServer                                 OFFSET(get<bool>, {0xA, 1, 1, 3})
	DMember(float)                                     TickInterval                                                OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.ActorComponentTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
class FActorComponentTickFunction : public FTickFunction
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.SimpleMemberReference
/// Size: 0x0020 (0x000000 - 0x000020)
class FSimpleMemberReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UObject*)                            MemberParent                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     MemberName                                                  OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FGuid)                                     MemberGuid                                                  OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Class /Script/Engine.ActorComponent
/// Size: 0x0088 (0x000028 - 0x0000B0)
class UActorComponent : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FActorComponentTickFunction)               PrimaryComponentTick                                        OFFSET(getStruct<T>, {0x30, 48, 0, 0})
	CMember(TArray<FName>)                             ComponentTags                                               OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<class UAssetUserData*>)             AssetUserData                                               OFFSET(get<T>, {0x70, 16, 0, 0})
	DMember(int32_t)                                   UCSSerializationIndex                                       OFFSET(get<int32_t>, {0x84, 4, 0, 0})
	DMember(bool)                                      bNetAddressable                                             OFFSET(get<bool>, {0x88, 1, 1, 3})
	DMember(bool)                                      bReplicates                                                 OFFSET(get<bool>, {0x88, 1, 1, 4})
	DMember(bool)                                      bAutoActivate                                               OFFSET(get<bool>, {0x89, 1, 1, 7})
	DMember(bool)                                      bIsActive                                                   OFFSET(get<bool>, {0x8A, 1, 1, 0})
	DMember(bool)                                      bEditableWhenInherited                                      OFFSET(get<bool>, {0x8A, 1, 1, 1})
	DMember(bool)                                      bCanEverAffectNavigation                                    OFFSET(get<bool>, {0x8A, 1, 1, 3})
	DMember(bool)                                      bIsEditorOnly                                               OFFSET(get<bool>, {0x8A, 1, 1, 5})
	CMember(EComponentCreationMethod)                  CreationMethod                                              OFFSET(get<T>, {0x8C, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnComponentActivated                                        OFFSET(getStruct<T>, {0x8D, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnComponentDeactivated                                      OFFSET(getStruct<T>, {0x8E, 1, 0, 0})
	CMember(TArray<FSimpleMemberReference>)            UCSModifiedProperties                                       OFFSET(get<T>, {0x90, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.ActorComponent.ToggleActive
	// void ToggleActive();                                                                                                     // [0xc8b130] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetTickGroup
	// void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);                                                              // [0x32a4380] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetTickableWhenPaused
	// void SetTickableWhenPaused(bool bTickableWhenPaused);                                                                    // [0x32a4400] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetIsReplicated
	// void SetIsReplicated(bool ShouldReplicate);                                                                              // [0x32a42f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetComponentTickIntervalAndCooldown
	// void SetComponentTickIntervalAndCooldown(float TickInterval);                                                            // [0x32a4270] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetComponentTickInterval
	// void SetComponentTickInterval(float TickInterval);                                                                       // [0x32a41f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetComponentTickEnabled
	// void SetComponentTickEnabled(bool bEnabled);                                                                             // [0x32a4160] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetAutoActivate
	// void SetAutoActivate(bool bNewAutoActivate);                                                                             // [0x32a0c30] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetActive
	// void SetActive(bool bNewActive, bool bReset);                                                                            // [0x32a4080] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.RemoveTickPrerequisiteComponent
	// void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);                                      // [0x32a3ff0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.RemoveTickPrerequisiteActor
	// void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);                                                       // [0x32a3f60] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.ReceiveTick
	// void ReceiveTick(float DeltaSeconds);                                                                                    // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.ActorComponent.ReceiveEndPlay
	// void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);                                                          // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.ActorComponent.ReceiveBeginPlay
	// void ReceiveBeginPlay();                                                                                                 // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.ActorComponent.OnRep_IsActive
	// void OnRep_IsActive();                                                                                                   // [0x89bc50] Native|Public        
	// Function /Script/Engine.ActorComponent.K2_DestroyComponent
	// void K2_DestroyComponent(class UObject* Object);                                                                         // [0x32a3e50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.IsComponentTickEnabled
	// bool IsComponentTickEnabled();                                                                                           // [0x32a3e20] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.IsBeingDestroyed
	// bool IsBeingDestroyed();                                                                                                 // [0x32a3df0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.IsActive
	// bool IsActive();                                                                                                         // [0x32a3dc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.GetOwner
	// class AActor* GetOwner();                                                                                                // [0x32a3da0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.GetComponentTickInterval
	// float GetComponentTickInterval();                                                                                        // [0x32a3d70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.Deactivate
	// void Deactivate();                                                                                                       // [0x1635730] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.ComponentHasTag
	// bool ComponentHasTag(FName Tag);                                                                                         // [0x32a3b30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.AddTickPrerequisiteComponent
	// void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);                                         // [0x32a39d0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.AddTickPrerequisiteActor
	// void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);                                                          // [0x32a3940] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.Activate
	// void Activate(bool bReset);                                                                                              // [0x1224110] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneComponent
/// Size: 0x0150 (0x0000B0 - 0x000200)
class USceneComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
	CMember(TWeakObjectPtr<class APhysicsVolume*>)     PhysicsVolume                                               OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(class USceneComponent*)                    AttachParent                                                OFFSET(get<T>, {0xC0, 8, 0, 0})
	SMember(FName)                                     AttachSocketName                                            OFFSET(getStruct<T>, {0xC8, 8, 0, 0})
	CMember(TArray<class USceneComponent*>)            AttachChildren                                              OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(TArray<class USceneComponent*>)            ClientAttachedChildren                                      OFFSET(get<T>, {0xE0, 16, 0, 0})
	SMember(FVector)                                   RelativeLocation                                            OFFSET(getStruct<T>, {0x11C, 12, 0, 0})
	SMember(FRotator)                                  RelativeRotation                                            OFFSET(getStruct<T>, {0x128, 12, 0, 0})
	SMember(FVector)                                   RelativeScale3D                                             OFFSET(getStruct<T>, {0x134, 12, 0, 0})
	SMember(FVector)                                   ComponentVelocity                                           OFFSET(getStruct<T>, {0x140, 12, 0, 0})
	DMember(bool)                                      bComponentToWorldUpdated                                    OFFSET(get<bool>, {0x14C, 1, 1, 0})
	DMember(bool)                                      bAbsoluteLocation                                           OFFSET(get<bool>, {0x14C, 1, 1, 2})
	DMember(bool)                                      bAbsoluteRotation                                           OFFSET(get<bool>, {0x14C, 1, 1, 3})
	DMember(bool)                                      bAbsoluteScale                                              OFFSET(get<bool>, {0x14C, 1, 1, 4})
	DMember(bool)                                      bVisible                                                    OFFSET(get<bool>, {0x14C, 1, 1, 5})
	DMember(bool)                                      bShouldBeAttached                                           OFFSET(get<bool>, {0x14C, 1, 1, 6})
	DMember(bool)                                      bShouldSnapLocationWhenAttached                             OFFSET(get<bool>, {0x14C, 1, 1, 7})
	DMember(bool)                                      bShouldSnapRotationWhenAttached                             OFFSET(get<bool>, {0x14D, 1, 1, 0})
	DMember(bool)                                      bShouldUpdatePhysicsVolume                                  OFFSET(get<bool>, {0x14D, 1, 1, 1})
	DMember(bool)                                      bHiddenInGame                                               OFFSET(get<bool>, {0x14D, 1, 1, 2})
	DMember(bool)                                      bBoundsChangeTriggersStreamingDataRebuild                   OFFSET(get<bool>, {0x14D, 1, 1, 3})
	DMember(bool)                                      bUseAttachParentBound                                       OFFSET(get<bool>, {0x14D, 1, 1, 4})
	CMember(TEnumAsByte<EComponentMobility>)           Mobility                                                    OFFSET(get<T>, {0x14F, 1, 0, 0})
	CMember(TEnumAsByte<EDetailMode>)                  DetailMode                                                  OFFSET(get<T>, {0x150, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  PhysicsVolumeChangedDelegate                                OFFSET(getStruct<T>, {0x151, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.SceneComponent.ToggleVisibility
	// void ToggleVisibility(bool bPropagateToChildren);                                                                        // [0x33e32e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SnapTo
	// bool SnapTo(class USceneComponent* InParent, FName InSocketName);                                                        // [0x33e3210] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetWorldScale3D
	// void SetWorldScale3D(FVector NewScale);                                                                                  // [0x33e3020] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetVisibility
	// void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);                                                      // [0x33e2f50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetShouldUpdatePhysicsVolume
	// void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);                                                    // [0x33e2ec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetRelativeScale3D
	// void SetRelativeScale3D(FVector NewScale3D);                                                                             // [0x33e2e30] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetMobility
	// void SetMobility(TEnumAsByte<EComponentMobility> NewMobility);                                                           // [0x33e2db0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetHiddenInGame
	// void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);                                                         // [0x33e2ce0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetAbsolute
	// void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);                          // [0x33e2b20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.ResetRelativeTransform
	// void ResetRelativeTransform();                                                                                           // [0x33e2b00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.OnRep_Visibility
	// void OnRep_Visibility(bool OldValue);                                                                                    // [0x33e2910] Final|Native|Private 
	// Function /Script/Engine.SceneComponent.OnRep_Transform
	// void OnRep_Transform();                                                                                                  // [0x33e28f0] Final|Native|Private 
	// Function /Script/Engine.SceneComponent.OnRep_AttachSocketName
	// void OnRep_AttachSocketName();                                                                                           // [0x33e28d0] Final|Native|Private 
	// Function /Script/Engine.SceneComponent.OnRep_AttachParent
	// void OnRep_AttachParent();                                                                                               // [0x33e28d0] Final|Native|Private 
	// Function /Script/Engine.SceneComponent.OnRep_AttachChildren
	// void OnRep_AttachChildren();                                                                                             // [0x33e28b0] Final|Native|Private 
	// Function /Script/Engine.SceneComponent.K2_SetWorldTransform
	// void K2_SetWorldTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);            // [0x33e26a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetWorldRotation
	// void K2_SetWorldRotation(FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                 // [0x33e24f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetWorldLocationAndRotation
	// void K2_SetWorldLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x33e22e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetWorldLocation
	// void K2_SetWorldLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                  // [0x33e2130] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeTransform
	// void K2_SetRelativeTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);         // [0x33e1f20] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeRotation
	// void K2_SetRelativeRotation(FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);              // [0x33e1d70] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeLocationAndRotation
	// void K2_SetRelativeLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x33e1b60] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeLocation
	// void K2_SetRelativeLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);               // [0x33e19b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_GetComponentToWorld
	// FTransform K2_GetComponentToWorld();                                                                                     // [0x33e1950] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.K2_GetComponentScale
	// FVector K2_GetComponentScale();                                                                                          // [0x33e1910] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.K2_GetComponentRotation
	// FRotator K2_GetComponentRotation();                                                                                      // [0x33e18d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.K2_GetComponentLocation
	// FVector K2_GetComponentLocation();                                                                                       // [0x33e1890] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.K2_DetachFromComponent
	// void K2_DetachFromComponent(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule, bool bCallModify); // [0x33e1730] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AttachToComponent
	// bool K2_AttachToComponent(class USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // [0x33e1560] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AttachTo
	// bool K2_AttachTo(class USceneComponent* InParent, FName InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies); // [0x33e1400] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddWorldTransformKeepScale
	// void K2_AddWorldTransformKeepScale(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x33e11f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddWorldTransform
	// void K2_AddWorldTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x33e0fe0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddWorldRotation
	// void K2_AddWorldRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);               // [0x33e0e30] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddWorldOffset
	// void K2_AddWorldOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                  // [0x33e0c80] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddRelativeRotation
	// void K2_AddRelativeRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);            // [0x33e0ad0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddRelativeLocation
	// void K2_AddRelativeLocation(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);             // [0x33e0920] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddLocalTransform
	// void K2_AddLocalTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x33e0710] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddLocalRotation
	// void K2_AddLocalRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);               // [0x33e0560] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddLocalOffset
	// void K2_AddLocalOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                  // [0x33e03b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.IsVisible
	// bool IsVisible();                                                                                                        // [0x33e0380] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.IsSimulatingPhysics
	// bool IsSimulatingPhysics(FName BoneName);                                                                                // [0x33e02e0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.IsAnySimulatingPhysics
	// bool IsAnySimulatingPhysics();                                                                                           // [0x1222090] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetUpVector
	// FVector GetUpVector();                                                                                                   // [0x33e0140] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetSocketTransform
	// FTransform GetSocketTransform(FName InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace);                  // [0x33e0030] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetSocketRotation
	// FRotator GetSocketRotation(FName InSocketName);                                                                          // [0x33dff80] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetSocketQuaternion
	// FQuat GetSocketQuaternion(FName InSocketName);                                                                           // [0x33dfed0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetSocketLocation
	// FVector GetSocketLocation(FName InSocketName);                                                                           // [0x33dfe20] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetShouldUpdatePhysicsVolume
	// bool GetShouldUpdatePhysicsVolume();                                                                                     // [0x33dfdf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetRightVector
	// FVector GetRightVector();                                                                                                // [0x33dfdb0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetRelativeTransform
	// FTransform GetRelativeTransform();                                                                                       // [0x33dfd50] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetPhysicsVolume
	// class APhysicsVolume* GetPhysicsVolume();                                                                                // [0x33dfd20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetParentComponents
	// void GetParentComponents(TArray<USceneComponent*>& Parents);                                                             // [0x33dfc70] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetNumChildrenComponents
	// int32_t GetNumChildrenComponents();                                                                                      // [0x33dfc40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetForwardVector
	// FVector GetForwardVector();                                                                                              // [0x33bab30] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetComponentVelocity
	// FVector GetComponentVelocity();                                                                                          // [0x33dfc00] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetChildrenComponents
	// void GetChildrenComponents(bool bIncludeAllDescendants, TArray<USceneComponent*>& Children);                             // [0x33dfb00] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetChildComponent
	// class USceneComponent* GetChildComponent(int32_t ChildIndex);                                                            // [0x33dfa60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetAttachSocketName
	// FName GetAttachSocketName();                                                                                             // [0x2b47f00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetAttachParent
	// class USceneComponent* GetAttachParent();                                                                                // [0x33dfa40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetAllSocketNames
	// TArray<FName> GetAllSocketNames();                                                                                       // [0x33df9c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.DoesSocketExist
	// bool DoesSocketExist(FName InSocketName);                                                                                // [0x33df920] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.DetachFromParent
	// void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);                                                    // [0x33df840] Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.KeyHandleMap
/// Size: 0x0060 (0x000000 - 0x000060)
class FKeyHandleMap : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Struct /Script/Engine.IndexedCurve
/// Size: 0x0068 (0x000000 - 0x000068)
class FIndexedCurve : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FKeyHandleMap)                             KeyHandlesToIndices                                         OFFSET(getStruct<T>, {0x8, 96, 0, 0})
};

/// Struct /Script/Engine.RealCurve
/// Size: 0x0008 (0x000068 - 0x000070)
class FRealCurve : public FIndexedCurve
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(float)                                     DefaultValue                                                OFFSET(get<float>, {0x68, 4, 0, 0})
	CMember(TEnumAsByte<ERichCurveExtrapolation>)      PreInfinityExtrap                                           OFFSET(get<T>, {0x6C, 1, 0, 0})
	CMember(TEnumAsByte<ERichCurveExtrapolation>)      PostInfinityExtrap                                          OFFSET(get<T>, {0x6D, 1, 0, 0})
};

/// Struct /Script/Engine.RichCurveKey
/// Size: 0x001C (0x000000 - 0x00001C)
class FRichCurveKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	CMember(TEnumAsByte<ERichCurveInterpMode>)         InterpMode                                                  OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(TEnumAsByte<ERichCurveTangentMode>)        TangentMode                                                 OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(TEnumAsByte<ERichCurveTangentWeightMode>)  TangentWeightMode                                           OFFSET(get<T>, {0x2, 1, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     ArriveTangent                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     ArriveTangentWeight                                         OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     LeaveTangent                                                OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     LeaveTangentWeight                                          OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.RichCurve
/// Size: 0x0010 (0x000070 - 0x000080)
class FRichCurve : public FRealCurve
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TArray<FRichCurveKey>)                     Keys                                                        OFFSET(get<T>, {0x70, 16, 0, 0})
};

/// Struct /Script/Engine.RuntimeFloatCurve
/// Size: 0x0088 (0x000000 - 0x000088)
class FRuntimeFloatCurve : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FRichCurve)                                EditorCurveData                                             OFFSET(getStruct<T>, {0x0, 128, 0, 0})
	CMember(class UCurveFloat*)                        ExternalCurve                                               OFFSET(get<T>, {0x80, 8, 0, 0})
};

/// Struct /Script/Engine.BaseAttenuationSettings
/// Size: 0x00B0 (0x000000 - 0x0000B0)
class FBaseAttenuationSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(EAttenuationDistanceModel)                 DistanceAlgorithm                                           OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(TEnumAsByte<EAttenuationShape>)            AttenuationShape                                            OFFSET(get<T>, {0x9, 1, 0, 0})
	DMember(float)                                     dBAttenuationAtMax                                          OFFSET(get<float>, {0xC, 4, 0, 0})
	CMember(ENaturalSoundFalloffMode)                  FalloffMode                                                 OFFSET(get<T>, {0x10, 1, 0, 0})
	SMember(FVector)                                   AttenuationShapeExtents                                     OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	DMember(float)                                     ConeOffset                                                  OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     FalloffDistance                                             OFFSET(get<float>, {0x24, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        CustomAttenuationCurve                                      OFFSET(getStruct<T>, {0x28, 136, 0, 0})
};

/// Struct /Script/Engine.AttenuationSubmixSendSettings
/// Size: 0x00A8 (0x000000 - 0x0000A8)
class FAttenuationSubmixSendSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(class USoundSubmixBase*)                   Submix                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(ESubmixSendMethod)                         SubmixSendMethod                                            OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(float)                                     SubmixSendLevelMin                                          OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     SubmixSendLevelMax                                          OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     SubmixSendDistanceMin                                       OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     SubmixSendDistanceMax                                       OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     ManualSubmixSendLevel                                       OFFSET(get<float>, {0x1C, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        CustomSubmixSendCurve                                       OFFSET(getStruct<T>, {0x20, 136, 0, 0})
};

/// Struct /Script/Engine.SoundAttenuationPluginSettings
/// Size: 0x0030 (0x000000 - 0x000030)
class FSoundAttenuationPluginSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<class USpatializationPluginSourceSettingsBase*>) SpatializationPluginSettingsArray              OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<class UOcclusionPluginSourceSettingsBase*>) OcclusionPluginSettingsArray                        OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<class UReverbPluginSourceSettingsBase*>) ReverbPluginSettingsArray                              OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.SoundAttenuationSettings
/// Size: 0x02F0 (0x0000B0 - 0x0003A0)
class FSoundAttenuationSettings : public FBaseAttenuationSettings
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	DMember(bool)                                      bAttenuate                                                  OFFSET(get<bool>, {0xB0, 1, 1, 0})
	DMember(bool)                                      bSpatialize                                                 OFFSET(get<bool>, {0xB0, 1, 1, 1})
	DMember(bool)                                      bAttenuateWithLPF                                           OFFSET(get<bool>, {0xB0, 1, 1, 2})
	DMember(bool)                                      bEnableListenerFocus                                        OFFSET(get<bool>, {0xB0, 1, 1, 3})
	DMember(bool)                                      bEnableFocusInterpolation                                   OFFSET(get<bool>, {0xB0, 1, 1, 4})
	DMember(bool)                                      bEnableOcclusion                                            OFFSET(get<bool>, {0xB0, 1, 1, 5})
	DMember(bool)                                      bUseComplexCollisionForOcclusion                            OFFSET(get<bool>, {0xB0, 1, 1, 6})
	DMember(bool)                                      bEnableReverbSend                                           OFFSET(get<bool>, {0xB0, 1, 1, 7})
	DMember(bool)                                      bEnablePriorityAttenuation                                  OFFSET(get<bool>, {0xB1, 1, 1, 0})
	DMember(bool)                                      bApplyNormalizationToStereoSounds                           OFFSET(get<bool>, {0xB1, 1, 1, 1})
	DMember(bool)                                      bEnableLogFrequencyScaling                                  OFFSET(get<bool>, {0xB1, 1, 1, 2})
	DMember(bool)                                      bEnableSubmixSends                                          OFFSET(get<bool>, {0xB1, 1, 1, 3})
	CMember(TEnumAsByte<ESoundSpatializationAlgorithm>) SpatializationAlgorithm                                    OFFSET(get<T>, {0xB2, 1, 0, 0})
	DMember(float)                                     BinauralRadius                                              OFFSET(get<float>, {0xB4, 4, 0, 0})
	CMember(EAirAbsorptionMethod)                      AbsorptionMethod                                            OFFSET(get<T>, {0xB8, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            OcclusionTraceChannel                                       OFFSET(get<T>, {0xB9, 1, 0, 0})
	CMember(EReverbSendMethod)                         ReverbSendMethod                                            OFFSET(get<T>, {0xBA, 1, 0, 0})
	CMember(EPriorityAttenuationMethod)                PriorityAttenuationMethod                                   OFFSET(get<T>, {0xBB, 1, 0, 0})
	DMember(float)                                     OmniRadius                                                  OFFSET(get<float>, {0xBC, 4, 0, 0})
	DMember(float)                                     StereoSpread                                                OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     LPFRadiusMin                                                OFFSET(get<float>, {0xC4, 4, 0, 0})
	DMember(float)                                     LPFRadiusMax                                                OFFSET(get<float>, {0xC8, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        CustomLowpassAirAbsorptionCurve                             OFFSET(getStruct<T>, {0xD0, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        CustomHighpassAirAbsorptionCurve                            OFFSET(getStruct<T>, {0x158, 136, 0, 0})
	DMember(float)                                     LPFFrequencyAtMin                                           OFFSET(get<float>, {0x1E0, 4, 0, 0})
	DMember(float)                                     LPFFrequencyAtMax                                           OFFSET(get<float>, {0x1E4, 4, 0, 0})
	DMember(float)                                     HPFFrequencyAtMin                                           OFFSET(get<float>, {0x1E8, 4, 0, 0})
	DMember(float)                                     HPFFrequencyAtMax                                           OFFSET(get<float>, {0x1EC, 4, 0, 0})
	DMember(float)                                     FocusAzimuth                                                OFFSET(get<float>, {0x1F0, 4, 0, 0})
	DMember(float)                                     NonFocusAzimuth                                             OFFSET(get<float>, {0x1F4, 4, 0, 0})
	DMember(float)                                     FocusDistanceScale                                          OFFSET(get<float>, {0x1F8, 4, 0, 0})
	DMember(float)                                     NonFocusDistanceScale                                       OFFSET(get<float>, {0x1FC, 4, 0, 0})
	DMember(float)                                     FocusPriorityScale                                          OFFSET(get<float>, {0x200, 4, 0, 0})
	DMember(float)                                     NonFocusPriorityScale                                       OFFSET(get<float>, {0x204, 4, 0, 0})
	DMember(float)                                     FocusVolumeAttenuation                                      OFFSET(get<float>, {0x208, 4, 0, 0})
	DMember(float)                                     NonFocusVolumeAttenuation                                   OFFSET(get<float>, {0x20C, 4, 0, 0})
	DMember(float)                                     FocusAttackInterpSpeed                                      OFFSET(get<float>, {0x210, 4, 0, 0})
	DMember(float)                                     FocusReleaseInterpSpeed                                     OFFSET(get<float>, {0x214, 4, 0, 0})
	DMember(float)                                     OcclusionLowPassFilterFrequency                             OFFSET(get<float>, {0x218, 4, 0, 0})
	DMember(float)                                     OcclusionVolumeAttenuation                                  OFFSET(get<float>, {0x21C, 4, 0, 0})
	DMember(float)                                     OcclusionInterpolationTime                                  OFFSET(get<float>, {0x220, 4, 0, 0})
	DMember(float)                                     ReverbWetLevelMin                                           OFFSET(get<float>, {0x224, 4, 0, 0})
	DMember(float)                                     ReverbWetLevelMax                                           OFFSET(get<float>, {0x228, 4, 0, 0})
	DMember(float)                                     ReverbDistanceMin                                           OFFSET(get<float>, {0x22C, 4, 0, 0})
	DMember(float)                                     ReverbDistanceMax                                           OFFSET(get<float>, {0x230, 4, 0, 0})
	DMember(float)                                     ManualReverbSendLevel                                       OFFSET(get<float>, {0x234, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        CustomReverbSendCurve                                       OFFSET(getStruct<T>, {0x238, 136, 0, 0})
	CMember(TArray<FAttenuationSubmixSendSettings>)    SubmixSendSettings                                          OFFSET(get<T>, {0x2C0, 16, 0, 0})
	DMember(float)                                     PriorityAttenuationMin                                      OFFSET(get<float>, {0x2D0, 4, 0, 0})
	DMember(float)                                     PriorityAttenuationMax                                      OFFSET(get<float>, {0x2D4, 4, 0, 0})
	DMember(float)                                     PriorityAttenuationDistanceMin                              OFFSET(get<float>, {0x2D8, 4, 0, 0})
	DMember(float)                                     PriorityAttenuationDistanceMax                              OFFSET(get<float>, {0x2DC, 4, 0, 0})
	DMember(float)                                     ManualPriorityAttenuation                                   OFFSET(get<float>, {0x2E0, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        CustomPriorityAttenuationCurve                              OFFSET(getStruct<T>, {0x2E8, 136, 0, 0})
	SMember(FSoundAttenuationPluginSettings)           PluginSettings                                              OFFSET(getStruct<T>, {0x370, 48, 0, 0})
};

/// Struct /Script/Engine.SoundSubmixSendInfo
/// Size: 0x00B0 (0x000000 - 0x0000B0)
class FSoundSubmixSendInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(ESendLevelControlMethod)                   SendLevelControlMethod                                      OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(ESubmixSendStage)                          SendStage                                                   OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(class USoundSubmixBase*)                   SoundSubmix                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(float)                                     SendLevel                                                   OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     MinSendLevel                                                OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     MaxSendLevel                                                OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     MinSendDistance                                             OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     MaxSendDistance                                             OFFSET(get<float>, {0x20, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        CustomSendLevelCurve                                        OFFSET(getStruct<T>, {0x28, 136, 0, 0})
};

/// Struct /Script/Engine.SoundSourceBusSendInfo
/// Size: 0x00B8 (0x000000 - 0x0000B8)
class FSoundSourceBusSendInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(ESourceBusSendLevelControlMethod)          SourceBusSendLevelControlMethod                             OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(class USoundSourceBus*)                    SoundSourceBus                                              OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UAudioBus*)                          AudioBus                                                    OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(float)                                     SendLevel                                                   OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     MinSendLevel                                                OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     MaxSendLevel                                                OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     MinSendDistance                                             OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     MaxSendDistance                                             OFFSET(get<float>, {0x28, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        CustomSendLevelCurve                                        OFFSET(getStruct<T>, {0x30, 136, 0, 0})
};

/// Class /Script/AudioMixer.SynthComponent
/// Size: 0x04C8 (0x0001F8 - 0x0006C0)
class USynthComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1728;

public:
	DMember(bool)                                      bAutoDestroy                                                OFFSET(get<bool>, {0x1F8, 1, 1, 0})
	DMember(bool)                                      bStopWhenOwnerDestroyed                                     OFFSET(get<bool>, {0x1F8, 1, 1, 1})
	DMember(bool)                                      bAllowSpatialization                                        OFFSET(get<bool>, {0x1F8, 1, 1, 2})
	DMember(bool)                                      bOverrideAttenuation                                        OFFSET(get<bool>, {0x1F8, 1, 1, 3})
	DMember(bool)                                      bOutputToBusOnly                                            OFFSET(get<bool>, {0x1FC, 1, 1, 0})
	CMember(class USoundAttenuation*)                  AttenuationSettings                                         OFFSET(get<T>, {0x200, 8, 0, 0})
	SMember(FSoundAttenuationSettings)                 AttenuationOverrides                                        OFFSET(getStruct<T>, {0x208, 928, 0, 0})
	CMember(class USoundConcurrency*)                  ConcurrencySettings                                         OFFSET(get<T>, {0x5A8, 8, 0, 0})
	CMember(TSet<USoundConcurrency*>)                  ConcurrencySet                                              OFFSET(get<T>, {0x5B0, 80, 0, 0})
	CMember(class USoundClass*)                        SoundClass                                                  OFFSET(get<T>, {0x600, 8, 0, 0})
	CMember(class USoundEffectSourcePresetChain*)      SourceEffectChain                                           OFFSET(get<T>, {0x608, 8, 0, 0})
	CMember(class USoundSubmixBase*)                   SoundSubmix                                                 OFFSET(get<T>, {0x610, 8, 0, 0})
	CMember(TArray<FSoundSubmixSendInfo>)              SoundSubmixSends                                            OFFSET(get<T>, {0x618, 16, 0, 0})
	CMember(TArray<FSoundSourceBusSendInfo>)           BusSends                                                    OFFSET(get<T>, {0x628, 16, 0, 0})
	CMember(TArray<FSoundSourceBusSendInfo>)           PreEffectBusSends                                           OFFSET(get<T>, {0x638, 16, 0, 0})
	DMember(bool)                                      bIsUISound                                                  OFFSET(get<bool>, {0x648, 1, 1, 0})
	DMember(bool)                                      bIsPreviewSound                                             OFFSET(get<bool>, {0x648, 1, 1, 1})
	DMember(int32_t)                                   EnvelopeFollowerAttackTime                                  OFFSET(get<int32_t>, {0x64C, 4, 0, 0})
	DMember(int32_t)                                   EnvelopeFollowerReleaseTime                                 OFFSET(get<int32_t>, {0x650, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAudioEnvelopeValue                                        OFFSET(getStruct<T>, {0x658, 16, 0, 0})
	CMember(class USynthSound*)                        Synth                                                       OFFSET(get<T>, {0x688, 8, 0, 0})
	CMember(class UAudioComponent*)                    AudioComponent                                              OFFSET(get<T>, {0x690, 8, 0, 0})


	/// Functions
	// Function /Script/AudioMixer.SynthComponent.Stop
	// void Stop();                                                                                                             // [0x2a76930] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.SynthComponent.Start
	// void Start();                                                                                                            // [0x2a76520] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.SynthComponent.SetVolumeMultiplier
	// void SetVolumeMultiplier(float VolumeMultiplier);                                                                        // [0x2a764a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.SynthComponent.SetSubmixSend
	// void SetSubmixSend(class USoundSubmixBase* Submix, float SendLevel);                                                     // [0x2a76050] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.SynthComponent.SetLowPassFilterFrequency
	// void SetLowPassFilterFrequency(float InLowPassFilterFrequency);                                                          // [0x2a75780] Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.SynthComponent.SetLowPassFilterEnabled
	// void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);                                                               // [0x2a756f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.SynthComponent.IsPlaying
	// bool IsPlaying();                                                                                                        // [0x2a743c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/AudioMixer.AudioGenerator
/// Size: 0x0080 (0x000028 - 0x0000A8)
class UAudioGenerator : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
};

/// Class /Script/Engine.BlueprintFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintFunctionLibrary : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/AudioMixer.AudioMixerBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UAudioMixerBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.TrimAudioCache
	// float TrimAudioCache(float InMegabytesToFree);                                                                           // [0x2a76f30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.StopRecordingOutput
	// class USoundWave* StopRecordingOutput(class UObject* WorldContextObject, EAudioRecordingExportType ExportType, FString Name, FString Path, class USoundSubmix* SubmixToRecord, class USoundWave* ExistingSoundWaveToOverwrite); // [0x2a76ad0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.StopAudioBus
	// void StopAudioBus(class UObject* WorldContextObject, class UAudioBus* AudioBus);                                         // [0x2a76a10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.StopAnalyzingOutput
	// void StopAnalyzingOutput(class UObject* WorldContextObject, class USoundSubmix* SubmixToStopAnalyzing);                  // [0x2a76950] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.StartRecordingOutput
	// void StartRecordingOutput(class UObject* WorldContextObject, float ExpectedDuration, class USoundSubmix* SubmixToRecord); // [0x2a76820] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.StartAudioBus
	// void StartAudioBus(class UObject* WorldContextObject, class UAudioBus* AudioBus);                                        // [0x2a76760] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.StartAnalyzingOutput
	// void StartAnalyzingOutput(class UObject* WorldContextObject, class USoundSubmix* SubmixToAnalyze, EFFTSize FFTSize, EFFTPeakInterpolationMethod InterpolationMethod, EFFTWindowType WindowType, float HopSize, EAudioSpectrumType SpectrumType); // [0x2a76540] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.SetSubmixEffectChainOverride
	// void SetSubmixEffectChainOverride(class UObject* WorldContextObject, class USoundSubmix* SoundSubmix, TArray<USoundEffectSubmixPreset*> SubmixEffectPresetChain, float FadeTimeSec); // [0x2a75ec0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.SetBypassSourceEffectChainEntry
	// void SetBypassSourceEffectChainEntry(class UObject* WorldContextObject, class USoundEffectSourcePresetChain* PresetChain, int32_t EntryIndex, bool bBypassed); // [0x2a75510] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.ResumeRecordingOutput
	// void ResumeRecordingOutput(class UObject* WorldContextObject, class USoundSubmix* SubmixToPause);                        // [0x2a75290] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.ReplaceSoundEffectSubmix
	// void ReplaceSoundEffectSubmix(class UObject* WorldContextObject, class USoundSubmix* InSoundSubmix, int32_t SubmixChainIndex, class USoundEffectSubmixPreset* SubmixEffectPreset); // [0x2a74fd0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.RemoveSubmixEffectPresetAtIndex
	// void RemoveSubmixEffectPresetAtIndex(class UObject* WorldContextObject, class USoundSubmix* SoundSubmix, int32_t SubmixChainIndex); // [0x2a74ed0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.RemoveSubmixEffectPreset
	// void RemoveSubmixEffectPreset(class UObject* WorldContextObject, class USoundSubmix* SoundSubmix, class USoundEffectSubmixPreset* SubmixEffectPreset); // [0x2a74dd0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.RemoveSourceEffectFromPresetChain
	// void RemoveSourceEffectFromPresetChain(class UObject* WorldContextObject, class USoundEffectSourcePresetChain* PresetChain, int32_t EntryIndex); // [0x2a74cd0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.RemoveMasterSubmixEffect
	// void RemoveMasterSubmixEffect(class UObject* WorldContextObject, class USoundEffectSubmixPreset* SubmixEffectPreset);    // [0x2a74c10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.PrimeSoundForPlayback
	// void PrimeSoundForPlayback(class USoundWave* SoundWave, FDelegateProperty OnLoadCompletion);                             // [0x2a74b40] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.PrimeSoundCueForPlayback
	// void PrimeSoundCueForPlayback(class USoundCue* SoundCue);                                                                // [0x2a74ac0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.PauseRecordingOutput
	// void PauseRecordingOutput(class UObject* WorldContextObject, class USoundSubmix* SubmixToPause);                         // [0x2a74a00] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.MakePresetSpectralAnalysisBandSettings
	// TArray<FSoundSubmixSpectralAnalysisBandSettings> MakePresetSpectralAnalysisBandSettings(EAudioSpectrumBandPresetType InBandPresetType, int32_t InNumBands, int32_t InAttackTimeMsec, int32_t InReleaseTimeMsec); // [0x2a747d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.MakeMusicalSpectralAnalysisBandSettings
	// TArray<FSoundSubmixSpectralAnalysisBandSettings> MakeMusicalSpectralAnalysisBandSettings(int32_t InNumSemitones, EMusicalNoteName InStartingMusicalNote, int32_t InStartingOctave, int32_t InAttackTimeMsec, int32_t InReleaseTimeMsec); // [0x2a745e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.MakeFullSpectrumSpectralAnalysisBandSettings
	// TArray<FSoundSubmixSpectralAnalysisBandSettings> MakeFullSpectrumSpectralAnalysisBandSettings(int32_t InNumBands, float InMinimumFrequency, float InMaximumFrequency, int32_t InAttackTimeMsec, int32_t InReleaseTimeMsec); // [0x2a743f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.IsAudioBusActive
	// bool IsAudioBusActive(class UObject* WorldContextObject, class UAudioBus* AudioBus);                                     // [0x2a742f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.GetPhaseForFrequencies
	// void GetPhaseForFrequencies(class UObject* WorldContextObject, TArray<float>& Frequencies, TArray<float>& Phases, class USoundSubmix* SubmixToAnalyze); // [0x2a73da0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.GetNumberOfEntriesInSourceEffectChain
	// int32_t GetNumberOfEntriesInSourceEffectChain(class UObject* WorldContextObject, class USoundEffectSourcePresetChain* PresetChain); // [0x2a73cd0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.GetMagnitudeForFrequencies
	// void GetMagnitudeForFrequencies(class UObject* WorldContextObject, TArray<float>& Frequencies, TArray<float>& Magnitudes, class USoundSubmix* SubmixToAnalyze); // [0x2a73aa0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.ClearSubmixEffects
	// void ClearSubmixEffects(class UObject* WorldContextObject, class USoundSubmix* SoundSubmix);                             // [0x2a73440] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.ClearSubmixEffectChainOverride
	// void ClearSubmixEffectChainOverride(class UObject* WorldContextObject, class USoundSubmix* SoundSubmix, float FadeTimeSec); // [0x2a73330] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.ClearMasterSubmixEffects
	// void ClearMasterSubmixEffects(class UObject* WorldContextObject);                                                        // [0x2a732b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.AddSubmixEffect
	// int32_t AddSubmixEffect(class UObject* WorldContextObject, class USoundSubmix* SoundSubmix, class USoundEffectSubmixPreset* SubmixEffectPreset); // [0x2a731b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.AddSourceEffectToPresetChain
	// void AddSourceEffectToPresetChain(class UObject* WorldContextObject, class USoundEffectSourcePresetChain* PresetChain, FSourceEffectChainEntry Entry); // [0x2a730a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.AddMasterSubmixEffect
	// void AddMasterSubmixEffect(class UObject* WorldContextObject, class USoundEffectSubmixPreset* SubmixEffectPreset);       // [0x2a72fe0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/AudioMixer.QuartzClockHandle
/// Size: 0x0168 (0x000028 - 0x000190)
class UQuartzClockHandle : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:


	/// Functions
	// Function /Script/AudioMixer.QuartzClockHandle.UnsubscribeFromTimeDivision
	// void UnsubscribeFromTimeDivision(class UObject* WorldContextObject, EQuartzCommandQuantization InQuantizationBoundary);  // [0x2a77050] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.UnsubscribeFromAllTimeDivisions
	// void UnsubscribeFromAllTimeDivisions(class UObject* WorldContextObject);                                                 // [0x2a76fc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.SubscribeToQuantizationEvent
	// void SubscribeToQuantizationEvent(class UObject* WorldContextObject, EQuartzCommandQuantization InQuantizationBoundary, FDelegateProperty& OnQuantizationEvent); // [0x2a76df0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.SubscribeToAllQuantizationEvents
	// void SubscribeToAllQuantizationEvents(class UObject* WorldContextObject, FDelegateProperty& OnQuantizationEvent);        // [0x2a76d00] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.SetTicksPerSecond
	// void SetTicksPerSecond(class UObject* WorldContextObject, FQuartzQuantizationBoundary& QuantizationBoundary, FDelegateProperty& Delegate, float TicksPerSecond); // [0x2a762e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.SetThirtySecondNotesPerMinute
	// void SetThirtySecondNotesPerMinute(class UObject* WorldContextObject, FQuartzQuantizationBoundary& QuantizationBoundary, FDelegateProperty& Delegate, float ThirtySecondsNotesPerMinute); // [0x2a76120] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.SetSecondsPerTick
	// void SetSecondsPerTick(class UObject* WorldContextObject, FQuartzQuantizationBoundary& QuantizationBoundary, FDelegateProperty& Delegate, float SecondsPerTick); // [0x2a759d0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.SetMillisecondsPerTick
	// void SetMillisecondsPerTick(class UObject* WorldContextObject, FQuartzQuantizationBoundary& QuantizationBoundary, FDelegateProperty& Delegate, float MillisecondsPerTick); // [0x2a75810] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.SetBeatsPerMinute
	// void SetBeatsPerMinute(class UObject* WorldContextObject, FQuartzQuantizationBoundary& QuantizationBoundary, FDelegateProperty& Delegate, float BeatsPerMinute); // [0x2a75350] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.ResumeClock
	// void ResumeClock(class UObject* WorldContextObject);                                                                     // [0x2a75200] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.ResetTransport
	// void ResetTransport(class UObject* WorldContextObject, FDelegateProperty& InDelegate);                                   // [0x2a75110] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.PauseClock
	// void PauseClock(class UObject* WorldContextObject);                                                                      // [0x2a74970] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.GetTicksPerSecond
	// float GetTicksPerSecond(class UObject* WorldContextObject);                                                              // [0x2a74250] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/AudioMixer.QuartzClockHandle.GetThirtySecondNotesPerMinute
	// float GetThirtySecondNotesPerMinute(class UObject* WorldContextObject);                                                  // [0x2a741b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/AudioMixer.QuartzClockHandle.GetSecondsPerTick
	// float GetSecondsPerTick(class UObject* WorldContextObject);                                                              // [0x2a74110] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/AudioMixer.QuartzClockHandle.GetMillisecondsPerTick
	// float GetMillisecondsPerTick(class UObject* WorldContextObject);                                                         // [0x2a73c30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/AudioMixer.QuartzClockHandle.GetBeatsPerMinute
	// float GetBeatsPerMinute(class UObject* WorldContextObject);                                                              // [0x2a737f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.SoundEffectPreset
/// Size: 0x0040 (0x000028 - 0x000068)
class USoundEffectPreset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Engine.SoundEffectSubmixPreset
/// Size: 0x0000 (0x000068 - 0x000068)
class USoundEffectSubmixPreset : public USoundEffectPreset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Struct /Script/AudioMixer.SubmixEffectDynamicProcessorFilterSettings
/// Size: 0x000C (0x000000 - 0x00000C)
class FSubmixEffectDynamicProcessorFilterSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(float)                                     Cutoff                                                      OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     GainDb                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/AudioMixer.SubmixEffectDynamicsProcessorSettings
/// Size: 0x0050 (0x000000 - 0x000050)
class FSubmixEffectDynamicsProcessorSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(ESubmixEffectDynamicsProcessorType)        DynamicsProcessorType                                       OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(ESubmixEffectDynamicsPeakMode)             PeakMode                                                    OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(ESubmixEffectDynamicsChannelLinkMode)      LinkMode                                                    OFFSET(get<T>, {0x2, 1, 0, 0})
	DMember(float)                                     InputGainDb                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     ThresholdDb                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     Ratio                                                       OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     KneeBandwidthDb                                             OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     LookAheadMsec                                               OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     AttackTimeMsec                                              OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     ReleaseTimeMsec                                             OFFSET(get<float>, {0x1C, 4, 0, 0})
	CMember(class USoundSubmix*)                       ExternalSubmix                                              OFFSET(get<T>, {0x20, 8, 0, 0})
	DMember(bool)                                      bChannelLinked                                              OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(bool)                                      bAnalogMode                                                 OFFSET(get<bool>, {0x28, 1, 1, 1})
	DMember(bool)                                      bKeyAudition                                                OFFSET(get<bool>, {0x28, 1, 1, 2})
	DMember(float)                                     KeyGainDb                                                   OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     OutputGainDb                                                OFFSET(get<float>, {0x30, 4, 0, 0})
	SMember(FSubmixEffectDynamicProcessorFilterSettings) KeyHighshelf                                              OFFSET(getStruct<T>, {0x34, 12, 0, 0})
	SMember(FSubmixEffectDynamicProcessorFilterSettings) KeyLowshelf                                               OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/AudioMixer.SubmixEffectDynamicsProcessorPreset
/// Size: 0x00C8 (0x000068 - 0x000130)
class USubmixEffectDynamicsProcessorPreset : public USoundEffectSubmixPreset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	SMember(FSubmixEffectDynamicsProcessorSettings)    Settings                                                    OFFSET(getStruct<T>, {0xE0, 80, 0, 0})


	/// Functions
	// Function /Script/AudioMixer.SubmixEffectDynamicsProcessorPreset.SetSettings
	// void SetSettings(FSubmixEffectDynamicsProcessorSettings& Settings);                                                      // [0x2a75b90] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.SubmixEffectDynamicsProcessorPreset.SetExternalSubmix
	// void SetExternalSubmix(class USoundSubmix* Submix);                                                                      // [0x2a75660] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/AudioMixer.SubmixEffectEQBand
/// Size: 0x0010 (0x000000 - 0x000010)
class FSubmixEffectEQBand : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Frequency                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Bandwidth                                                   OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     GainDb                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0xC, 1, 1, 0})
};

/// Struct /Script/AudioMixer.SubmixEffectSubmixEQSettings
/// Size: 0x0010 (0x000000 - 0x000010)
class FSubmixEffectSubmixEQSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FSubmixEffectEQBand>)               EQBands                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/AudioMixer.SubmixEffectSubmixEQPreset
/// Size: 0x0048 (0x000068 - 0x0000B0)
class USubmixEffectSubmixEQPreset : public USoundEffectSubmixPreset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FSubmixEffectSubmixEQSettings)             Settings                                                    OFFSET(getStruct<T>, {0xA0, 16, 0, 0})


	/// Functions
	// Function /Script/AudioMixer.SubmixEffectSubmixEQPreset.SetSettings
	// void SetSettings(FSubmixEffectSubmixEQSettings& InSettings);                                                             // [0x14454e0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Struct /Script/AudioMixer.SubmixEffectReverbSettings
/// Size: 0x0040 (0x000000 - 0x000040)
class FSubmixEffectReverbSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bBypassEarlyReflections                                     OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     ReflectionsDelay                                            OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     GainHF                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     ReflectionsGain                                             OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(bool)                                      bBypassLateReflections                                      OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(float)                                     LateDelay                                                   OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     DecayTime                                                   OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     Density                                                     OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     Diffusion                                                   OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     AirAbsorptionGainHF                                         OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     DecayHFRatio                                                OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     LateGain                                                    OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     Gain                                                        OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     WetLevel                                                    OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     DryLevel                                                    OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(bool)                                      bBypass                                                     OFFSET(get<bool>, {0x3C, 1, 0, 0})
};

/// Class /Script/AudioMixer.SubmixEffectReverbPreset
/// Size: 0x00A8 (0x000068 - 0x000110)
class USubmixEffectReverbPreset : public USoundEffectSubmixPreset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FSubmixEffectReverbSettings)               Settings                                                    OFFSET(getStruct<T>, {0xD0, 64, 0, 0})


	/// Functions
	// Function /Script/AudioMixer.SubmixEffectReverbPreset.SetSettingsWithReverbEffect
	// void SetSettingsWithReverbEffect(class UReverbEffect* InReverbEffect, float WetLevel, float DryLevel);                   // [0x2a75db0] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.SubmixEffectReverbPreset.SetSettings
	// void SetSettings(FSubmixEffectReverbSettings& InSettings);                                                               // [0x2a75ca0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.Subsystem
/// Size: 0x0008 (0x000028 - 0x000030)
class USubsystem : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.WorldSubsystem
/// Size: 0x0000 (0x000030 - 0x000030)
class UWorldSubsystem : public USubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/AudioMixer.QuartzSubsystem
/// Size: 0x0050 (0x000030 - 0x000080)
class UQuartzSubsystem : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:


	/// Functions
	// Function /Script/AudioMixer.QuartzSubsystem.GetRoundTripMinLatency
	// float GetRoundTripMinLatency(class UObject* WorldContextObject);                                                         // [0x2a74070] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.GetRoundTripMaxLatency
	// float GetRoundTripMaxLatency(class UObject* WorldContextObject);                                                         // [0x2a73fd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.GetRoundTripAverageLatency
	// float GetRoundTripAverageLatency(class UObject* WorldContextObject);                                                     // [0x2a73f30] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.GetHandleForClock
	// class UQuartzClockHandle* GetHandleForClock(class UObject* WorldContextObject, FName ClockName);                         // [0x2a739d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.GetGameThreadToAudioRenderThreadMinLatency
	// float GetGameThreadToAudioRenderThreadMinLatency(class UObject* WorldContextObject);                                     // [0x2a73930] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.GetGameThreadToAudioRenderThreadMaxLatency
	// float GetGameThreadToAudioRenderThreadMaxLatency(class UObject* WorldContextObject);                                     // [0x2a73930] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.GetGameThreadToAudioRenderThreadAverageLatency
	// float GetGameThreadToAudioRenderThreadAverageLatency(class UObject* WorldContextObject);                                 // [0x2a73890] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.GetAudioRenderThreadToGameThreadMinLatency
	// float GetAudioRenderThreadToGameThreadMinLatency();                                                                      // [0x2a737c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.GetAudioRenderThreadToGameThreadMaxLatency
	// float GetAudioRenderThreadToGameThreadMaxLatency();                                                                      // [0x2a73790] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.GetAudioRenderThreadToGameThreadAverageLatency
	// float GetAudioRenderThreadToGameThreadAverageLatency();                                                                  // [0x2a73760] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.DoesClockExist
	// bool DoesClockExist(class UObject* WorldContextObject, FName ClockName);                                                 // [0x2a73690] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.CreateNewClock
	// class UQuartzClockHandle* CreateNewClock(class UObject* WorldContextObject, FName ClockName, FQuartzClockSettings InSettings, bool bOverrideSettingsIfClockExists); // [0x2a73500] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.SoundConcurrencySettings
/// Size: 0x0028 (0x000000 - 0x000028)
class FSoundConcurrencySettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(int32_t)                                   MaxCount                                                    OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(bool)                                      bLimitToOwner                                               OFFSET(get<bool>, {0x4, 1, 1, 0})
	CMember(TEnumAsByte<EMaxConcurrentResolutionRule>) ResolutionRule                                              OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(float)                                     RetriggerTime                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     VolumeScale                                                 OFFSET(get<float>, {0x10, 4, 0, 0})
	CMember(EConcurrencyVolumeScaleMode)               VolumeScaleMode                                             OFFSET(get<T>, {0x14, 4, 0, 0})
	DMember(float)                                     VolumeScaleAttackTime                                       OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(bool)                                      bVolumeScaleCanRelease                                      OFFSET(get<bool>, {0x1C, 1, 1, 0})
	DMember(float)                                     VolumeScaleReleaseTime                                      OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     VoiceStealReleaseTime                                       OFFSET(get<float>, {0x24, 4, 0, 0})
};

/// Struct /Script/Engine.SoundModulationDestinationSettings
/// Size: 0x0010 (0x000000 - 0x000010)
class FSoundModulationDestinationSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(class USoundModulatorBase*)                Modulator                                                   OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.SoundModulationDefaultSettings
/// Size: 0x0040 (0x000000 - 0x000040)
class FSoundModulationDefaultSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FSoundModulationDestinationSettings)       VolumeModulationDestination                                 OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FSoundModulationDestinationSettings)       PitchModulationDestination                                  OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FSoundModulationDestinationSettings)       HighpassModulationDestination                               OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FSoundModulationDestinationSettings)       LowpassModulationDestination                                OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Engine.SoundModulationDefaultRoutingSettings
/// Size: 0x0008 (0x000040 - 0x000048)
class FSoundModulationDefaultRoutingSettings : public FSoundModulationDefaultSettings
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(EModulationRouting)                        VolumeRouting                                               OFFSET(get<T>, {0x40, 1, 0, 0})
	CMember(EModulationRouting)                        PitchRouting                                                OFFSET(get<T>, {0x41, 1, 0, 0})
	CMember(EModulationRouting)                        HighpassRouting                                             OFFSET(get<T>, {0x42, 1, 0, 0})
	CMember(EModulationRouting)                        LowpassRouting                                              OFFSET(get<T>, {0x43, 1, 0, 0})
};

/// Class /Script/Engine.SoundBase
/// Size: 0x0190 (0x000028 - 0x0001B8)
class USoundBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 440;

public:
	CMember(class USoundClass*)                        SoundClassObject                                            OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bDebug                                                      OFFSET(get<bool>, {0x38, 1, 1, 0})
	DMember(bool)                                      bOverrideConcurrency                                        OFFSET(get<bool>, {0x38, 1, 1, 1})
	DMember(bool)                                      bOutputToBusOnly                                            OFFSET(get<bool>, {0x38, 1, 1, 2})
	DMember(bool)                                      bHasDelayNode                                               OFFSET(get<bool>, {0x38, 1, 1, 3})
	DMember(bool)                                      bHasConcatenatorNode                                        OFFSET(get<bool>, {0x38, 1, 1, 4})
	DMember(bool)                                      bBypassVolumeScaleForPriority                               OFFSET(get<bool>, {0x38, 1, 1, 5})
	CMember(EVirtualizationMode)                       VirtualizationMode                                          OFFSET(get<T>, {0x39, 1, 0, 0})
	CMember(TSet<USoundConcurrency*>)                  ConcurrencySet                                              OFFSET(get<T>, {0x90, 80, 0, 0})
	SMember(FSoundConcurrencySettings)                 ConcurrencyOverrides                                        OFFSET(getStruct<T>, {0xE0, 40, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x108, 4, 0, 0})
	DMember(float)                                     MaxDistance                                                 OFFSET(get<float>, {0x10C, 4, 0, 0})
	DMember(float)                                     TotalSamples                                                OFFSET(get<float>, {0x110, 4, 0, 0})
	DMember(float)                                     Priority                                                    OFFSET(get<float>, {0x114, 4, 0, 0})
	CMember(class USoundAttenuation*)                  AttenuationSettings                                         OFFSET(get<T>, {0x118, 8, 0, 0})
	SMember(FSoundModulationDefaultRoutingSettings)    ModulationSettings                                          OFFSET(getStruct<T>, {0x120, 72, 0, 0})
	CMember(class USoundSubmixBase*)                   SoundSubmixObject                                           OFFSET(get<T>, {0x168, 8, 0, 0})
	CMember(TArray<FSoundSubmixSendInfo>)              SoundSubmixSends                                            OFFSET(get<T>, {0x170, 16, 0, 0})
	CMember(class USoundEffectSourcePresetChain*)      SourceEffectChain                                           OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(TArray<FSoundSourceBusSendInfo>)           BusSends                                                    OFFSET(get<T>, {0x188, 16, 0, 0})
	CMember(TArray<FSoundSourceBusSendInfo>)           PreEffectBusSends                                           OFFSET(get<T>, {0x198, 16, 0, 0})
	CMember(TArray<class UAssetUserData*>)             AssetUserData                                               OFFSET(get<T>, {0x1A8, 16, 0, 0})
};

/// Struct /Script/Engine.SoundWaveSpectralDataEntry
/// Size: 0x0008 (0x000000 - 0x000008)
class FSoundWaveSpectralDataEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Magnitude                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     NormalizedMagnitude                                         OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.SoundWaveSpectralTimeData
/// Size: 0x0018 (0x000000 - 0x000018)
class FSoundWaveSpectralTimeData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FSoundWaveSpectralDataEntry>)       Data                                                        OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(float)                                     TimeSec                                                     OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.SoundWaveEnvelopeTimeData
/// Size: 0x0008 (0x000000 - 0x000008)
class FSoundWaveEnvelopeTimeData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Amplitude                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     TimeSec                                                     OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.SubtitleCue
/// Size: 0x0020 (0x000000 - 0x000020)
class FSubtitleCue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Class /Script/Engine.SoundWave
/// Size: 0x01B8 (0x0001B8 - 0x000370)
class USoundWave : public USoundBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	DMember(int32_t)                                   CompressionQuality                                          OFFSET(get<int32_t>, {0x1B8, 4, 0, 0})
	DMember(int32_t)                                   StreamingPriority                                           OFFSET(get<int32_t>, {0x1BC, 4, 0, 0})
	CMember(ESoundwaveSampleRateSettings)              SampleRateQuality                                           OFFSET(get<T>, {0x1C0, 1, 0, 0})
	CMember(TEnumAsByte<ESoundGroup>)                  SoundGroup                                                  OFFSET(get<T>, {0x1C2, 1, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x1C3, 1, 1, 0})
	DMember(bool)                                      bStreaming                                                  OFFSET(get<bool>, {0x1C3, 1, 1, 1})
	DMember(bool)                                      bSeekableStreaming                                          OFFSET(get<bool>, {0x1C3, 1, 1, 2})
	CMember(ESoundWaveLoadingBehavior)                 LoadingBehavior                                             OFFSET(get<T>, {0x1C4, 1, 0, 0})
	DMember(bool)                                      bMature                                                     OFFSET(get<bool>, {0x1C5, 1, 1, 6})
	DMember(bool)                                      bManualWordWrap                                             OFFSET(get<bool>, {0x1C5, 1, 1, 7})
	DMember(bool)                                      bSingleLine                                                 OFFSET(get<bool>, {0x1C6, 1, 1, 0})
	DMember(bool)                                      bIsAmbisonics                                               OFFSET(get<bool>, {0x1C6, 1, 1, 1})
	CMember(TArray<float>)                             FrequenciesToAnalyze                                        OFFSET(get<T>, {0x1C8, 16, 0, 0})
	CMember(TArray<FSoundWaveSpectralTimeData>)        CookedSpectralTimeData                                      OFFSET(get<T>, {0x1D8, 16, 0, 0})
	CMember(TArray<FSoundWaveEnvelopeTimeData>)        CookedEnvelopeTimeData                                      OFFSET(get<T>, {0x1E8, 16, 0, 0})
	DMember(int32_t)                                   InitialChunkSize                                            OFFSET(get<int32_t>, {0x1F8, 4, 0, 0})
	SMember(FString)                                   SpokenText                                                  OFFSET(getStruct<T>, {0x240, 16, 0, 0})
	DMember(float)                                     SubtitlePriority                                            OFFSET(get<float>, {0x250, 4, 0, 0})
	DMember(float)                                     Volume                                                      OFFSET(get<float>, {0x254, 4, 0, 0})
	DMember(float)                                     Pitch                                                       OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(int32_t)                                   NumChannels                                                 OFFSET(get<int32_t>, {0x25C, 4, 0, 0})
	DMember(int32_t)                                   SampleRate                                                  OFFSET(get<int32_t>, {0x260, 4, 0, 0})
	CMember(TArray<FSubtitleCue>)                      Subtitles                                                   OFFSET(get<T>, {0x270, 16, 0, 0})
	CMember(class UCurveTable*)                        Curves                                                      OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UCurveTable*)                        InternalCurves                                              OFFSET(get<T>, {0x288, 8, 0, 0})
};

/// Class /Script/Engine.SoundWaveProcedural
/// Size: 0x0050 (0x000370 - 0x0003C0)
class USoundWaveProcedural : public USoundWave
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 960;

public:
};

/// Class /Script/AudioMixer.SynthSound
/// Size: 0x0020 (0x0003C0 - 0x0003E0)
class USynthSound : public USoundWaveProcedural
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 992;

public:
	CMember(class USynthComponent*)                    OwningSynthComponent                                        OFFSET(get<T>, {0x3C0, 8, 0, 0})
};

/// Class /Script/Engine.DataAsset
/// Size: 0x0008 (0x000028 - 0x000030)
class UDataAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UClass*)                             NativeClass                                                 OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.ActorTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
class FActorTickFunction : public FTickFunction
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.RepMovement
/// Size: 0x0034 (0x000000 - 0x000034)
class FRepMovement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 52;

public:
	SMember(FVector)                                   LinearVelocity                                              OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   AngularVelocity                                             OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x18, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x24, 12, 0, 0})
	DMember(bool)                                      bSimulatedPhysicSleep                                       OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bRepPhysics                                                 OFFSET(get<bool>, {0x30, 1, 1, 1})
	CMember(EVectorQuantization)                       LocationQuantizationLevel                                   OFFSET(get<T>, {0x31, 1, 0, 0})
	CMember(EVectorQuantization)                       VelocityQuantizationLevel                                   OFFSET(get<T>, {0x32, 1, 0, 0})
	CMember(ERotatorQuantization)                      RotationQuantizationLevel                                   OFFSET(get<T>, {0x33, 1, 0, 0})
};

/// Struct /Script/Engine.Vector_NetQuantize100
/// Size: 0x0000 (0x00000C - 0x00000C)
class FVector_NetQuantize100 : public FVector
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/Engine.RepAttachment
/// Size: 0x0040 (0x000000 - 0x000040)
class FRepAttachment : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class AActor*)                             AttachParent                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector_NetQuantize100)                    LocationOffset                                              OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	SMember(FVector_NetQuantize100)                    RelativeScale3D                                             OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	SMember(FRotator)                                  RotationOffset                                              OFFSET(getStruct<T>, {0x20, 12, 0, 0})
	SMember(FName)                                     AttachSocket                                                OFFSET(getStruct<T>, {0x2C, 8, 0, 0})
	CMember(class USceneComponent*)                    AttachComponent                                             OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Engine.Actor
/// Size: 0x01F8 (0x000028 - 0x000220)
class AActor : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	SMember(FActorTickFunction)                        PrimaryActorTick                                            OFFSET(getStruct<T>, {0x28, 48, 0, 0})
	DMember(bool)                                      bNetTemporary                                               OFFSET(get<bool>, {0x58, 1, 1, 0})
	DMember(bool)                                      bNetStartup                                                 OFFSET(get<bool>, {0x58, 1, 1, 1})
	DMember(bool)                                      bOnlyRelevantToOwner                                        OFFSET(get<bool>, {0x58, 1, 1, 2})
	DMember(bool)                                      bAlwaysRelevant                                             OFFSET(get<bool>, {0x58, 1, 1, 3})
	DMember(bool)                                      bReplicateMovement                                          OFFSET(get<bool>, {0x58, 1, 1, 4})
	DMember(bool)                                      bHidden                                                     OFFSET(get<bool>, {0x58, 1, 1, 5})
	DMember(bool)                                      bTearOff                                                    OFFSET(get<bool>, {0x58, 1, 1, 6})
	DMember(bool)                                      bExchangedRoles                                             OFFSET(get<bool>, {0x58, 1, 1, 7})
	DMember(bool)                                      bNetLoadOnClient                                            OFFSET(get<bool>, {0x59, 1, 1, 0})
	DMember(bool)                                      bNetUseOwnerRelevancy                                       OFFSET(get<bool>, {0x59, 1, 1, 1})
	DMember(bool)                                      bRelevantForNetworkReplays                                  OFFSET(get<bool>, {0x59, 1, 1, 2})
	DMember(bool)                                      bRelevantForLevelBounds                                     OFFSET(get<bool>, {0x59, 1, 1, 3})
	DMember(bool)                                      bReplayRewindable                                           OFFSET(get<bool>, {0x59, 1, 1, 4})
	DMember(bool)                                      bAllowTickBeforeBeginPlay                                   OFFSET(get<bool>, {0x59, 1, 1, 5})
	DMember(bool)                                      bAutoDestroyWhenFinished                                    OFFSET(get<bool>, {0x59, 1, 1, 6})
	DMember(bool)                                      bCanBeDamaged                                               OFFSET(get<bool>, {0x59, 1, 1, 7})
	DMember(bool)                                      bBlockInput                                                 OFFSET(get<bool>, {0x5A, 1, 1, 0})
	DMember(bool)                                      bCollideWhenPlacing                                         OFFSET(get<bool>, {0x5A, 1, 1, 1})
	DMember(bool)                                      bFindCameraComponentWhenViewTarget                          OFFSET(get<bool>, {0x5A, 1, 1, 2})
	DMember(bool)                                      bGenerateOverlapEventsDuringLevelStreaming                  OFFSET(get<bool>, {0x5A, 1, 1, 3})
	DMember(bool)                                      bIgnoresOriginShifting                                      OFFSET(get<bool>, {0x5A, 1, 1, 4})
	DMember(bool)                                      bEnableAutoLODGeneration                                    OFFSET(get<bool>, {0x5A, 1, 1, 5})
	DMember(bool)                                      bIsEditorOnlyActor                                          OFFSET(get<bool>, {0x5A, 1, 1, 6})
	DMember(bool)                                      bActorSeamlessTraveled                                      OFFSET(get<bool>, {0x5A, 1, 1, 7})
	DMember(bool)                                      bReplicates                                                 OFFSET(get<bool>, {0x5B, 1, 1, 0})
	DMember(bool)                                      bCanBeInCluster                                             OFFSET(get<bool>, {0x5B, 1, 1, 1})
	DMember(bool)                                      bAllowReceiveTickEventOnDedicatedServer                     OFFSET(get<bool>, {0x5B, 1, 1, 2})
	DMember(bool)                                      bActorEnableCollision                                       OFFSET(get<bool>, {0x5C, 1, 1, 2})
	DMember(bool)                                      bActorIsBeingDestroyed                                      OFFSET(get<bool>, {0x5C, 1, 1, 3})
	CMember(EActorUpdateOverlapsMethod)                UpdateOverlapsMethodDuringLevelStreaming                    OFFSET(get<T>, {0x5D, 1, 0, 0})
	CMember(EActorUpdateOverlapsMethod)                DefaultUpdateOverlapsMethodDuringLevelStreaming             OFFSET(get<T>, {0x5E, 1, 0, 0})
	CMember(TEnumAsByte<ENetRole>)                     RemoteRole                                                  OFFSET(get<T>, {0x5F, 1, 0, 0})
	SMember(FRepMovement)                              ReplicatedMovement                                          OFFSET(getStruct<T>, {0x60, 52, 0, 0})
	DMember(float)                                     InitialLifeSpan                                             OFFSET(get<float>, {0x94, 4, 0, 0})
	DMember(float)                                     CustomTimeDilation                                          OFFSET(get<float>, {0x98, 4, 0, 0})
	SMember(FRepAttachment)                            AttachmentReplication                                       OFFSET(getStruct<T>, {0xA0, 64, 0, 0})
	CMember(class AActor*)                             Owner                                                       OFFSET(get<T>, {0xE0, 8, 0, 0})
	SMember(FName)                                     NetDriverName                                               OFFSET(getStruct<T>, {0xE8, 8, 0, 0})
	CMember(TEnumAsByte<ENetRole>)                     Role                                                        OFFSET(get<T>, {0xF0, 1, 0, 0})
	CMember(TEnumAsByte<ENetDormancy>)                 NetDormancy                                                 OFFSET(get<T>, {0xF1, 1, 0, 0})
	CMember(ESpawnActorCollisionHandlingMethod)        SpawnCollisionHandlingMethod                                OFFSET(get<T>, {0xF2, 1, 0, 0})
	CMember(TEnumAsByte<EAutoReceiveInput>)            AutoReceiveInput                                            OFFSET(get<T>, {0xF3, 1, 0, 0})
	DMember(int32_t)                                   InputPriority                                               OFFSET(get<int32_t>, {0xF4, 4, 0, 0})
	CMember(class UInputComponent*)                    InputComponent                                              OFFSET(get<T>, {0xF8, 8, 0, 0})
	DMember(float)                                     NetCullDistanceSquared                                      OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(int32_t)                                   NetTag                                                      OFFSET(get<int32_t>, {0x104, 4, 0, 0})
	DMember(float)                                     NetUpdateFrequency                                          OFFSET(get<float>, {0x108, 4, 0, 0})
	DMember(float)                                     MinNetUpdateFrequency                                       OFFSET(get<float>, {0x10C, 4, 0, 0})
	DMember(float)                                     NetPriority                                                 OFFSET(get<float>, {0x110, 4, 0, 0})
	CMember(class APawn*)                              Instigator                                                  OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(TArray<class AActor*>)                     Children                                                    OFFSET(get<T>, {0x120, 16, 0, 0})
	CMember(class USceneComponent*)                    RootComponent                                               OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(TArray<class AMatineeActor*>)              ControllingMatineeActors                                    OFFSET(get<T>, {0x138, 16, 0, 0})
	CMember(TArray<FName>)                             Layers                                                      OFFSET(get<T>, {0x150, 16, 0, 0})
	CMember(TWeakObjectPtr<class UChildActorComponent*>) ParentComponent                                           OFFSET(get<T>, {0x160, 8, 0, 0})
	CMember(TArray<FName>)                             Tags                                                        OFFSET(get<T>, {0x170, 16, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnTakeAnyDamage                                             OFFSET(getStruct<T>, {0x180, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnTakePointDamage                                           OFFSET(getStruct<T>, {0x181, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnTakeRadialDamage                                          OFFSET(getStruct<T>, {0x182, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnActorBeginOverlap                                         OFFSET(getStruct<T>, {0x183, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnActorEndOverlap                                           OFFSET(getStruct<T>, {0x184, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnBeginCursorOver                                           OFFSET(getStruct<T>, {0x185, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnEndCursorOver                                             OFFSET(getStruct<T>, {0x186, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnClicked                                                   OFFSET(getStruct<T>, {0x187, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnReleased                                                  OFFSET(getStruct<T>, {0x188, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnInputTouchBegin                                           OFFSET(getStruct<T>, {0x189, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnInputTouchEnd                                             OFFSET(getStruct<T>, {0x18A, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnInputTouchEnter                                           OFFSET(getStruct<T>, {0x18B, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnInputTouchLeave                                           OFFSET(getStruct<T>, {0x18C, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnActorHit                                                  OFFSET(getStruct<T>, {0x18D, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnDestroyed                                                 OFFSET(getStruct<T>, {0x18E, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnEndPlay                                                   OFFSET(getStruct<T>, {0x18F, 1, 0, 0})
	CMember(TArray<class UActorComponent*>)            InstanceComponents                                          OFFSET(get<T>, {0x1F0, 16, 0, 0})
	CMember(TArray<class UActorComponent*>)            BlueprintCreatedComponents                                  OFFSET(get<T>, {0x200, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.Actor.WasRecentlyRendered
	// bool WasRecentlyRendered(float Tolerance);                                                                               // [0x32a0f30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.UserConstructionScript
	// void UserConstructionScript();                                                                                           // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.TearOff
	// void TearOff();                                                                                                          // [0x89d6b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SnapRootComponentTo
	// void SnapRootComponentTo(class AActor* InParentActor, FName InSocketName);                                               // [0x32a0e60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetTickGroup
	// void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);                                                              // [0x32a0d50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetTickableWhenPaused
	// void SetTickableWhenPaused(bool bTickableWhenPaused);                                                                    // [0x32a0dd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetReplicates
	// void SetReplicates(bool bInReplicates);                                                                                  // [0x32a0cc0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetReplicateMovement
	// void SetReplicateMovement(bool bInReplicateMovement);                                                                    // [0x32a0c30] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetOwner
	// void SetOwner(class AActor* NewOwner);                                                                                   // [0x32a0ba0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetNetDormancy
	// void SetNetDormancy(TEnumAsByte<ENetDormancy> NewDormancy);                                                              // [0x32a0b20] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetLifeSpan
	// void SetLifeSpan(float InLifespan);                                                                                      // [0x32a0a90] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetAutoDestroyWhenFinished
	// void SetAutoDestroyWhenFinished(bool bVal);                                                                              // [0x32a0a00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorTickInterval
	// void SetActorTickInterval(float TickInterval);                                                                           // [0x32a0980] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorTickEnabled
	// void SetActorTickEnabled(bool bEnabled);                                                                                 // [0x32a08f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorScale3D
	// void SetActorScale3D(FVector NewScale3D);                                                                                // [0x32a0860] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorRelativeScale3D
	// void SetActorRelativeScale3D(FVector NewRelativeScale);                                                                  // [0x32a07d0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorHiddenInGame
	// void SetActorHiddenInGame(bool bNewHidden);                                                                              // [0x32a0740] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorEnableCollision
	// void SetActorEnableCollision(bool bNewActorEnableCollision);                                                             // [0x32a06b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.RemoveTickPrerequisiteComponent
	// void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);                                      // [0x32a0620] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.RemoveTickPrerequisiteActor
	// void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);                                                       // [0x32a0590] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.ReceiveTick
	// void ReceiveTick(float DeltaSeconds);                                                                                    // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveRadialDamage
	// void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, FVector Origin, FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser); // [0x198a600] BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceivePointDamage
	// void ReceivePointDamage(float Damage, class UDamageType* DamageType, FVector HitLocation, FVector HitNormal, class UPrimitiveComponent* HitComponent, FName BoneName, FVector ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, FHitResult& HitInfo); // [0x198a600] BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveHit
	// void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, FVector HitLocation, FVector HitNormal, FVector NormalImpulse, FHitResult& Hit); // [0x198a600] Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveEndPlay
	// void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);                                                          // [0x198a600] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveDestroyed
	// void ReceiveDestroyed();                                                                                                 // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveBeginPlay
	// void ReceiveBeginPlay();                                                                                                 // [0x198a600] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveAnyDamage
	// void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser); // [0x198a600] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnReleased
	// void ReceiveActorOnReleased(FKey ButtonReleased);                                                                        // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchLeave
	// void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);                                                // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchEnter
	// void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);                                                // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchEnd
	// void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);                                                  // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchBegin
	// void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);                                                // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnClicked
	// void ReceiveActorOnClicked(FKey ButtonPressed);                                                                          // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorEndOverlap
	// void ReceiveActorEndOverlap(class AActor* OtherActor);                                                                   // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorEndCursorOver
	// void ReceiveActorEndCursorOver();                                                                                        // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorBeginOverlap
	// void ReceiveActorBeginOverlap(class AActor* OtherActor);                                                                 // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorBeginCursorOver
	// void ReceiveActorBeginCursorOver();                                                                                      // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.PrestreamTextures
	// void PrestreamTextures(float Seconds, bool bEnableStreaming, int32_t CinematicTextureGroups);                            // [0x32a0470] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.OnRep_ReplicateMovement
	// void OnRep_ReplicateMovement();                                                                                          // [0x89bc50] Native|Public        
	// Function /Script/Engine.Actor.OnRep_ReplicatedMovement
	// void OnRep_ReplicatedMovement();                                                                                         // [0x32a0450] Native|Public        
	// Function /Script/Engine.Actor.OnRep_Owner
	// void OnRep_Owner();                                                                                                      // [0xc8b130] Native|Protected     
	// Function /Script/Engine.Actor.OnRep_Instigator
	// void OnRep_Instigator();                                                                                                 // [0x32a0430] Native|Public        
	// Function /Script/Engine.Actor.OnRep_AttachmentReplication
	// void OnRep_AttachmentReplication();                                                                                      // [0xc8b150] Native|Public        
	// Function /Script/Engine.Actor.MakeNoise
	// void MakeNoise(float Loudness, class APawn* NoiseInstigator, FVector NoiseLocation, float MaxRange, FName Tag);          // [0x32a0290] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.MakeMIDForMaterial
	// class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);                                    // [0x32a01f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_TeleportTo
	// bool K2_TeleportTo(FVector DestLocation, FRotator DestRotation);                                                         // [0x32a0100] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorTransform
	// bool K2_SetActorTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);            // [0x329fef0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorRotation
	// bool K2_SetActorRotation(FRotator NewRotation, bool bTeleportPhysics);                                                   // [0x329fe00] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorRelativeTransform
	// void K2_SetActorRelativeTransform(FTransform& NewRelativeTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x329fbf0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorRelativeRotation
	// void K2_SetActorRelativeRotation(FRotator NewRelativeRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x329fa40] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorRelativeLocation
	// void K2_SetActorRelativeLocation(FVector NewRelativeLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);  // [0x329f890] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorLocationAndRotation
	// bool K2_SetActorLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x329f670] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorLocation
	// bool K2_SetActorLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                  // [0x329f4b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_OnReset
	// void K2_OnReset();                                                                                                       // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.K2_OnEndViewTarget
	// void K2_OnEndViewTarget(class APlayerController* PC);                                                                    // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.K2_OnBecomeViewTarget
	// void K2_OnBecomeViewTarget(class APlayerController* PC);                                                                 // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.K2_GetRootComponent
	// class USceneComponent* K2_GetRootComponent();                                                                            // [0x329f490] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.K2_GetComponentsByClass
	// TArray<UActorComponent*> K2_GetComponentsByClass(class UClass* ComponentClass);                                          // [0x329f3b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.K2_GetActorRotation
	// FRotator K2_GetActorRotation();                                                                                          // [0x329f2f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.K2_GetActorLocation
	// FVector K2_GetActorLocation();                                                                                           // [0x329f270] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.K2_DetachFromActor
	// void K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);          // [0x329f160] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_DestroyComponent
	// void K2_DestroyComponent(class UActorComponent* Component);                                                              // [0x329f0d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_DestroyActor
	// void K2_DestroyActor();                                                                                                  // [0x329f0b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AttachToComponent
	// void K2_AttachToComponent(class USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // [0x329eee0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AttachToActor
	// void K2_AttachToActor(class AActor* ParentActor, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // [0x329ed10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AttachRootComponentToActor
	// void K2_AttachRootComponentToActor(class AActor* InParentActor, FName InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies); // [0x329ebb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AttachRootComponentTo
	// void K2_AttachRootComponentTo(class USceneComponent* InParent, FName InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies); // [0x329ea50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorWorldTransformKeepScale
	// void K2_AddActorWorldTransformKeepScale(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x329e840] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorWorldTransform
	// void K2_AddActorWorldTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);     // [0x329e630] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorWorldRotation
	// void K2_AddActorWorldRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x329e480] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorWorldOffset
	// void K2_AddActorWorldOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);             // [0x329e2d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorLocalTransform
	// void K2_AddActorLocalTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);       // [0x329e0c0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorLocalRotation
	// void K2_AddActorLocalRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x329df10] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorLocalOffset
	// void K2_AddActorLocalOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);             // [0x329dd60] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.IsOverlappingActor
	// bool IsOverlappingActor(class AActor* Other);                                                                            // [0x329dcc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.IsChildActor
	// bool IsChildActor();                                                                                                     // [0x329dc90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.IsActorTickEnabled
	// bool IsActorTickEnabled();                                                                                               // [0x329dc60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.IsActorBeingDestroyed
	// bool IsActorBeingDestroyed();                                                                                            // [0x329dc30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.HasAuthority
	// bool HasAuthority();                                                                                                     // [0x329dc00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetVerticalDistanceTo
	// float GetVerticalDistanceTo(class AActor* OtherActor);                                                                   // [0x329db60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetVelocity
	// FVector GetVelocity();                                                                                                   // [0x329db20] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetTransform
	// FTransform GetTransform();                                                                                               // [0x329dad0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetTickableWhenPaused
	// bool GetTickableWhenPaused();                                                                                            // [0x329daa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.GetSquaredDistanceTo
	// float GetSquaredDistanceTo(class AActor* OtherActor);                                                                    // [0x329da00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetRemoteRole
	// TEnumAsByte<ENetRole> GetRemoteRole();                                                                                   // [0x329d9e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetParentComponent
	// class UChildActorComponent* GetParentComponent();                                                                        // [0x329d9b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetParentActor
	// class AActor* GetParentActor();                                                                                          // [0x329d980] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetOwner
	// class AActor* GetOwner();                                                                                                // [0x329d960] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetOverlappingComponents
	// void GetOverlappingComponents(TArray<UPrimitiveComponent*>& OverlappingComponents);                                      // [0x329d8b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetOverlappingActors
	// void GetOverlappingActors(TArray<AActor*>& OverlappingActors, class UClass* ClassFilter);                                // [0x329d7b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetLocalRole
	// TEnumAsByte<ENetRole> GetLocalRole();                                                                                    // [0x329d790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetLifeSpan
	// float GetLifeSpan();                                                                                                     // [0x329d750] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInstigatorController
	// class AController* GetInstigatorController();                                                                            // [0x329d720] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInstigator
	// class APawn* GetInstigator();                                                                                            // [0x329d6f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInputVectorAxisValue
	// FVector GetInputVectorAxisValue(FKey InputAxisKey);                                                                      // [0x329d5e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInputAxisValue
	// float GetInputAxisValue(FName InputAxisName);                                                                            // [0x329d540] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInputAxisKeyValue
	// float GetInputAxisKeyValue(FKey InputAxisKey);                                                                           // [0x329d440] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetHorizontalDotProductTo
	// float GetHorizontalDotProductTo(class AActor* OtherActor);                                                               // [0x329d3a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetHorizontalDistanceTo
	// float GetHorizontalDistanceTo(class AActor* OtherActor);                                                                 // [0x329d300] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetGameTimeSinceCreation
	// float GetGameTimeSinceCreation();                                                                                        // [0x329d2d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetDotProductTo
	// float GetDotProductTo(class AActor* OtherActor);                                                                         // [0x329d230] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetDistanceTo
	// float GetDistanceTo(class AActor* OtherActor);                                                                           // [0x329d190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetComponentsByTag
	// TArray<UActorComponent*> GetComponentsByTag(class UClass* ComponentClass, FName Tag);                                    // [0x329d080] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetComponentsByInterface
	// TArray<UActorComponent*> GetComponentsByInterface(class UClass* Interface);                                              // [0x329cfa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetComponentByClass
	// class UActorComponent* GetComponentByClass(class UClass* ComponentClass);                                                // [0x329cf00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetAttachParentSocketName
	// FName GetAttachParentSocketName();                                                                                       // [0x329cdc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetAttachParentActor
	// class AActor* GetAttachParentActor();                                                                                    // [0x329cd90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetAttachedActors
	// void GetAttachedActors(TArray<AActor*>& OutActors, bool bResetArray);                                                    // [0x329ce00] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetAllChildActors
	// void GetAllChildActors(TArray<AActor*>& ChildActors, bool bIncludeDescendants);                                          // [0x329cc90] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorUpVector
	// FVector GetActorUpVector();                                                                                              // [0x329cc20] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorTimeDilation
	// float GetActorTimeDilation();                                                                                            // [0x329cbf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorTickInterval
	// float GetActorTickInterval();                                                                                            // [0x329cbc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorScale3D
	// FVector GetActorScale3D();                                                                                               // [0x329cb80] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorRightVector
	// FVector GetActorRightVector();                                                                                           // [0x329cb10] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorRelativeScale3D
	// FVector GetActorRelativeScale3D();                                                                                       // [0x329cad0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorForwardVector
	// FVector GetActorForwardVector();                                                                                         // [0x329ca60] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorEyesViewPoint
	// void GetActorEyesViewPoint(FVector& OutLocation, FRotator& OutRotation);                                                 // [0x329c970] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorEnableCollision
	// bool GetActorEnableCollision();                                                                                          // [0x329c940] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorBounds
	// void GetActorBounds(bool bOnlyCollidingComponents, FVector& Origin, FVector& BoxExtent, bool bIncludeFromChildActors);   // [0x329c7b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.ForceNetUpdate
	// void ForceNetUpdate();                                                                                                   // [0x329c790] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.FlushNetDormancy
	// void FlushNetDormancy();                                                                                                 // [0x329c770] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.FinishAddComponent
	// void FinishAddComponent(class UActorComponent* Component, bool bManualAttachment, FTransform& RelativeTransform);        // [0x329c610] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.EnableInput
	// void EnableInput(class APlayerController* PlayerController);                                                             // [0x1647490] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.DisableInput
	// void DisableInput(class APlayerController* PlayerController);                                                            // [0x29db7c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.DetachRootComponentFromParent
	// void DetachRootComponentFromParent(bool bMaintainWorldPosition);                                                         // [0x329c580] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.AddTickPrerequisiteComponent
	// void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);                                         // [0x329c4f0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.AddTickPrerequisiteActor
	// void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);                                                          // [0x329c460] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.AddComponentByClass
	// class UActorComponent* AddComponentByClass(class UClass* Class, bool bManualAttachment, FTransform& RelativeTransform, bool bDeferredFinish); // [0x329c2a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.AddComponent
	// class UActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, FTransform& RelativeTransform, class UObject* ComponentTemplateContext, bool bDeferredFinish); // [0x329c090] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.ActorHasTag
	// bool ActorHasTag(FName Tag);                                                                                             // [0x329bff0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.GeomSelection
/// Size: 0x000C (0x000000 - 0x00000C)
class FGeomSelection : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   Type                                                        OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Index                                                       OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   SelectionIndex                                              OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Class /Script/Engine.Brush
/// Size: 0x0038 (0x000220 - 0x000258)
class ABrush : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
	CMember(TEnumAsByte<EBrushType>)                   BrushType                                                   OFFSET(get<T>, {0x220, 1, 0, 0})
	SMember(FColor)                                    BrushColor                                                  OFFSET(getStruct<T>, {0x224, 4, 0, 0})
	DMember(int32_t)                                   PolyFlags                                                   OFFSET(get<int32_t>, {0x228, 4, 0, 0})
	DMember(bool)                                      bColored                                                    OFFSET(get<bool>, {0x22C, 1, 1, 0})
	DMember(bool)                                      bSolidWhenSelected                                          OFFSET(get<bool>, {0x22C, 1, 1, 1})
	DMember(bool)                                      bPlaceableFromClassBrowser                                  OFFSET(get<bool>, {0x22C, 1, 1, 2})
	DMember(bool)                                      bNotForClientOrServer                                       OFFSET(get<bool>, {0x22C, 1, 1, 3})
	CMember(class UModel*)                             Brush                                                       OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UBrushComponent*)                    BrushComponent                                              OFFSET(get<T>, {0x238, 8, 0, 0})
	DMember(bool)                                      bInManipulation                                             OFFSET(get<bool>, {0x240, 1, 1, 0})
	CMember(TArray<FGeomSelection>)                    SavedSelections                                             OFFSET(get<T>, {0x248, 16, 0, 0})
};

/// Class /Script/Engine.Volume
/// Size: 0x0000 (0x000258 - 0x000258)
class AVolume : public ABrush
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
};

/// Struct /Script/Engine.LightingChannels
/// Size: 0x0001 (0x000000 - 0x000001)
class FLightingChannels : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(bool)                                      bChannel0                                                   OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bChannel1                                                   OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bChannel2                                                   OFFSET(get<bool>, {0x0, 1, 1, 2})
};

/// Struct /Script/Engine.CustomPrimitiveData
/// Size: 0x0010 (0x000000 - 0x000010)
class FCustomPrimitiveData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<float>)                             Data                                                        OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.CollisionResponseContainer
/// Size: 0x0020 (0x000000 - 0x000020)
class FCollisionResponseContainer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TEnumAsByte<ECollisionResponse>)           WorldStatic                                                 OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           WorldDynamic                                                OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           Pawn                                                        OFFSET(get<T>, {0x2, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           Visibility                                                  OFFSET(get<T>, {0x3, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           Camera                                                      OFFSET(get<T>, {0x4, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           PhysicsBody                                                 OFFSET(get<T>, {0x5, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           Vehicle                                                     OFFSET(get<T>, {0x6, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           Destructible                                                OFFSET(get<T>, {0x7, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           EngineTraceChannel1                                         OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           EngineTraceChannel2                                         OFFSET(get<T>, {0x9, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           EngineTraceChannel3                                         OFFSET(get<T>, {0xA, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           EngineTraceChannel4                                         OFFSET(get<T>, {0xB, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           EngineTraceChannel5                                         OFFSET(get<T>, {0xC, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           EngineTraceChannel6                                         OFFSET(get<T>, {0xD, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel1                                           OFFSET(get<T>, {0xE, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel2                                           OFFSET(get<T>, {0xF, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel3                                           OFFSET(get<T>, {0x10, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel4                                           OFFSET(get<T>, {0x11, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel5                                           OFFSET(get<T>, {0x12, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel6                                           OFFSET(get<T>, {0x13, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel7                                           OFFSET(get<T>, {0x14, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel8                                           OFFSET(get<T>, {0x15, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel9                                           OFFSET(get<T>, {0x16, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel10                                          OFFSET(get<T>, {0x17, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel11                                          OFFSET(get<T>, {0x18, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel12                                          OFFSET(get<T>, {0x19, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel13                                          OFFSET(get<T>, {0x1A, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel14                                          OFFSET(get<T>, {0x1B, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel15                                          OFFSET(get<T>, {0x1C, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel16                                          OFFSET(get<T>, {0x1D, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel17                                          OFFSET(get<T>, {0x1E, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           GameTraceChannel18                                          OFFSET(get<T>, {0x1F, 1, 0, 0})
};

/// Struct /Script/Engine.ResponseChannel
/// Size: 0x000C (0x000000 - 0x00000C)
class FResponseChannel : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     Channel                                                     OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           Response                                                    OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/Engine.CollisionResponse
/// Size: 0x0030 (0x000000 - 0x000030)
class FCollisionResponse : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FCollisionResponseContainer)               ResponseToChannels                                          OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	CMember(TArray<FResponseChannel>)                  ResponseArray                                               OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.WalkableSlopeOverride
/// Size: 0x0010 (0x000000 - 0x000010)
class FWalkableSlopeOverride : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TEnumAsByte<EWalkableSlopeBehavior>)       WalkableSlopeBehavior                                       OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     WalkableSlopeAngle                                          OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.BodyInstance
/// Size: 0x0140 (0x000018 - 0x000158)
class FBodyInstance : public FBodyInstanceCore
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	CMember(TEnumAsByte<ECollisionChannel>)            ObjectType                                                  OFFSET(get<T>, {0x1E, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionEnabled>)            CollisionEnabled                                            OFFSET(get<T>, {0x20, 1, 0, 0})
	CMember(ESleepFamily)                              SleepFamily                                                 OFFSET(get<T>, {0x59, 1, 0, 0})
	CMember(TEnumAsByte<EDOFMode>)                     DOFMode                                                     OFFSET(get<T>, {0x5A, 1, 0, 0})
	DMember(bool)                                      bUseCCD                                                     OFFSET(get<bool>, {0x5B, 1, 1, 0})
	DMember(bool)                                      bIgnoreAnalyticCollisions                                   OFFSET(get<bool>, {0x5B, 1, 1, 1})
	DMember(bool)                                      bNotifyRigidBodyCollision                                   OFFSET(get<bool>, {0x5B, 1, 1, 2})
	DMember(bool)                                      bLockTranslation                                            OFFSET(get<bool>, {0x5B, 1, 1, 4})
	DMember(bool)                                      bLockRotation                                               OFFSET(get<bool>, {0x5B, 1, 1, 5})
	DMember(bool)                                      bLockXTranslation                                           OFFSET(get<bool>, {0x5B, 1, 1, 6})
	DMember(bool)                                      bLockYTranslation                                           OFFSET(get<bool>, {0x5B, 1, 1, 7})
	DMember(bool)                                      bLockZTranslation                                           OFFSET(get<bool>, {0x5C, 1, 1, 0})
	DMember(bool)                                      bLockXRotation                                              OFFSET(get<bool>, {0x5C, 1, 1, 1})
	DMember(bool)                                      bLockYRotation                                              OFFSET(get<bool>, {0x5C, 1, 1, 2})
	DMember(bool)                                      bLockZRotation                                              OFFSET(get<bool>, {0x5C, 1, 1, 3})
	DMember(bool)                                      bOverrideMaxAngularVelocity                                 OFFSET(get<bool>, {0x5C, 1, 1, 4})
	DMember(bool)                                      bOverrideMaxDepenetrationVelocity                           OFFSET(get<bool>, {0x5C, 1, 1, 7})
	DMember(bool)                                      bOverrideWalkableSlopeOnInstance                            OFFSET(get<bool>, {0x5D, 1, 1, 0})
	DMember(bool)                                      bInterpolateWhenSubStepping                                 OFFSET(get<bool>, {0x5D, 1, 1, 1})
	SMember(FName)                                     CollisionProfileName                                        OFFSET(getStruct<T>, {0x6C, 8, 0, 0})
	DMember(char)                                      PositionSolverIterationCount                                OFFSET(get<char>, {0x74, 1, 0, 0})
	DMember(char)                                      VelocitySolverIterationCount                                OFFSET(get<char>, {0x75, 1, 0, 0})
	SMember(FCollisionResponse)                        CollisionResponses                                          OFFSET(getStruct<T>, {0x78, 48, 0, 0})
	DMember(float)                                     MaxDepenetrationVelocity                                    OFFSET(get<float>, {0xA8, 4, 0, 0})
	DMember(float)                                     MassInKgOverride                                            OFFSET(get<float>, {0xAC, 4, 0, 0})
	DMember(float)                                     LinearDamping                                               OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(float)                                     AngularDamping                                              OFFSET(get<float>, {0xBC, 4, 0, 0})
	SMember(FVector)                                   CustomDOFPlaneNormal                                        OFFSET(getStruct<T>, {0xC0, 12, 0, 0})
	SMember(FVector)                                   COMNudge                                                    OFFSET(getStruct<T>, {0xCC, 12, 0, 0})
	DMember(float)                                     MassScale                                                   OFFSET(get<float>, {0xD8, 4, 0, 0})
	SMember(FVector)                                   InertiaTensorScale                                          OFFSET(getStruct<T>, {0xDC, 12, 0, 0})
	SMember(FWalkableSlopeOverride)                    WalkableSlopeOverride                                       OFFSET(getStruct<T>, {0xF8, 16, 0, 0})
	CMember(class UPhysicalMaterial*)                  PhysMaterialOverride                                        OFFSET(get<T>, {0x108, 8, 0, 0})
	DMember(float)                                     MaxAngularVelocity                                          OFFSET(get<float>, {0x110, 4, 0, 0})
	DMember(float)                                     CustomSleepThresholdMultiplier                              OFFSET(get<float>, {0x114, 4, 0, 0})
	DMember(float)                                     StabilizationThresholdMultiplier                            OFFSET(get<float>, {0x118, 4, 0, 0})
	DMember(float)                                     PhysicsBlendWeight                                          OFFSET(get<float>, {0x11C, 4, 0, 0})
};

/// Class /Script/Engine.PrimitiveComponent
/// Size: 0x0278 (0x0001F8 - 0x000470)
class UPrimitiveComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1136;

public:
	DMember(float)                                     MinDrawDistance                                             OFFSET(get<float>, {0x200, 4, 0, 0})
	DMember(float)                                     LDMaxDrawDistance                                           OFFSET(get<float>, {0x204, 4, 0, 0})
	DMember(float)                                     CachedMaxDrawDistance                                       OFFSET(get<float>, {0x208, 4, 0, 0})
	CMember(TEnumAsByte<ESceneDepthPriorityGroup>)     DepthPriorityGroup                                          OFFSET(get<T>, {0x20C, 1, 0, 0})
	CMember(TEnumAsByte<ESceneDepthPriorityGroup>)     ViewOwnerDepthPriorityGroup                                 OFFSET(get<T>, {0x20D, 1, 0, 0})
	CMember(TEnumAsByte<EIndirectLightingCacheQuality>) IndirectLightingCacheQuality                               OFFSET(get<T>, {0x20E, 1, 0, 0})
	CMember(ELightmapType)                             LightmapType                                                OFFSET(get<T>, {0x20F, 1, 0, 0})
	DMember(bool)                                      bUseMaxLODAsImposter                                        OFFSET(get<bool>, {0x210, 1, 1, 0})
	DMember(bool)                                      bBatchImpostersAsInstances                                  OFFSET(get<bool>, {0x210, 1, 1, 1})
	DMember(bool)                                      bNeverDistanceCull                                          OFFSET(get<bool>, {0x210, 1, 1, 2})
	DMember(bool)                                      bAlwaysCreatePhysicsState                                   OFFSET(get<bool>, {0x210, 1, 1, 7})
	DMember(bool)                                      bGenerateOverlapEvents                                      OFFSET(get<bool>, {0x211, 1, 1, 0})
	DMember(bool)                                      bMultiBodyOverlap                                           OFFSET(get<bool>, {0x211, 1, 1, 1})
	DMember(bool)                                      bTraceComplexOnMove                                         OFFSET(get<bool>, {0x211, 1, 1, 2})
	DMember(bool)                                      bReturnMaterialOnMove                                       OFFSET(get<bool>, {0x211, 1, 1, 3})
	DMember(bool)                                      bUseViewOwnerDepthPriorityGroup                             OFFSET(get<bool>, {0x211, 1, 1, 4})
	DMember(bool)                                      bAllowCullDistanceVolume                                    OFFSET(get<bool>, {0x211, 1, 1, 5})
	DMember(bool)                                      bHasMotionBlurVelocityMeshes                                OFFSET(get<bool>, {0x211, 1, 1, 6})
	DMember(bool)                                      bVisibleInReflectionCaptures                                OFFSET(get<bool>, {0x211, 1, 1, 7})
	DMember(bool)                                      bVisibleInRealTimeSkyCaptures                               OFFSET(get<bool>, {0x212, 1, 1, 0})
	DMember(bool)                                      bVisibleInRayTracing                                        OFFSET(get<bool>, {0x212, 1, 1, 1})
	DMember(bool)                                      bRenderInMainPass                                           OFFSET(get<bool>, {0x212, 1, 1, 2})
	DMember(bool)                                      bRenderInDepthPass                                          OFFSET(get<bool>, {0x212, 1, 1, 3})
	DMember(bool)                                      bReceivesDecals                                             OFFSET(get<bool>, {0x212, 1, 1, 4})
	DMember(bool)                                      bOwnerNoSee                                                 OFFSET(get<bool>, {0x212, 1, 1, 5})
	DMember(bool)                                      bOnlyOwnerSee                                               OFFSET(get<bool>, {0x212, 1, 1, 6})
	DMember(bool)                                      bTreatAsBackgroundForOcclusion                              OFFSET(get<bool>, {0x212, 1, 1, 7})
	DMember(bool)                                      bReceivePlanarReflection                                    OFFSET(get<bool>, {0x213, 1, 1, 0})
	DMember(bool)                                      bUseAsOccluder                                              OFFSET(get<bool>, {0x213, 1, 1, 1})
	DMember(bool)                                      bSelectable                                                 OFFSET(get<bool>, {0x213, 1, 1, 2})
	DMember(bool)                                      bForceMipStreaming                                          OFFSET(get<bool>, {0x213, 1, 1, 3})
	DMember(bool)                                      bHasPerInstanceHitProxies                                   OFFSET(get<bool>, {0x213, 1, 1, 4})
	DMember(bool)                                      CastShadow                                                  OFFSET(get<bool>, {0x213, 1, 1, 5})
	DMember(bool)                                      bAffectDynamicIndirectLighting                              OFFSET(get<bool>, {0x213, 1, 1, 6})
	DMember(bool)                                      bAffectDistanceFieldLighting                                OFFSET(get<bool>, {0x213, 1, 1, 7})
	DMember(bool)                                      bCastDynamicShadow                                          OFFSET(get<bool>, {0x214, 1, 1, 0})
	DMember(bool)                                      bCastStaticShadow                                           OFFSET(get<bool>, {0x214, 1, 1, 1})
	DMember(bool)                                      bCastVolumetricTranslucentShadow                            OFFSET(get<bool>, {0x214, 1, 1, 2})
	DMember(bool)                                      bCastContactShadow                                          OFFSET(get<bool>, {0x214, 1, 1, 3})
	DMember(bool)                                      bSelfShadowOnly                                             OFFSET(get<bool>, {0x214, 1, 1, 4})
	DMember(bool)                                      bCastFarShadow                                              OFFSET(get<bool>, {0x214, 1, 1, 5})
	DMember(bool)                                      bCastInsetShadow                                            OFFSET(get<bool>, {0x214, 1, 1, 6})
	DMember(bool)                                      bCastCinematicShadow                                        OFFSET(get<bool>, {0x214, 1, 1, 7})
	DMember(bool)                                      bCastHiddenShadow                                           OFFSET(get<bool>, {0x215, 1, 1, 0})
	DMember(bool)                                      bCastShadowAsTwoSided                                       OFFSET(get<bool>, {0x215, 1, 1, 1})
	DMember(bool)                                      bLightAsIfStatic                                            OFFSET(get<bool>, {0x215, 1, 1, 2})
	DMember(bool)                                      bLightAttachmentsAsGroup                                    OFFSET(get<bool>, {0x215, 1, 1, 3})
	DMember(bool)                                      bExcludeFromLightAttachmentGroup                            OFFSET(get<bool>, {0x215, 1, 1, 4})
	DMember(bool)                                      bReceiveMobileCSMShadows                                    OFFSET(get<bool>, {0x215, 1, 1, 5})
	DMember(bool)                                      bReceiveModulatedShaodws                                    OFFSET(get<bool>, {0x215, 1, 1, 6})
	DMember(bool)                                      bReceiveMobileSelfShaodws                                   OFFSET(get<bool>, {0x215, 1, 1, 7})
	DMember(bool)                                      bReceiveMobileLitDecals                                     OFFSET(get<bool>, {0x216, 1, 1, 0})
	CMember(EMobileReflectionType)                     MobileReflectionType                                        OFFSET(get<T>, {0x217, 1, 0, 0})
	CMember(TArray<class AReflectionCapture*>)         MobileSpecifiedCaptures                                     OFFSET(get<T>, {0x218, 16, 0, 0})
	DMember(bool)                                      bSingleSampleShadowFromStationaryLights                     OFFSET(get<bool>, {0x228, 1, 1, 0})
	DMember(bool)                                      bIgnoreRadialImpulse                                        OFFSET(get<bool>, {0x228, 1, 1, 1})
	DMember(bool)                                      bIgnoreRadialForce                                          OFFSET(get<bool>, {0x228, 1, 1, 2})
	DMember(bool)                                      bApplyImpulseOnDamage                                       OFFSET(get<bool>, {0x228, 1, 1, 3})
	DMember(bool)                                      bReplicatePhysicsToAutonomousProxy                          OFFSET(get<bool>, {0x228, 1, 1, 4})
	DMember(bool)                                      bFillCollisionUnderneathForNavmesh                          OFFSET(get<bool>, {0x228, 1, 1, 5})
	DMember(bool)                                      AlwaysLoadOnClient                                          OFFSET(get<bool>, {0x228, 1, 1, 6})
	DMember(bool)                                      AlwaysLoadOnServer                                          OFFSET(get<bool>, {0x228, 1, 1, 7})
	DMember(bool)                                      bUseEditorCompositing                                       OFFSET(get<bool>, {0x229, 1, 1, 0})
	DMember(bool)                                      bRenderCustomDepth                                          OFFSET(get<bool>, {0x229, 1, 1, 1})
	CMember(TEnumAsByte<EHasCustomNavigableGeometry>)  bHasCustomNavigableGeometry                                 OFFSET(get<T>, {0x22A, 1, 0, 0})
	CMember(TEnumAsByte<ECanBeCharacterBase>)          CanCharacterStepUpOn                                        OFFSET(get<T>, {0x22C, 1, 0, 0})
	SMember(FLightingChannels)                         LightingChannels                                            OFFSET(getStruct<T>, {0x22D, 1, 0, 0})
	CMember(ERendererStencilMask)                      CustomDepthStencilWriteMask                                 OFFSET(get<T>, {0x22E, 1, 0, 0})
	DMember(int32_t)                                   CustomDepthStencilValue                                     OFFSET(get<int32_t>, {0x230, 4, 0, 0})
	DMember(bool)                                      bEnableAdvancedRenderingFeatures                            OFFSET(get<bool>, {0x234, 1, 1, 0})
	DMember(int32_t)                                   MobileStencilValue                                          OFFSET(get<int32_t>, {0x238, 4, 0, 0})
	SMember(FCustomPrimitiveData)                      CustomPrimitiveData                                         OFFSET(getStruct<T>, {0x240, 16, 0, 0})
	SMember(FCustomPrimitiveData)                      CustomPrimitiveDataInternal                                 OFFSET(getStruct<T>, {0x250, 16, 0, 0})
	DMember(int32_t)                                   TranslucencySortPriority                                    OFFSET(get<int32_t>, {0x268, 4, 0, 0})
	DMember(int32_t)                                   VisibilityId                                                OFFSET(get<int32_t>, {0x26C, 4, 0, 0})
	CMember(TArray<class URuntimeVirtualTexture*>)     RuntimeVirtualTextures                                      OFFSET(get<T>, {0x270, 16, 0, 0})
	DMember(int8_t)                                    VirtualTextureLodBias                                       OFFSET(get<int8_t>, {0x280, 1, 0, 0})
	DMember(int8_t)                                    VirtualTextureCullMips                                      OFFSET(get<int8_t>, {0x281, 1, 0, 0})
	DMember(int8_t)                                    VirtualTextureMinCoverage                                   OFFSET(get<int8_t>, {0x282, 1, 0, 0})
	CMember(ERuntimeVirtualTextureMainPassType)        VirtualTextureRenderPassType                                OFFSET(get<T>, {0x283, 1, 0, 0})
	DMember(float)                                     LpvBiasMultiplier                                           OFFSET(get<float>, {0x288, 4, 0, 0})
	DMember(bool)                                      ScreenSpaceReflectionImportance                             OFFSET(get<bool>, {0x28C, 1, 1, 0})
	DMember(float)                                     ScreenSpaceReflectionIntensity                              OFFSET(get<float>, {0x290, 4, 0, 0})
	DMember(float)                                     ScreenSpaceReflectionBlendWeight                            OFFSET(get<float>, {0x294, 4, 0, 0})
	DMember(float)                                     BoundsScale                                                 OFFSET(get<float>, {0x2A0, 4, 0, 0})
	CMember(TArray<class AActor*>)                     MoveIgnoreActors                                            OFFSET(get<T>, {0x2B0, 16, 0, 0})
	CMember(TArray<class UPrimitiveComponent*>)        MoveIgnoreComponents                                        OFFSET(get<T>, {0x2C0, 16, 0, 0})
	SMember(FBodyInstance)                             BodyInstance                                                OFFSET(getStruct<T>, {0x2E0, 344, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnComponentHit                                              OFFSET(getStruct<T>, {0x438, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnComponentBeginOverlap                                     OFFSET(getStruct<T>, {0x439, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnComponentEndOverlap                                       OFFSET(getStruct<T>, {0x43A, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnComponentWake                                             OFFSET(getStruct<T>, {0x43B, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnComponentSleep                                            OFFSET(getStruct<T>, {0x43C, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnBeginCursorOver                                           OFFSET(getStruct<T>, {0x43E, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnEndCursorOver                                             OFFSET(getStruct<T>, {0x43F, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnClicked                                                   OFFSET(getStruct<T>, {0x440, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnReleased                                                  OFFSET(getStruct<T>, {0x441, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnInputTouchBegin                                           OFFSET(getStruct<T>, {0x442, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnInputTouchEnd                                             OFFSET(getStruct<T>, {0x443, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnInputTouchEnter                                           OFFSET(getStruct<T>, {0x444, 1, 0, 0})
	SMember(FMulticastSparseDelegate)                  OnInputTouchLeave                                           OFFSET(getStruct<T>, {0x445, 1, 0, 0})
	CMember(class UPrimitiveComponent*)                LODParentPrimitive                                          OFFSET(get<T>, {0x460, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.PrimitiveComponent.WasRecentlyRendered
	// bool WasRecentlyRendered(float Tolerance);                                                                               // [0x33d4e00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.WakeRigidBody
	// void WakeRigidBody(FName BoneName);                                                                                      // [0x33d4d70] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.WakeAllRigidBodies
	// void WakeAllRigidBodies();                                                                                               // [0x32d9a90] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetWalkableSlopeOverride
	// void SetWalkableSlopeOverride(FWalkableSlopeOverride& NewOverride);                                                      // [0x33d4cc0] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetUseCCD
	// void SetUseCCD(bool InUseCCD, FName BoneName);                                                                           // [0x33d4bf0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetTranslucentSortPriority
	// void SetTranslucentSortPriority(int32_t NewTranslucentSortPriority);                                                     // [0x33d4b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights
	// void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);                         // [0x33d4ad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetSimulatePhysics
	// void SetSimulatePhysics(bool bSimulate);                                                                                 // [0x33d4a40] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetRenderInMainPass
	// void SetRenderInMainPass(bool bValue);                                                                                   // [0x33d49b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetRenderCustomDepth
	// void SetRenderCustomDepth(bool bValue);                                                                                  // [0x33d4920] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetReceivesDecals
	// void SetReceivesDecals(bool bNewReceivesDecals);                                                                         // [0x33d4890] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetReceiveMobileSelfShaodws
	// void SetReceiveMobileSelfShaodws(bool bValue);                                                                           // [0x33d4800] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysMaterialOverride
	// void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);                                                  // [0x33d4180] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians
	// void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);                      // [0x33d46e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees
	// void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);                      // [0x33d45c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity
	// void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);                               // [0x33d45c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsLinearVelocity
	// void SetPhysicsLinearVelocity(FVector NewVel, bool bAddToCurrent, FName BoneName);                                       // [0x33d4490] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians
	// void SetPhysicsAngularVelocityInRadians(FVector NewAngVel, bool bAddToCurrent, FName BoneName);                          // [0x33d4360] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees
	// void SetPhysicsAngularVelocityInDegrees(FVector NewAngVel, bool bAddToCurrent, FName BoneName);                          // [0x33d4210] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsAngularVelocity
	// void SetPhysicsAngularVelocity(FVector NewAngVel, bool bAddToCurrent, FName BoneName);                                   // [0x33d4210] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetOwnerNoSee
	// void SetOwnerNoSee(bool bNewOwnerNoSee);                                                                                 // [0x33d40f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetOnlyOwnerSee
	// void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);                                                                             // [0x33d4060] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
	// void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);                                                     // [0xb52540] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetMobileStencilValue
	// void SetMobileStencilValue(int32_t Value);                                                                               // [0x33d3fd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetMaterialByName
	// void SetMaterialByName(FName MaterialSlotName, class UMaterialInterface* Material);                                      // [0x33d3f00] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetMaterial
	// void SetMaterial(int32_t ElementIndex, class UMaterialInterface* Material);                                              // [0x33d3e30] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetMassScale
	// void SetMassScale(FName BoneName, float InMassScale);                                                                    // [0x33d3d50] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetMassOverrideInKg
	// void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);                                            // [0x33d3c40] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetLinearDamping
	// void SetLinearDamping(float InDamping);                                                                                  // [0x33d3bb0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetLightingChannels
	// void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);                                                // [0x33d3a80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetLightAttachmentsAsGroup
	// void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);                                                        // [0x33d39f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetGenerateOverlapEvents
	// void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);                                                            // [0x33d3960] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetExcludeFromLightAttachmentGroup
	// void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);                                        // [0x33d38d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetEnableGravity
	// void SetEnableGravity(bool bGravityEnabled);                                                                             // [0x33d3840] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetEnableAdvancedRenderingFeatures
	// void SetEnableAdvancedRenderingFeatures(bool bValue);                                                                    // [0x33d37b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector4
	// void SetDefaultCustomPrimitiveDataVector4(int32_t DataIndex, FVector4 Value);                                            // [0x33d36d0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector3
	// void SetDefaultCustomPrimitiveDataVector3(int32_t DataIndex, FVector Value);                                             // [0x33d35f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector2
	// void SetDefaultCustomPrimitiveDataVector2(int32_t DataIndex, FVector2D Value);                                           // [0x33d3520] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataFloat
	// void SetDefaultCustomPrimitiveDataFloat(int32_t DataIndex, float Value);                                                 // [0x33d3450] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomPrimitiveDataVector4
	// void SetCustomPrimitiveDataVector4(int32_t DataIndex, FVector4 Value);                                                   // [0x33d3370] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomPrimitiveDataVector3
	// void SetCustomPrimitiveDataVector3(int32_t DataIndex, FVector Value);                                                    // [0x33d3290] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomPrimitiveDataVector2
	// void SetCustomPrimitiveDataVector2(int32_t DataIndex, FVector2D Value);                                                  // [0x33d31c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomPrimitiveDataFloat
	// void SetCustomPrimitiveDataFloat(int32_t DataIndex, float Value);                                                        // [0x33d30f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask
	// void SetCustomDepthStencilWriteMask(ERendererStencilMask WriteMaskBit);                                                  // [0x33d3070] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomDepthStencilValue
	// void SetCustomDepthStencilValue(int32_t Value);                                                                          // [0x33d2fe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCullDistance
	// void SetCullDistance(float NewCullDistance);                                                                             // [0x33d2f60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetConstraintMode
	// void SetConstraintMode(TEnumAsByte<EDOFMode> ConstraintMode);                                                            // [0x33d2ee0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionResponseToChannel
	// void SetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse); // [0x33d2e10] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionResponseToAllChannels
	// void SetCollisionResponseToAllChannels(TEnumAsByte<ECollisionResponse> NewResponse);                                     // [0x33d2d90] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionProfileName
	// void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);                                        // [0x33d2cc0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionObjectType
	// void SetCollisionObjectType(TEnumAsByte<ECollisionChannel> Channel);                                                     // [0x33d2c40] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionEnabled
	// void SetCollisionEnabled(TEnumAsByte<ECollisionEnabled> NewType);                                                        // [0x33d2bc0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCenterOfMass
	// void SetCenterOfMass(FVector CenterOfMassOffset, FName BoneName);                                                        // [0x33d2ae0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCastShadow
	// void SetCastShadow(bool NewCastShadow);                                                                                  // [0x33d2a50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCastInsetShadow
	// void SetCastInsetShadow(bool bInCastInsetShadow);                                                                        // [0x33d29c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetBoundsScale
	// void SetBoundsScale(float NewBoundsScale);                                                                               // [0x33d2940] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAngularDamping
	// void SetAngularDamping(float InDamping);                                                                                 // [0x33d28b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllUseCCD
	// void SetAllUseCCD(bool InUseCCD);                                                                                        // [0x32d9090] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity
	// void SetAllPhysicsLinearVelocity(FVector NewVel, bool bAddToCurrent);                                                    // [0x33d27d0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians
	// void SetAllPhysicsAngularVelocityInRadians(FVector& NewAngVel, bool bAddToCurrent);                                      // [0x33d26e0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees
	// void SetAllPhysicsAngularVelocityInDegrees(FVector& NewAngVel, bool bAddToCurrent);                                      // [0x33d25c0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllMassScale
	// void SetAllMassScale(float InMassScale);                                                                                 // [0x33d2530] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.ScaleByMomentOfInertia
	// FVector ScaleByMomentOfInertia(FVector InputVector, FName BoneName);                                                     // [0x33d2430] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.PutRigidBodyToSleep
	// void PutRigidBodyToSleep(FName BoneName);                                                                                // [0x33d23a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.K2_SphereTraceComponent
	// bool K2_SphereTraceComponent(FVector TraceStart, FVector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // [0x33d1ff0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.K2_SphereOverlapComponent
	// bool K2_SphereOverlapComponent(FVector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // [0x33d1c90] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.K2_LineTraceComponent
	// bool K2_LineTraceComponent(FVector TraceStart, FVector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // [0x33d1930] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled
	// bool K2_IsQueryCollisionEnabled();                                                                                       // [0x33d18f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled
	// bool K2_IsPhysicsCollisionEnabled();                                                                                     // [0x33d18b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.K2_IsCollisionEnabled
	// bool K2_IsCollisionEnabled();                                                                                            // [0x33d1870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.K2_BoxOverlapComponent
	// bool K2_BoxOverlapComponent(FVector InBoxCentre, FBox InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // [0x33d1500] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.IsOverlappingComponent
	// bool IsOverlappingComponent(class UPrimitiveComponent* OtherComp);                                                       // [0x33d1460] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.IsOverlappingActor
	// bool IsOverlappingActor(class AActor* Other);                                                                            // [0x33d13c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.IsGravityEnabled
	// bool IsGravityEnabled();                                                                                                 // [0x33d1390] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.IsAnyRigidBodyAwake
	// bool IsAnyRigidBodyAwake();                                                                                              // [0x32d8010] Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.PrimitiveComponent.IgnoreComponentWhenMoving
	// void IgnoreComponentWhenMoving(class UPrimitiveComponent* Component, bool bShouldIgnore);                                // [0x33d12c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.IgnoreActorWhenMoving
	// void IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore);                                                     // [0x33d11f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.GetWalkableSlopeOverride
	// FWalkableSlopeOverride GetWalkableSlopeOverride();                                                                       // [0x33d11c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint
	// FVector GetPhysicsLinearVelocityAtPoint(FVector Point, FName BoneName);                                                  // [0x33d10c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsLinearVelocity
	// FVector GetPhysicsLinearVelocity(FName BoneName);                                                                        // [0x33d1010] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians
	// FVector GetPhysicsAngularVelocityInRadians(FName BoneName);                                                              // [0x33d0f60] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees
	// FVector GetPhysicsAngularVelocityInDegrees(FName BoneName);                                                              // [0x33d0e90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsAngularVelocity
	// FVector GetPhysicsAngularVelocity(FName BoneName);                                                                       // [0x33d0e90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetOverlappingComponents
	// void GetOverlappingComponents(TArray<UPrimitiveComponent*>& OutOverlappingComponents);                                   // [0x33d0de0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetOverlappingActors
	// void GetOverlappingActors(TArray<AActor*>& OverlappingActors, class UClass* ClassFilter);                                // [0x33d0ce0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetNumMaterials
	// int32_t GetNumMaterials();                                                                                               // [0x33d0cb0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex
	// class UMaterialInterface* GetMaterialFromCollisionFaceIndex(int32_t FaceIndex, int32_t& SectionIndex);                   // [0x33d0bd0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetMaterial
	// class UMaterialInterface* GetMaterial(int32_t ElementIndex);                                                             // [0x33d0b30] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetMassScale
	// float GetMassScale(FName BoneName);                                                                                      // [0x33d0a90] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetMass
	// float GetMass();                                                                                                         // [0x33d0a50] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetLinearDamping
	// float GetLinearDamping();                                                                                                // [0x33d0a10] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetInertiaTensor
	// FVector GetInertiaTensor(FName BoneName);                                                                                // [0x33d0960] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetGenerateOverlapEvents
	// bool GetGenerateOverlapEvents();                                                                                         // [0x33d0930] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionResponseToChannel
	// TEnumAsByte<ECollisionResponse> GetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel);                   // [0x33d08a0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionProfileName
	// FName GetCollisionProfileName();                                                                                         // [0x33d0860] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionObjectType
	// TEnumAsByte<ECollisionChannel> GetCollisionObjectType();                                                                 // [0x33d0830] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionEnabled
	// TEnumAsByte<ECollisionEnabled> GetCollisionEnabled();                                                                    // [0x33d0800] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetClosestPointOnCollision
	// float GetClosestPointOnCollision(FVector& Point, FVector& OutPointOnBody, FName BoneName);                               // [0x33d06c0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCenterOfMass
	// FVector GetCenterOfMass(FName BoneName);                                                                                 // [0x33d0610] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetAngularDamping
	// float GetAngularDamping();                                                                                               // [0x33d05d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.CreateDynamicMaterialInstance
	// class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int32_t ElementIndex, class UMaterialInterface* SourceMaterial, FName OptionalName); // [0x33d04b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial
	// class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int32_t ElementIndex, class UMaterialInterface* Parent); // [0x33d03e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic
	// class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int32_t ElementIndex);                               // [0x33d0340] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents
	// TArray<UPrimitiveComponent*> CopyArrayOfMoveIgnoreComponents();                                                          // [0x33d02c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors
	// TArray<AActor*> CopyArrayOfMoveIgnoreActors();                                                                           // [0x33d0240] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.ClearMoveIgnoreComponents
	// void ClearMoveIgnoreComponents();                                                                                        // [0x33d0210] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.ClearMoveIgnoreActors
	// void ClearMoveIgnoreActors();                                                                                            // [0x33d01f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CanCharacterStepUp
	// bool CanCharacterStepUp(class APawn* Pawn);                                                                              // [0x33d0150] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.AddTorqueInRadians
	// void AddTorqueInRadians(FVector Torque, FName BoneName, bool bAccelChange);                                              // [0x33cfed0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddTorqueInDegrees
	// void AddTorqueInDegrees(FVector Torque, FName BoneName, bool bAccelChange);                                              // [0x33d0000] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddTorque
	// void AddTorque(FVector Torque, FName BoneName, bool bAccelChange);                                                       // [0x33cfed0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddRadialImpulse
	// void AddRadialImpulse(FVector Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange); // [0x33cfcf0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddRadialForce
	// void AddRadialForce(FVector Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bAccelChange); // [0x33cfb10] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddImpulseAtLocation
	// void AddImpulseAtLocation(FVector Impulse, FVector Location, FName BoneName);                                            // [0x33cf9d0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddImpulse
	// void AddImpulse(FVector Impulse, FName BoneName, bool bVelChange);                                                       // [0x33cf8a0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddForceAtLocationLocal
	// void AddForceAtLocationLocal(FVector Force, FVector Location, FName BoneName);                                           // [0x33cf760] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddForceAtLocation
	// void AddForceAtLocation(FVector Force, FVector Location, FName BoneName);                                                // [0x33cf620] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddForce
	// void AddForce(FVector Force, FName BoneName, bool bAccelChange);                                                         // [0x33cf4f0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddAngularImpulseInRadians
	// void AddAngularImpulseInRadians(FVector Impulse, FName BoneName, bool bVelChange);                                       // [0x33cf3c0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddAngularImpulseInDegrees
	// void AddAngularImpulseInDegrees(FVector Impulse, FName BoneName, bool bVelChange);                                       // [0x33cf270] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddAngularImpulse
	// void AddAngularImpulse(FVector Impulse, FName BoneName, bool bVelChange);                                                // [0x33cf140] Native|Public|HasDefaults|BlueprintCallable 
};

/// Struct /Script/Engine.StreamingLevelsToConsider
/// Size: 0x0028 (0x000000 - 0x000028)
class FStreamingLevelsToConsider : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<class ULevelStreaming*>)            StreamingLevels                                             OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.LevelCollection
/// Size: 0x0078 (0x000000 - 0x000078)
class FLevelCollection : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(class AGameStateBase*)                     GameState                                                   OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UNetDriver*)                         NetDriver                                                   OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UDemoNetDriver*)                     DemoNetDriver                                               OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class ULevel*)                             PersistentLevel                                             OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(TSet<ULevel*>)                             Levels                                                      OFFSET(get<T>, {0x28, 80, 0, 0})
};

/// Struct /Script/Engine.PSCPoolElem
/// Size: 0x0010 (0x000000 - 0x000010)
class FPSCPoolElem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UParticleSystemComponent*)           PSC                                                         OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.PSCPool
/// Size: 0x0038 (0x000000 - 0x000038)
class FPSCPool : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FPSCPoolElem>)                      FreeElements                                                OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<class UParticleSystemComponent*>)   InUseComponents_Auto                                        OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<class UParticleSystemComponent*>)   InUseComponents_Manual                                      OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.WorldPSCPool
/// Size: 0x0058 (0x000000 - 0x000058)
class FWorldPSCPool : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TMap<class UParticleSystem*, FPSCPool>)    WorldParticleSystemPools                                    OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Class /Script/Engine.World
/// Size: 0x0760 (0x000028 - 0x000788)
class UWorld : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1928;

public:
	CMember(class ULevel*)                             PersistentLevel                                             OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UNetDriver*)                         NetDriver                                                   OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class ULineBatchComponent*)                LineBatcher                                                 OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class ULineBatchComponent*)                PersistentLineBatcher                                       OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class ULineBatchComponent*)                ForegroundLineBatcher                                       OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class AGameNetworkManager*)                NetworkManager                                              OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UPhysicsCollisionHandler*)           PhysicsCollisionHandler                                     OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(TArray<class UObject*>)                    ExtraReferencedObjects                                      OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<class UObject*>)                    PerModuleDataObjects                                        OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TArray<class ULevelStreaming*>)            StreamingLevels                                             OFFSET(get<T>, {0x88, 16, 0, 0})
	SMember(FStreamingLevelsToConsider)                StreamingLevelsToConsider                                   OFFSET(getStruct<T>, {0x98, 40, 0, 0})
	SMember(FString)                                   StreamingLevelsPrefix                                       OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	CMember(class ULevel*)                             CurrentLevelPendingVisibility                               OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(class ULevel*)                             CurrentLevelPendingInvisibility                             OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(class UDemoNetDriver*)                     DemoNetDriver                                               OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(class AParticleEventManager*)              MyParticleEventManager                                      OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(class APhysicsVolume*)                     DefaultPhysicsVolume                                        OFFSET(get<T>, {0xF0, 8, 0, 0})
	DMember(bool)                                      bAreConstraintsDirty                                        OFFSET(get<bool>, {0x10E, 1, 1, 2})
	CMember(class UNavigationSystemBase*)              NavigationSystem                                            OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(class AGameModeBase*)                      AuthorityGameMode                                           OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(class AGameStateBase*)                     GameState                                                   OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(class UAISystemBase*)                      AISystem                                                    OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(class UAvoidanceManager*)                  AvoidanceManager                                            OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(TArray<class ULevel*>)                     Levels                                                      OFFSET(get<T>, {0x138, 16, 0, 0})
	CMember(TArray<FLevelCollection>)                  LevelCollections                                            OFFSET(get<T>, {0x148, 16, 0, 0})
	CMember(class UGameInstance*)                      OwningGameInstance                                          OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(TArray<class UMaterialParameterCollectionInstance*>) ParameterCollectionInstances                      OFFSET(get<T>, {0x188, 16, 0, 0})
	CMember(class UCanvas*)                            CanvasForRenderingToTarget                                  OFFSET(get<T>, {0x198, 8, 0, 0})
	CMember(class UCanvas*)                            CanvasForDrawMaterialToRenderTarget                         OFFSET(get<T>, {0x1A0, 8, 0, 0})
	CMember(TSet<UActorComponent*>)                    ComponentsThatNeedPreEndOfFrameSync                         OFFSET(get<T>, {0x1F8, 80, 0, 0})
	CMember(TArray<class UActorComponent*>)            ComponentsThatNeedEndOfFrameUpdate                          OFFSET(get<T>, {0x248, 16, 0, 0})
	CMember(TArray<class UActorComponent*>)            ComponentsThatNeedEndOfFrameUpdate_OnGameThread             OFFSET(get<T>, {0x258, 16, 0, 0})
	CMember(class UWorldComposition*)                  WorldComposition                                            OFFSET(get<T>, {0x5D8, 8, 0, 0})
	SMember(FWorldPSCPool)                             PSCPool                                                     OFFSET(getStruct<T>, {0x668, 88, 0, 0})


	/// Functions
	// Function /Script/Engine.World.K2_GetWorldSettings
	// class AWorldSettings* K2_GetWorldSettings();                                                                             // [0x3419c60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.World.HandleTimelineScrubbed
	// void HandleTimelineScrubbed();                                                                                           // [0x3419c40] Final|Native|Public  
};

/// Class /Script/Engine.AnimNotify
/// Size: 0x0010 (0x000028 - 0x000038)
class UAnimNotify : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:


	/// Functions
	// Function /Script/Engine.AnimNotify.Received_Notify
	// bool Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);                        // [0x198a600] Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.AnimNotify.GetNotifyName
	// FString GetNotifyName();                                                                                                 // [0xc4c400] Native|Event|Public|BlueprintEvent|Const 
};

/// Class /Script/Engine.BlueprintAsyncActionBase
/// Size: 0x0008 (0x000028 - 0x000030)
class UBlueprintAsyncActionBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/Engine.BlueprintAsyncActionBase.Activate
	// void Activate();                                                                                                         // [0x89bc50] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PrimaryDataAsset
/// Size: 0x0000 (0x000030 - 0x000030)
class UPrimaryDataAsset : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.AssetManager
/// Size: 0x0430 (0x000028 - 0x000458)
class UAssetManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1112;

public:
	CMember(TArray<class UObject*>)                    ObjectReferenceList                                         OFFSET(get<T>, {0x2C0, 16, 0, 0})
	DMember(bool)                                      bIsGlobalAsyncScanEnvironment                               OFFSET(get<bool>, {0x2D0, 1, 0, 0})
	DMember(bool)                                      bShouldGuessTypeAndName                                     OFFSET(get<bool>, {0x2D1, 1, 0, 0})
	DMember(bool)                                      bShouldUseSynchronousLoad                                   OFFSET(get<bool>, {0x2D2, 1, 0, 0})
	DMember(bool)                                      bIsLoadingFromPakFiles                                      OFFSET(get<bool>, {0x2D3, 1, 0, 0})
	DMember(bool)                                      bShouldAcquireMissingChunksOnLoad                           OFFSET(get<bool>, {0x2D4, 1, 0, 0})
	DMember(bool)                                      bOnlyCookProductionAssets                                   OFFSET(get<bool>, {0x2D5, 1, 0, 0})
	DMember(bool)                                      bIsBulkScanning                                             OFFSET(get<bool>, {0x2D6, 1, 0, 0})
	DMember(bool)                                      bIsPrimaryAssetDirectoryCurrent                             OFFSET(get<bool>, {0x2D7, 1, 0, 0})
	DMember(bool)                                      bIsManagementDatabaseCurrent                                OFFSET(get<bool>, {0x2D8, 1, 0, 0})
	DMember(bool)                                      bUpdateManagementDatabaseAfterScan                          OFFSET(get<bool>, {0x2D9, 1, 0, 0})
	DMember(bool)                                      bIncludeOnlyOnDiskAssets                                    OFFSET(get<bool>, {0x2DA, 1, 0, 0})
	DMember(bool)                                      bHasCompletedInitialScan                                    OFFSET(get<bool>, {0x2DB, 1, 0, 0})
	DMember(int32_t)                                   NumberOfSpawnedNotifications                                OFFSET(get<int32_t>, {0x2DC, 4, 0, 0})
};

/// Class /Script/Engine.MeshComponent
/// Size: 0x0028 (0x000468 - 0x000490)
class UMeshComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1168;

public:
	CMember(TArray<class UMaterialInterface*>)         OverrideMaterials                                           OFFSET(get<T>, {0x468, 16, 0, 0})
	DMember(bool)                                      bEnableMaterialParameterCaching                             OFFSET(get<bool>, {0x488, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.MeshComponent.SetVectorParameterValueOnMaterials
	// void SetVectorParameterValueOnMaterials(FName ParameterName, FVector ParameterValue);                                    // [0x339eca0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MeshComponent.SetScalarParameterValueOnMaterials
	// void SetScalarParameterValueOnMaterials(FName ParameterName, float ParameterValue);                                      // [0x339eb40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MeshComponent.PrestreamTextures
	// void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int32_t CinematicTextureGroups);                // [0x339e680] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MeshComponent.IsMaterialSlotNameValid
	// bool IsMaterialSlotNameValid(FName MaterialSlotName);                                                                    // [0x339dfd0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MeshComponent.GetMaterialSlotNames
	// TArray<FName> GetMaterialSlotNames();                                                                                    // [0x339dd20] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MeshComponent.GetMaterials
	// TArray<UMaterialInterface*> GetMaterials();                                                                              // [0x339dda0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MeshComponent.GetMaterialIndex
	// int32_t GetMaterialIndex(FName MaterialSlotName);                                                                        // [0x339dc80] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.VertexOffsetUsage
/// Size: 0x0004 (0x000000 - 0x000004)
class FVertexOffsetUsage : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   Usage                                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.SkelMeshComponentLODInfo
/// Size: 0x0048 (0x000000 - 0x000048)
class FSkelMeshComponentLODInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<bool>)                              HiddenMaterials                                             OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/Engine.SkinnedMeshComponent
/// Size: 0x0230 (0x000490 - 0x0006C0)
class USkinnedMeshComponent : public UMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1728;

public:
	CMember(class USkeletalMesh*)                      SkeletalMesh                                                OFFSET(get<T>, {0x498, 8, 0, 0})
	CMember(TWeakObjectPtr<class USkinnedMeshComponent*>) MasterPoseComponent                                      OFFSET(get<T>, {0x4A0, 8, 0, 0})
	CMember(TArray<ESkinCacheUsage>)                   SkinCacheUsage                                              OFFSET(get<T>, {0x4A8, 16, 0, 0})
	CMember(TArray<FVertexOffsetUsage>)                VertexOffsetUsage                                           OFFSET(get<T>, {0x4B8, 16, 0, 0})
	CMember(class UPhysicsAsset*)                      PhysicsAssetOverride                                        OFFSET(get<T>, {0x5C0, 8, 0, 0})
	DMember(int32_t)                                   ForcedLodModel                                              OFFSET(get<int32_t>, {0x5C8, 4, 0, 0})
	DMember(int32_t)                                   MinLodModel                                                 OFFSET(get<int32_t>, {0x5CC, 4, 0, 0})
	DMember(float)                                     StreamingDistanceMultiplier                                 OFFSET(get<float>, {0x5D8, 4, 0, 0})
	CMember(TArray<FSkelMeshComponentLODInfo>)         LODInfo                                                     OFFSET(get<T>, {0x5E8, 16, 0, 0})
	CMember(EVisibilityBasedAnimTickOption)            VisibilityBasedAnimTickOption                               OFFSET(get<T>, {0x61C, 1, 0, 0})
	DMember(bool)                                      bOverrideMinLod                                             OFFSET(get<bool>, {0x61E, 1, 1, 3})
	DMember(bool)                                      bUseBoundsFromMasterPoseComponent                           OFFSET(get<bool>, {0x61E, 1, 1, 4})
	DMember(bool)                                      bForceWireframe                                             OFFSET(get<bool>, {0x61E, 1, 1, 5})
	DMember(bool)                                      bDisplayBones                                               OFFSET(get<bool>, {0x61E, 1, 1, 6})
	DMember(bool)                                      bDisableMorphTarget                                         OFFSET(get<bool>, {0x61E, 1, 1, 7})
	DMember(bool)                                      bHideSkin                                                   OFFSET(get<bool>, {0x61F, 1, 1, 0})
	DMember(bool)                                      bPerBoneMotionBlur                                          OFFSET(get<bool>, {0x61F, 1, 1, 1})
	DMember(bool)                                      bComponentUseFixedSkelBounds                                OFFSET(get<bool>, {0x61F, 1, 1, 2})
	DMember(bool)                                      bConsiderAllBodiesForBounds                                 OFFSET(get<bool>, {0x61F, 1, 1, 3})
	DMember(bool)                                      bSyncAttachParentLOD                                        OFFSET(get<bool>, {0x61F, 1, 1, 4})
	DMember(bool)                                      bCanHighlightSelectedSections                               OFFSET(get<bool>, {0x61F, 1, 1, 5})
	DMember(bool)                                      bRecentlyRendered                                           OFFSET(get<bool>, {0x61F, 1, 1, 6})
	DMember(bool)                                      bCastCapsuleDirectShadow                                    OFFSET(get<bool>, {0x61F, 1, 1, 7})
	DMember(bool)                                      bCastCapsuleIndirectShadow                                  OFFSET(get<bool>, {0x620, 1, 1, 0})
	DMember(bool)                                      bCPUSkinning                                                OFFSET(get<bool>, {0x620, 1, 1, 1})
	DMember(bool)                                      bEnableUpdateRateOptimizations                              OFFSET(get<bool>, {0x620, 1, 1, 2})
	DMember(bool)                                      bDisplayDebugUpdateRateOptimizations                        OFFSET(get<bool>, {0x620, 1, 1, 3})
	DMember(bool)                                      bRenderStatic                                               OFFSET(get<bool>, {0x620, 1, 1, 4})
	DMember(bool)                                      bIgnoreMasterPoseComponentLOD                               OFFSET(get<bool>, {0x620, 1, 1, 5})
	DMember(bool)                                      bCachedLocalBoundsUpToDate                                  OFFSET(get<bool>, {0x621, 1, 1, 0})
	DMember(bool)                                      bForceMeshObjectUpdate                                      OFFSET(get<bool>, {0x621, 1, 1, 2})
	DMember(float)                                     CapsuleIndirectShadowMinVisibility                          OFFSET(get<float>, {0x624, 4, 0, 0})
	SMember(FBoxSphereBounds)                          CachedWorldSpaceBounds                                      OFFSET(getStruct<T>, {0x638, 28, 0, 0})
	SMember(FMatrix)                                   CachedWorldToLocalTransform                                 OFFSET(getStruct<T>, {0x660, 64, 0, 0})


	/// Functions
	// Function /Script/Engine.SkinnedMeshComponent.UnloadSkinWeightProfile
	// void UnloadSkinWeightProfile(FName InProfileName);                                                                       // [0x33f21d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.UnHideBoneByName
	// void UnHideBoneByName(FName BoneName);                                                                                   // [0x33f2140] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.TransformToBoneSpace
	// void TransformToBoneSpace(FName BoneName, FVector InPosition, FRotator InRotation, FVector& OutPosition, FRotator& OutRotation); // [0x33f1f70] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.TransformFromBoneSpace
	// void TransformFromBoneSpace(FName BoneName, FVector InPosition, FRotator InRotation, FVector& OutPosition, FRotator& OutRotation); // [0x33f1da0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.ShowMaterialSection
	// void ShowMaterialSection(int32_t MaterialID, int32_t SectionIndex, bool bShow, int32_t LODIndex);                        // [0x33f1c50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.ShowAllMaterialSections
	// void ShowAllMaterialSections(int32_t LODIndex);                                                                          // [0x33f1bc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetVertexOffsetUsage
	// void SetVertexOffsetUsage(int32_t LODIndex, int32_t Usage);                                                              // [0x33f1af0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor
	// void SetVertexColorOverride_LinearColor(int32_t LODIndex, TArray<FLinearColor>& VertexColors);                           // [0x33f1a00] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetSkinWeightProfile
	// bool SetSkinWeightProfile(FName InProfileName);                                                                          // [0x33f1960] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetSkinWeightOverride
	// void SetSkinWeightOverride(int32_t LODIndex, TArray<FSkelMeshSkinWeightInfo>& SkinWeights);                              // [0x33f1870] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetSkeletalMesh
	// void SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bReinitPose);                                                    // [0x33f17a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetRenderStatic
	// void SetRenderStatic(bool bNewValue);                                                                                    // [0x33f1710] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetPreSkinningOffsets
	// void SetPreSkinningOffsets(int32_t LODIndex, TArray<FVector> Offsets);                                                   // [0x33f15e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetPostSkinningOffsets
	// void SetPostSkinningOffsets(int32_t LODIndex, TArray<FVector> Offsets);                                                  // [0x33f14b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetPhysicsAsset
	// void SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit);                                           // [0x33f13e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetMinLOD
	// void SetMinLOD(int32_t InNewMinLOD);                                                                                     // [0x33f1350] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetMasterPoseComponent
	// void SetMasterPoseComponent(class USkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);                     // [0x33f1280] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetForcedLOD
	// void SetForcedLOD(int32_t InNewForcedLOD);                                                                               // [0x33f11f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow
	// void SetCastCapsuleIndirectShadow(bool bNewValue);                                                                       // [0x33f1160] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow
	// void SetCastCapsuleDirectShadow(bool bNewValue);                                                                         // [0x33f10d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility
	// void SetCapsuleIndirectShadowMinVisibility(float NewValue);                                                              // [0x33f1050] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.IsUsingSkinWeightProfile
	// bool IsUsingSkinWeightProfile();                                                                                         // [0x33f1020] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.IsMaterialSectionShown
	// bool IsMaterialSectionShown(int32_t MaterialID, int32_t LODIndex);                                                       // [0x33f0f50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.IsBoneHiddenByName
	// bool IsBoneHiddenByName(FName BoneName);                                                                                 // [0x33f0eb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.HideBoneByName
	// void HideBoneByName(FName BoneName, TEnumAsByte<EPhysBodyOp> PhysBodyOption);                                            // [0x33f0cb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.GetVertexOffsetUsage
	// int32_t GetVertexOffsetUsage(int32_t LODIndex);                                                                          // [0x33f0c10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetTwistAndSwingAngleOfDeltaRotationFromRefPose
	// bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, float& OutTwistAngle, float& OutSwingAngle);        // [0x33f0af0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetSocketBoneName
	// FName GetSocketBoneName(FName InSocketName);                                                                             // [0x33f09b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetRefPosePosition
	// FVector GetRefPosePosition(int32_t BoneIndex);                                                                           // [0x33f0900] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.GetParentBone
	// FName GetParentBone(FName BoneName);                                                                                     // [0x33f0870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetNumLODs
	// int32_t GetNumLODs();                                                                                                    // [0x33f0840] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetNumBones
	// int32_t GetNumBones();                                                                                                   // [0x33f0810] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetForcedLOD
	// int32_t GetForcedLOD();                                                                                                  // [0x33f07e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetDeltaTransformFromRefPose
	// FTransform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);                                                 // [0x33f06e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetCurrentSkinWeightProfileName
	// FName GetCurrentSkinWeightProfileName();                                                                                 // [0x33f06c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetBoneName
	// FName GetBoneName(int32_t BoneIndex);                                                                                    // [0x33f0630] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetBoneIndex
	// int32_t GetBoneIndex(FName BoneName);                                                                                    // [0x33f0590] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.FindClosestBone_K2
	// FName FindClosestBone_K2(FVector TestLocation, FVector& BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);     // [0x33f03f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.ClearVertexColorOverride
	// void ClearVertexColorOverride(int32_t LODIndex);                                                                         // [0x33f0360] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.ClearSkinWeightProfile
	// void ClearSkinWeightProfile();                                                                                           // [0x33f0340] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.ClearSkinWeightOverride
	// void ClearSkinWeightOverride(int32_t LODIndex);                                                                          // [0x33f02b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.BoneIsChildOf
	// bool BoneIsChildOf(FName BoneName, FName ParentBoneName);                                                                // [0x33f01e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.StreamableRenderAsset
/// Size: 0x0038 (0x000028 - 0x000060)
class UStreamableRenderAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(double)                                    ForceMipLevelsToBeResidentTimestamp                         OFFSET(get<double>, {0x40, 8, 0, 0})
	DMember(int32_t)                                   NumCinematicMipLevels                                       OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(int32_t)                                   StreamingIndex                                              OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	DMember(int32_t)                                   CachedCombinedLODBias                                       OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	DMember(bool)                                      NeverStream                                                 OFFSET(get<bool>, {0x54, 1, 1, 0})
	DMember(bool)                                      bGlobalForceMipLevelsToBeResident                           OFFSET(get<bool>, {0x54, 1, 1, 1})
	DMember(bool)                                      bHasStreamingUpdatePending                                  OFFSET(get<bool>, {0x54, 1, 1, 2})
	DMember(bool)                                      bForceMiplevelsToBeResident                                 OFFSET(get<bool>, {0x54, 1, 1, 3})
	DMember(bool)                                      bIgnoreStreamingMipBias                                     OFFSET(get<bool>, {0x54, 1, 1, 4})
	DMember(bool)                                      bUseCinematicMipLevels                                      OFFSET(get<bool>, {0x54, 1, 1, 5})
};

/// Struct /Script/Engine.MeshUVChannelInfo
/// Size: 0x0014 (0x000000 - 0x000014)
class FMeshUVChannelInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(bool)                                      bInitialized                                                OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bOverrideDensities                                          OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(float)                                     LocalUVDensities                                            OFFSET(get<float>, {0x4, 16, 0, 0})
};

/// Struct /Script/Engine.SkeletalMaterial
/// Size: 0x0028 (0x000000 - 0x000028)
class FSkeletalMaterial : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class UMaterialInterface*)                 MaterialInterface                                           OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     MaterialSlotName                                            OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FMeshUVChannelInfo)                        UVChannelData                                               OFFSET(getStruct<T>, {0x10, 20, 0, 0})
};

/// Struct /Script/Engine.BoneMirrorInfo
/// Size: 0x0008 (0x000000 - 0x000008)
class FBoneMirrorInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   SourceIndex                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<EAxis>)                        BoneFlipAxis                                                OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Struct /Script/Engine.PerPlatformFloat
/// Size: 0x0004 (0x000000 - 0x000004)
class FPerPlatformFloat : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(float)                                     Default                                                     OFFSET(get<float>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshBuildSettings
/// Size: 0x0014 (0x000000 - 0x000014)
class FSkeletalMeshBuildSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(bool)                                      bRecomputeNormals                                           OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bRecomputeTangents                                          OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bUseMikkTSpace                                              OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bComputeWeightedNormals                                     OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(bool)                                      bRemoveDegenerates                                          OFFSET(get<bool>, {0x0, 1, 1, 4})
	DMember(bool)                                      bUseHighPrecisionTangentBasis                               OFFSET(get<bool>, {0x0, 1, 1, 5})
	DMember(bool)                                      bUseFullPrecisionUVs                                        OFFSET(get<bool>, {0x0, 1, 1, 6})
	DMember(bool)                                      bBuildAdjacencyBuffer                                       OFFSET(get<bool>, {0x0, 1, 1, 7})
	DMember(bool)                                      bGenerateSmoothedNormals                                    OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(float)                                     ThresholdPosition                                           OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     ThresholdTangentNormal                                      OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     ThresholdUV                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     MorphThresholdPosition                                      OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshOptimizationSettings
/// Size: 0x003C (0x000000 - 0x00003C)
class FSkeletalMeshOptimizationSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 60;

public:
	CMember(TEnumAsByte<SkeletalMeshTerminationCriterion>) TerminationCriterion                                    OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     NumOfTrianglesPercentage                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     NumOfVertPercentage                                         OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(uint32_t)                                  MaxNumOfTriangles                                           OFFSET(get<uint32_t>, {0xC, 4, 0, 0})
	DMember(uint32_t)                                  MaxNumOfVerts                                               OFFSET(get<uint32_t>, {0x10, 4, 0, 0})
	DMember(float)                                     MaxDeviationPercentage                                      OFFSET(get<float>, {0x14, 4, 0, 0})
	CMember(TEnumAsByte<SkeletalMeshOptimizationType>) ReductionMethod                                             OFFSET(get<T>, {0x18, 1, 0, 0})
	CMember(TEnumAsByte<SkeletalMeshOptimizationImportance>) SilhouetteImportance                                  OFFSET(get<T>, {0x19, 1, 0, 0})
	CMember(TEnumAsByte<SkeletalMeshOptimizationImportance>) TextureImportance                                     OFFSET(get<T>, {0x1A, 1, 0, 0})
	CMember(TEnumAsByte<SkeletalMeshOptimizationImportance>) ShadingImportance                                     OFFSET(get<T>, {0x1B, 1, 0, 0})
	CMember(TEnumAsByte<SkeletalMeshOptimizationImportance>) SkinningImportance                                    OFFSET(get<T>, {0x1C, 1, 0, 0})
	DMember(bool)                                      bRemapMorphTargets                                          OFFSET(get<bool>, {0x1D, 1, 1, 0})
	DMember(bool)                                      bRecalcNormals                                              OFFSET(get<bool>, {0x1D, 1, 1, 1})
	DMember(float)                                     WeldingThreshold                                            OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     NormalsThreshold                                            OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   MaxBonesPerVertex                                           OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(bool)                                      bEnforceBoneBoundaries                                      OFFSET(get<bool>, {0x2C, 1, 1, 0})
	DMember(float)                                     VolumeImportance                                            OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(bool)                                      bLockEdges                                                  OFFSET(get<bool>, {0x34, 1, 1, 0})
	DMember(bool)                                      bLockColorBounaries                                         OFFSET(get<bool>, {0x34, 1, 1, 1})
	DMember(int32_t)                                   BaseLOD                                                     OFFSET(get<int32_t>, {0x38, 4, 0, 0})
};

/// Struct /Script/Engine.BoneReference
/// Size: 0x0010 (0x000000 - 0x000010)
class FBoneReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshLODInfo
/// Size: 0x00C8 (0x000000 - 0x0000C8)
class FSkeletalMeshLODInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FPerPlatformFloat)                         ScreenSize                                                  OFFSET(getStruct<T>, {0x0, 4, 0, 0})
	DMember(float)                                     LODHysteresis                                               OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(TArray<int32_t>)                           LODMaterialMap                                              OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<int32_t>)                           LODOutlineMaterialMap                                       OFFSET(get<T>, {0x18, 16, 0, 0})
	SMember(FSkeletalMeshBuildSettings)                BuildSettings                                               OFFSET(getStruct<T>, {0x28, 20, 0, 0})
	SMember(FSkeletalMeshOptimizationSettings)         ReductionSettings                                           OFFSET(getStruct<T>, {0x3C, 60, 0, 0})
	CMember(TArray<FBoneReference>)                    BonesToRemove                                               OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TArray<FBoneReference>)                    BonesToPrioritize                                           OFFSET(get<T>, {0x88, 16, 0, 0})
	DMember(float)                                     WeightOfPrioritization                                      OFFSET(get<float>, {0x98, 4, 0, 0})
	CMember(class UAnimSequence*)                      BakePose                                                    OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(class UAnimSequence*)                      BakePoseOverride                                            OFFSET(get<T>, {0xA8, 8, 0, 0})
	SMember(FString)                                   SourceImportFilename                                        OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	CMember(ESkinCacheUsage)                           SkinCacheUsage                                              OFFSET(get<T>, {0xC0, 1, 0, 0})
	DMember(bool)                                      bHasBeenSimplified                                          OFFSET(get<bool>, {0xC1, 1, 1, 0})
	DMember(bool)                                      bHasPerLODVertexColors                                      OFFSET(get<bool>, {0xC1, 1, 1, 1})
	DMember(bool)                                      bAllowCPUAccess                                             OFFSET(get<bool>, {0xC1, 1, 1, 2})
	DMember(bool)                                      bSupportUniformlyDistributedSampling                        OFFSET(get<bool>, {0xC1, 1, 1, 3})
};

/// Struct /Script/Engine.PerPlatformInt
/// Size: 0x0004 (0x000000 - 0x000004)
class FPerPlatformInt : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   Default                                                     OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.PerPlatformBool
/// Size: 0x0001 (0x000000 - 0x000001)
class FPerPlatformBool : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(bool)                                      Default                                                     OFFSET(get<bool>, {0x0, 1, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegionMaterialFilter
/// Size: 0x0008 (0x000000 - 0x000008)
class FSkeletalMeshSamplingRegionMaterialFilter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     MaterialName                                                OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegionBoneFilter
/// Size: 0x000C (0x000000 - 0x00000C)
class FSkeletalMeshSamplingRegionBoneFilter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bIncludeOrExclude                                           OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      bApplyToChildren                                            OFFSET(get<bool>, {0x8, 1, 1, 1})
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegion
/// Size: 0x0030 (0x000000 - 0x000030)
class FSkeletalMeshSamplingRegion : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   LODIndex                                                    OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(bool)                                      bSupportUniformlyDistributedSampling                        OFFSET(get<bool>, {0xC, 1, 1, 0})
	CMember(TArray<FSkeletalMeshSamplingRegionMaterialFilter>) MaterialFilters                                     OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FSkeletalMeshSamplingRegionBoneFilter>) BoneFilters                                             OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshSamplingLODBuiltData
/// Size: 0x0048 (0x000000 - 0x000048)
class FSkeletalMeshSamplingLODBuiltData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegionBuiltData
/// Size: 0x0078 (0x000000 - 0x000078)
class FSkeletalMeshSamplingRegionBuiltData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Struct /Script/Engine.SkeletalMeshSamplingBuiltData
/// Size: 0x0020 (0x000000 - 0x000020)
class FSkeletalMeshSamplingBuiltData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FSkeletalMeshSamplingLODBuiltData>) WholeMeshBuiltData                                          OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FSkeletalMeshSamplingRegionBuiltData>) RegionBuiltData                                          OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshSamplingInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FSkeletalMeshSamplingInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<FSkeletalMeshSamplingRegion>)       Regions                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FSkeletalMeshSamplingBuiltData)            BuiltData                                                   OFFSET(getStruct<T>, {0x10, 32, 0, 0})
};

/// Struct /Script/Engine.SkinWeightProfileInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FSkinWeightProfileInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FPerPlatformBool)                          DefaultProfile                                              OFFSET(getStruct<T>, {0x8, 1, 0, 0})
	SMember(FPerPlatformInt)                           DefaultProfileFromLODIndex                                  OFFSET(getStruct<T>, {0xC, 4, 0, 0})
};

/// Class /Script/Engine.SkeletalMesh
/// Size: 0x0348 (0x000060 - 0x0003A8)
class USkeletalMesh : public UStreamableRenderAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 936;

public:
	CMember(class USkeleton*)                          Skeleton                                                    OFFSET(get<T>, {0x80, 8, 0, 0})
	SMember(FBoxSphereBounds)                          ImportedBounds                                              OFFSET(getStruct<T>, {0x88, 28, 0, 0})
	SMember(FBoxSphereBounds)                          ExtendedBounds                                              OFFSET(getStruct<T>, {0xA4, 28, 0, 0})
	SMember(FVector)                                   PositiveBoundsExtension                                     OFFSET(getStruct<T>, {0xC0, 12, 0, 0})
	SMember(FVector)                                   NegativeBoundsExtension                                     OFFSET(getStruct<T>, {0xCC, 12, 0, 0})
	CMember(TArray<FSkeletalMaterial>)                 Materials                                                   OFFSET(get<T>, {0xD8, 16, 0, 0})
	CMember(TArray<FBoneMirrorInfo>)                   SkelMirrorTable                                             OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(TArray<FSkeletalMeshLODInfo>)              LODInfo                                                     OFFSET(get<T>, {0xF8, 16, 0, 0})
	SMember(FPerPlatformInt)                           MinLOD                                                      OFFSET(getStruct<T>, {0x158, 4, 0, 0})
	SMember(FPerPlatformBool)                          DisableBelowMinLodStripping                                 OFFSET(getStruct<T>, {0x15C, 1, 0, 0})
	CMember(TEnumAsByte<EAxis>)                        SkelMirrorAxis                                              OFFSET(get<T>, {0x15D, 1, 0, 0})
	CMember(TEnumAsByte<EAxis>)                        SkelMirrorFlipAxis                                          OFFSET(get<T>, {0x15E, 1, 0, 0})
	DMember(bool)                                      bUseFullPrecisionUVs                                        OFFSET(get<bool>, {0x15F, 1, 1, 0})
	DMember(bool)                                      bUseHighPrecisionTangentBasis                               OFFSET(get<bool>, {0x15F, 1, 1, 1})
	DMember(bool)                                      bHasBeenSimplified                                          OFFSET(get<bool>, {0x15F, 1, 1, 2})
	DMember(bool)                                      bHasVertexColors                                            OFFSET(get<bool>, {0x15F, 1, 1, 3})
	DMember(bool)                                      bEnablePerPolyCollision                                     OFFSET(get<bool>, {0x15F, 1, 1, 5})
	CMember(class UBodySetup*)                         BodySetup                                                   OFFSET(get<T>, {0x160, 8, 0, 0})
	CMember(class UPhysicsAsset*)                      PhysicsAsset                                                OFFSET(get<T>, {0x168, 8, 0, 0})
	CMember(class UPhysicsAsset*)                      ShadowPhysicsAsset                                          OFFSET(get<T>, {0x170, 8, 0, 0})
	CMember(TArray<class UNodeMappingContainer*>)      NodeMappingData                                             OFFSET(get<T>, {0x178, 16, 0, 0})
	CMember(TArray<class UMorphTarget*>)               MorphTargets                                                OFFSET(get<T>, {0x188, 16, 0, 0})
	CMember(class UClass*)                             PostProcessAnimBlueprint                                    OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(TArray<class UClothingAssetBase*>)         MeshClothingAssets                                          OFFSET(get<T>, {0x328, 16, 0, 0})
	SMember(FSkeletalMeshSamplingInfo)                 SamplingInfo                                                OFFSET(getStruct<T>, {0x338, 48, 0, 0})
	CMember(TArray<class UAssetUserData*>)             AssetUserData                                               OFFSET(get<T>, {0x368, 16, 0, 0})
	CMember(TArray<class USkeletalMeshSocket*>)        Sockets                                                     OFFSET(get<T>, {0x378, 16, 0, 0})
	CMember(TArray<FSkinWeightProfileInfo>)            SkinWeightProfiles                                          OFFSET(get<T>, {0x398, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.SkeletalMesh.SetLODSettings
	// void SetLODSettings(class USkeletalMeshLODSettings* InLODSettings);                                                      // [0xa1e2e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMesh.SetDefaultAnimatingRig
	// void SetDefaultAnimatingRig(TWeakObjectPtr<UObject*> InAnimatingRig);                                                    // [0x33e6b10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMesh.NumSockets
	// int32_t NumSockets();                                                                                                    // [0x33e6ae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.K2_GetAllMorphTargetNames
	// TArray<FString> K2_GetAllMorphTargetNames();                                                                             // [0x33e6a00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.IsSectionUsingCloth
	// bool IsSectionUsingCloth(int32_t InSectionIndex, bool bCheckCorrespondingSections);                                      // [0x33e6930] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetSocketByIndex
	// class USkeletalMeshSocket* GetSocketByIndex(int32_t Index);                                                              // [0x33e6890] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetNodeMappingContainer
	// class UNodeMappingContainer* GetNodeMappingContainer(class UBlueprint* SourceAsset);                                     // [0x33e67f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetImportedBounds
	// FBoxSphereBounds GetImportedBounds();                                                                                    // [0x33e67a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetDefaultAnimatingRig
	// TWeakObjectPtr<UObject*> GetDefaultAnimatingRig();                                                                       // [0x33e6740] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.SkeletalMesh.GetBounds
	// FBoxSphereBounds GetBounds();                                                                                            // [0x33e66f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.FindSocketInfo
	// class USkeletalMeshSocket* FindSocketInfo(FName InSocketName, FTransform& OutTransform, int32_t& OutBoneIndex, int32_t& OutIndex); // [0x33e6520] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.FindSocketAndIndex
	// class USkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, int32_t& OutIndex);                                    // [0x33e6440] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.FindSocket
	// class USkeletalMeshSocket* FindSocket(FName InSocketName);                                                               // [0x33e63a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.TouchInputControl
/// Size: 0x0068 (0x000000 - 0x000068)
class FTouchInputControl : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(class UTexture2D*)                         Image1                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UTexture2D*)                         Image2                                                      OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FVector2D)                                 Center                                                      OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	SMember(FVector2D)                                 VisualSize                                                  OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FVector2D)                                 ThumbSize                                                   OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	SMember(FVector2D)                                 InteractionSize                                             OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	SMember(FVector2D)                                 InputScale                                                  OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FKey)                                      MainInputKey                                                OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	SMember(FKey)                                      AltInputKey                                                 OFFSET(getStruct<T>, {0x50, 24, 0, 0})
};

/// Class /Script/Engine.TouchInterface
/// Size: 0x0030 (0x000028 - 0x000058)
class UTouchInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<FTouchInputControl>)                Controls                                                    OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(float)                                     ActiveOpacity                                               OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     InactiveOpacity                                             OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     TimeUntilDeactive                                           OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     TimeUntilReset                                              OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     ActivationDelay                                             OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(bool)                                      bPreventRecenter                                            OFFSET(get<bool>, {0x4C, 1, 0, 0})
	DMember(float)                                     StartupDelay                                                OFFSET(get<float>, {0x50, 4, 0, 0})
};

/// Struct /Script/Engine.StatColorMapEntry
/// Size: 0x0008 (0x000000 - 0x000008)
class FStatColorMapEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     In                                                          OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FColor)                                    Out                                                         OFFSET(getStruct<T>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.StatColorMapping
/// Size: 0x0028 (0x000000 - 0x000028)
class FStatColorMapping : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FString)                                   StatName                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<FStatColorMapEntry>)                ColorMap                                                    OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(bool)                                      DisableBlend                                                OFFSET(get<bool>, {0x20, 1, 1, 0})
};

/// Struct /Script/Engine.GameNameRedirect
/// Size: 0x0010 (0x000000 - 0x000010)
class FGameNameRedirect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     OldGameName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     NewGameName                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.ClassRedirect
/// Size: 0x003C (0x000000 - 0x00003C)
class FClassRedirect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 60;

public:
	SMember(FName)                                     ObjectName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     OldClassName                                                OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     NewClassName                                                OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	SMember(FName)                                     OldSubobjName                                               OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FName)                                     NewSubobjName                                               OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	SMember(FName)                                     NewClassClass                                               OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	SMember(FName)                                     NewClassPackage                                             OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      InstanceOnly                                                OFFSET(get<bool>, {0x38, 1, 0, 0})
};

/// Struct /Script/Engine.PluginRedirect
/// Size: 0x0020 (0x000000 - 0x000020)
class FPluginRedirect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   OldPluginName                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   NewPluginName                                               OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.StructRedirect
/// Size: 0x0010 (0x000000 - 0x000010)
class FStructRedirect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     OldStructName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     NewStructName                                               OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.DirectoryPath
/// Size: 0x0010 (0x000000 - 0x000010)
class FDirectoryPath : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FString)                                   Path                                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.DropNoteInfo
/// Size: 0x0028 (0x000000 - 0x000028)
class FDropNoteInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FString)                                   Comment                                                     OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Engine.NetDriverDefinition
/// Size: 0x0018 (0x000000 - 0x000018)
class FNetDriverDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     DefName                                                     OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     DriverClassName                                             OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     DriverClassNameFallback                                     OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Class /Script/Engine.Engine
/// Size: 0x0DB8 (0x000028 - 0x000DE0)
class UEngine : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3552;

public:
	CMember(class UFont*)                              TinyFont                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FSoftObjectPath)                           TinyFontName                                                OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	CMember(class UFont*)                              SmallFont                                                   OFFSET(get<T>, {0x50, 8, 0, 0})
	SMember(FSoftObjectPath)                           SmallFontName                                               OFFSET(getStruct<T>, {0x58, 24, 0, 0})
	CMember(class UFont*)                              MediumFont                                                  OFFSET(get<T>, {0x70, 8, 0, 0})
	SMember(FSoftObjectPath)                           MediumFontName                                              OFFSET(getStruct<T>, {0x78, 24, 0, 0})
	CMember(class UFont*)                              LargeFont                                                   OFFSET(get<T>, {0x90, 8, 0, 0})
	SMember(FSoftObjectPath)                           LargeFontName                                               OFFSET(getStruct<T>, {0x98, 24, 0, 0})
	CMember(class UFont*)                              SubtitleFont                                                OFFSET(get<T>, {0xB0, 8, 0, 0})
	SMember(FSoftObjectPath)                           SubtitleFontName                                            OFFSET(getStruct<T>, {0xB8, 24, 0, 0})
	CMember(TArray<class UFont*>)                      AdditionalFonts                                             OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(TArray<FString>)                           AdditionalFontNames                                         OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(class UClass*)                             ConsoleClass                                                OFFSET(get<T>, {0xF0, 8, 0, 0})
	SMember(FSoftClassPath)                            ConsoleClassName                                            OFFSET(getStruct<T>, {0xF8, 24, 0, 0})
	CMember(class UClass*)                             GameViewportClientClass                                     OFFSET(get<T>, {0x110, 8, 0, 0})
	SMember(FSoftClassPath)                            GameViewportClientClassName                                 OFFSET(getStruct<T>, {0x118, 24, 0, 0})
	CMember(class UClass*)                             LocalPlayerClass                                            OFFSET(get<T>, {0x130, 8, 0, 0})
	SMember(FSoftClassPath)                            LocalPlayerClassName                                        OFFSET(getStruct<T>, {0x138, 24, 0, 0})
	CMember(class UClass*)                             WorldSettingsClass                                          OFFSET(get<T>, {0x150, 8, 0, 0})
	SMember(FSoftClassPath)                            WorldSettingsClassName                                      OFFSET(getStruct<T>, {0x158, 24, 0, 0})
	SMember(FSoftClassPath)                            NavigationSystemClassName                                   OFFSET(getStruct<T>, {0x170, 24, 0, 0})
	CMember(class UClass*)                             NavigationSystemClass                                       OFFSET(get<T>, {0x188, 8, 0, 0})
	SMember(FSoftClassPath)                            NavigationSystemConfigClassName                             OFFSET(getStruct<T>, {0x190, 24, 0, 0})
	CMember(class UClass*)                             NavigationSystemConfigClass                                 OFFSET(get<T>, {0x1A8, 8, 0, 0})
	SMember(FSoftClassPath)                            AvoidanceManagerClassName                                   OFFSET(getStruct<T>, {0x1B0, 24, 0, 0})
	CMember(class UClass*)                             AvoidanceManagerClass                                       OFFSET(get<T>, {0x1C8, 8, 0, 0})
	SMember(FSoftClassPath)                            AIControllerClassName                                       OFFSET(getStruct<T>, {0x1D0, 24, 0, 0})
	CMember(class UClass*)                             PhysicsCollisionHandlerClass                                OFFSET(get<T>, {0x1E8, 8, 0, 0})
	SMember(FSoftClassPath)                            PhysicsCollisionHandlerClassName                            OFFSET(getStruct<T>, {0x1F0, 24, 0, 0})
	SMember(FSoftClassPath)                            GameUserSettingsClassName                                   OFFSET(getStruct<T>, {0x208, 24, 0, 0})
	CMember(class UClass*)                             GameUserSettingsClass                                       OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class UGameUserSettings*)                  GameUserSettings                                            OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UClass*)                             LevelScriptActorClass                                       OFFSET(get<T>, {0x230, 8, 0, 0})
	SMember(FSoftClassPath)                            LevelScriptActorClassName                                   OFFSET(getStruct<T>, {0x238, 24, 0, 0})
	SMember(FSoftClassPath)                            DefaultBlueprintBaseClassName                               OFFSET(getStruct<T>, {0x250, 24, 0, 0})
	SMember(FSoftClassPath)                            GameSingletonClassName                                      OFFSET(getStruct<T>, {0x268, 24, 0, 0})
	CMember(class UObject*)                            GameSingleton                                               OFFSET(get<T>, {0x280, 8, 0, 0})
	SMember(FSoftClassPath)                            AssetManagerClassName                                       OFFSET(getStruct<T>, {0x288, 24, 0, 0})
	CMember(class UAssetManager*)                      AssetManager                                                OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(class UTexture2D*)                         DefaultTexture                                              OFFSET(get<T>, {0x2A8, 8, 0, 0})
	SMember(FSoftObjectPath)                           DefaultTextureName                                          OFFSET(getStruct<T>, {0x2B0, 24, 0, 0})
	CMember(class UTexture*)                           DefaultDiffuseTexture                                       OFFSET(get<T>, {0x2C8, 8, 0, 0})
	SMember(FSoftObjectPath)                           DefaultDiffuseTextureName                                   OFFSET(getStruct<T>, {0x2D0, 24, 0, 0})
	CMember(class UTexture2D*)                         DefaultBSPVertexTexture                                     OFFSET(get<T>, {0x2E8, 8, 0, 0})
	SMember(FSoftObjectPath)                           DefaultBSPVertexTextureName                                 OFFSET(getStruct<T>, {0x2F0, 24, 0, 0})
	CMember(class UTexture2D*)                         HighFrequencyNoiseTexture                                   OFFSET(get<T>, {0x308, 8, 0, 0})
	SMember(FSoftObjectPath)                           HighFrequencyNoiseTextureName                               OFFSET(getStruct<T>, {0x310, 24, 0, 0})
	CMember(class UTexture2D*)                         DefaultBokehTexture                                         OFFSET(get<T>, {0x328, 8, 0, 0})
	SMember(FSoftObjectPath)                           DefaultBokehTextureName                                     OFFSET(getStruct<T>, {0x330, 24, 0, 0})
	CMember(class UTexture2D*)                         DefaultBloomKernelTexture                                   OFFSET(get<T>, {0x348, 8, 0, 0})
	SMember(FSoftObjectPath)                           DefaultBloomKernelTextureName                               OFFSET(getStruct<T>, {0x350, 24, 0, 0})
	CMember(class UMaterial*)                          WireframeMaterial                                           OFFSET(get<T>, {0x368, 8, 0, 0})
	SMember(FString)                                   WireframeMaterialName                                       OFFSET(getStruct<T>, {0x370, 16, 0, 0})
	CMember(class UMaterial*)                          DebugMeshMaterial                                           OFFSET(get<T>, {0x380, 8, 0, 0})
	SMember(FSoftObjectPath)                           DebugMeshMaterialName                                       OFFSET(getStruct<T>, {0x388, 24, 0, 0})
	CMember(class UMaterial*)                          EmissiveMeshMaterial                                        OFFSET(get<T>, {0x3A0, 8, 0, 0})
	SMember(FSoftObjectPath)                           EmissiveMeshMaterialName                                    OFFSET(getStruct<T>, {0x3A8, 24, 0, 0})
	CMember(class UMaterial*)                          LevelColorationLitMaterial                                  OFFSET(get<T>, {0x3C0, 8, 0, 0})
	SMember(FString)                                   LevelColorationLitMaterialName                              OFFSET(getStruct<T>, {0x3C8, 16, 0, 0})
	CMember(class UMaterial*)                          LevelColorationUnlitMaterial                                OFFSET(get<T>, {0x3D8, 8, 0, 0})
	SMember(FString)                                   LevelColorationUnlitMaterialName                            OFFSET(getStruct<T>, {0x3E0, 16, 0, 0})
	CMember(class UMaterial*)                          LightingTexelDensityMaterial                                OFFSET(get<T>, {0x3F0, 8, 0, 0})
	SMember(FString)                                   LightingTexelDensityName                                    OFFSET(getStruct<T>, {0x3F8, 16, 0, 0})
	CMember(class UMaterial*)                          ShadedLevelColorationLitMaterial                            OFFSET(get<T>, {0x408, 8, 0, 0})
	SMember(FString)                                   ShadedLevelColorationLitMaterialName                        OFFSET(getStruct<T>, {0x410, 16, 0, 0})
	CMember(class UMaterial*)                          ShadedLevelColorationUnlitMaterial                          OFFSET(get<T>, {0x420, 8, 0, 0})
	SMember(FString)                                   ShadedLevelColorationUnlitMaterialName                      OFFSET(getStruct<T>, {0x428, 16, 0, 0})
	CMember(class UMaterial*)                          RemoveSurfaceMaterial                                       OFFSET(get<T>, {0x438, 8, 0, 0})
	SMember(FSoftObjectPath)                           RemoveSurfaceMaterialName                                   OFFSET(getStruct<T>, {0x440, 24, 0, 0})
	CMember(class UMaterial*)                          VertexColorMaterial                                         OFFSET(get<T>, {0x458, 8, 0, 0})
	SMember(FString)                                   VertexColorMaterialName                                     OFFSET(getStruct<T>, {0x460, 16, 0, 0})
	CMember(class UMaterial*)                          VertexColorViewModeMaterial_ColorOnly                       OFFSET(get<T>, {0x470, 8, 0, 0})
	SMember(FString)                                   VertexColorViewModeMaterialName_ColorOnly                   OFFSET(getStruct<T>, {0x478, 16, 0, 0})
	CMember(class UMaterial*)                          VertexColorViewModeMaterial_AlphaAsColor                    OFFSET(get<T>, {0x488, 8, 0, 0})
	SMember(FString)                                   VertexColorViewModeMaterialName_AlphaAsColor                OFFSET(getStruct<T>, {0x490, 16, 0, 0})
	CMember(class UMaterial*)                          VertexColorViewModeMaterial_RedOnly                         OFFSET(get<T>, {0x4A0, 8, 0, 0})
	SMember(FString)                                   VertexColorViewModeMaterialName_RedOnly                     OFFSET(getStruct<T>, {0x4A8, 16, 0, 0})
	CMember(class UMaterial*)                          VertexColorViewModeMaterial_GreenOnly                       OFFSET(get<T>, {0x4B8, 8, 0, 0})
	SMember(FString)                                   VertexColorViewModeMaterialName_GreenOnly                   OFFSET(getStruct<T>, {0x4C0, 16, 0, 0})
	CMember(class UMaterial*)                          VertexColorViewModeMaterial_BlueOnly                        OFFSET(get<T>, {0x4D0, 8, 0, 0})
	SMember(FString)                                   VertexColorViewModeMaterialName_BlueOnly                    OFFSET(getStruct<T>, {0x4D8, 16, 0, 0})
	SMember(FSoftObjectPath)                           DebugEditorMaterialName                                     OFFSET(getStruct<T>, {0x4E8, 24, 0, 0})
	CMember(class UMaterial*)                          ConstraintLimitMaterial                                     OFFSET(get<T>, {0x500, 8, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           ConstraintLimitMaterialX                                    OFFSET(get<T>, {0x508, 8, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           ConstraintLimitMaterialXAxis                                OFFSET(get<T>, {0x510, 8, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           ConstraintLimitMaterialY                                    OFFSET(get<T>, {0x518, 8, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           ConstraintLimitMaterialYAxis                                OFFSET(get<T>, {0x520, 8, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           ConstraintLimitMaterialZ                                    OFFSET(get<T>, {0x528, 8, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           ConstraintLimitMaterialZAxis                                OFFSET(get<T>, {0x530, 8, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           ConstraintLimitMaterialPrismatic                            OFFSET(get<T>, {0x538, 8, 0, 0})
	CMember(class UMaterial*)                          InvalidLightmapSettingsMaterial                             OFFSET(get<T>, {0x540, 8, 0, 0})
	SMember(FSoftObjectPath)                           InvalidLightmapSettingsMaterialName                         OFFSET(getStruct<T>, {0x548, 24, 0, 0})
	CMember(class UMaterial*)                          PreviewShadowsIndicatorMaterial                             OFFSET(get<T>, {0x560, 8, 0, 0})
	SMember(FSoftObjectPath)                           PreviewShadowsIndicatorMaterialName                         OFFSET(getStruct<T>, {0x568, 24, 0, 0})
	CMember(class UMaterial*)                          ArrowMaterial                                               OFFSET(get<T>, {0x580, 8, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           ArrowMaterialYellow                                         OFFSET(get<T>, {0x588, 8, 0, 0})
	SMember(FSoftObjectPath)                           ArrowMaterialName                                           OFFSET(getStruct<T>, {0x590, 24, 0, 0})
	SMember(FLinearColor)                              LightingOnlyBrightness                                      OFFSET(getStruct<T>, {0x5A8, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      ShaderComplexityColors                                      OFFSET(get<T>, {0x5B8, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      QuadComplexityColors                                        OFFSET(get<T>, {0x5C8, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      LightComplexityColors                                       OFFSET(get<T>, {0x5D8, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      StationaryLightOverlapColors                                OFFSET(get<T>, {0x5E8, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      LODColorationColors                                         OFFSET(get<T>, {0x5F8, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      HLODColorationColors                                        OFFSET(get<T>, {0x608, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      StreamingAccuracyColors                                     OFFSET(get<T>, {0x618, 16, 0, 0})
	DMember(float)                                     MaxPixelShaderAdditiveComplexityCount                       OFFSET(get<float>, {0x628, 4, 0, 0})
	DMember(float)                                     MaxES3PixelShaderAdditiveComplexityCount                    OFFSET(get<float>, {0x62C, 4, 0, 0})
	DMember(float)                                     MinLightMapDensity                                          OFFSET(get<float>, {0x630, 4, 0, 0})
	DMember(float)                                     IdealLightMapDensity                                        OFFSET(get<float>, {0x634, 4, 0, 0})
	DMember(float)                                     MaxLightMapDensity                                          OFFSET(get<float>, {0x638, 4, 0, 0})
	DMember(bool)                                      bRenderLightMapDensityGrayscale                             OFFSET(get<bool>, {0x63C, 1, 1, 0})
	DMember(float)                                     RenderLightMapDensityGrayscaleScale                         OFFSET(get<float>, {0x640, 4, 0, 0})
	DMember(float)                                     RenderLightMapDensityColorScale                             OFFSET(get<float>, {0x644, 4, 0, 0})
	SMember(FLinearColor)                              LightMapDensityVertexMappedColor                            OFFSET(getStruct<T>, {0x648, 16, 0, 0})
	SMember(FLinearColor)                              LightMapDensitySelectedColor                                OFFSET(getStruct<T>, {0x658, 16, 0, 0})
	CMember(TArray<FStatColorMapping>)                 StatColorMappings                                           OFFSET(get<T>, {0x668, 16, 0, 0})
	CMember(class UPhysicalMaterial*)                  DefaultPhysMaterial                                         OFFSET(get<T>, {0x678, 8, 0, 0})
	SMember(FSoftObjectPath)                           DefaultPhysMaterialName                                     OFFSET(getStruct<T>, {0x680, 24, 0, 0})
	CMember(TArray<FGameNameRedirect>)                 ActiveGameNameRedirects                                     OFFSET(get<T>, {0x698, 16, 0, 0})
	CMember(TArray<FClassRedirect>)                    ActiveClassRedirects                                        OFFSET(get<T>, {0x6A8, 16, 0, 0})
	CMember(TArray<FPluginRedirect>)                   ActivePluginRedirects                                       OFFSET(get<T>, {0x6B8, 16, 0, 0})
	CMember(TArray<FStructRedirect>)                   ActiveStructRedirects                                       OFFSET(get<T>, {0x6C8, 16, 0, 0})
	CMember(class UTexture2D*)                         PreIntegratedSkinBRDFTexture                                OFFSET(get<T>, {0x6D8, 8, 0, 0})
	SMember(FSoftObjectPath)                           PreIntegratedSkinBRDFTextureName                            OFFSET(getStruct<T>, {0x6E0, 24, 0, 0})
	CMember(class UTexture2D*)                         BlueNoiseTexture                                            OFFSET(get<T>, {0x6F8, 8, 0, 0})
	SMember(FSoftObjectPath)                           BlueNoiseTextureName                                        OFFSET(getStruct<T>, {0x700, 24, 0, 0})
	CMember(class UTexture2D*)                         MiniFontTexture                                             OFFSET(get<T>, {0x718, 8, 0, 0})
	SMember(FSoftObjectPath)                           MiniFontTextureName                                         OFFSET(getStruct<T>, {0x720, 24, 0, 0})
	CMember(class UTexture*)                           WeightMapPlaceholderTexture                                 OFFSET(get<T>, {0x738, 8, 0, 0})
	SMember(FSoftObjectPath)                           WeightMapPlaceholderTextureName                             OFFSET(getStruct<T>, {0x740, 24, 0, 0})
	CMember(class UTexture2D*)                         LightMapDensityTexture                                      OFFSET(get<T>, {0x758, 8, 0, 0})
	SMember(FSoftObjectPath)                           LightMapDensityTextureName                                  OFFSET(getStruct<T>, {0x760, 24, 0, 0})
	CMember(class UGameViewportClient*)                GameViewport                                                OFFSET(get<T>, {0x780, 8, 0, 0})
	CMember(TArray<FString>)                           DeferredCommands                                            OFFSET(get<T>, {0x788, 16, 0, 0})
	DMember(float)                                     NearClipPlane                                               OFFSET(get<float>, {0x798, 4, 0, 0})
	DMember(bool)                                      bSubtitlesEnabled                                           OFFSET(get<bool>, {0x79C, 1, 1, 0})
	DMember(bool)                                      bSubtitlesForcedOff                                         OFFSET(get<bool>, {0x79C, 1, 1, 1})
	DMember(int32_t)                                   MaximumLoopIterationCount                                   OFFSET(get<int32_t>, {0x7A0, 4, 0, 0})
	DMember(bool)                                      bCanBlueprintsTickByDefault                                 OFFSET(get<bool>, {0x7A4, 1, 1, 0})
	DMember(bool)                                      bOptimizeAnimBlueprintMemberVariableAccess                  OFFSET(get<bool>, {0x7A4, 1, 1, 1})
	DMember(bool)                                      bAllowMultiThreadedAnimationUpdate                          OFFSET(get<bool>, {0x7A4, 1, 1, 2})
	DMember(bool)                                      bEnableEditorPSysRealtimeLOD                                OFFSET(get<bool>, {0x7A4, 1, 1, 3})
	DMember(bool)                                      bSmoothFrameRate                                            OFFSET(get<bool>, {0x7A4, 1, 1, 5})
	DMember(bool)                                      bUseFixedFrameRate                                          OFFSET(get<bool>, {0x7A4, 1, 1, 6})
	DMember(float)                                     FixedFrameRate                                              OFFSET(get<float>, {0x7A8, 4, 0, 0})
	SMember(FFloatRange)                               SmoothedFrameRateRange                                      OFFSET(getStruct<T>, {0x7AC, 16, 0, 0})
	CMember(class UEngineCustomTimeStep*)              CustomTimeStep                                              OFFSET(get<T>, {0x7C0, 8, 0, 0})
	SMember(FSoftClassPath)                            CustomTimeStepClassName                                     OFFSET(getStruct<T>, {0x7E8, 24, 0, 0})
	CMember(class UTimecodeProvider*)                  TimecodeProvider                                            OFFSET(get<T>, {0x800, 8, 0, 0})
	SMember(FSoftClassPath)                            TimecodeProviderClassName                                   OFFSET(getStruct<T>, {0x828, 24, 0, 0})
	DMember(bool)                                      bGenerateDefaultTimecode                                    OFFSET(get<bool>, {0x840, 1, 0, 0})
	SMember(FFrameRate)                                GenerateDefaultTimecodeFrameRate                            OFFSET(getStruct<T>, {0x844, 8, 0, 0})
	DMember(float)                                     GenerateDefaultTimecodeFrameDelay                           OFFSET(get<float>, {0x84C, 4, 0, 0})
	DMember(bool)                                      bCheckForMultiplePawnsSpawnedInAFrame                       OFFSET(get<bool>, {0x850, 1, 1, 0})
	DMember(int32_t)                                   NumPawnsAllowedToBeSpawnedInAFrame                          OFFSET(get<int32_t>, {0x854, 4, 0, 0})
	DMember(bool)                                      bShouldGenerateLowQualityLightmaps                          OFFSET(get<bool>, {0x858, 1, 1, 0})
	SMember(FColor)                                    C_WorldBox                                                  OFFSET(getStruct<T>, {0x85C, 4, 0, 0})
	SMember(FColor)                                    C_BrushWire                                                 OFFSET(getStruct<T>, {0x860, 4, 0, 0})
	SMember(FColor)                                    C_AddWire                                                   OFFSET(getStruct<T>, {0x864, 4, 0, 0})
	SMember(FColor)                                    C_SubtractWire                                              OFFSET(getStruct<T>, {0x868, 4, 0, 0})
	SMember(FColor)                                    C_SemiSolidWire                                             OFFSET(getStruct<T>, {0x86C, 4, 0, 0})
	SMember(FColor)                                    C_NonSolidWire                                              OFFSET(getStruct<T>, {0x870, 4, 0, 0})
	SMember(FColor)                                    C_WireBackground                                            OFFSET(getStruct<T>, {0x874, 4, 0, 0})
	SMember(FColor)                                    C_ScaleBoxHi                                                OFFSET(getStruct<T>, {0x878, 4, 0, 0})
	SMember(FColor)                                    C_VolumeCollision                                           OFFSET(getStruct<T>, {0x87C, 4, 0, 0})
	SMember(FColor)                                    C_BSPCollision                                              OFFSET(getStruct<T>, {0x880, 4, 0, 0})
	SMember(FColor)                                    C_OrthoBackground                                           OFFSET(getStruct<T>, {0x884, 4, 0, 0})
	SMember(FColor)                                    C_Volume                                                    OFFSET(getStruct<T>, {0x888, 4, 0, 0})
	SMember(FColor)                                    C_BrushShape                                                OFFSET(getStruct<T>, {0x88C, 4, 0, 0})
	DMember(float)                                     StreamingDistanceFactor                                     OFFSET(get<float>, {0x890, 4, 0, 0})
	SMember(FDirectoryPath)                            GameScreenshotSaveDirectory                                 OFFSET(getStruct<T>, {0x898, 16, 0, 0})
	CMember(ETransitionType)                           TransitionType                                              OFFSET(get<T>, {0x8A8, 1, 0, 0})
	SMember(FString)                                   TransitionDescription                                       OFFSET(getStruct<T>, {0x8B0, 16, 0, 0})
	SMember(FString)                                   TransitionGameMode                                          OFFSET(getStruct<T>, {0x8C0, 16, 0, 0})
	DMember(bool)                                      bAllowMatureLanguage                                        OFFSET(get<bool>, {0x8D0, 1, 1, 0})
	DMember(float)                                     CameraRotationThreshold                                     OFFSET(get<float>, {0x8D4, 4, 0, 0})
	DMember(float)                                     CameraTranslationThreshold                                  OFFSET(get<float>, {0x8D8, 4, 0, 0})
	DMember(float)                                     PrimitiveProbablyVisibleTime                                OFFSET(get<float>, {0x8DC, 4, 0, 0})
	DMember(float)                                     MaxOcclusionPixelsFraction                                  OFFSET(get<float>, {0x8E0, 4, 0, 0})
	DMember(bool)                                      bPauseOnLossOfFocus                                         OFFSET(get<bool>, {0x8E4, 1, 1, 0})
	DMember(int32_t)                                   MaxParticleResize                                           OFFSET(get<int32_t>, {0x8E8, 4, 0, 0})
	DMember(int32_t)                                   MaxParticleResizeWarn                                       OFFSET(get<int32_t>, {0x8EC, 4, 0, 0})
	CMember(TArray<FDropNoteInfo>)                     PendingDroppedNotes                                         OFFSET(get<T>, {0x8F0, 16, 0, 0})
	DMember(float)                                     NetClientTicksPerSecond                                     OFFSET(get<float>, {0x900, 4, 0, 0})
	DMember(float)                                     DisplayGamma                                                OFFSET(get<float>, {0x904, 4, 0, 0})
	DMember(float)                                     MinDesiredFrameRate                                         OFFSET(get<float>, {0x908, 4, 0, 0})
	SMember(FLinearColor)                              DefaultSelectedMaterialColor                                OFFSET(getStruct<T>, {0x90C, 16, 0, 0})
	SMember(FLinearColor)                              SelectedMaterialColor                                       OFFSET(getStruct<T>, {0x91C, 16, 0, 0})
	SMember(FLinearColor)                              SelectionOutlineColor                                       OFFSET(getStruct<T>, {0x92C, 16, 0, 0})
	SMember(FLinearColor)                              SubduedSelectionOutlineColor                                OFFSET(getStruct<T>, {0x93C, 16, 0, 0})
	SMember(FLinearColor)                              SelectedMaterialColorOverride                               OFFSET(getStruct<T>, {0x94C, 16, 0, 0})
	DMember(bool)                                      bIsOverridingSelectedColor                                  OFFSET(get<bool>, {0x95C, 1, 0, 0})
	DMember(bool)                                      bEnableOnScreenDebugMessages                                OFFSET(get<bool>, {0x960, 1, 1, 0})
	DMember(bool)                                      bEnableOnScreenDebugMessagesDisplay                         OFFSET(get<bool>, {0x960, 1, 1, 1})
	DMember(bool)                                      bSuppressMapWarnings                                        OFFSET(get<bool>, {0x960, 1, 1, 2})
	DMember(bool)                                      bDisableAILogging                                           OFFSET(get<bool>, {0x960, 1, 1, 3})
	DMember(uint32_t)                                  bEnableVisualLogRecordingOnStart                            OFFSET(get<uint32_t>, {0x964, 4, 0, 0})
	DMember(int32_t)                                   ScreenSaverInhibitorSemaphore                               OFFSET(get<int32_t>, {0x968, 4, 0, 0})
	DMember(bool)                                      bLockReadOnlyLevels                                         OFFSET(get<bool>, {0x96C, 1, 1, 0})
	SMember(FString)                                   ParticleEventManagerClassPath                               OFFSET(getStruct<T>, {0x970, 16, 0, 0})
	DMember(float)                                     SelectionHighlightIntensity                                 OFFSET(get<float>, {0x980, 4, 0, 0})
	DMember(float)                                     BSPSelectionHighlightIntensity                              OFFSET(get<float>, {0x984, 4, 0, 0})
	DMember(float)                                     SelectionHighlightIntensityBillboards                       OFFSET(get<float>, {0x988, 4, 0, 0})
	CMember(TArray<FNetDriverDefinition>)              NetDriverDefinitions                                        OFFSET(get<T>, {0xBF8, 16, 0, 0})
	CMember(TArray<FString>)                           ServerActors                                                OFFSET(get<T>, {0xC08, 16, 0, 0})
	CMember(TArray<FString>)                           RuntimeServerActors                                         OFFSET(get<T>, {0xC18, 16, 0, 0})
	DMember(float)                                     NetErrorLogInterval                                         OFFSET(get<float>, {0xC28, 4, 0, 0})
	DMember(bool)                                      bStartedLoadMapMovie                                        OFFSET(get<bool>, {0xC2C, 1, 1, 0})
	DMember(int32_t)                                   NextWorldContextHandle                                      OFFSET(get<int32_t>, {0xC48, 4, 0, 0})
};

/// Class /Script/Engine.ScriptViewportClient
/// Size: 0x0010 (0x000028 - 0x000038)
class UScriptViewportClient : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Struct /Script/Engine.DebugDisplayProperty
/// Size: 0x0020 (0x000000 - 0x000020)
class FDebugDisplayProperty : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UObject*)                            Obj                                                         OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UClass*)                             WithinClass                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/Engine.GameViewportClient
/// Size: 0x0328 (0x000038 - 0x000360)
class UGameViewportClient : public UScriptViewportClient
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(class UConsole*)                           ViewportConsole                                             OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(TArray<FDebugDisplayProperty>)             DebugProperties                                             OFFSET(get<T>, {0x48, 16, 0, 0})
	DMember(int32_t)                                   MaxSplitscreenPlayers                                       OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	CMember(class UWorld*)                             World                                                       OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(class UGameInstance*)                      GameInstance                                                OFFSET(get<T>, {0x80, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.GameViewportClient.SSSwapControllers
	// void SSSwapControllers();                                                                                                // [0x89bc50] Exec|Native|Public   
	// Function /Script/Engine.GameViewportClient.ShowTitleSafeArea
	// void ShowTitleSafeArea();                                                                                                // [0x89d6b0] Exec|Native|Public   
	// Function /Script/Engine.GameViewportClient.SetConsoleTarget
	// void SetConsoleTarget(int32_t PlayerIndex);                                                                              // [0x3315280] Exec|Native|Public   
};

/// Class /Script/Engine.Controller
/// Size: 0x0078 (0x000220 - 0x000298)
class AController : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(class APlayerState*)                       PlayerState                                                 OFFSET(get<T>, {0x228, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnInstigatedAnyDamage                                       OFFSET(getStruct<T>, {0x238, 16, 0, 0})
	SMember(FName)                                     StateName                                                   OFFSET(getStruct<T>, {0x248, 8, 0, 0})
	CMember(class APawn*)                              Pawn                                                        OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(class ACharacter*)                         Character                                                   OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class USceneComponent*)                    TransformComponent                                          OFFSET(get<T>, {0x268, 8, 0, 0})
	SMember(FRotator)                                  ControlRotation                                             OFFSET(getStruct<T>, {0x288, 12, 0, 0})
	DMember(bool)                                      bAttachToPawn                                               OFFSET(get<bool>, {0x294, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.Controller.UnPossess
	// void UnPossess();                                                                                                        // [0x32e4450] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.StopMovement
	// void StopMovement();                                                                                                     // [0x32e4430] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.SetInitialLocationAndRotation
	// void SetInitialLocationAndRotation(FVector& NewLocation, FRotator& NewRotation);                                         // [0x32e4340] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Controller.SetIgnoreMoveInput
	// void SetIgnoreMoveInput(bool bNewMoveInput);                                                                             // [0x32e42b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.SetIgnoreLookInput
	// void SetIgnoreLookInput(bool bNewLookInput);                                                                             // [0x32e4220] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.SetControlRotation
	// void SetControlRotation(FRotator& NewRotation);                                                                          // [0x32e4190] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Controller.ResetIgnoreMoveInput
	// void ResetIgnoreMoveInput();                                                                                             // [0x32e4170] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.ResetIgnoreLookInput
	// void ResetIgnoreLookInput();                                                                                             // [0x32e4150] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.ResetIgnoreInputFlags
	// void ResetIgnoreInputFlags();                                                                                            // [0x32e4130] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.ReceiveUnPossess
	// void ReceiveUnPossess(class APawn* UnpossessedPawn);                                                                     // [0x198a600] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.Controller.ReceivePossess
	// void ReceivePossess(class APawn* PossessedPawn);                                                                         // [0x198a600] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.Controller.ReceiveInstigatedAnyDamage
	// void ReceiveInstigatedAnyDamage(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser); // [0x198a600] BlueprintAuthorityOnly|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.Controller.Possess
	// void Possess(class APawn* InPawn);                                                                                       // [0x32e40a0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.OnRep_PlayerState
	// void OnRep_PlayerState();                                                                                                // [0x32e4080] Native|Public        
	// Function /Script/Engine.Controller.OnRep_Pawn
	// void OnRep_Pawn();                                                                                                       // [0x32e4060] Native|Public        
	// Function /Script/Engine.Controller.LineOfSightTo
	// bool LineOfSightTo(class AActor* Other, FVector ViewPoint, bool bAlternateChecks);                                       // [0x32e3f30] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.K2_GetPawn
	// class APawn* K2_GetPawn();                                                                                               // [0x32e3f00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsPlayerController
	// bool IsPlayerController();                                                                                               // [0x32e3ed0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsMoveInputIgnored
	// bool IsMoveInputIgnored();                                                                                               // [0x32e3ea0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsLookInputIgnored
	// bool IsLookInputIgnored();                                                                                               // [0x32e3e70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsLocalPlayerController
	// bool IsLocalPlayerController();                                                                                          // [0x32e3e20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsLocalController
	// bool IsLocalController();                                                                                                // [0x32e3df0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.GetViewTarget
	// class AActor* GetViewTarget();                                                                                           // [0x32e3dc0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.GetDesiredRotation
	// FRotator GetDesiredRotation();                                                                                           // [0x32e3b20] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.GetControlRotation
	// FRotator GetControlRotation();                                                                                           // [0x32e3ae0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.ClientSetRotation
	// void ClientSetRotation(FRotator NewRotation, bool bResetCamera);                                                         // [0x32e39b0] Net|NetReliableNative|Event|Public|HasDefaults|NetClient|NetValidate 
	// Function /Script/Engine.Controller.ClientSetLocation
	// void ClientSetLocation(FVector NewLocation, FRotator NewRotation);                                                       // [0x32e3870] Net|NetReliableNative|Event|Public|HasDefaults|NetClient|NetValidate 
	// Function /Script/Engine.Controller.CastToPlayerController
	// class APlayerController* CastToPlayerController();                                                                       // [0x32e3840] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.ActiveForceFeedbackEffect
/// Size: 0x0018 (0x000000 - 0x000018)
class FActiveForceFeedbackEffect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UForceFeedbackEffect*)               ForceFeedbackEffect                                         OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/Engine.PlayerController
/// Size: 0x02D8 (0x000298 - 0x000570)
class APlayerController : public AController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1392;

public:
	CMember(class UPlayer*)                            Player                                                      OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class APawn*)                              AcknowledgedPawn                                            OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(class UInterpTrackInstDirector*)           ControllingDirTrackInst                                     OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(class AHUD*)                               MyHUD                                                       OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(class APlayerCameraManager*)               PlayerCameraManager                                         OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(class UClass*)                             PlayerCameraManagerClass                                    OFFSET(get<T>, {0x2C0, 8, 0, 0})
	DMember(bool)                                      bAutoManageActiveCameraTarget                               OFFSET(get<bool>, {0x2C8, 1, 0, 0})
	SMember(FRotator)                                  TargetViewRotation                                          OFFSET(getStruct<T>, {0x2CC, 12, 0, 0})
	DMember(float)                                     SmoothTargetViewRotationSpeed                               OFFSET(get<float>, {0x2E4, 4, 0, 0})
	CMember(TArray<class AActor*>)                     HiddenActors                                                OFFSET(get<T>, {0x2F0, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<UPrimitiveComponent*>>) HiddenPrimitiveComponents                                OFFSET(get<T>, {0x300, 16, 0, 0})
	DMember(float)                                     LastSpectatorStateSynchTime                                 OFFSET(get<float>, {0x314, 4, 0, 0})
	SMember(FVector)                                   LastSpectatorSyncLocation                                   OFFSET(getStruct<T>, {0x318, 12, 0, 0})
	SMember(FRotator)                                  LastSpectatorSyncRotation                                   OFFSET(getStruct<T>, {0x324, 12, 0, 0})
	DMember(int32_t)                                   ClientCap                                                   OFFSET(get<int32_t>, {0x330, 4, 0, 0})
	CMember(class UCheatManager*)                      CheatManager                                                OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UClass*)                             CheatClass                                                  OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UPlayerInput*)                       PlayerInput                                                 OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(TArray<FActiveForceFeedbackEffect>)        ActiveForceFeedbackEffects                                  OFFSET(get<T>, {0x350, 16, 0, 0})
	DMember(bool)                                      bPlayerIsWaiting                                            OFFSET(get<bool>, {0x3D0, 1, 1, 4})
	DMember(char)                                      NetPlayerIndex                                              OFFSET(get<char>, {0x3D4, 1, 0, 0})
	CMember(class UNetConnection*)                     PendingSwapConnection                                       OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class UNetConnection*)                     NetConnection                                               OFFSET(get<T>, {0x418, 8, 0, 0})
	DMember(float)                                     InputYawScale                                               OFFSET(get<float>, {0x42C, 4, 0, 0})
	DMember(float)                                     InputPitchScale                                             OFFSET(get<float>, {0x430, 4, 0, 0})
	DMember(float)                                     InputRollScale                                              OFFSET(get<float>, {0x434, 4, 0, 0})
	DMember(bool)                                      bShowMouseCursor                                            OFFSET(get<bool>, {0x438, 1, 1, 0})
	DMember(bool)                                      bEnableClickEvents                                          OFFSET(get<bool>, {0x438, 1, 1, 1})
	DMember(bool)                                      bEnableTouchEvents                                          OFFSET(get<bool>, {0x438, 1, 1, 2})
	DMember(bool)                                      bEnableMouseOverEvents                                      OFFSET(get<bool>, {0x438, 1, 1, 3})
	DMember(bool)                                      bEnableTouchOverEvents                                      OFFSET(get<bool>, {0x438, 1, 1, 4})
	DMember(bool)                                      bForceFeedbackEnabled                                       OFFSET(get<bool>, {0x438, 1, 1, 5})
	DMember(float)                                     ForceFeedbackScale                                          OFFSET(get<float>, {0x43C, 4, 0, 0})
	CMember(TArray<FKey>)                              ClickEventKeys                                              OFFSET(get<T>, {0x440, 16, 0, 0})
	CMember(TEnumAsByte<EMouseCursor>)                 DefaultMouseCursor                                          OFFSET(get<T>, {0x450, 1, 0, 0})
	CMember(TEnumAsByte<EMouseCursor>)                 CurrentMouseCursor                                          OFFSET(get<T>, {0x451, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            DefaultClickTraceChannel                                    OFFSET(get<T>, {0x452, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            CurrentClickTraceChannel                                    OFFSET(get<T>, {0x453, 1, 0, 0})
	DMember(float)                                     HitResultTraceDistance                                      OFFSET(get<float>, {0x454, 4, 0, 0})
	DMember(uint16_t)                                  SeamlessTravelCount                                         OFFSET(get<uint16_t>, {0x458, 2, 0, 0})
	DMember(uint16_t)                                  LastCompletedSeamlessTravelCount                            OFFSET(get<uint16_t>, {0x45A, 2, 0, 0})
	CMember(class UInputComponent*)                    InactiveStateInputComponent                                 OFFSET(get<T>, {0x4D0, 8, 0, 0})
	DMember(bool)                                      bShouldPerformFullTickWhenPaused                            OFFSET(get<bool>, {0x4D8, 1, 1, 2})
	CMember(class UTouchInterface*)                    CurrentTouchInterface                                       OFFSET(get<T>, {0x4F0, 8, 0, 0})
	CMember(class ASpectatorPawn*)                     SpectatorPawn                                               OFFSET(get<T>, {0x548, 8, 0, 0})
	DMember(bool)                                      bIsLocalPlayerController                                    OFFSET(get<bool>, {0x554, 1, 0, 0})
	SMember(FVector)                                   SpawnLocation                                               OFFSET(getStruct<T>, {0x558, 12, 0, 0})


	/// Functions
	// Function /Script/Engine.PlayerController.WasInputKeyJustReleased
	// bool WasInputKeyJustReleased(FKey Key);                                                                                  // [0x33c7d70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.WasInputKeyJustPressed
	// bool WasInputKeyJustPressed(FKey Key);                                                                                   // [0x33c7c80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.ToggleSpeaking
	// void ToggleSpeaking(bool bInSpeaking);                                                                                   // [0x33c7bf0] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.TestServerLevelVisibilityChange
	// void TestServerLevelVisibilityChange(FName PackageName, FName Filename);                                                 // [0x33c7b20] Final|Exec|Native|Private 
	// Function /Script/Engine.PlayerController.SwitchLevel
	// void SwitchLevel(FString URL);                                                                                           // [0x33c7a80] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.StopHapticEffect
	// void StopHapticEffect(EControllerHand Hand);                                                                             // [0x33c79e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.StartFire
	// void StartFire(char FireModeNum);                                                                                        // [0x33c6f90] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.SetVirtualJoystickVisibility
	// void SetVirtualJoystickVisibility(bool bVisible);                                                                        // [0x33c69a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetViewTargetWithBlend
	// void SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing); // [0x33c6800] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetName
	// void SetName(FString S);                                                                                                 // [0x33c6760] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.SetMouseLocation
	// void SetMouseLocation(int32_t X, int32_t Y);                                                                             // [0x33c6690] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetMouseCursorWidget
	// void SetMouseCursorWidget(TEnumAsByte<EMouseCursor> Cursor, class UUserWidget* CursorWidget);                            // [0x33c65c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetHapticsByValue
	// void SetHapticsByValue(float Frequency, float Amplitude, EControllerHand Hand);                                          // [0x33c6380] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetDisableHaptics
	// void SetDisableHaptics(bool bNewDisabled);                                                                               // [0x33c62d0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetControllerLightColor
	// void SetControllerLightColor(FColor Color);                                                                              // [0x33c6250] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetCinematicMode
	// void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // [0x33c6070] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetAudioListenerOverride
	// void SetAudioListenerOverride(class USceneComponent* AttachToComponent, FVector Location, FRotator Rotation);            // [0x33c5f40] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetAudioListenerAttenuationOverride
	// void SetAudioListenerAttenuationOverride(class USceneComponent* AttachToComponent, FVector AttenuationLocationOVerride); // [0x33c5e60] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ServerViewSelf
	// void ServerViewSelf(FViewTargetTransitionParams TransitionParams);                                                       // [0x33c5d70] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerViewPrevPlayer
	// void ServerViewPrevPlayer();                                                                                             // [0x33c5d20] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerViewNextPlayer
	// void ServerViewNextPlayer();                                                                                             // [0x33c5cd0] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerVerifyViewTarget
	// void ServerVerifyViewTarget();                                                                                           // [0x33c5c80] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerUpdateMultipleLevelsVisibility
	// void ServerUpdateMultipleLevelsVisibility(TArray<FUpdateLevelVisibilityLevelInfo> LevelVisibilities);                    // [0x33c5bc0] Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerUpdateLevelVisibility
	// void ServerUpdateLevelVisibility(FUpdateLevelVisibilityLevelInfo LevelVisibility);                                       // [0x33c5b00] Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerUpdateCamera
	// void ServerUpdateCamera(FVector_NetQuantize CamLoc, int32_t CamPitchAndYaw);                                             // [0x33c59d0] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerUnmutePlayer
	// void ServerUnmutePlayer(FUniqueNetIdRepl PlayerId);                                                                      // [0x33c5870] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerToggleAILogging
	// void ServerToggleAILogging();                                                                                            // [0x33c5820] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerShortTimeout
	// void ServerShortTimeout();                                                                                               // [0x33c57d0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerSetSpectatorWaiting
	// void ServerSetSpectatorWaiting(bool bWaiting);                                                                           // [0x33c5710] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerSetSpectatorLocation
	// void ServerSetSpectatorLocation(FVector NewLoc, FRotator NewRot);                                                        // [0x33c55d0] Net|Native|Event|Public|NetServer|HasDefaults|NetValidate 
	// Function /Script/Engine.PlayerController.ServerRestartPlayer
	// void ServerRestartPlayer();                                                                                              // [0x33c5580] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerPause
	// void ServerPause();                                                                                                      // [0x33c5530] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerNotifyLoadedWorld
	// void ServerNotifyLoadedWorld(FName WorldPackageName);                                                                    // [0x33c5470] Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerMutePlayer
	// void ServerMutePlayer(FUniqueNetIdRepl PlayerId);                                                                        // [0x33c5310] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerExecRPC
	// void ServerExecRPC(FString Msg);                                                                                         // [0x33c5250] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerExec
	// void ServerExec(FString Msg);                                                                                            // [0x33c51b0] Final|Exec|Native|Public 
	// Function /Script/Engine.PlayerController.ServerCheckClientPossessionReliable
	// void ServerCheckClientPossessionReliable();                                                                              // [0x33c5160] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerCheckClientPossession
	// void ServerCheckClientPossession();                                                                                      // [0x33c5110] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerChangeName
	// void ServerChangeName(FString S);                                                                                        // [0x33c5050] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerCamera
	// void ServerCamera(FName NewMode);                                                                                        // [0x33c4f90] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerAcknowledgePossession
	// void ServerAcknowledgePossession(class APawn* P);                                                                        // [0x33c4ed0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.SendToConsole
	// void SendToConsole(FString Command);                                                                                     // [0x33c4e30] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.RestartLevel
	// void RestartLevel();                                                                                                     // [0x33c4e10] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.ResetControllerLightColor
	// void ResetControllerLightColor();                                                                                        // [0x33c4df0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ProjectWorldLocationToScreen
	// bool ProjectWorldLocationToScreen(FVector WorldLocation, FVector2D& ScreenLocation, bool bPlayerViewportRelative);       // [0x33c4b80] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.PlayHapticEffect
	// void PlayHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, EControllerHand Hand, float Scale, bool bLoop);    // [0x33c4a20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.PlayDynamicForceFeedback
	// void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction> Action, FLatentActionInfo LatentInfo); // [0x33c4770] Final|Native|Private|BlueprintCallable 
	// Function /Script/Engine.PlayerController.Pause
	// void Pause();                                                                                                            // [0x33c42b0] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.OnServerStartedVisualLogger
	// void OnServerStartedVisualLogger(bool bIsLogging);                                                                       // [0x33c4220] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.LocalTravel
	// void LocalTravel(FString URL);                                                                                           // [0x33c4180] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.K2_ClientPlayForceFeedback
	// void K2_ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused); // [0x33c3fc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.IsInputKeyDown
	// bool IsInputKeyDown(FKey Key);                                                                                           // [0x33c3ed0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetViewportSize
	// void GetViewportSize(int32_t& SizeX, int32_t& SizeY);                                                                    // [0x33c3df0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetSpectatorPawn
	// class ASpectatorPawn* GetSpectatorPawn();                                                                                // [0x33c3dd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetMousePosition
	// bool GetMousePosition(float& LocationX, float& LocationY);                                                               // [0x33c3cb0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputVectorKeyState
	// FVector GetInputVectorKeyState(FKey Key);                                                                                // [0x33c3ba0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputTouchState
	// void GetInputTouchState(TEnumAsByte<ETouchIndex> FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // [0x33c3a10] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputMouseDelta
	// void GetInputMouseDelta(float& DeltaX, float& DeltaY);                                                                   // [0x33c3930] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputMotionState
	// void GetInputMotionState(FVector& Tilt, FVector& RotationRate, FVector& Gravity, FVector& Acceleration);                 // [0x33c37a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputKeyTimeDown
	// float GetInputKeyTimeDown(FKey Key);                                                                                     // [0x33c36a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputAnalogStickState
	// void GetInputAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float& StickX, float& StickY);             // [0x33c3570] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputAnalogKeyState
	// float GetInputAnalogKeyState(FKey Key);                                                                                  // [0x33c3470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHUD
	// class AHUD* GetHUD();                                                                                                    // [0x33c2a40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderFingerForObjects
	// bool GetHitResultUnderFingerForObjects(TEnumAsByte<ETouchIndex> FingerIndex, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, FHitResult& HitResult); // [0x33c32a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderFingerByChannel
	// bool GetHitResultUnderFingerByChannel(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, FHitResult& HitResult); // [0x33c30f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderFinger
	// bool GetHitResultUnderFinger(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, FHitResult& HitResult); // [0x33c2f40] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderCursorForObjects
	// bool GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, FHitResult& HitResult); // [0x33c2db0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderCursorByChannel
	// bool GetHitResultUnderCursorByChannel(TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, FHitResult& HitResult); // [0x33c2c10] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderCursor
	// bool GetHitResultUnderCursor(TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, FHitResult& HitResult);    // [0x33c2a70] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetFocalLocation
	// FVector GetFocalLocation();                                                                                              // [0x33c2a00] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.FOV
	// void FOV(float NewFOV);                                                                                                  // [0x33c2850] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.EnableCheats
	// void EnableCheats();                                                                                                     // [0x33c2830] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.DeprojectScreenPositionToWorld
	// bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, FVector& WorldLocation, FVector& WorldDirection);      // [0x33c26a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.DeprojectMousePositionToWorld
	// bool DeprojectMousePositionToWorld(FVector& WorldLocation, FVector& WorldDirection);                                     // [0x33c25a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.ConsoleKey
	// void ConsoleKey(FKey Key);                                                                                               // [0x33c24b0] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.ClientWasKicked
	// void ClientWasKicked(FText KickReason);                                                                                  // [0x33c23f0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientVoiceHandshakeComplete
	// void ClientVoiceHandshakeComplete();                                                                                     // [0x33c23d0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus
	// void ClientUpdateMultipleLevelsStreamingStatus(TArray<FUpdateLevelStreamingLevelStatus> LevelStatuses);                  // [0x33c2330] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientUpdateLevelStreamingStatus
	// void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32_t LODIndex); // [0x33c2170] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientUnmutePlayer
	// void ClientUnmutePlayer(FUniqueNetIdRepl PlayerId);                                                                      // [0x33c2050] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientTravelInternal
	// void ClientTravelInternal(FString URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, FGuid MapPackageGuid);       // [0x33c1ed0] Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.PlayerController.ClientTravel
	// void ClientTravel(FString URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, FGuid MapPackageGuid);               // [0x33c1d50] Final|Native|Public|HasDefaults 
	// Function /Script/Engine.PlayerController.ClientTeamMessage
	// void ClientTeamMessage(class APlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);                 // [0x33c1be0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientStopForceFeedback
	// void ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, FName Tag);                                // [0x33c1b10] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientStopCameraShakesFromSource
	// void ClientStopCameraShakesFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately);            // [0x33c1a40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientStopCameraShake
	// void ClientStopCameraShake(class UClass* Shake, bool bImmediately);                                                      // [0x33c1970] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientStopCameraAnim
	// void ClientStopCameraAnim(class UCameraAnim* AnimToStop);                                                                // [0x33c18e0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientStartOnlineSession
	// void ClientStartOnlineSession();                                                                                         // [0x33c18c0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientStartCameraShakeFromSource
	// void ClientStartCameraShakeFromSource(class UClass* Shake, class UCameraShakeSourceComponent* SourceComponent);          // [0x33c17f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientStartCameraShake
	// void ClientStartCameraShake(class UClass* Shake, float Scale, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot); // [0x33c1680] Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientSpawnCameraLensEffect
	// void ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass);                                                  // [0x33c15f0] Net|Native|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientSetViewTarget
	// void ClientSetViewTarget(class AActor* A, FViewTargetTransitionParams TransitionParams);                                 // [0x33c14f0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetSpectatorWaiting
	// void ClientSetSpectatorWaiting(bool bWaiting);                                                                           // [0x33c1460] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetHUD
	// void ClientSetHUD(class UClass* NewHUDClass);                                                                            // [0x33c13d0] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientSetForceMipLevelsToBeResident
	// void ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int32_t CinematicTextureGroups); // [0x33c12c0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetCinematicMode
	// void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);       // [0x33c1140] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetCameraMode
	// void ClientSetCameraMode(FName NewCamMode);                                                                              // [0x33c10b0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetCameraFade
	// void ClientSetCameraFade(bool bEnableFading, FColor FadeColor, FVector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished); // [0x33c0ea0] Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetBlockOnAsyncLoading
	// void ClientSetBlockOnAsyncLoading();                                                                                     // [0x33c0e80] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientReturnToMainMenuWithTextReason
	// void ClientReturnToMainMenuWithTextReason(FText ReturnReason);                                                           // [0x33c0dc0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientReturnToMainMenu
	// void ClientReturnToMainMenu(FString ReturnReason);                                                                       // [0x33c0d20] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientRetryClientRestart
	// void ClientRetryClientRestart(class APawn* NewPawn);                                                                     // [0xb4b370] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientRestart
	// void ClientRestart(class APawn* NewPawn);                                                                                // [0x33c0c90] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientReset
	// void ClientReset();                                                                                                      // [0x33c0c70] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientRepObjRef
	// void ClientRepObjRef(class UObject* Object);                                                                             // [0x33c0be0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientReceiveLocalizedMessage
	// void ClientReceiveLocalizedMessage(class UClass* Message, int32_t Switch, class APlayerState* RelatedPlayerState, class APlayerState* RelatedPlayerState, class UObject* OptionalObject); // [0x33c0a40] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientPrestreamTextures
	// void ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32_t CinematicTextureGroups); // [0x33c08e0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientPrepareMapChange
	// void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);                                                   // [0x33c07c0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientPlaySoundAtLocation
	// void ClientPlaySoundAtLocation(class USoundBase* Sound, FVector Location, float VolumeMultiplier, float PitchMultiplier); // [0x33c0650] Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.PlayerController.ClientPlaySound
	// void ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);                            // [0x33c0540] Net|Native|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientPlayForceFeedback_Internal
	// void ClientPlayForceFeedback_Internal(class UForceFeedbackEffect* ForceFeedbackEffect, FForceFeedbackParameters Params); // [0x33c0450] Final|Net|Native|Event|Private|NetClient 
	// Function /Script/Engine.PlayerController.ClientPlayCameraAnim
	// void ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, ECameraShakePlaySpace Space, FRotator CustomPlaySpace); // [0x33c0180] Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientMutePlayer
	// void ClientMutePlayer(FUniqueNetIdRepl PlayerId);                                                                        // [0x33c0060] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientMessage
	// void ClientMessage(FString S, FName Type, float MsgLifeTime);                                                            // [0x33bff30] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientIgnoreMoveInput
	// void ClientIgnoreMoveInput(bool bIgnore);                                                                                // [0x33bfea0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientIgnoreLookInput
	// void ClientIgnoreLookInput(bool bIgnore);                                                                                // [0x33bfe10] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientGotoState
	// void ClientGotoState(FName NewState);                                                                                    // [0x33bfd80] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientGameEnded
	// void ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner);                                                        // [0x33bfcb0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientForceGarbageCollection
	// void ClientForceGarbageCollection();                                                                                     // [0x33bfc90] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientFlushLevelStreaming
	// void ClientFlushLevelStreaming();                                                                                        // [0x33bfc70] Final|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientEndOnlineSession
	// void ClientEndOnlineSession();                                                                                           // [0x33bfc50] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientEnableNetworkVoice
	// void ClientEnableNetworkVoice(bool bEnable);                                                                             // [0x33bfbc0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientCommitMapChange
	// void ClientCommitMapChange();                                                                                            // [0x33bfba0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientClearCameraLensEffects
	// void ClientClearCameraLensEffects();                                                                                     // [0x1244ca0] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientCapBandwidth
	// void ClientCapBandwidth(int32_t Cap);                                                                                    // [0x33bfb10] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientCancelPendingMapChange
	// void ClientCancelPendingMapChange();                                                                                     // [0x33bfaf0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientAddTextureStreamingLoc
	// void ClientAddTextureStreamingLoc(FVector InLoc, float Duration, bool bOverrideLocation);                                // [0x33bf9c0] Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.PlayerController.ClearAudioListenerOverride
	// void ClearAudioListenerOverride();                                                                                       // [0x33bf9a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClearAudioListenerAttenuationOverride
	// void ClearAudioListenerAttenuationOverride();                                                                            // [0x33bf980] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.CanRestartPlayer
	// bool CanRestartPlayer();                                                                                                 // [0x33bf950] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.Camera
	// void Camera(FName NewMode);                                                                                              // [0x33bf8c0] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.AddYawInput
	// void AddYawInput(float Val);                                                                                             // [0x33bf830] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.AddRollInput
	// void AddRollInput(float Val);                                                                                            // [0x33bf7a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.AddPitchInput
	// void AddPitchInput(float Val);                                                                                           // [0x33bf710] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ActivateTouchInterface
	// void ActivateTouchInterface(class UTouchInterface* NewTouchInterface);                                                   // [0x33bf540] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.Player
/// Size: 0x0020 (0x000028 - 0x000048)
class UPlayer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class APlayerController*)                  PlayerController                                            OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(int32_t)                                   CurrentNetSpeed                                             OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   ConfiguredInternetSpeed                                     OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(int32_t)                                   ConfiguredLanSpeed                                          OFFSET(get<int32_t>, {0x40, 4, 0, 0})
};

/// Class /Script/Engine.LocalPlayer
/// Size: 0x0210 (0x000048 - 0x000258)
class ULocalPlayer : public UPlayer
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
	CMember(class UGameViewportClient*)                ViewportClient                                              OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(TEnumAsByte<EAspectRatioAxisConstraint>)   AspectRatioAxisConstraint                                   OFFSET(get<T>, {0x94, 1, 0, 0})
	CMember(class UClass*)                             PendingLevelPlayerControllerClass                           OFFSET(get<T>, {0x98, 8, 0, 0})
	DMember(bool)                                      bSentSplitJoin                                              OFFSET(get<bool>, {0xA0, 1, 1, 0})
	DMember(int32_t)                                   ControllerId                                                OFFSET(get<int32_t>, {0xB8, 4, 0, 0})
};

/// Class /Script/Engine.LocalPlayerSubsystem
/// Size: 0x0000 (0x000030 - 0x000030)
class ULocalPlayerSubsystem : public USubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.AssetImportData
/// Size: 0x0000 (0x000028 - 0x000028)
class UAssetImportData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AssetUserData
/// Size: 0x0000 (0x000028 - 0x000028)
class UAssetUserData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Engine.SingleAnimationPlayData
/// Size: 0x0018 (0x000000 - 0x000018)
class FSingleAnimationPlayData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UAnimationAsset*)                    AnimToPlay                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bSavedLooping                                               OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      bSavedPlaying                                               OFFSET(get<bool>, {0x8, 1, 1, 1})
	DMember(float)                                     SavedPosition                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     SavedPlayRate                                               OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Class /Script/Engine.SkeletalMeshComponent
/// Size: 0x0840 (0x0006C0 - 0x000F00)
class USkeletalMeshComponent : public USkinnedMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3840;

public:
	CMember(class UAnimBlueprintGeneratedClass*)       AnimBlueprintGeneratedClass                                 OFFSET(get<T>, {0x6C0, 8, 0, 0})
	CMember(class UClass*)                             AnimClass                                                   OFFSET(get<T>, {0x6C8, 8, 0, 0})
	CMember(class UAnimInstance*)                      AnimScriptInstance                                          OFFSET(get<T>, {0x6D0, 8, 0, 0})
	CMember(class UAnimInstance*)                      PostProcessAnimInstance                                     OFFSET(get<T>, {0x6D8, 8, 0, 0})
	SMember(FSingleAnimationPlayData)                  AnimationData                                               OFFSET(getStruct<T>, {0x6E0, 24, 0, 0})
	SMember(FVector)                                   RootBoneTranslation                                         OFFSET(getStruct<T>, {0x708, 12, 0, 0})
	SMember(FVector)                                   LineCheckBoundsScale                                        OFFSET(getStruct<T>, {0x714, 12, 0, 0})
	CMember(TArray<class UAnimInstance*>)              LinkedInstances                                             OFFSET(get<T>, {0x750, 16, 0, 0})
	CMember(TArray<FTransform>)                        CachedBoneSpaceTransforms                                   OFFSET(get<T>, {0x760, 16, 0, 0})
	CMember(TArray<FTransform>)                        CachedComponentSpaceTransforms                              OFFSET(get<T>, {0x770, 16, 0, 0})
	DMember(float)                                     GlobalAnimRateScale                                         OFFSET(get<float>, {0x8D0, 4, 0, 0})
	CMember(TEnumAsByte<EKinematicBonesUpdateToPhysics>) KinematicBonesUpdateType                                  OFFSET(get<T>, {0x8D4, 1, 0, 0})
	CMember(TEnumAsByte<EPhysicsTransformUpdateMode>)  PhysicsTransformUpdateMode                                  OFFSET(get<T>, {0x8D5, 1, 0, 0})
	CMember(TEnumAsByte<EAnimationMode>)               AnimationMode                                               OFFSET(get<T>, {0x8D7, 1, 0, 0})
	DMember(bool)                                      bDisablePostProcessBlueprint                                OFFSET(get<bool>, {0x8D9, 1, 1, 0})
	DMember(bool)                                      bUpdateOverlapsOnAnimationFinalize                          OFFSET(get<bool>, {0x8D9, 1, 1, 2})
	DMember(bool)                                      bHasValidBodies                                             OFFSET(get<bool>, {0x8D9, 1, 1, 4})
	DMember(bool)                                      bBlendPhysics                                               OFFSET(get<bool>, {0x8D9, 1, 1, 5})
	DMember(bool)                                      bEnablePhysicsOnDedicatedServer                             OFFSET(get<bool>, {0x8D9, 1, 1, 6})
	DMember(bool)                                      bUpdateJointsFromAnimation                                  OFFSET(get<bool>, {0x8D9, 1, 1, 7})
	DMember(bool)                                      bDisableClothSimulation                                     OFFSET(get<bool>, {0x8DA, 1, 1, 0})
	DMember(bool)                                      bDisableRigidBodyAnimNode                                   OFFSET(get<bool>, {0x8E0, 1, 1, 1})
	DMember(bool)                                      bAllowAnimCurveEvaluation                                   OFFSET(get<bool>, {0x8E0, 1, 1, 2})
	DMember(bool)                                      bDisableAnimCurves                                          OFFSET(get<bool>, {0x8E0, 1, 1, 3})
	DMember(bool)                                      bCollideWithEnvironment                                     OFFSET(get<bool>, {0x8E0, 1, 1, 7})
	DMember(bool)                                      bCollideWithAttachedChildren                                OFFSET(get<bool>, {0x8E1, 1, 1, 0})
	DMember(bool)                                      bLocalSpaceSimulation                                       OFFSET(get<bool>, {0x8E1, 1, 1, 1})
	DMember(bool)                                      bResetAfterTeleport                                         OFFSET(get<bool>, {0x8E1, 1, 1, 2})
	DMember(bool)                                      bDeferKinematicBoneUpdate                                   OFFSET(get<bool>, {0x8E1, 1, 1, 4})
	DMember(bool)                                      bNoSkeletonUpdate                                           OFFSET(get<bool>, {0x8E1, 1, 1, 5})
	DMember(bool)                                      bPauseAnims                                                 OFFSET(get<bool>, {0x8E1, 1, 1, 6})
	DMember(bool)                                      bUseRefPoseOnInitAnim                                       OFFSET(get<bool>, {0x8E1, 1, 1, 7})
	DMember(bool)                                      bEnablePerPolyCollision                                     OFFSET(get<bool>, {0x8E2, 1, 1, 0})
	DMember(bool)                                      bForceRefpose                                               OFFSET(get<bool>, {0x8E2, 1, 1, 1})
	DMember(bool)                                      bOnlyAllowAutonomousTickPose                                OFFSET(get<bool>, {0x8E2, 1, 1, 2})
	DMember(bool)                                      bIsAutonomousTickPose                                       OFFSET(get<bool>, {0x8E2, 1, 1, 3})
	DMember(bool)                                      bOldForceRefPose                                            OFFSET(get<bool>, {0x8E2, 1, 1, 4})
	DMember(bool)                                      bShowPrePhysBones                                           OFFSET(get<bool>, {0x8E2, 1, 1, 5})
	DMember(bool)                                      bRequiredBonesUpToDate                                      OFFSET(get<bool>, {0x8E2, 1, 1, 6})
	DMember(bool)                                      bAnimTreeInitialised                                        OFFSET(get<bool>, {0x8E2, 1, 1, 7})
	DMember(bool)                                      bIncludeComponentLocationIntoBounds                         OFFSET(get<bool>, {0x8E3, 1, 1, 0})
	DMember(bool)                                      bEnableLineCheckWithBounds                                  OFFSET(get<bool>, {0x8E3, 1, 1, 1})
	DMember(bool)                                      bUseBendingElements                                         OFFSET(get<bool>, {0x8E3, 1, 1, 2})
	DMember(bool)                                      bUseTetrahedralConstraints                                  OFFSET(get<bool>, {0x8E3, 1, 1, 3})
	DMember(bool)                                      bUseThinShellVolumeConstraints                              OFFSET(get<bool>, {0x8E3, 1, 1, 4})
	DMember(bool)                                      bUseSelfCollisions                                          OFFSET(get<bool>, {0x8E3, 1, 1, 5})
	DMember(bool)                                      bUseContinuousCollisionDetection                            OFFSET(get<bool>, {0x8E3, 1, 1, 6})
	DMember(bool)                                      bPropagateCurvesToSlaves                                    OFFSET(get<bool>, {0x8E3, 1, 1, 7})
	DMember(bool)                                      bSkipKinematicUpdateWhenInterpolating                       OFFSET(get<bool>, {0x8E4, 1, 1, 0})
	DMember(bool)                                      bSkipBoundsUpdateWhenInterpolating                          OFFSET(get<bool>, {0x8E4, 1, 1, 1})
	DMember(bool)                                      bNeedsQueuedAnimEventsDispatched                            OFFSET(get<bool>, {0x8E4, 1, 1, 4})
	DMember(uint16_t)                                  CachedAnimCurveUidVersion                                   OFFSET(get<uint16_t>, {0x8E6, 2, 0, 0})
	CMember(EClothMassMode)                            MassMode                                                    OFFSET(get<T>, {0x8E8, 1, 0, 0})
	DMember(float)                                     UniformMass                                                 OFFSET(get<float>, {0x8EC, 4, 0, 0})
	DMember(float)                                     TotalMass                                                   OFFSET(get<float>, {0x8F0, 4, 0, 0})
	DMember(float)                                     Density                                                     OFFSET(get<float>, {0x8F4, 4, 0, 0})
	DMember(float)                                     MinPerParticleMass                                          OFFSET(get<float>, {0x8F8, 4, 0, 0})
	DMember(float)                                     ClothBlendWeight                                            OFFSET(get<float>, {0x8FC, 4, 0, 0})
	DMember(float)                                     EdgeStiffness                                               OFFSET(get<float>, {0x900, 4, 0, 0})
	DMember(float)                                     BendingStiffness                                            OFFSET(get<float>, {0x904, 4, 0, 0})
	DMember(float)                                     AreaStiffness                                               OFFSET(get<float>, {0x908, 4, 0, 0})
	DMember(float)                                     VolumeStiffness                                             OFFSET(get<float>, {0x90C, 4, 0, 0})
	DMember(float)                                     StrainLimitingStiffness                                     OFFSET(get<float>, {0x910, 4, 0, 0})
	DMember(float)                                     ShapeTargetStiffness                                        OFFSET(get<float>, {0x914, 4, 0, 0})
	DMember(bool)                                      bWaitForParallelClothTask                                   OFFSET(get<bool>, {0x918, 1, 0, 0})
	CMember(TArray<FName>)                             DisallowedAnimCurves                                        OFFSET(get<T>, {0x920, 16, 0, 0})
	CMember(class UBodySetup*)                         BodySetup                                                   OFFSET(get<T>, {0x930, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnConstraintBroken                                          OFFSET(getStruct<T>, {0x940, 16, 0, 0})
	CMember(class UClass*)                             ClothingSimulationFactory                                   OFFSET(get<T>, {0x950, 8, 0, 0})
	DMember(float)                                     TeleportDistanceThreshold                                   OFFSET(get<float>, {0xA28, 4, 0, 0})
	DMember(float)                                     TeleportRotationThreshold                                   OFFSET(get<float>, {0xA2C, 4, 0, 0})
	DMember(uint32_t)                                  LastPoseTickFrame                                           OFFSET(get<uint32_t>, {0xA38, 4, 0, 0})
	CMember(class UClothingSimulationInteractor*)      ClothingInteractor                                          OFFSET(get<T>, {0xA90, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAnimInitialized                                           OFFSET(getStruct<T>, {0xB60, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.SkeletalMeshComponent.UnlinkAnimClassLayers
	// void UnlinkAnimClassLayers(class UClass* InClass);                                                                       // [0x33ec8a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent
	// void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);                                                   // [0x33ec810] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ToggleDisablePostProcessBlueprint
	// void ToggleDisablePostProcessBlueprint();                                                                                // [0x33ec7f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.TermBodiesBelow
	// void TermBodiesBelow(FName ParentBoneName);                                                                              // [0x33ec760] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SuspendClothingSimulation
	// void SuspendClothingSimulation();                                                                                        // [0x33ec740] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.Stop
	// void Stop();                                                                                                             // [0x33ec720] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SnapshotPose
	// void SnapshotPose(FPoseSnapshot& Snapshot);                                                                              // [0x33ec650] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetUpdateClothInEditor
	// void SetUpdateClothInEditor(bool NewUpdateState);                                                                        // [0x16044e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor
	// void SetUpdateAnimationInEditor(bool NewUpdateState);                                                                    // [0x16044e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetTeleportRotationThreshold
	// void SetTeleportRotationThreshold(float Threshold);                                                                      // [0x33ec5d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold
	// void SetTeleportDistanceThreshold(float Threshold);                                                                      // [0x33ec550] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetPosition
	// void SetPosition(float InPos, bool bFireNotifies);                                                                       // [0x33ec470] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetPlayRate
	// void SetPlayRate(float Rate);                                                                                            // [0x33ec3f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetPhysicsBlendWeight
	// void SetPhysicsBlendWeight(float PhysicsBlendWeight);                                                                    // [0x33ec370] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow
	// void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);             // [0x33ec250] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetMorphTarget
	// void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);                                         // [0x33ec130] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetEnablePhysicsBlending
	// void SetEnablePhysicsBlending(bool bNewBlendPhysics);                                                                    // [0x33ec0a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow
	// void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);                           // [0x33ebf90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetEnableBodyGravity
	// void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);                                                          // [0x33ebec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint
	// void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);                                                         // [0x33ebe30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetDisableAnimCurves
	// void SetDisableAnimCurves(bool bInDisableAnimCurves);                                                                    // [0x33ebda0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetConstraintProfileForAll
	// void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);                                             // [0x33ebcd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetConstraintProfile
	// void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);                                  // [0x33ebbc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetClothMaxDistanceScale
	// void SetClothMaxDistanceScale(float Scale);                                                                              // [0x33ebb40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision
	// void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);                                 // [0x33eba70] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAnimClass
	// void SetAnimClass(class UClass* NewClass);                                                                               // [0x33eb8d0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAnimationMode
	// void SetAnimationMode(TEnumAsByte<EAnimationMode> InAnimationMode);                                                      // [0x33eb9f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAnimation
	// void SetAnimation(class UAnimationAsset* NewAnimToPlay);                                                                 // [0x33eb960] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAngularLimits
	// void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);          // [0x33eb770] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllowRigidBodyAnimNode
	// void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);                                                         // [0x33eb5a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation
	// void SetAllowedAnimCurvesEvaluation(TArray<FName>& list, bool bAllow);                                                   // [0x33eb670] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation
	// void SetAllowAnimCurveEvaluation(bool bInAllow);                                                                         // [0x33eb510] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive
	// void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);      // [0x33eb3e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive
	// void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);      // [0x33eb2b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams
	// void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);   // [0x33eb140] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics
	// void SetAllBodiesSimulatePhysics(bool bNewSimulate);                                                                     // [0x33eb0b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight
	// void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);                              // [0x33eafd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics
	// void SetAllBodiesBelowSimulatePhysics(FName& InBoneName, bool bNewSimulate, bool bIncludeSelf);                          // [0x33eaea0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight
	// void SetAllBodiesBelowPhysicsBlendWeight(FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf); // [0x33ead20] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResumeClothingSimulation
	// void ResumeClothingSimulation();                                                                                         // [0x33ead00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResetClothTeleportMode
	// void ResetClothTeleportMode();                                                                                           // [0x33eace0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics
	// void ResetAnimInstanceDynamics(ETeleportType InTeleportType);                                                            // [0x33eac60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResetAllowedAnimCurveEvaluation
	// void ResetAllowedAnimCurveEvaluation();                                                                                  // [0x33eac40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics
	// void ResetAllBodiesSimulatePhysics();                                                                                    // [0x33eac20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.PlayAnimation
	// void PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping);                                                 // [0x33eab50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.Play
	// void Play(bool bLooping);                                                                                                // [0x33eaac0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.OverrideAnimationData
	// void OverrideAnimationData(class UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate); // [0x33ea900] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.LinkAnimGraphByTag
	// void LinkAnimGraphByTag(FName InTag, class UClass* InClass);                                                             // [0x33ea830] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.LinkAnimClassLayers
	// void LinkAnimClassLayers(class UClass* InClass);                                                                         // [0x33ea7a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset
	// bool K2_GetClosestPointOnPhysicsAsset(FVector& WorldPosition, FVector& ClosestWorldPosition, FVector& Normal, FName& BoneName, float& Distance); // [0x33ea5a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.IsPlaying
	// bool IsPlaying();                                                                                                        // [0x33ea570] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.IsClothingSimulationSuspended
	// bool IsClothingSimulationSuspended();                                                                                    // [0x33ea540] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.IsBodyGravityEnabled
	// bool IsBodyGravityEnabled(FName BoneName);                                                                               // [0x33ea4a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.HasValidAnimationInstance
	// bool HasValidAnimationInstance();                                                                                        // [0x33ea470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetTeleportRotationThreshold
	// float GetTeleportRotationThreshold();                                                                                    // [0x33ea440] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold
	// float GetTeleportDistanceThreshold();                                                                                    // [0x33ea440] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetStringAttribute_Ref
	// bool GetStringAttribute_Ref(FName& BoneName, FName& AttributeName, FString& OutValue, ECustomBoneAttributeLookup LookupType); // [0x33ea280] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetStringAttribute
	// bool GetStringAttribute(FName& BoneName, FName& AttributeName, FString DefaultValue, FString& OutValue, ECustomBoneAttributeLookup LookupType); // [0x33ea050] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass
	// FVector GetSkeletalCenterOfMass();                                                                                       // [0x33ea010] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetPostProcessInstance
	// class UAnimInstance* GetPostProcessInstance();                                                                           // [0x33e9fe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetPosition
	// float GetPosition();                                                                                                     // [0x33e9fb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetPlayRate
	// float GetPlayRate();                                                                                                     // [0x33e9f80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetMorphTarget
	// float GetMorphTarget(FName MorphTargetName);                                                                             // [0x33e9ee0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByGroup
	// class UAnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);                                                   // [0x33e9e40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByClass
	// class UAnimInstance* GetLinkedAnimLayerInstanceByClass(class UClass* InClass);                                           // [0x33e9da0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstancesByTag
	// void GetLinkedAnimGraphInstancesByTag(FName InTag, TArray<UAnimInstance*>& OutLinkedInstances);                          // [0x33e9cb0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstanceByTag
	// class UAnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);                                                       // [0x33e9c10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetIntegerAttribute_Ref
	// bool GetIntegerAttribute_Ref(FName& BoneName, FName& AttributeName, int32_t& OutValue, ECustomBoneAttributeLookup LookupType); // [0x33e9a70] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetIntegerAttribute
	// bool GetIntegerAttribute(FName& BoneName, FName& AttributeName, int32_t DefaultValue, int32_t& OutValue, ECustomBoneAttributeLookup LookupType); // [0x33e9880] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetFloatAttribute_Ref
	// bool GetFloatAttribute_Ref(FName& BoneName, FName& AttributeName, float& OutValue, ECustomBoneAttributeLookup LookupType); // [0x33e96d0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetFloatAttribute
	// bool GetFloatAttribute(FName& BoneName, FName& AttributeName, float DefaultValue, float& OutValue, ECustomBoneAttributeLookup LookupType); // [0x33e94e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint
	// bool GetDisablePostProcessBlueprint();                                                                                   // [0x33e94b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetDisableAnimCurves
	// bool GetDisableAnimCurves();                                                                                             // [0x33e9480] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetCurrentJointAngles
	// void GetCurrentJointAngles(FName InBoneName, float& Swing1Angle, float& TwistAngle, float& Swing2Angle);                 // [0x33e9300] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetClothMaxDistanceScale
	// float GetClothMaxDistanceScale();                                                                                        // [0x33e92a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetClothingSimulationInteractor
	// class UClothingSimulationInteractor* GetClothingSimulationInteractor();                                                  // [0x33e92d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetBoneMass
	// float GetBoneMass(FName BoneName, bool bScaleMass);                                                                      // [0x33e91d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetAnimInstance
	// class UAnimInstance* GetAnimInstance();                                                                                  // [0x33e9170] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetAnimClass
	// class UClass* GetAnimClass();                                                                                            // [0x33e9140] Final|Native|Public  
	// Function /Script/Engine.SkeletalMeshComponent.GetAnimationMode
	// TEnumAsByte<EAnimationMode> GetAnimationMode();                                                                          // [0x33e91a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetAllowRigidBodyAnimNode
	// bool GetAllowRigidBodyAnimNode();                                                                                        // [0x33e90e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate
	// bool GetAllowedAnimCurveEvaluate();                                                                                      // [0x33e9110] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset
	// void ForceClothNextUpdateTeleportAndReset();                                                                             // [0x33e90c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport
	// void ForceClothNextUpdateTeleport();                                                                                     // [0x33e90a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.FindConstraintBoneName
	// FName FindConstraintBoneName(int32_t ConstraintIndex);                                                                   // [0x33e9010] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ClearMorphTargets
	// void ClearMorphTargets();                                                                                                // [0x33e8ff0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.BreakConstraint
	// void BreakConstraint(FVector Impulse, FVector HitLocation, FName InBoneName);                                            // [0x33e8ec0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent
	// void BindClothToMasterPoseComponent();                                                                                   // [0x33e8ea0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation
	// void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);                                                           // [0x33e8dd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow
	// void AddImpulseToAllBodiesBelow(FVector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);                    // [0x33e8c50] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow
	// void AddForceToAllBodiesBelow(FVector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);                      // [0x33e8ad0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight
	// void AccumulateAllBodiesBelowPhysicsBlendWeight(FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType); // [0x33e89b0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Struct /Script/Engine.AnimNotifyEventReference
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimNotifyEventReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UObject*)                            NotifySource                                                OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.AnimNotifyArray
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimNotifyArray : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FAnimNotifyEventReference>)         Notifies                                                    OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.AnimNotifyQueue
/// Size: 0x0070 (0x000000 - 0x000070)
class FAnimNotifyQueue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TArray<FAnimNotifyEventReference>)         AnimNotifies                                                OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TMap<FName, FAnimNotifyArray>)             UnfilteredMontageAnimNotifies                               OFFSET(get<T>, {0x20, 80, 0, 0})
};

/// Struct /Script/Engine.AnimLinkableElement
/// Size: 0x0030 (0x000000 - 0x000030)
class FAnimLinkableElement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UAnimMontage*)                       LinkedMontage                                               OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   SlotIndex                                                   OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   SegmentIndex                                                OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	CMember(TEnumAsByte<EAnimLinkMethod>)              LinkMethod                                                  OFFSET(get<T>, {0x18, 1, 0, 0})
	CMember(TEnumAsByte<EAnimLinkMethod>)              CachedLinkMethod                                            OFFSET(get<T>, {0x19, 1, 0, 0})
	DMember(float)                                     SegmentBeginTime                                            OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     SegmentLength                                               OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     LinkValue                                                   OFFSET(get<float>, {0x24, 4, 0, 0})
	CMember(class UAnimSequenceBase*)                  LinkedSequence                                              OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.AnimNotifyEvent
/// Size: 0x0088 (0x000030 - 0x0000B8)
class FAnimNotifyEvent : public FAnimLinkableElement
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(float)                                     DisplayTime                                                 OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     TriggerTimeOffset                                           OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     EndTriggerTimeOffset                                        OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     TriggerWeightThreshold                                      OFFSET(get<float>, {0x3C, 4, 0, 0})
	SMember(FName)                                     NotifyName                                                  OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	CMember(class UAnimNotify*)                        Notify                                                      OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UAnimNotifyState*)                   NotifyStateClass                                            OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x58, 4, 0, 0})
	SMember(FAnimLinkableElement)                      EndLink                                                     OFFSET(getStruct<T>, {0x60, 48, 0, 0})
	DMember(bool)                                      bConvertedFromBranchingPoint                                OFFSET(get<bool>, {0x90, 1, 0, 0})
	CMember(TEnumAsByte<EMontageNotifyTickType>)       MontageTickType                                             OFFSET(get<T>, {0x91, 1, 0, 0})
	DMember(float)                                     NotifyTriggerChance                                         OFFSET(get<float>, {0x94, 4, 0, 0})
	CMember(TEnumAsByte<ENotifyFilterType>)            NotifyFilterType                                            OFFSET(get<T>, {0x98, 1, 0, 0})
	DMember(int32_t)                                   NotifyFilterLOD                                             OFFSET(get<int32_t>, {0x9C, 4, 0, 0})
	DMember(bool)                                      bTriggerOnDedicatedServer                                   OFFSET(get<bool>, {0xA0, 1, 0, 0})
	DMember(bool)                                      bTriggerOnFollower                                          OFFSET(get<bool>, {0xA1, 1, 0, 0})
	DMember(int32_t)                                   TrackIndex                                                  OFFSET(get<int32_t>, {0xA4, 4, 0, 0})
};

/// Class /Script/Engine.AnimInstance
/// Size: 0x0298 (0x000028 - 0x0002C0)
class UAnimInstance : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	CMember(class USkeleton*)                          CurrentSkeleton                                             OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TEnumAsByte<ERootMotionMode>)              RootMotionMode                                              OFFSET(get<T>, {0x30, 1, 0, 0})
	DMember(bool)                                      bDisableRootMotionBlend                                     OFFSET(get<bool>, {0x31, 1, 0, 0})
	DMember(bool)                                      bUseMultiThreadedAnimationUpdate                            OFFSET(get<bool>, {0x32, 1, 1, 0})
	DMember(bool)                                      bUsingCopyPoseFromMesh                                      OFFSET(get<bool>, {0x32, 1, 1, 1})
	DMember(bool)                                      bReceiveNotifiesFromLinkedInstances                         OFFSET(get<bool>, {0x32, 1, 1, 4})
	DMember(bool)                                      bPropagateNotifiesToLinkedInstances                         OFFSET(get<bool>, {0x32, 1, 1, 5})
	DMember(bool)                                      bQueueMontageEvents                                         OFFSET(get<bool>, {0x32, 1, 1, 6})
	SMember(FMulticastInlineDelegate)                  OnMontageBlendingOut                                        OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMontageStarted                                            OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMontageEnded                                              OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAllMontageInstancesEnded                                  OFFSET(getStruct<T>, {0x68, 16, 0, 0})
	SMember(FAnimNotifyQueue)                          NotifyQueue                                                 OFFSET(getStruct<T>, {0x100, 112, 0, 0})
	CMember(TArray<FAnimNotifyEvent>)                  ActiveAnimNotifyState                                       OFFSET(get<T>, {0x170, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AnimInstance.UnlockAIResources
	// void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);                                                        // [0x32ab5c0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.UnlinkAnimClassLayers
	// void UnlinkAnimClassLayers(class UClass* InClass);                                                                       // [0x32acca0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.TryGetPawnOwner
	// class APawn* TryGetPawnOwner();                                                                                          // [0x32acc70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.StopSlotAnimation
	// void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);                                                        // [0x32acba0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SnapshotPose
	// void SnapshotPose(FPoseSnapshot& Snapshot);                                                                              // [0x32acad0] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SetRootMotionMode
	// void SetRootMotionMode(TEnumAsByte<ERootMotionMode> Value);                                                              // [0x32a0d50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SetReceiveNotifiesFromLinkedInstances
	// void SetReceiveNotifiesFromLinkedInstances(bool bSet);                                                                   // [0x32aca40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SetPropagateNotifiesToLinkedInstances
	// void SetPropagateNotifiesToLinkedInstances(bool bSet);                                                                   // [0x32ac9b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SetMorphTarget
	// void SetMorphTarget(FName MorphTargetName, float Value);                                                                 // [0x32ac8e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SavePoseSnapshot
	// void SavePoseSnapshot(FName SnapshotName);                                                                               // [0x32ac850] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.ResetDynamics
	// void ResetDynamics(ETeleportType InTeleportType);                                                                        // [0x32ac7d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage
	// class UAnimMontage* PlaySlotAnimationAsDynamicMontage(class UAnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // [0x32ac570] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.PlaySlotAnimation
	// float PlaySlotAnimation(class UAnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount); // [0x32ac3a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_StopGroupByName
	// void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);                                                     // [0x32ac2d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_Stop
	// void Montage_Stop(float InBlendOutTime, class UAnimMontage* Montage);                                                    // [0x32ac200] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_SetPosition
	// void Montage_SetPosition(class UAnimMontage* Montage, float NewPosition);                                                // [0x32ac130] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_SetPlayRate
	// void Montage_SetPlayRate(class UAnimMontage* Montage, float NewPlayRate);                                                // [0x32ac060] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_SetNextSection
	// void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, class UAnimMontage* Montage);                  // [0x32abf50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_Resume
	// void Montage_Resume(class UAnimMontage* Montage);                                                                        // [0x32abec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_Play
	// float Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // [0x32abd10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_Pause
	// void Montage_Pause(class UAnimMontage* Montage);                                                                         // [0x32abc80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_JumpToSectionsEnd
	// void Montage_JumpToSectionsEnd(FName SectionName, class UAnimMontage* Montage);                                          // [0x32abbb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_JumpToSection
	// void Montage_JumpToSection(FName SectionName, class UAnimMontage* Montage);                                              // [0x32abae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_IsPlaying
	// bool Montage_IsPlaying(class UAnimMontage* Montage);                                                                     // [0x32aba40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_IsActive
	// bool Montage_IsActive(class UAnimMontage* Montage);                                                                      // [0x32ab9a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetPosition
	// float Montage_GetPosition(class UAnimMontage* Montage);                                                                  // [0x32ab900] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetPlayRate
	// float Montage_GetPlayRate(class UAnimMontage* Montage);                                                                  // [0x32ab860] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetIsStopped
	// bool Montage_GetIsStopped(class UAnimMontage* Montage);                                                                  // [0x32ab7c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetCurrentSection
	// FName Montage_GetCurrentSection(class UAnimMontage* Montage);                                                            // [0x32ab730] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetBlendTime
	// float Montage_GetBlendTime(class UAnimMontage* Montage);                                                                 // [0x32ab690] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.LockAIResources
	// void LockAIResources(bool bLockMovement, bool LockAILogic);                                                              // [0x32ab5c0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.LinkAnimGraphByTag
	// void LinkAnimGraphByTag(FName InTag, class UClass* InClass);                                                             // [0x32ab4f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.LinkAnimClassLayers
	// void LinkAnimClassLayers(class UClass* InClass);                                                                         // [0x32ab460] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.IsSyncGroupBetweenMarkers
	// bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder); // [0x32ab300] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.IsPlayingSlotAnimation
	// bool IsPlayingSlotAnimation(class UAnimSequenceBase* Asset, FName SlotNodeName);                                         // [0x32ab230] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.IsAnyMontagePlaying
	// bool IsAnyMontagePlaying();                                                                                              // [0x32ab200] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.HasMarkerBeenHitThisFrame
	// bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);                                                       // [0x32ab130] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetTimeToClosestMarker
	// bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, float& OutMarkerTime);                                    // [0x32ab010] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetSyncGroupPosition
	// FMarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);                                                     // [0x32aaf60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction
	// float GetRelevantAnimTimeRemainingFraction(int32_t MachineIndex, int32_t StateIndex);                                    // [0x32aae90] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTimeRemaining
	// float GetRelevantAnimTimeRemaining(int32_t MachineIndex, int32_t StateIndex);                                            // [0x32aadc0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTimeFraction
	// float GetRelevantAnimTimeFraction(int32_t MachineIndex, int32_t StateIndex);                                             // [0x32aacf0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTime
	// float GetRelevantAnimTime(int32_t MachineIndex, int32_t StateIndex);                                                     // [0x32aac20] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimLength
	// float GetRelevantAnimLength(int32_t MachineIndex, int32_t StateIndex);                                                   // [0x32aab50] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetReceiveNotifiesFromLinkedInstances
	// bool GetReceiveNotifiesFromLinkedInstances();                                                                            // [0x32aab20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetPropagateNotifiesToLinkedInstances
	// bool GetPropagateNotifiesToLinkedInstances();                                                                            // [0x32aaaf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetOwningComponent
	// class USkeletalMeshComponent* GetOwningComponent();                                                                      // [0x32aaac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetOwningActor
	// class AActor* GetOwningActor();                                                                                          // [0x32aaa90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimLayerInstancesByGroup
	// void GetLinkedAnimLayerInstancesByGroup(FName InGroup, TArray<UAnimInstance*>& OutLinkedInstances);                      // [0x32aa9a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroupAndClass
	// class UAnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup, class UClass* InClass);                    // [0x32aa8d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroup
	// class UAnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);                                                   // [0x32aa830] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimLayerInstanceByClass
	// class UAnimInstance* GetLinkedAnimLayerInstanceByClass(class UClass* InClass);                                           // [0x32aa790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimGraphInstancesByTag
	// void GetLinkedAnimGraphInstancesByTag(FName InTag, TArray<UAnimInstance*>& OutLinkedInstances);                          // [0x32aa6a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimGraphInstanceByTag
	// class UAnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);                                                       // [0x32aa600] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction
	// float GetInstanceTransitionTimeElapsedFraction(int32_t MachineIndex, int32_t TransitionIndex);                           // [0x32aa530] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceTransitionTimeElapsed
	// float GetInstanceTransitionTimeElapsed(int32_t MachineIndex, int32_t TransitionIndex);                                   // [0x32aa460] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration
	// float GetInstanceTransitionCrossfadeDuration(int32_t MachineIndex, int32_t TransitionIndex);                             // [0x32aa390] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceStateWeight
	// float GetInstanceStateWeight(int32_t MachineIndex, int32_t StateIndex);                                                  // [0x32aa2c0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceMachineWeight
	// float GetInstanceMachineWeight(int32_t MachineIndex);                                                                    // [0x32aa220] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceCurrentStateElapsedTime
	// float GetInstanceCurrentStateElapsedTime(int32_t MachineIndex);                                                          // [0x32aa180] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction
	// float GetInstanceAssetPlayerTimeFromEndFraction(int32_t AssetPlayerIndex);                                               // [0x32aa0e0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd
	// float GetInstanceAssetPlayerTimeFromEnd(int32_t AssetPlayerIndex);                                                       // [0x32aa040] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction
	// float GetInstanceAssetPlayerTimeFraction(int32_t AssetPlayerIndex);                                                      // [0x32a9fa0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTime
	// float GetInstanceAssetPlayerTime(int32_t AssetPlayerIndex);                                                              // [0x32a9f00] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerLength
	// float GetInstanceAssetPlayerLength(int32_t AssetPlayerIndex);                                                            // [0x32a9e60] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetCurveValue
	// float GetCurveValue(FName CurveName);                                                                                    // [0x32a9dc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetCurrentStateName
	// FName GetCurrentStateName(int32_t MachineIndex);                                                                         // [0x32a9d30] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetCurrentActiveMontage
	// class UAnimMontage* GetCurrentActiveMontage();                                                                           // [0x32a9d00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetAllCurveNames
	// void GetAllCurveNames(TArray<FName>& OutNames);                                                                          // [0x32a9c50] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetActiveCurveNames
	// void GetActiveCurveNames(EAnimCurveType CurveType, TArray<FName>& OutNames);                                             // [0x32a9b60] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.ClearMorphTargets
	// void ClearMorphTargets();                                                                                                // [0x32a9b40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.CalculateDirection
	// float CalculateDirection(FVector& Velocity, FRotator& BaseRotation);                                                     // [0x32a9a40] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.BlueprintUpdateAnimation
	// void BlueprintUpdateAnimation(float DeltaTimeX);                                                                         // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.AnimInstance.BlueprintPostEvaluateAnimation
	// void BlueprintPostEvaluateAnimation();                                                                                   // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.AnimInstance.BlueprintLinkedAnimationLayersInitialized
	// void BlueprintLinkedAnimationLayersInitialized();                                                                        // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.AnimInstance.BlueprintInitializeAnimation
	// void BlueprintInitializeAnimation();                                                                                     // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.AnimInstance.BlueprintBeginPlay
	// void BlueprintBeginPlay();                                                                                               // [0x198a600] Event|Public|BlueprintEvent 
};

/// Struct /Script/Engine.BPComponentClassOverride
/// Size: 0x0010 (0x000000 - 0x000010)
class FBPComponentClassOverride : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     ComponentName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(class UClass*)                             ComponentClass                                              OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.BlueprintComponentChangedPropertyInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FBlueprintComponentChangedPropertyInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     PropertyName                                                OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   ArrayIndex                                                  OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(class UStruct*)                            PropertyScope                                               OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.BlueprintCookedComponentInstancingData
/// Size: 0x0048 (0x000000 - 0x000048)
class FBlueprintCookedComponentInstancingData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FBlueprintComponentChangedPropertyInfo>) ChangedPropertyList                                    OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      bHasValidCookedData                                         OFFSET(get<bool>, {0x21, 1, 0, 0})
};

/// Class /Script/Engine.BlueprintGeneratedClass
/// Size: 0x00F8 (0x000230 - 0x000328)
class UBlueprintGeneratedClass : public UClass
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	DMember(int32_t)                                   NumReplicatedProperties                                     OFFSET(get<int32_t>, {0x230, 4, 0, 0})
	DMember(bool)                                      bHasNativizedParent                                         OFFSET(get<bool>, {0x234, 1, 1, 0})
	DMember(bool)                                      bHasCookedComponentInstancingData                           OFFSET(get<bool>, {0x234, 1, 1, 1})
	CMember(TArray<class UDynamicBlueprintBinding*>)   DynamicBindingObjects                                       OFFSET(get<T>, {0x238, 16, 0, 0})
	CMember(TArray<class UActorComponent*>)            ComponentTemplates                                          OFFSET(get<T>, {0x248, 16, 0, 0})
	CMember(TArray<class UTimelineTemplate*>)          Timelines                                                   OFFSET(get<T>, {0x258, 16, 0, 0})
	CMember(TArray<FBPComponentClassOverride>)         ComponentClassOverrides                                     OFFSET(get<T>, {0x268, 16, 0, 0})
	CMember(class USimpleConstructionScript*)          SimpleConstructionScript                                    OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UInheritableComponentHandler*)       InheritableComponentHandler                                 OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UStructProperty*)                    UberGraphFramePointerProperty                               OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class UFunction*)                          UberGraphFunction                                           OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(TMap<FName, FBlueprintCookedComponentInstancingData>) CookedComponentInstancingData                    OFFSET(get<T>, {0x2A0, 80, 0, 0})
};

/// Class /Script/Engine.TimecodeProvider
/// Size: 0x0008 (0x000028 - 0x000030)
class UTimecodeProvider : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     FrameDelay                                                  OFFSET(get<float>, {0x28, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.TimecodeProvider.GetTimecode
	// FTimecode GetTimecode();                                                                                                 // [0x3411c10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.GetSynchronizationState
	// ETimecodeProviderSynchronizationState GetSynchronizationState();                                                         // [0x3411be0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.GetQualifiedFrameTime
	// FQualifiedFrameTime GetQualifiedFrameTime();                                                                             // [0x3411ba0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.GetFrameRate
	// FFrameRate GetFrameRate();                                                                                               // [0x3411ad0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.GetDelayedTimecode
	// FTimecode GetDelayedTimecode();                                                                                          // [0x3411a90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.GetDelayedQualifiedFrameTime
	// FQualifiedFrameTime GetDelayedQualifiedFrameTime();                                                                      // [0x3411a50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.FetchTimecode
	// bool FetchTimecode(FQualifiedFrameTime& OutFrameTime);                                                                   // [0x3411990] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.TimecodeProvider.FetchAndUpdate
	// void FetchAndUpdate();                                                                                                   // [0x89d6b0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.FXSystemComponent
/// Size: 0x0008 (0x000468 - 0x000470)
class UFXSystemComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1136;

public:


	/// Functions
	// Function /Script/Engine.FXSystemComponent.SetVectorParameter
	// void SetVectorParameter(FName ParameterName, FVector Param);                                                             // [0x33b2ea0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetUseAutoManageAttachment
	// void SetUseAutoManageAttachment(bool bAutoManage);                                                                       // [0x33b2e10] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetIntParameter
	// void SetIntParameter(FName ParameterName, int32_t Param);                                                                // [0x33b2a80] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetFloatParameter
	// void SetFloatParameter(FName ParameterName, float Param);                                                                // [0x33b29a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetEmitterEnable
	// void SetEmitterEnable(FName EmitterName, bool bNewEnableState);                                                          // [0x33b28d0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetColorParameter
	// void SetColorParameter(FName ParameterName, FLinearColor Param);                                                         // [0x33b27f0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetBoolParameter
	// void SetBoolParameter(FName ParameterName, bool Param);                                                                  // [0x33b2720] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetAutoAttachmentParameters
	// void SetAutoAttachmentParameters(class USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule); // [0x33b1e00] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetActorParameter
	// void SetActorParameter(FName ParameterName, class AActor* Param);                                                        // [0x33b1c00] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.ReleaseToPool
	// void ReleaseToPool();                                                                                                    // [0x33b1be0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.GetFXSystemAsset
	// class UFXSystemAsset* GetFXSystemAsset();                                                                                // [0x33b1ae0] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.ParticleSysParam
/// Size: 0x0080 (0x000000 - 0x000080)
class FParticleSysParam : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<EParticleSysParamType>)        ParamType                                                   OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(float)                                     Scalar                                                      OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     Scalar_Low                                                  OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FVector)                                   Vector                                                      OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	SMember(FVector)                                   Vector_Low                                                  OFFSET(getStruct<T>, {0x20, 12, 0, 0})
	SMember(FColor)                                    Color                                                       OFFSET(getStruct<T>, {0x2C, 4, 0, 0})
	CMember(class AActor*)                             Actor                                                       OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UMaterialInterface*)                 Material                                                    OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Engine.ParticleSystemComponent
/// Size: 0x0268 (0x000468 - 0x0006D0)
class UParticleSystemComponent : public UFXSystemComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1744;

public:
	CMember(class UParticleSystem*)                    Template                                                    OFFSET(get<T>, {0x468, 8, 0, 0})
	CMember(TArray<class UMaterialInterface*>)         EmitterMaterials                                            OFFSET(get<T>, {0x470, 16, 0, 0})
	CMember(TArray<class USkeletalMeshComponent*>)     SkelMeshComponents                                          OFFSET(get<T>, {0x480, 16, 0, 0})
	DMember(bool)                                      bResetOnDetach                                              OFFSET(get<bool>, {0x491, 1, 1, 0})
	DMember(bool)                                      bUpdateOnDedicatedServer                                    OFFSET(get<bool>, {0x491, 1, 1, 1})
	DMember(bool)                                      bAllowRecycling                                             OFFSET(get<bool>, {0x491, 1, 1, 4})
	DMember(bool)                                      bAutoManageAttachment                                       OFFSET(get<bool>, {0x491, 1, 1, 5})
	DMember(bool)                                      bAutoAttachWeldSimulatedBodies                              OFFSET(get<bool>, {0x491, 1, 1, 6})
	DMember(bool)                                      bWarmingUp                                                  OFFSET(get<bool>, {0x492, 1, 1, 1})
	DMember(bool)                                      bOverrideLODMethod                                          OFFSET(get<bool>, {0x492, 1, 1, 2})
	DMember(bool)                                      bSkipUpdateDynamicDataDuringTick                            OFFSET(get<bool>, {0x492, 1, 1, 3})
	CMember(TEnumAsByte<ParticleSystemLODMethod>)      LODMethod                                                   OFFSET(get<T>, {0x49D, 1, 0, 0})
	CMember(EParticleSignificanceLevel)                RequiredSignificance                                        OFFSET(get<T>, {0x49E, 1, 0, 0})
	CMember(TArray<FParticleSysParam>)                 InstanceParameters                                          OFFSET(get<T>, {0x4A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnParticleSpawn                                             OFFSET(getStruct<T>, {0x4B0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnParticleBurst                                             OFFSET(getStruct<T>, {0x4C0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnParticleDeath                                             OFFSET(getStruct<T>, {0x4D0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnParticleCollide                                           OFFSET(getStruct<T>, {0x4E0, 16, 0, 0})
	DMember(bool)                                      bOldPositionValid                                           OFFSET(get<bool>, {0x4F0, 1, 0, 0})
	SMember(FVector)                                   OldPosition                                                 OFFSET(getStruct<T>, {0x4F4, 12, 0, 0})
	SMember(FVector)                                   PartSysVelocity                                             OFFSET(getStruct<T>, {0x500, 12, 0, 0})
	DMember(float)                                     WarmupTime                                                  OFFSET(get<float>, {0x50C, 4, 0, 0})
	DMember(float)                                     WarmupTickRate                                              OFFSET(get<float>, {0x510, 4, 0, 0})
	DMember(float)                                     SecondsBeforeInactive                                       OFFSET(get<float>, {0x518, 4, 0, 0})
	DMember(float)                                     MaxTimeBeforeForceUpdateTransform                           OFFSET(get<float>, {0x520, 4, 0, 0})
	CMember(TArray<class UParticleSystemReplay*>)      ReplayClips                                                 OFFSET(get<T>, {0x540, 16, 0, 0})
	DMember(float)                                     CustomTimeDilation                                          OFFSET(get<float>, {0x558, 4, 0, 0})
	CMember(TWeakObjectPtr<class USceneComponent*>)    AutoAttachParent                                            OFFSET(get<T>, {0x5B0, 8, 0, 0})
	SMember(FName)                                     AutoAttachSocketName                                        OFFSET(getStruct<T>, {0x5B8, 8, 0, 0})
	CMember(EAttachmentRule)                           AutoAttachLocationRule                                      OFFSET(get<T>, {0x5C0, 1, 0, 0})
	CMember(EAttachmentRule)                           AutoAttachRotationRule                                      OFFSET(get<T>, {0x5C1, 1, 0, 0})
	CMember(EAttachmentRule)                           AutoAttachScaleRule                                         OFFSET(get<T>, {0x5C2, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSystemFinished                                            OFFSET(getStruct<T>, {0x5F0, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.ParticleSystemComponent.SetTrailSourceData
	// void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth); // [0x33b2cb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetTemplate
	// void SetTemplate(class UParticleSystem* NewTemplate);                                                                    // [0x33b2c20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetMaterialParameter
	// void SetMaterialParameter(FName ParameterName, class UMaterialInterface* Param);                                         // [0x33b2b50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamTargetTangent
	// void SetBeamTargetTangent(int32_t EmitterIndex, FVector NewTangentPoint, int32_t TargetIndex);                           // [0x33b2600] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamTargetStrength
	// void SetBeamTargetStrength(int32_t EmitterIndex, float NewTargetStrength, int32_t TargetIndex);                          // [0x33b24f0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamTargetPoint
	// void SetBeamTargetPoint(int32_t EmitterIndex, FVector NewTargetPoint, int32_t TargetIndex);                              // [0x33b23d0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamSourceTangent
	// void SetBeamSourceTangent(int32_t EmitterIndex, FVector NewTangentPoint, int32_t SourceIndex);                           // [0x33b22b0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamSourceStrength
	// void SetBeamSourceStrength(int32_t EmitterIndex, float NewSourceStrength, int32_t SourceIndex);                          // [0x33b21a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamSourcePoint
	// void SetBeamSourcePoint(int32_t EmitterIndex, FVector NewSourcePoint, int32_t SourceIndex);                              // [0x33b2080] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamEndPoint
	// void SetBeamEndPoint(int32_t EmitterIndex, FVector NewEndPoint);                                                         // [0x33b1fa0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetAutoAttachParams
	// void SetAutoAttachParams(class USceneComponent* Parent, FName SocketName, TEnumAsByte<EAttachLocation> LocationType);    // [0x33b1cd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.GetNumActiveParticles
	// int32_t GetNumActiveParticles();                                                                                         // [0x33b1bb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetNamedMaterial
	// class UMaterialInterface* GetNamedMaterial(FName InName);                                                                // [0x33b1b10] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamTargetTangent
	// bool GetBeamTargetTangent(int32_t EmitterIndex, int32_t TargetIndex, FVector& OutTangentPoint);                          // [0x33b19c0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamTargetStrength
	// bool GetBeamTargetStrength(int32_t EmitterIndex, int32_t TargetIndex, float& OutTargetStrength);                         // [0x33b18a0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamTargetPoint
	// bool GetBeamTargetPoint(int32_t EmitterIndex, int32_t TargetIndex, FVector& OutTargetPoint);                             // [0x33b1780] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamSourceTangent
	// bool GetBeamSourceTangent(int32_t EmitterIndex, int32_t SourceIndex, FVector& OutTangentPoint);                          // [0x33b1660] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamSourceStrength
	// bool GetBeamSourceStrength(int32_t EmitterIndex, int32_t SourceIndex, float& OutSourceStrength);                         // [0x33b1540] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamSourcePoint
	// bool GetBeamSourcePoint(int32_t EmitterIndex, int32_t SourceIndex, FVector& OutSourcePoint);                             // [0x33b1420] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamEndPoint
	// bool GetBeamEndPoint(int32_t EmitterIndex, FVector& OutEndPoint);                                                        // [0x33b1330] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GenerateParticleEvent
	// void GenerateParticleEvent(FName InEventName, float InEmitterTime, FVector InLocation, FVector InDirection, FVector InVelocity); // [0x33b1170] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.EndTrails
	// void EndTrails();                                                                                                        // [0x33b1150] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance
	// class UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, class UMaterialInterface* SourceMaterial); // [0x33b1080] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.BeginTrails
	// void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth); // [0x33b0e80] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.EngineCustomTimeStep
/// Size: 0x0000 (0x000028 - 0x000028)
class UEngineCustomTimeStep : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Info
/// Size: 0x0000 (0x000220 - 0x000220)
class AInfo : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
};

/// Class /Script/Engine.GameModeBase
/// Size: 0x00A0 (0x000220 - 0x0002C0)
class AGameModeBase : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	SMember(FString)                                   OptionsString                                               OFFSET(getStruct<T>, {0x220, 16, 0, 0})
	CMember(class UClass*)                             GameSessionClass                                            OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UClass*)                             GameStateClass                                              OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(class UClass*)                             PlayerControllerClass                                       OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(class UClass*)                             PlayerStateClass                                            OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(class UClass*)                             HUDClass                                                    OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(class UClass*)                             DefaultPawnClass                                            OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(class UClass*)                             SpectatorClass                                              OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class UClass*)                             ReplaySpectatorPlayerControllerClass                        OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class UClass*)                             ServerStatReplicatorClass                                   OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(class AGameSession*)                       GameSession                                                 OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class AGameStateBase*)                     GameState                                                   OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class AServerStatReplicator*)              ServerStatReplicator                                        OFFSET(get<T>, {0x288, 8, 0, 0})
	SMember(FText)                                     DefaultPlayerName                                           OFFSET(getStruct<T>, {0x290, 24, 0, 0})
	DMember(bool)                                      bUseSeamlessTravel                                          OFFSET(get<bool>, {0x2A8, 1, 1, 0})
	DMember(bool)                                      bStartPlayersAsSpectators                                   OFFSET(get<bool>, {0x2A8, 1, 1, 1})
	DMember(bool)                                      bPauseable                                                  OFFSET(get<bool>, {0x2A8, 1, 1, 2})


	/// Functions
	// Function /Script/Engine.GameModeBase.StartPlay
	// void StartPlay();                                                                                                        // [0x330be70] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.SpawnDefaultPawnFor
	// class APawn* SpawnDefaultPawnFor(class AController* NewPlayer, class AActor* StartSpot);                                 // [0x3309e30] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.SpawnDefaultPawnAtTransform
	// class APawn* SpawnDefaultPawnAtTransform(class AController* NewPlayer, FTransform& SpawnTransform);                      // [0x3309d10] Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.ShouldReset
	// bool ShouldReset(class AActor* ActorToReset);                                                                            // [0x33097e0] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.ReturnToMainMenuHost
	// void ReturnToMainMenuHost();                                                                                             // [0x3308700] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.RestartPlayerAtTransform
	// void RestartPlayerAtTransform(class AController* NewPlayer, FTransform& SpawnTransform);                                 // [0x33085e0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.RestartPlayerAtPlayerStart
	// void RestartPlayerAtPlayerStart(class AController* NewPlayer, class AActor* StartSpot);                                  // [0x3308510] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.RestartPlayer
	// void RestartPlayer(class AController* NewPlayer);                                                                        // [0x3308480] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.ResetLevel
	// void ResetLevel();                                                                                                       // [0x3308440] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.PlayerCanRestart
	// bool PlayerCanRestart(class APlayerController* Player);                                                                  // [0x3307d70] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.MustSpectate
	// bool MustSpectate(class APlayerController* NewPlayerController);                                                         // [0x3306b20] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.GameModeBase.K2_PostLogin
	// void K2_PostLogin(class APlayerController* NewPlayer);                                                                   // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_OnSwapPlayerControllers
	// void K2_OnSwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC);                         // [0x198a600] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_OnRestartPlayer
	// void K2_OnRestartPlayer(class AController* NewPlayer);                                                                   // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_OnLogout
	// void K2_OnLogout(class AController* ExitingController);                                                                  // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_OnChangeName
	// void K2_OnChangeName(class AController* Other, FString NewName, bool bNameChange);                                       // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_FindPlayerStart
	// class AActor* K2_FindPlayerStart(class AController* Player, FString IncomingName);                                       // [0x3305fe0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameModeBase.InitStartSpot
	// void InitStartSpot(class AActor* StartSpot, class AController* NewPlayer);                                               // [0x3305dc0] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.InitializeHUDForPlayer
	// void InitializeHUDForPlayer(class APlayerController* NewPlayer);                                                         // [0x32f0370] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.HasMatchStarted
	// bool HasMatchStarted();                                                                                                  // [0x32e3df0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameModeBase.HasMatchEnded
	// bool HasMatchEnded();                                                                                                    // [0x3305c50] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameModeBase.HandleStartingNewPlayer
	// void HandleStartingNewPlayer(class APlayerController* NewPlayer);                                                        // [0x3305b20] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.GetNumSpectators
	// int32_t GetNumSpectators();                                                                                              // [0x3304bb0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.GetNumPlayers
	// int32_t GetNumPlayers();                                                                                                 // [0x3304b80] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.GetDefaultPawnClassForController
	// class UClass* GetDefaultPawnClassForController(class AController* InController);                                         // [0x33044c0] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.FindPlayerStart
	// class AActor* FindPlayerStart(class AController* Player, FString IncomingName);                                          // [0x3303510] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.ChoosePlayerStart
	// class AActor* ChoosePlayerStart(class AController* Player);                                                              // [0x33028a0] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.ChangeName
	// void ChangeName(class AController* Controller, FString NewName, bool bNameChange);                                       // [0x3302770] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.CanSpectate
	// bool CanSpectate(class APlayerController* Viewer, class APlayerState* ViewTarget);                                       // [0x3302680] Native|Event|Public|BlueprintEvent 
};

/// Class /Script/Engine.DynamicSubsystem
/// Size: 0x0000 (0x000030 - 0x000030)
class UDynamicSubsystem : public USubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.EngineSubsystem
/// Size: 0x0000 (0x000030 - 0x000030)
class UEngineSubsystem : public UDynamicSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.FXSystemAsset
/// Size: 0x0008 (0x000028 - 0x000030)
class UFXSystemAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(uint32_t)                                  MaxPoolSize                                                 OFFSET(get<uint32_t>, {0x28, 4, 0, 0})
	DMember(uint32_t)                                  PoolPrimeSize                                               OFFSET(get<uint32_t>, {0x2C, 4, 0, 0})
};

/// Class /Script/Engine.AnimNotifyState
/// Size: 0x0008 (0x000028 - 0x000030)
class UAnimNotifyState : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/Engine.AnimNotifyState.Received_NotifyTick
	// bool Received_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime); // [0x198a600] Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.AnimNotifyState.Received_NotifyEnd
	// bool Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);                     // [0x198a600] Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.AnimNotifyState.Received_NotifyBegin
	// bool Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration); // [0x198a600] Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.AnimNotifyState.GetNotifyName
	// FString GetNotifyName();                                                                                                 // [0xc4c400] Native|Event|Public|BlueprintEvent|Const 
};

/// Class /Script/Engine.Commandlet
/// Size: 0x0058 (0x000028 - 0x000080)
class UCommandlet : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FString)                                   HelpDescription                                             OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   HelpUsage                                                   OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	SMember(FString)                                   HelpWebLink                                                 OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	CMember(TArray<FString>)                           HelpParamNames                                              OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<FString>)                           HelpParamDescriptions                                       OFFSET(get<T>, {0x68, 16, 0, 0})
	DMember(bool)                                      IsServer                                                    OFFSET(get<bool>, {0x78, 1, 1, 0})
	DMember(bool)                                      IsClient                                                    OFFSET(get<bool>, {0x78, 1, 1, 1})
	DMember(bool)                                      IsEditor                                                    OFFSET(get<bool>, {0x78, 1, 1, 2})
	DMember(bool)                                      LogToConsole                                                OFFSET(get<bool>, {0x78, 1, 1, 3})
	DMember(bool)                                      ShowErrorCount                                              OFFSET(get<bool>, {0x78, 1, 1, 4})
	DMember(bool)                                      ShowProgress                                                OFFSET(get<bool>, {0x78, 1, 1, 5})
};

/// Class /Script/Engine.GameUserSettings
/// Size: 0x00F8 (0x000028 - 0x000120)
class UGameUserSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	DMember(bool)                                      bUseVSync                                                   OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(bool)                                      bUseDynamicResolution                                       OFFSET(get<bool>, {0x29, 1, 0, 0})
	DMember(uint32_t)                                  ResolutionSizeX                                             OFFSET(get<uint32_t>, {0x80, 4, 0, 0})
	DMember(uint32_t)                                  ResolutionSizeY                                             OFFSET(get<uint32_t>, {0x84, 4, 0, 0})
	DMember(uint32_t)                                  LastUserConfirmedResolutionSizeX                            OFFSET(get<uint32_t>, {0x88, 4, 0, 0})
	DMember(uint32_t)                                  LastUserConfirmedResolutionSizeY                            OFFSET(get<uint32_t>, {0x8C, 4, 0, 0})
	DMember(int32_t)                                   WindowPosX                                                  OFFSET(get<int32_t>, {0x90, 4, 0, 0})
	DMember(int32_t)                                   WindowPosY                                                  OFFSET(get<int32_t>, {0x94, 4, 0, 0})
	DMember(int32_t)                                   FullscreenMode                                              OFFSET(get<int32_t>, {0x98, 4, 0, 0})
	DMember(int32_t)                                   LastConfirmedFullscreenMode                                 OFFSET(get<int32_t>, {0x9C, 4, 0, 0})
	DMember(int32_t)                                   PreferredFullscreenMode                                     OFFSET(get<int32_t>, {0xA0, 4, 0, 0})
	DMember(uint32_t)                                  Version                                                     OFFSET(get<uint32_t>, {0xA4, 4, 0, 0})
	DMember(int32_t)                                   AudioQualityLevel                                           OFFSET(get<int32_t>, {0xA8, 4, 0, 0})
	DMember(int32_t)                                   LastConfirmedAudioQualityLevel                              OFFSET(get<int32_t>, {0xAC, 4, 0, 0})
	DMember(float)                                     FrameRateLimit                                              OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(int32_t)                                   DesiredScreenWidth                                          OFFSET(get<int32_t>, {0xB8, 4, 0, 0})
	DMember(bool)                                      bUseDesiredScreenHeight                                     OFFSET(get<bool>, {0xBC, 1, 0, 0})
	DMember(int32_t)                                   DesiredScreenHeight                                         OFFSET(get<int32_t>, {0xC0, 4, 0, 0})
	DMember(int32_t)                                   LastUserConfirmedDesiredScreenWidth                         OFFSET(get<int32_t>, {0xC4, 4, 0, 0})
	DMember(int32_t)                                   LastUserConfirmedDesiredScreenHeight                        OFFSET(get<int32_t>, {0xC8, 4, 0, 0})
	DMember(float)                                     LastRecommendedScreenWidth                                  OFFSET(get<float>, {0xCC, 4, 0, 0})
	DMember(float)                                     LastRecommendedScreenHeight                                 OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(float)                                     LastCPUBenchmarkResult                                      OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(float)                                     LastGPUBenchmarkResult                                      OFFSET(get<float>, {0xD8, 4, 0, 0})
	CMember(TArray<float>)                             LastCPUBenchmarkSteps                                       OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(TArray<float>)                             LastGPUBenchmarkSteps                                       OFFSET(get<T>, {0xF0, 16, 0, 0})
	DMember(float)                                     LastGPUBenchmarkMultiplier                                  OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(bool)                                      bUseHDRDisplayOutput                                        OFFSET(get<bool>, {0x104, 1, 0, 0})
	DMember(int32_t)                                   HDRDisplayOutputNits                                        OFFSET(get<int32_t>, {0x108, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnGameUserSettingsUINeedsUpdate                             OFFSET(getStruct<T>, {0x110, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.GameUserSettings.ValidateSettings
	// void ValidateSettings();                                                                                                 // [0xc8b150] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SupportsHDRDisplayOutput
	// bool SupportsHDRDisplayOutput();                                                                                         // [0x12220f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.SetVSyncEnabled
	// void SetVSyncEnabled(bool bEnable);                                                                                      // [0x330f900] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetVisualEffectQuality
	// void SetVisualEffectQuality(int32_t Value);                                                                              // [0x330fa20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetViewDistanceQuality
	// void SetViewDistanceQuality(int32_t Value);                                                                              // [0x330f990] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetToDefaults
	// void SetToDefaults();                                                                                                    // [0x1602830] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetTextureQuality
	// void SetTextureQuality(int32_t Value);                                                                                   // [0x330f870] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetShadowQuality
	// void SetShadowQuality(int32_t Value);                                                                                    // [0x330f7e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetShadingQuality
	// void SetShadingQuality(int32_t Value);                                                                                   // [0x330f750] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetScreenResolution
	// void SetScreenResolution(FIntPoint Resolution);                                                                          // [0x330f6d0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetResolutionScaleValueEx
	// void SetResolutionScaleValueEx(float NewScaleValue);                                                                     // [0x330f650] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetResolutionScaleValue
	// void SetResolutionScaleValue(int32_t NewScaleValue);                                                                     // [0x330f5c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetResolutionScaleNormalized
	// void SetResolutionScaleNormalized(float NewScaleNormalized);                                                             // [0x330f540] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetPostprocessingQuality
	// void SetPostprocessingQuality(int32_t Value);                                                                            // [0x330f4b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetOverallScalabilityLevel
	// void SetOverallScalabilityLevel(int32_t Value);                                                                          // [0x330f420] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetFullscreenMode
	// void SetFullscreenMode(TEnumAsByte<EWindowMode> InFullscreenMode);                                                       // [0x330f3a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetFrameRateLimit
	// void SetFrameRateLimit(float NewLimit);                                                                                  // [0x330f320] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetFoliageQuality
	// void SetFoliageQuality(int32_t Value);                                                                                   // [0x330f290] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetDynamicResolutionEnabled
	// void SetDynamicResolutionEnabled(bool bEnable);                                                                          // [0x330f200] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetBenchmarkFallbackValues
	// void SetBenchmarkFallbackValues();                                                                                       // [0x330f1e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetAudioQualityLevel
	// void SetAudioQualityLevel(int32_t QualityLevel);                                                                         // [0x330f150] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetAntiAliasingQuality
	// void SetAntiAliasingQuality(int32_t Value);                                                                              // [0x330f0c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SaveSettings
	// void SaveSettings();                                                                                                     // [0x1601bf0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.RunHardwareBenchmark
	// void RunHardwareBenchmark(int32_t WorkScale, float CPUMultiplier, float GPUMultiplier);                                  // [0x330efc0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.RevertVideoMode
	// void RevertVideoMode();                                                                                                  // [0x330efa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ResetToCurrentSettings
	// void ResetToCurrentSettings();                                                                                           // [0xc890f0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.LoadSettings
	// void LoadSettings(bool bForceReload);                                                                                    // [0x330eef0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.IsVSyncEnabled
	// bool IsVSyncEnabled();                                                                                                   // [0x15f7f10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsVSyncDirty
	// bool IsVSyncDirty();                                                                                                     // [0x330eec0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsScreenResolutionDirty
	// bool IsScreenResolutionDirty();                                                                                          // [0x330ee90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsHDREnabled
	// bool IsHDREnabled();                                                                                                     // [0x330ee60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsFullscreenModeDirty
	// bool IsFullscreenModeDirty();                                                                                            // [0x330ee30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsDynamicResolutionEnabled
	// bool IsDynamicResolutionEnabled();                                                                                       // [0x330ee00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsDynamicResolutionDirty
	// bool IsDynamicResolutionDirty();                                                                                         // [0x330edd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsDirty
	// bool IsDirty();                                                                                                          // [0xc8afe0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetVisualEffectQuality
	// int32_t GetVisualEffectQuality();                                                                                        // [0x330ed40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetViewDistanceQuality
	// int32_t GetViewDistanceQuality();                                                                                        // [0x330ed10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetTextureQuality
	// int32_t GetTextureQuality();                                                                                             // [0x15fc670] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetSyncInterval
	// int32_t GetSyncInterval();                                                                                               // [0x330ece0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameUserSettings.GetShadowQuality
	// int32_t GetShadowQuality();                                                                                              // [0x330ecb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetShadingQuality
	// int32_t GetShadingQuality();                                                                                             // [0x330ec80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetScreenResolution
	// FIntPoint GetScreenResolution();                                                                                         // [0x330ec00] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetResolutionScaleNormalized
	// float GetResolutionScaleNormalized();                                                                                    // [0x330ebd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetResolutionScaleInformationEx
	// void GetResolutionScaleInformationEx(float& CurrentScaleNormalized, float& CurrentScaleValue, float& MinScaleValue, float& MaxScaleValue); // [0x330ea30] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetResolutionScaleInformation
	// void GetResolutionScaleInformation(float& CurrentScaleNormalized, int32_t& CurrentScaleValue, int32_t& MinScaleValue, int32_t& MaxScaleValue); // [0x330e890] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetRecommendedResolutionScale
	// float GetRecommendedResolutionScale();                                                                                   // [0x330e850] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetPreferredFullscreenMode
	// TEnumAsByte<EWindowMode> GetPreferredFullscreenMode();                                                                   // [0x330e820] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetPostprocessingQuality
	// int32_t GetPostprocessingQuality();                                                                                      // [0x330e7f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetOverallScalabilityLevel
	// int32_t GetOverallScalabilityLevel();                                                                                    // [0x330e680] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetLastConfirmedScreenResolution
	// FIntPoint GetLastConfirmedScreenResolution();                                                                            // [0x330e640] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetLastConfirmedFullscreenMode
	// TEnumAsByte<EWindowMode> GetLastConfirmedFullscreenMode();                                                               // [0x330e610] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetGameUserSettings
	// class UGameUserSettings* GetGameUserSettings();                                                                          // [0x330e5e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetFullscreenMode
	// TEnumAsByte<EWindowMode> GetFullscreenMode();                                                                            // [0x330e5b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetFrameRateLimit
	// float GetFrameRateLimit();                                                                                               // [0x330e580] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetFramePace
	// int32_t GetFramePace();                                                                                                  // [0x330e550] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameUserSettings.GetFoliageQuality
	// int32_t GetFoliageQuality();                                                                                             // [0x330e520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetDesktopResolution
	// FIntPoint GetDesktopResolution();                                                                                        // [0x330e4e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetDefaultWindowPosition
	// FIntPoint GetDefaultWindowPosition();                                                                                    // [0x330e4a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetDefaultWindowMode
	// TEnumAsByte<EWindowMode> GetDefaultWindowMode();                                                                         // [0x330e470] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetDefaultResolutionScale
	// float GetDefaultResolutionScale();                                                                                       // [0x330e430] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetDefaultResolution
	// FIntPoint GetDefaultResolution();                                                                                        // [0x330e3f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetCurrentHDRDisplayNits
	// int32_t GetCurrentHDRDisplayNits();                                                                                      // [0x330e3c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetAudioQualityLevel
	// int32_t GetAudioQualityLevel();                                                                                          // [0x1449880] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetAntiAliasingQuality
	// int32_t GetAntiAliasingQuality();                                                                                        // [0xa2b780] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.EnableHDRDisplayOutput
	// void EnableHDRDisplayOutput(bool bEnable, int32_t DisplayNits);                                                          // [0x330e2f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ConfirmVideoMode
	// void ConfirmVideoMode();                                                                                                 // [0x1635730] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ApplySettings
	// void ApplySettings(bool bCheckForCommandLineOverrides);                                                                  // [0x330e260] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ApplyResolutionSettings
	// void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);                                                        // [0x330e1d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ApplyNonResolutionSettings
	// void ApplyNonResolutionSettings();                                                                                       // [0x89d6b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ApplyHardwareBenchmarkResults
	// void ApplyHardwareBenchmarkResults();                                                                                    // [0x32e1230] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.MaterialExpression
/// Size: 0x0018 (0x000028 - 0x000040)
class UMaterialExpression : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UMaterial*)                          Material                                                    OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UMaterialFunction*)                  Function                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bIsParameterExpression                                      OFFSET(get<bool>, {0x38, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionTextureBase
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionTextureBase : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UTexture*)                           Texture                                                     OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Struct /Script/Engine.ExpressionInput
/// Size: 0x000C (0x000000 - 0x00000C)
class FExpressionInput : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   OutputIndex                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FName)                                     ExpressionName                                              OFFSET(getStruct<T>, {0x4, 8, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTextureSample
/// Size: 0x0018 (0x000048 - 0x000060)
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FExpressionInput)                          Coordinates                                                 OFFSET(getStruct<T>, {0x48, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameter
/// Size: 0x0020 (0x000060 - 0x000080)
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x60, 8, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x68, 16, 0, 0})
	SMember(FName)                                     Group                                                       OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameter2D
/// Size: 0x0000 (0x000080 - 0x000080)
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Engine.Pawn
/// Size: 0x0060 (0x000220 - 0x000280)
class APawn : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	DMember(bool)                                      bUseControllerRotationPitch                                 OFFSET(get<bool>, {0x228, 1, 1, 0})
	DMember(bool)                                      bUseControllerRotationYaw                                   OFFSET(get<bool>, {0x228, 1, 1, 1})
	DMember(bool)                                      bUseControllerRotationRoll                                  OFFSET(get<bool>, {0x228, 1, 1, 2})
	DMember(bool)                                      bCanAffectNavigationGeneration                              OFFSET(get<bool>, {0x228, 1, 1, 3})
	DMember(float)                                     BaseEyeHeight                                               OFFSET(get<float>, {0x22C, 4, 0, 0})
	CMember(TEnumAsByte<EAutoReceiveInput>)            AutoPossessPlayer                                           OFFSET(get<T>, {0x230, 1, 0, 0})
	CMember(EAutoPossessAI)                            AutoPossessAI                                               OFFSET(get<T>, {0x231, 1, 0, 0})
	DMember(char)                                      RemoteViewPitch                                             OFFSET(get<char>, {0x232, 1, 0, 0})
	CMember(class UClass*)                             AIControllerClass                                           OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(class APlayerState*)                       PlayerState                                                 OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(class AController*)                        LastHitBy                                                   OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(class AController*)                        Controller                                                  OFFSET(get<T>, {0x258, 8, 0, 0})
	SMember(FVector)                                   ControlInputVector                                          OFFSET(getStruct<T>, {0x264, 12, 0, 0})
	SMember(FVector)                                   LastControlInputVector                                      OFFSET(getStruct<T>, {0x270, 12, 0, 0})


	/// Functions
	// Function /Script/Engine.Pawn.SpawnDefaultController
	// void SpawnDefaultController();                                                                                           // [0x33b87a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.SetCanAffectNavigationGeneration
	// void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);                                                // [0x33b7770] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.ReceiveUnpossessed
	// void ReceiveUnpossessed(class AController* OldController);                                                               // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Pawn.ReceivePossessed
	// void ReceivePossessed(class AController* NewController);                                                                 // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Pawn.PawnMakeNoise
	// void PawnMakeNoise(float Loudness, FVector NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker);        // [0x33b6ce0] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Pawn.OnRep_PlayerState
	// void OnRep_PlayerState();                                                                                                // [0x13e1b60] Native|Public        
	// Function /Script/Engine.Pawn.OnRep_Controller
	// void OnRep_Controller();                                                                                                 // [0x33b6cc0] Native|Public        
	// Function /Script/Engine.Pawn.LaunchPawn
	// void LaunchPawn(FVector LaunchVelocity, bool bXYOverride, bool bZOverride);                                              // [0x33b6a80] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Pawn.K2_GetMovementInputVector
	// FVector K2_GetMovementInputVector();                                                                                     // [0x33b6920] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsPlayerControlled
	// bool IsPlayerControlled();                                                                                               // [0x32e3df0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsPawnControlled
	// bool IsPawnControlled();                                                                                                 // [0x33b6a50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsMoveInputIgnored
	// bool IsMoveInputIgnored();                                                                                               // [0x33b69f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsLocallyControlled
	// bool IsLocallyControlled();                                                                                              // [0x33b69c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsControlled
	// bool IsControlled();                                                                                                     // [0x33b6990] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsBotControlled
	// bool IsBotControlled();                                                                                                  // [0x3305c50] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetPendingMovementInputVector
	// FVector GetPendingMovementInputVector();                                                                                 // [0x33b6920] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetNavAgentLocation
	// FVector GetNavAgentLocation();                                                                                           // [0x33b6860] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetMovementComponent
	// class UPawnMovementComponent* GetMovementComponent();                                                                    // [0x32e8830] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetMovementBaseActor
	// class AActor* GetMovementBaseActor(class APawn* Pawn);                                                                   // [0x33b67d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.Pawn.GetLastMovementInputVector
	// FVector GetLastMovementInputVector();                                                                                    // [0x33b6790] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetControlRotation
	// FRotator GetControlRotation();                                                                                           // [0x33b6660] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetController
	// class AController* GetController();                                                                                      // [0x33b66a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetBaseAimRotation
	// FRotator GetBaseAimRotation();                                                                                           // [0x33b6480] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.DetachFromControllerPendingDestroy
	// void DetachFromControllerPendingDestroy();                                                                               // [0x33b6460] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.ConsumeMovementInputVector
	// FVector ConsumeMovementInputVector();                                                                                    // [0x33b6420] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Pawn.AddMovementInput
	// void AddMovementInput(FVector WorldDirection, float ScaleValue, bool bForce);                                            // [0x33b5f00] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Pawn.AddControllerYawInput
	// void AddControllerYawInput(float Val);                                                                                   // [0x33b5d90] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.AddControllerRollInput
	// void AddControllerRollInput(float Val);                                                                                  // [0x33b5d00] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.AddControllerPitchInput
	// void AddControllerPitchInput(float Val);                                                                                 // [0x33b5c70] Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.BasedMovementInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FBasedMovementInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UPrimitiveComponent*)                MovementBase                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FVector_NetQuantize100)                    Location                                                    OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x1C, 12, 0, 0})
	DMember(bool)                                      bServerHasBaseComponent                                     OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(bool)                                      bRelativeRotation                                           OFFSET(get<bool>, {0x29, 1, 0, 0})
	DMember(bool)                                      bServerHasVelocity                                          OFFSET(get<bool>, {0x2A, 1, 0, 0})
};

/// Struct /Script/Engine.RootMotionSourceSettings
/// Size: 0x0001 (0x000000 - 0x000001)
class FRootMotionSourceSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(char)                                      Flags                                                       OFFSET(get<char>, {0x0, 1, 0, 0})
};

/// Struct /Script/Engine.Vector_NetQuantize10
/// Size: 0x0000 (0x00000C - 0x00000C)
class FVector_NetQuantize10 : public FVector
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/Engine.RootMotionSourceGroup
/// Size: 0x0038 (0x000000 - 0x000038)
class FRootMotionSourceGroup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bHasAdditiveSources                                         OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(bool)                                      bHasOverrideSources                                         OFFSET(get<bool>, {0x28, 1, 1, 1})
	DMember(bool)                                      bHasOverrideSourcesWithIgnoreZAccumulate                    OFFSET(get<bool>, {0x28, 1, 1, 2})
	DMember(bool)                                      bIsAdditiveVelocityApplied                                  OFFSET(get<bool>, {0x28, 1, 1, 3})
	SMember(FRootMotionSourceSettings)                 LastAccumulatedSettings                                     OFFSET(getStruct<T>, {0x29, 1, 0, 0})
	SMember(FVector_NetQuantize10)                     LastPreAdditiveVelocity                                     OFFSET(getStruct<T>, {0x2C, 12, 0, 0})
};

/// Struct /Script/Engine.RootMotionMovementParams
/// Size: 0x0040 (0x000000 - 0x000040)
class FRootMotionMovementParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bHasRootMotion                                              OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     BlendWeight                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
	SMember(FTransform)                                RootMotionTransform                                         OFFSET(getStruct<T>, {0x10, 48, 0, 0})
};

/// Struct /Script/Engine.RepRootMotionMontage
/// Size: 0x0098 (0x000000 - 0x000098)
class FRepRootMotionMontage : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	DMember(bool)                                      bIsActive                                                   OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(class UAnimMontage*)                       AnimMontage                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(float)                                     Position                                                    OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FVector_NetQuantize100)                    Location                                                    OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x20, 12, 0, 0})
	CMember(class UPrimitiveComponent*)                MovementBase                                                OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FName)                                     MovementBaseBoneName                                        OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	DMember(bool)                                      bRelativePosition                                           OFFSET(get<bool>, {0x40, 1, 0, 0})
	DMember(bool)                                      bRelativeRotation                                           OFFSET(get<bool>, {0x41, 1, 0, 0})
	SMember(FRootMotionSourceGroup)                    AuthoritativeRootMotion                                     OFFSET(getStruct<T>, {0x48, 56, 0, 0})
	SMember(FVector_NetQuantize10)                     Acceleration                                                OFFSET(getStruct<T>, {0x80, 12, 0, 0})
	SMember(FVector_NetQuantize10)                     LinearVelocity                                              OFFSET(getStruct<T>, {0x8C, 12, 0, 0})
};

/// Struct /Script/Engine.SimulatedRootMotionReplicatedMove
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FSimulatedRootMotionReplicatedMove : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FRepRootMotionMontage)                     RootMotion                                                  OFFSET(getStruct<T>, {0x8, 152, 0, 0})
};

/// Class /Script/Engine.Character
/// Size: 0x0240 (0x000280 - 0x0004C0)
class ACharacter : public APawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1216;

public:
	CMember(class USkeletalMeshComponent*)             Mesh                                                        OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UCharacterMovementComponent*)        CharacterMovement                                           OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class UCapsuleComponent*)                  CapsuleComponent                                            OFFSET(get<T>, {0x290, 8, 0, 0})
	SMember(FBasedMovementInfo)                        BasedMovement                                               OFFSET(getStruct<T>, {0x298, 48, 0, 0})
	SMember(FBasedMovementInfo)                        ReplicatedBasedMovement                                     OFFSET(getStruct<T>, {0x2C8, 48, 0, 0})
	DMember(float)                                     AnimRootMotionTranslationScale                              OFFSET(get<float>, {0x2F8, 4, 0, 0})
	SMember(FVector)                                   BaseTranslationOffset                                       OFFSET(getStruct<T>, {0x2FC, 12, 0, 0})
	SMember(FQuat)                                     BaseRotationOffset                                          OFFSET(getStruct<T>, {0x310, 16, 0, 0})
	DMember(float)                                     ReplicatedServerLastTransformUpdateTimeStamp                OFFSET(get<float>, {0x320, 4, 0, 0})
	DMember(float)                                     ReplayLastTransformUpdateTimeStamp                          OFFSET(get<float>, {0x324, 4, 0, 0})
	DMember(char)                                      ReplicatedMovementMode                                      OFFSET(get<char>, {0x328, 1, 0, 0})
	DMember(bool)                                      bInBaseReplication                                          OFFSET(get<bool>, {0x329, 1, 0, 0})
	DMember(float)                                     CrouchedEyeHeight                                           OFFSET(get<float>, {0x32C, 4, 0, 0})
	DMember(bool)                                      bIsCrouched                                                 OFFSET(get<bool>, {0x330, 1, 1, 0})
	DMember(bool)                                      bProxyIsJumpForceApplied                                    OFFSET(get<bool>, {0x330, 1, 1, 1})
	DMember(bool)                                      bPressedJump                                                OFFSET(get<bool>, {0x330, 1, 1, 2})
	DMember(bool)                                      bClientUpdating                                             OFFSET(get<bool>, {0x330, 1, 1, 3})
	DMember(bool)                                      bClientWasFalling                                           OFFSET(get<bool>, {0x330, 1, 1, 4})
	DMember(bool)                                      bClientResimulateRootMotion                                 OFFSET(get<bool>, {0x330, 1, 1, 5})
	DMember(bool)                                      bClientResimulateRootMotionSources                          OFFSET(get<bool>, {0x330, 1, 1, 6})
	DMember(bool)                                      bSimGravityDisabled                                         OFFSET(get<bool>, {0x330, 1, 1, 7})
	DMember(bool)                                      bClientCheckEncroachmentOnNetUpdate                         OFFSET(get<bool>, {0x331, 1, 1, 0})
	DMember(bool)                                      bServerMoveIgnoreRootMotion                                 OFFSET(get<bool>, {0x331, 1, 1, 1})
	DMember(bool)                                      bWasJumping                                                 OFFSET(get<bool>, {0x331, 1, 1, 2})
	DMember(float)                                     JumpKeyHoldTime                                             OFFSET(get<float>, {0x334, 4, 0, 0})
	DMember(float)                                     JumpForceTimeRemaining                                      OFFSET(get<float>, {0x338, 4, 0, 0})
	DMember(float)                                     ProxyJumpForceStartedTime                                   OFFSET(get<float>, {0x33C, 4, 0, 0})
	DMember(float)                                     JumpMaxHoldTime                                             OFFSET(get<float>, {0x340, 4, 0, 0})
	DMember(int32_t)                                   JumpMaxCount                                                OFFSET(get<int32_t>, {0x344, 4, 0, 0})
	DMember(int32_t)                                   JumpCurrentCount                                            OFFSET(get<int32_t>, {0x348, 4, 0, 0})
	DMember(int32_t)                                   JumpCurrentCountPreJump                                     OFFSET(get<int32_t>, {0x34C, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnReachedJumpApex                                           OFFSET(getStruct<T>, {0x358, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  MovementModeChangedDelegate                                 OFFSET(getStruct<T>, {0x378, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCharacterMovementUpdated                                  OFFSET(getStruct<T>, {0x388, 16, 0, 0})
	SMember(FRootMotionSourceGroup)                    SavedRootMotion                                             OFFSET(getStruct<T>, {0x398, 56, 0, 0})
	SMember(FRootMotionMovementParams)                 ClientRootMotionParams                                      OFFSET(getStruct<T>, {0x3D0, 64, 0, 0})
	CMember(TArray<FSimulatedRootMotionReplicatedMove>) RootMotionRepMoves                                         OFFSET(get<T>, {0x410, 16, 0, 0})
	SMember(FRepRootMotionMontage)                     RepRootMotion                                               OFFSET(getStruct<T>, {0x420, 152, 0, 0})


	/// Functions
	// Function /Script/Engine.Character.UnCrouch
	// void UnCrouch(bool bClientSimulation);                                                                                   // [0x32db760] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.StopJumping
	// void StopJumping();                                                                                                      // [0x32db740] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.StopAnimMontage
	// void StopAnimMontage(class UAnimMontage* AnimMontage);                                                                   // [0x32db6b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.ServerMovePacked
	// void ServerMovePacked(FCharacterServerMovePackedBits PackedBits);                                                        // [0x32db2e0] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveOld
	// void ServerMoveOld(float OldTimeStamp, FVector_NetQuantize10 OldAccel, char OldMoveFlags);                               // [0x32db170] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveNoBase
	// void ServerMoveNoBase(float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // [0x32daed0] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveDualNoBase
	// void ServerMoveDualNoBase(float TimeStamp0, FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // [0x32daad0] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveDualHybridRootMotion
	// void ServerMoveDualHybridRootMotion(float TimeStamp0, FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, char ClientMovementMode); // [0x32da640] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveDual
	// void ServerMoveDual(float TimeStamp0, FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, char ClientMovementMode); // [0x32da1b0] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMove
	// void ServerMove(float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, char ClientMovementMode); // [0x32d9e70] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.RootMotionDebugClientPrintOnScreen
	// void RootMotionDebugClientPrintOnScreen(FString inString);                                                               // [0x32d9dd0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.Character.PlayAnimMontage
	// float PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);                        // [0x32d9cb0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.OnWalkingOffLedge
	// void OnWalkingOffLedge(FVector& PreviousFloorImpactNormal, FVector& PreviousFloorContactNormal, FVector& PreviousLocation, float TimeDelta); // [0x32d9b10] Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Character.OnRep_RootMotion
	// void OnRep_RootMotion();                                                                                                 // [0x32d9af0] Final|Native|Public  
	// Function /Script/Engine.Character.OnRep_ReplicatedBasedMovement
	// void OnRep_ReplicatedBasedMovement();                                                                                    // [0x32d9ad0] Native|Public        
	// Function /Script/Engine.Character.OnRep_ReplayLastTransformUpdateTimeStamp
	// void OnRep_ReplayLastTransformUpdateTimeStamp();                                                                         // [0x32d9ab0] Final|Native|Public  
	// Function /Script/Engine.Character.OnRep_IsCrouched
	// void OnRep_IsCrouched();                                                                                                 // [0x32d9a90] Native|Public        
	// Function /Script/Engine.Character.OnLaunched
	// void OnLaunched(FVector LaunchVelocity, bool bXYOverride, bool bZOverride);                                              // [0x198a600] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Character.OnLanded
	// void OnLanded(FHitResult& Hit);                                                                                          // [0x198a600] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/Engine.Character.OnJumped
	// void OnJumped();                                                                                                         // [0x32d9a70] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.LaunchCharacter
	// void LaunchCharacter(FVector LaunchVelocity, bool bXYOverride, bool bZOverride);                                         // [0x32d9940] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Character.K2_UpdateCustomMovement
	// void K2_UpdateCustomMovement(float DeltaTime);                                                                           // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.K2_OnStartCrouch
	// void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);                                             // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.K2_OnMovementModeChanged
	// void K2_OnMovementModeChanged(TEnumAsByte<EMovementMode> PrevMovementMode, TEnumAsByte<EMovementMode> NewMovementMode, char PrevCustomMode, char NewCustomMode); // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.K2_OnEndCrouch
	// void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);                                               // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.Jump
	// void Jump();                                                                                                             // [0x32d9920] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.IsPlayingRootMotion
	// bool IsPlayingRootMotion();                                                                                              // [0x32d98f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.IsPlayingNetworkedRootMotionMontage
	// bool IsPlayingNetworkedRootMotionMontage();                                                                              // [0x32d98c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.IsJumpProvidingForce
	// bool IsJumpProvidingForce();                                                                                             // [0x32d9890] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.HasAnyRootMotion
	// bool HasAnyRootMotion();                                                                                                 // [0x32d9860] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.GetCurrentMontage
	// class UAnimMontage* GetCurrentMontage();                                                                                 // [0x32d91d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.GetBaseTranslationOffset
	// FVector GetBaseTranslationOffset();                                                                                      // [0x32d91a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.GetBaseRotationOffsetRotator
	// FRotator GetBaseRotationOffsetRotator();                                                                                 // [0x32d9150] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.GetAnimRootMotionTranslationScale
	// float GetAnimRootMotionTranslationScale();                                                                               // [0x32d9120] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.Crouch
	// void Crouch(bool bClientSimulation);                                                                                     // [0x32d9090] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.ClientVeryShortAdjustPosition
	// void ClientVeryShortAdjustPosition(float Timestamp, FVector NewLoc, class UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // [0x32d8d10] Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Character.ClientMoveResponsePacked
	// void ClientMoveResponsePacked(FCharacterMoveResponsePackedBits PackedBits);                                              // [0x32d8c20] Net|Native|Event|Public|NetClient|NetValidate 
	// Function /Script/Engine.Character.ClientCheatWalk
	// void ClientCheatWalk();                                                                                                  // [0x32d8c00] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.Character.ClientCheatGhost
	// void ClientCheatGhost();                                                                                                 // [0x32d8be0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.Character.ClientCheatFly
	// void ClientCheatFly();                                                                                                   // [0x32d8bc0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.Character.ClientAdjustRootMotionSourcePosition
	// void ClientAdjustRootMotionSourcePosition(float Timestamp, FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // [0x32d86e0] Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Character.ClientAdjustRootMotionPosition
	// void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // [0x32d83b0] Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Character.ClientAdjustPosition
	// void ClientAdjustPosition(float Timestamp, FVector NewLoc, FVector NewVel, class UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // [0x32d8120] Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Character.ClientAckGoodMove
	// void ClientAckGoodMove(float Timestamp);                                                                                 // [0x32d80a0] Net|Native|Event|Public|NetClient 
	// Function /Script/Engine.Character.CanJumpInternal
	// bool CanJumpInternal();                                                                                                  // [0x32d8070] Native|Event|Protected|BlueprintEvent|Const 
	// Function /Script/Engine.Character.CanJump
	// bool CanJump();                                                                                                          // [0x32d8040] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.CanCrouch
	// bool CanCrouch();                                                                                                        // [0x32d8010] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.CacheInitialMeshOffset
	// void CacheInitialMeshOffset(FVector MeshRelativeLocation, FRotator MeshRelativeRotation);                                // [0x32d7f20] Native|Public|HasDefaults|BlueprintCallable 
};

/// Struct /Script/Engine.SplineCurves
/// Size: 0x0070 (0x000000 - 0x000070)
class FSplineCurves : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FInterpCurveVector)                        Position                                                    OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FInterpCurveQuat)                          Rotation                                                    OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	SMember(FInterpCurveVector)                        Scale                                                       OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	SMember(FInterpCurveFloat)                         ReparamTable                                                OFFSET(getStruct<T>, {0x48, 24, 0, 0})
	CMember(class USplineMetadata*)                    MetaData                                                    OFFSET(get<T>, {0x60, 8, 0, 0})
	DMember(uint32_t)                                  Version                                                     OFFSET(get<uint32_t>, {0x68, 4, 0, 0})
};

/// Class /Script/Engine.SplineComponent
/// Size: 0x00F8 (0x000468 - 0x000560)
class USplineComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1376;

public:
	SMember(FSplineCurves)                             SplineCurves                                                OFFSET(getStruct<T>, {0x468, 112, 0, 0})
	SMember(FInterpCurveVector)                        SplineInfo                                                  OFFSET(getStruct<T>, {0x4D8, 24, 0, 0})
	SMember(FInterpCurveQuat)                          SplineRotInfo                                               OFFSET(getStruct<T>, {0x4F0, 24, 0, 0})
	SMember(FInterpCurveVector)                        SplineScaleInfo                                             OFFSET(getStruct<T>, {0x508, 24, 0, 0})
	SMember(FInterpCurveFloat)                         SplineReparamTable                                          OFFSET(getStruct<T>, {0x520, 24, 0, 0})
	DMember(bool)                                      bAllowSplineEditingPerInstance                              OFFSET(get<bool>, {0x538, 1, 0, 0})
	DMember(int32_t)                                   ReparamStepsPerSegment                                      OFFSET(get<int32_t>, {0x53C, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x540, 4, 0, 0})
	DMember(bool)                                      bStationaryEndpoints                                        OFFSET(get<bool>, {0x544, 1, 0, 0})
	DMember(bool)                                      bSplineHasBeenEdited                                        OFFSET(get<bool>, {0x545, 1, 0, 0})
	DMember(bool)                                      bModifiedByConstructionScript                               OFFSET(get<bool>, {0x546, 1, 0, 0})
	DMember(bool)                                      bInputSplinePointsToConstructionScript                      OFFSET(get<bool>, {0x547, 1, 0, 0})
	DMember(bool)                                      bDrawDebug                                                  OFFSET(get<bool>, {0x548, 1, 0, 0})
	DMember(bool)                                      bClosedLoop                                                 OFFSET(get<bool>, {0x549, 1, 0, 0})
	DMember(bool)                                      bLoopPositionOverride                                       OFFSET(get<bool>, {0x54A, 1, 0, 0})
	DMember(float)                                     LoopPosition                                                OFFSET(get<float>, {0x54C, 4, 0, 0})
	SMember(FVector)                                   DefaultUpVector                                             OFFSET(getStruct<T>, {0x550, 12, 0, 0})


	/// Functions
	// Function /Script/Engine.SplineComponent.UpdateSpline
	// void UpdateSpline();                                                                                                     // [0x3404320] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetWorldLocationAtSplinePoint
	// void SetWorldLocationAtSplinePoint(int32_t PointIndex, FVector& InLocation);                                             // [0x3404240] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetUpVectorAtSplinePoint
	// void SetUpVectorAtSplinePoint(int32_t PointIndex, FVector& InUpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x34040d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetUnselectedSplineSegmentColor
	// void SetUnselectedSplineSegmentColor(FLinearColor& SegmentColor);                                                        // [0x3403880] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetTangentsAtSplinePoint
	// void SetTangentsAtSplinePoint(int32_t PointIndex, FVector& InArriveTangent, FVector& InLeaveTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x3403f00] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetTangentColor
	// void SetTangentColor(FLinearColor& TangentColor);                                                                        // [0x3403880] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetTangentAtSplinePoint
	// void SetTangentAtSplinePoint(int32_t PointIndex, FVector& InTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x3403d90] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSplineWorldPoints
	// void SetSplineWorldPoints(TArray<FVector>& Points);                                                                      // [0x3403ce0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSplinePointType
	// void SetSplinePointType(int32_t PointIndex, TEnumAsByte<ESplinePointType> Type, bool bUpdateSpline);                     // [0x3403aa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSplinePoints
	// void SetSplinePoints(TArray<FVector>& Points, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);  // [0x3403bb0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSplineLocalPoints
	// void SetSplineLocalPoints(TArray<FVector>& Points);                                                                      // [0x34039f0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSelectedSplineSegmentColor
	// void SetSelectedSplineSegmentColor(FLinearColor& SegmentColor);                                                          // [0x3403880] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetScaleAtSplinePoint
	// void SetScaleAtSplinePoint(int32_t PointIndex, FVector& InScaleVector, bool bUpdateSpline);                              // [0x3403770] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetRotationAtSplinePoint
	// void SetRotationAtSplinePoint(int32_t PointIndex, FRotator& InRotation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x3403600] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetLocationAtSplinePoint
	// void SetLocationAtSplinePoint(int32_t PointIndex, FVector& InLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x3403490] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetDrawDebug
	// void SetDrawDebug(bool bShow);                                                                                           // [0x3403400] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetDefaultUpVector
	// void SetDefaultUpVector(FVector& UpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                         // [0x3403320] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetClosedLoopAtPosition
	// void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);                                         // [0x3403200] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetClosedLoop
	// void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);                                                              // [0x3403130] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.RemoveSplinePoint
	// void RemoveSplinePoint(int32_t Index, bool bUpdateSpline);                                                               // [0x3403060] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.IsClosedLoop
	// bool IsClosedLoop();                                                                                                     // [0x3403030] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline
	// FVector GetWorldTangentAtDistanceAlongSpline(float Distance);                                                            // [0x3402f80] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldRotationAtTime
	// FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);                                                  // [0x3402e90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline
	// FRotator GetWorldRotationAtDistanceAlongSpline(float Distance);                                                          // [0x3402de0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldLocationAtTime
	// FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);                                                   // [0x3402cf0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldLocationAtSplinePoint
	// FVector GetWorldLocationAtSplinePoint(int32_t PointIndex);                                                               // [0x3402c40] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline
	// FVector GetWorldLocationAtDistanceAlongSpline(float Distance);                                                           // [0x3402b90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldDirectionAtTime
	// FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);                                                  // [0x3402aa0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline
	// FVector GetWorldDirectionAtDistanceAlongSpline(float Distance);                                                          // [0x34029f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetVectorPropertyAtSplinePoint
	// FVector GetVectorPropertyAtSplinePoint(int32_t Index, FName PropertyName);                                               // [0x3402910] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetVectorPropertyAtSplineInputKey
	// FVector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);                                              // [0x3402830] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtTime
	// FVector GetUpVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);   // [0x3402700] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtSplinePoint
	// FVector GetUpVectorAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);               // [0x3402620] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtSplineInputKey
	// FVector GetUpVectorAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                   // [0x3402530] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline
	// FVector GetUpVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);           // [0x3402440] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTransformAtTime
	// FTransform GetTransformAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity, bool bUseScale); // [0x34022a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTransformAtSplinePoint
	// FTransform GetTransformAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x3402150] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTransformAtSplineInputKey
	// FTransform GetTransformAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x3401ff0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTransformAtDistanceAlongSpline
	// FTransform GetTransformAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x3401e90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTangentAtTime
	// FVector GetTangentAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);    // [0x3401d60] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTangentAtSplinePoint
	// FVector GetTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                // [0x34003d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTangentAtSplineInputKey
	// FVector GetTangentAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                    // [0x3401c70] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTangentAtDistanceAlongSpline
	// FVector GetTangentAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);            // [0x3401b80] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetSplinePointType
	// TEnumAsByte<ESplinePointType> GetSplinePointType(int32_t PointIndex);                                                    // [0x3401ae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetSplineLength
	// float GetSplineLength();                                                                                                 // [0x3401ab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetScaleAtTime
	// FVector GetScaleAtTime(float Time, bool bUseConstantVelocity);                                                           // [0x3401930] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetScaleAtSplinePoint
	// FVector GetScaleAtSplinePoint(int32_t PointIndex);                                                                       // [0x3401880] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetScaleAtSplineInputKey
	// FVector GetScaleAtSplineInputKey(float InKey);                                                                           // [0x34017e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetScaleAtDistanceAlongSpline
	// FVector GetScaleAtDistanceAlongSpline(float Distance);                                                                   // [0x3401740] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRotationAtTime
	// FRotator GetRotationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);  // [0x3401610] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRotationAtSplinePoint
	// FRotator GetRotationAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);              // [0x3401530] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRotationAtSplineInputKey
	// FRotator GetRotationAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                  // [0x3401440] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRotationAtDistanceAlongSpline
	// FRotator GetRotationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);          // [0x3401350] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRollAtTime
	// float GetRollAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);         // [0x3401230] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRollAtSplinePoint
	// float GetRollAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                     // [0x3401160] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRollAtSplineInputKey
	// float GetRollAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                         // [0x3401080] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRollAtDistanceAlongSpline
	// float GetRollAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                 // [0x3400fa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtTime
	// FVector GetRightVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity); // [0x3400e70] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtSplinePoint
	// FVector GetRightVectorAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);            // [0x3400d90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtSplineInputKey
	// FVector GetRightVectorAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                // [0x3400ca0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline
	// FVector GetRightVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);        // [0x3400bb0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetNumberOfSplineSegments
	// int32_t GetNumberOfSplineSegments();                                                                                     // [0x3400b80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetNumberOfSplinePoints
	// int32_t GetNumberOfSplinePoints();                                                                                       // [0x3400b50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAtTime
	// FVector GetLocationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);   // [0x3400a20] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAtSplinePoint
	// FVector GetLocationAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);               // [0x3400940] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAtSplineInputKey
	// FVector GetLocationAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                   // [0x3400850] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAtDistanceAlongSpline
	// FVector GetLocationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);           // [0x3400760] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAndTangentAtSplinePoint
	// void GetLocationAndTangentAtSplinePoint(int32_t PointIndex, FVector& Location, FVector& Tangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x34005e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint
	// void GetLocalLocationAndTangentAtSplinePoint(int32_t PointIndex, FVector& LocalLocation, FVector& LocalTangent);         // [0x34004b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLeaveTangentAtSplinePoint
	// FVector GetLeaveTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);           // [0x34003d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline
	// float GetInputKeyAtDistanceAlongSpline(float Distance);                                                                  // [0x3400330] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetFloatPropertyAtSplinePoint
	// float GetFloatPropertyAtSplinePoint(int32_t Index, FName PropertyName);                                                  // [0x3400260] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetFloatPropertyAtSplineInputKey
	// float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);                                                 // [0x3400190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint
	// float GetDistanceAlongSplineAtSplinePoint(int32_t PointIndex);                                                           // [0x34000f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDistanceAlongSplineAtSplineInputKey
	// float GetDistanceAlongSplineAtSplineInputKey(float InKey);                                                               // [0x3400050] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDirectionAtTime
	// FVector GetDirectionAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);  // [0x33fff20] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDirectionAtSplinePoint
	// FVector GetDirectionAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);              // [0x33ffe40] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDirectionAtSplineInputKey
	// FVector GetDirectionAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                  // [0x33ffd50] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDirectionAtDistanceAlongSpline
	// FVector GetDirectionAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);          // [0x33ffc60] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDefaultUpVector
	// FVector GetDefaultUpVector(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                                         // [0x33ffbc0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetArriveTangentAtSplinePoint
	// FVector GetArriveTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);          // [0x33ffae0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindUpVectorClosestToWorldLocation
	// FVector FindUpVectorClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x33ff9f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindTransformClosestToWorldLocation
	// FTransform FindTransformClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x33ff890] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindTangentClosestToWorldLocation
	// FVector FindTangentClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);  // [0x33ff7a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindScaleClosestToWorldLocation
	// FVector FindScaleClosestToWorldLocation(FVector& WorldLocation);                                                         // [0x33ff6f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindRotationClosestToWorldLocation
	// FRotator FindRotationClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x33ff600] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindRollClosestToWorldLocation
	// float FindRollClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);       // [0x33ff520] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindRightVectorClosestToWorldLocation
	// FVector FindRightVectorClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x33ff430] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindLocationClosestToWorldLocation
	// FVector FindLocationClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x33ff340] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindInputKeyClosestToWorldLocation
	// float FindInputKeyClosestToWorldLocation(FVector& WorldLocation);                                                        // [0x33ff2a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindDirectionClosestToWorldLocation
	// FVector FindDirectionClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x33ff1b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.ClearSplinePoints
	// void ClearSplinePoints(bool bUpdateSpline);                                                                              // [0x33ff120] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddSplineWorldPoint
	// void AddSplineWorldPoint(FVector& Position);                                                                             // [0x33ff080] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddSplinePointAtIndex
	// void AddSplinePointAtIndex(FVector& Position, int32_t Index, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x33fef10] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddSplinePoint
	// void AddSplinePoint(FVector& Position, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);         // [0x33fedf0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddSplineLocalPoint
	// void AddSplineLocalPoint(FVector& Position);                                                                             // [0x33fed60] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddPoints
	// void AddPoints(TArray<FSplinePoint>& Points, bool bUpdateSpline);                                                        // [0x33fec60] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddPoint
	// void AddPoint(FSplinePoint& Point, bool bUpdateSpline);                                                                  // [0x33feb50] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AnimBoneCompressionCodec
/// Size: 0x0010 (0x000028 - 0x000038)
class UAnimBoneCompressionCodec : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FString)                                   Description                                                 OFFSET(getStruct<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.AnimCurveCompressionCodec
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimCurveCompressionCodec : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Engine.AudioComponentParam
/// Size: 0x0020 (0x000000 - 0x000020)
class FAudioComponentParam : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     ParamName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     FloatParam                                                  OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      BoolParam                                                   OFFSET(get<bool>, {0xC, 1, 0, 0})
	DMember(int32_t)                                   IntParam                                                    OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	CMember(class USoundWave*)                         SoundWaveParam                                              OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Class /Script/Engine.AudioComponent
/// Size: 0x0668 (0x0001F8 - 0x000860)
class UAudioComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2144;

public:
	CMember(class USoundBase*)                         Sound                                                       OFFSET(get<T>, {0x1F8, 8, 0, 0})
	CMember(TArray<FAudioComponentParam>)              InstanceParameters                                          OFFSET(get<T>, {0x200, 16, 0, 0})
	CMember(class USoundClass*)                        SoundClassOverride                                          OFFSET(get<T>, {0x210, 8, 0, 0})
	DMember(bool)                                      bAutoDestroy                                                OFFSET(get<bool>, {0x218, 1, 1, 0})
	DMember(bool)                                      bStopWhenOwnerDestroyed                                     OFFSET(get<bool>, {0x218, 1, 1, 1})
	DMember(bool)                                      bShouldRemainActiveIfDropped                                OFFSET(get<bool>, {0x218, 1, 1, 2})
	DMember(bool)                                      bAllowSpatialization                                        OFFSET(get<bool>, {0x218, 1, 1, 3})
	DMember(bool)                                      bOverrideAttenuation                                        OFFSET(get<bool>, {0x218, 1, 1, 4})
	DMember(bool)                                      bOverrideSubtitlePriority                                   OFFSET(get<bool>, {0x218, 1, 1, 5})
	DMember(bool)                                      bIsUISound                                                  OFFSET(get<bool>, {0x218, 1, 1, 6})
	DMember(bool)                                      bEnableLowPassFilter                                        OFFSET(get<bool>, {0x218, 1, 1, 7})
	DMember(bool)                                      bOverridePriority                                           OFFSET(get<bool>, {0x219, 1, 1, 0})
	DMember(bool)                                      bSuppressSubtitles                                          OFFSET(get<bool>, {0x219, 1, 1, 1})
	DMember(bool)                                      bAutoManageAttachment                                       OFFSET(get<bool>, {0x21A, 1, 1, 4})
	SMember(FName)                                     AudioComponentUserID                                        OFFSET(getStruct<T>, {0x220, 8, 0, 0})
	DMember(float)                                     PitchModulationMin                                          OFFSET(get<float>, {0x228, 4, 0, 0})
	DMember(float)                                     PitchModulationMax                                          OFFSET(get<float>, {0x22C, 4, 0, 0})
	DMember(float)                                     VolumeModulationMin                                         OFFSET(get<float>, {0x230, 4, 0, 0})
	DMember(float)                                     VolumeModulationMax                                         OFFSET(get<float>, {0x234, 4, 0, 0})
	DMember(float)                                     VolumeMultiplier                                            OFFSET(get<float>, {0x238, 4, 0, 0})
	DMember(int32_t)                                   EnvelopeFollowerAttackTime                                  OFFSET(get<int32_t>, {0x23C, 4, 0, 0})
	DMember(int32_t)                                   EnvelopeFollowerReleaseTime                                 OFFSET(get<int32_t>, {0x240, 4, 0, 0})
	DMember(float)                                     Priority                                                    OFFSET(get<float>, {0x244, 4, 0, 0})
	DMember(float)                                     SubtitlePriority                                            OFFSET(get<float>, {0x248, 4, 0, 0})
	CMember(class USoundEffectSourcePresetChain*)      SourceEffectChain                                           OFFSET(get<T>, {0x250, 8, 0, 0})
	DMember(float)                                     PitchMultiplier                                             OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(float)                                     LowPassFilterFrequency                                      OFFSET(get<float>, {0x25C, 4, 0, 0})
	CMember(class USoundAttenuation*)                  AttenuationSettings                                         OFFSET(get<T>, {0x268, 8, 0, 0})
	SMember(FSoundAttenuationSettings)                 AttenuationOverrides                                        OFFSET(getStruct<T>, {0x270, 928, 0, 0})
	CMember(class USoundConcurrency*)                  ConcurrencySettings                                         OFFSET(get<T>, {0x610, 8, 0, 0})
	CMember(TSet<USoundConcurrency*>)                  ConcurrencySet                                              OFFSET(get<T>, {0x618, 80, 0, 0})
	CMember(EAttachmentRule)                           AutoAttachLocationRule                                      OFFSET(get<T>, {0x674, 1, 0, 0})
	CMember(EAttachmentRule)                           AutoAttachRotationRule                                      OFFSET(get<T>, {0x675, 1, 0, 0})
	CMember(EAttachmentRule)                           AutoAttachScaleRule                                         OFFSET(get<T>, {0x676, 1, 0, 0})
	SMember(FSoundModulationDefaultRoutingSettings)    ModulationRouting                                           OFFSET(getStruct<T>, {0x678, 72, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAudioPlayStateChanged                                     OFFSET(getStruct<T>, {0x6C0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAudioVirtualizationChanged                                OFFSET(getStruct<T>, {0x6E8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAudioFinished                                             OFFSET(getStruct<T>, {0x710, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAudioPlaybackPercent                                      OFFSET(getStruct<T>, {0x738, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAudioSingleEnvelopeValue                                  OFFSET(getStruct<T>, {0x760, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAudioMultiEnvelopeValue                                   OFFSET(getStruct<T>, {0x788, 16, 0, 0})
	SMember(FDelegateProperty)                         OnQueueSubtitles                                            OFFSET(getStruct<T>, {0x7B0, 16, 0, 0})
	CMember(TWeakObjectPtr<class USceneComponent*>)    AutoAttachParent                                            OFFSET(get<T>, {0x7C0, 8, 0, 0})
	SMember(FName)                                     AutoAttachSocketName                                        OFFSET(getStruct<T>, {0x7C8, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.AudioComponent.StopDelayed
	// void StopDelayed(float DelayTime);                                                                                       // [0x32bea30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.Stop
	// void Stop();                                                                                                             // [0x32bea10] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetWaveParameter
	// void SetWaveParameter(FName InName, class USoundWave* InWave);                                                           // [0x32be940] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetVolumeMultiplier
	// void SetVolumeMultiplier(float NewVolumeMultiplier);                                                                     // [0x32be8c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetUISound
	// void SetUISound(bool bInUISound);                                                                                        // [0x32be830] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetSubmixSend
	// void SetSubmixSend(class USoundSubmixBase* Submix, float SendLevel);                                                     // [0x32be6e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetSourceBusSendPreEffect
	// void SetSourceBusSendPreEffect(class USoundSourceBus* SoundSourceBus, float SourceBusSendLevel);                         // [0x32be590] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetSourceBusSendPostEffect
	// void SetSourceBusSendPostEffect(class USoundSourceBus* SoundSourceBus, float SourceBusSendLevel);                        // [0x32be4c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetSound
	// void SetSound(class USoundBase* NewSound);                                                                               // [0x32be430] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetPitchMultiplier
	// void SetPitchMultiplier(float NewPitchMultiplier);                                                                       // [0x32be290] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetPaused
	// void SetPaused(bool bPause);                                                                                             // [0x32be200] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetLowPassFilterFrequency
	// void SetLowPassFilterFrequency(float InLowPassFilterFrequency);                                                          // [0x32be180] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetLowPassFilterEnabled
	// void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);                                                               // [0x32be0f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetIntParameter
	// void SetIntParameter(FName InName, int32_t inInt);                                                                       // [0x32be020] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetFloatParameter
	// void SetFloatParameter(FName InName, float InFloat);                                                                     // [0x32bded0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetBoolParameter
	// void SetBoolParameter(FName InName, bool InBool);                                                                        // [0x32bdaf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetAudioBusSendPreEffect
	// void SetAudioBusSendPreEffect(class UAudioBus* AudioBus, float AudioBusSendLevel);                                       // [0x32bda20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetAudioBusSendPostEffect
	// void SetAudioBusSendPostEffect(class UAudioBus* AudioBus, float SourceBusSendLevel);                                     // [0x32bd950] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.PlayQuantized
	// void PlayQuantized(class UObject* WorldContextObject, class UQuartzClockHandle*& InClockHandle, FQuartzQuantizationBoundary& InQuantizationBoundary, FDelegateProperty& InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, EAudioFaderCurve InFadeCurve); // [0x32bd610] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.Play
	// void Play(float StartTime);                                                                                              // [0x32bd580] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.IsVirtualized
	// bool IsVirtualized();                                                                                                    // [0x32bd550] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AudioComponent.IsPlaying
	// bool IsPlaying();                                                                                                        // [0x32bd520] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AudioComponent.HasCookedFFTData
	// bool HasCookedFFTData();                                                                                                 // [0x32bd4f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AudioComponent.HasCookedAmplitudeEnvelopeData
	// bool HasCookedAmplitudeEnvelopeData();                                                                                   // [0x32bd4c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AudioComponent.GetPlayState
	// EAudioComponentPlayState GetPlayState();                                                                                 // [0x32bd490] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AudioComponent.GetCookedFFTDataForAllPlayingSounds
	// bool GetCookedFFTDataForAllPlayingSounds(TArray<FSoundWaveSpectralDataPerSound>& OutSoundWaveSpectralData);              // [0x32bd3b0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.GetCookedFFTData
	// bool GetCookedFFTData(TArray<float>& FrequenciesToGet, TArray<FSoundWaveSpectralData>& OutSoundWaveSpectralData);        // [0x32bd290] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.GetCookedEnvelopeDataForAllPlayingSounds
	// bool GetCookedEnvelopeDataForAllPlayingSounds(TArray<FSoundWaveEnvelopeDataPerSound>& OutEnvelopeData);                  // [0x32bd1d0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.GetCookedEnvelopeData
	// bool GetCookedEnvelopeData(float& OutEnvelopeData);                                                                      // [0x32bd120] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.FadeOut
	// void FadeOut(float FadeOutDuration, float FadeVolumeLevel, EAudioFaderCurve FadeCurve);                                  // [0x32bd000] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.FadeIn
	// void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, EAudioFaderCurve FadeCurve);                   // [0x32bcea0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.BP_GetAttenuationSettingsToApply
	// bool BP_GetAttenuationSettingsToApply(FSoundAttenuationSettings& OutAttenuationSettings);                                // [0x32bccb0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.AdjustVolume
	// void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, EAudioFaderCurve FadeCurve);                      // [0x32bc0c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.AdjustAttenuation
	// void AdjustAttenuation(FSoundAttenuationSettings& InAttenuationSettings);                                                // [0x32bbff0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.SaveGame
/// Size: 0x0000 (0x000028 - 0x000028)
class USaveGame : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.GameMode
/// Size: 0x0048 (0x0002C0 - 0x000308)
class AGameMode : public AGameModeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 776;

public:
	SMember(FName)                                     MatchState                                                  OFFSET(getStruct<T>, {0x2C0, 8, 0, 0})
	DMember(bool)                                      bDelayedStart                                               OFFSET(get<bool>, {0x2C8, 1, 1, 0})
	DMember(int32_t)                                   NumSpectators                                               OFFSET(get<int32_t>, {0x2CC, 4, 0, 0})
	DMember(int32_t)                                   NumPlayers                                                  OFFSET(get<int32_t>, {0x2D0, 4, 0, 0})
	DMember(int32_t)                                   NumBots                                                     OFFSET(get<int32_t>, {0x2D4, 4, 0, 0})
	DMember(float)                                     MinRespawnDelay                                             OFFSET(get<float>, {0x2D8, 4, 0, 0})
	DMember(int32_t)                                   NumTravellingPlayers                                        OFFSET(get<int32_t>, {0x2DC, 4, 0, 0})
	CMember(class UClass*)                             EngineMessageClass                                          OFFSET(get<T>, {0x2E0, 8, 0, 0})
	CMember(TArray<class APlayerState*>)               InactivePlayerArray                                         OFFSET(get<T>, {0x2E8, 16, 0, 0})
	DMember(float)                                     InactivePlayerStateLifeSpan                                 OFFSET(get<float>, {0x2F8, 4, 0, 0})
	DMember(int32_t)                                   MaxInactivePlayers                                          OFFSET(get<int32_t>, {0x2FC, 4, 0, 0})
	DMember(bool)                                      bHandleDedicatedServerReplays                               OFFSET(get<bool>, {0x300, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.GameMode.StartMatch
	// void StartMatch();                                                                                                       // [0x330be50] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameMode.SetBandwidthLimit
	// void SetBandwidthLimit(float AsyncIOBandwidthLimit);                                                                     // [0x33088e0] Exec|Native|Public   
	// Function /Script/Engine.GameMode.Say
	// void Say(FString Msg);                                                                                                   // [0x3308840] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameMode.RestartGame
	// void RestartGame();                                                                                                      // [0x3308460] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameMode.ReadyToStartMatch
	// bool ReadyToStartMatch();                                                                                                // [0x32d8010] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameMode.ReadyToEndMatch
	// bool ReadyToEndMatch();                                                                                                  // [0x3308170] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameMode.K2_OnSetMatchState
	// void K2_OnSetMatchState(FName NewState);                                                                                 // [0x198a600] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameMode.IsMatchInProgress
	// bool IsMatchInProgress();                                                                                                // [0x3305f20] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameMode.GetMatchState
	// FName GetMatchState();                                                                                                   // [0x3304ad0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameMode.EndMatch
	// void EndMatch();                                                                                                         // [0x3303370] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameMode.AbortMatch
	// void AbortMatch();                                                                                                       // [0x32ffba0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.GameStateBase
/// Size: 0x0050 (0x000220 - 0x000270)
class AGameStateBase : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	CMember(class UClass*)                             GameModeClass                                               OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class AGameModeBase*)                      AuthorityGameMode                                           OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UClass*)                             SpectatorClass                                              OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(TArray<class APlayerState*>)               PlayerArray                                                 OFFSET(get<T>, {0x238, 16, 0, 0})
	DMember(bool)                                      bReplicatedHasBegunPlay                                     OFFSET(get<bool>, {0x248, 1, 0, 0})
	DMember(float)                                     ReplicatedWorldTimeSeconds                                  OFFSET(get<float>, {0x24C, 4, 0, 0})
	DMember(float)                                     ServerWorldTimeSecondsDelta                                 OFFSET(get<float>, {0x250, 4, 0, 0})
	DMember(float)                                     ServerWorldTimeSecondsUpdateFrequency                       OFFSET(get<float>, {0x254, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.GameStateBase.OnRep_SpectatorClass
	// void OnRep_SpectatorClass();                                                                                             // [0x32e4080] Native|Protected     
	// Function /Script/Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds
	// void OnRep_ReplicatedWorldTimeSeconds();                                                                                 // [0x330be70] Native|Protected     
	// Function /Script/Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay
	// void OnRep_ReplicatedHasBegunPlay();                                                                                     // [0x13e1b40] Native|Protected     
	// Function /Script/Engine.GameStateBase.OnRep_GameModeClass
	// void OnRep_GameModeClass();                                                                                              // [0x32e4060] Native|Protected     
	// Function /Script/Engine.GameStateBase.HasMatchStarted
	// bool HasMatchStarted();                                                                                                  // [0xb524f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.HasMatchEnded
	// bool HasMatchEnded();                                                                                                    // [0x330eda0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.HasBegunPlay
	// bool HasBegunPlay();                                                                                                     // [0x330ed70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.GetServerWorldTimeSeconds
	// float GetServerWorldTimeSeconds();                                                                                       // [0x330ec40] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.GetPlayerStartTime
	// float GetPlayerStartTime(class AController* Controller);                                                                 // [0x330e750] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.GetPlayerRespawnDelay
	// float GetPlayerRespawnDelay(class AController* Controller);                                                              // [0x330e6b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.GameState
/// Size: 0x0020 (0x000270 - 0x000290)
class AGameState : public AGameStateBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	SMember(FName)                                     MatchState                                                  OFFSET(getStruct<T>, {0x270, 8, 0, 0})
	SMember(FName)                                     PreviousMatchState                                          OFFSET(getStruct<T>, {0x278, 8, 0, 0})
	DMember(int32_t)                                   ElapsedTime                                                 OFFSET(get<int32_t>, {0x280, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.GameState.OnRep_MatchState
	// void OnRep_MatchState();                                                                                                 // [0x330ef80] Native|Public        
	// Function /Script/Engine.GameState.OnRep_ElapsedTime
	// void OnRep_ElapsedTime();                                                                                                // [0x3308440] Native|Public        
};

/// Class /Script/Engine.ApplicationLifecycleComponent
/// Size: 0x0090 (0x0000B0 - 0x000140)
class UApplicationLifecycleComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	SMember(FMulticastInlineDelegate)                  ApplicationWillDeactivateDelegate                           OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationHasReactivatedDelegate                           OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationWillEnterBackgroundDelegate                      OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationHasEnteredForegroundDelegate                     OFFSET(getStruct<T>, {0xE0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationWillTerminateDelegate                            OFFSET(getStruct<T>, {0xF0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationShouldUnloadResourcesDelegate                    OFFSET(getStruct<T>, {0x100, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationReceivedStartupArgumentsDelegate                 OFFSET(getStruct<T>, {0x110, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTemperatureChangeDelegate                                 OFFSET(getStruct<T>, {0x120, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLowPowerModeDelegate                                      OFFSET(getStruct<T>, {0x130, 16, 0, 0})
};

/// Class /Script/Engine.CameraShakeBase
/// Size: 0x0078 (0x000028 - 0x0000A0)
class UCameraShakeBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	DMember(bool)                                      bSingleInstance                                             OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(float)                                     ShakeScale                                                  OFFSET(get<float>, {0x2C, 4, 0, 0})
	CMember(class APlayerCameraManager*)               CameraManager                                               OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/Engine.OnlineBlueprintCallProxyBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.UniqueNetIdRepl
/// Size: 0x0027 (0x000001 - 0x000028)
class FUniqueNetIdRepl : public FUniqueNetIdWrapper
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<char>)                              ReplicationBytes                                            OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Class /Script/Engine.NetConnection
/// Size: 0x1AA8 (0x000048 - 0x001AF0)
class UNetConnection : public UPlayer
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 6896;

public:
	CMember(TArray<class UChildConnection*>)           Children                                                    OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(class UNetDriver*)                         Driver                                                      OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UClass*)                             PackageMapClass                                             OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(class UPackageMap*)                        PackageMap                                                  OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(TArray<class UChannel*>)                   OpenChannels                                                OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<class AActor*>)                     SentTemporaries                                             OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(class AActor*)                             ViewTarget                                                  OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(class AActor*)                             OwningActor                                                 OFFSET(get<T>, {0x98, 8, 0, 0})
	DMember(int32_t)                                   MaxPacket                                                   OFFSET(get<int32_t>, {0xA0, 4, 0, 0})
	DMember(bool)                                      InternalAck                                                 OFFSET(get<bool>, {0xA4, 1, 1, 0})
	SMember(FUniqueNetIdRepl)                          PlayerId                                                    OFFSET(getStruct<T>, {0x160, 40, 0, 0})
	DMember(double)                                    LastReceiveTime                                             OFFSET(get<double>, {0x1D0, 8, 0, 0})
	CMember(TArray<class UChannel*>)                   ChannelsToTick                                              OFFSET(get<T>, {0x1518, 16, 0, 0})
};

/// Struct /Script/Engine.ChannelDefinition
/// Size: 0x0028 (0x000000 - 0x000028)
class FChannelDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     ChannelName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     ClassName                                                   OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(class UClass*)                             ChannelClass                                                OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(int32_t)                                   StaticChannelIndex                                          OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(bool)                                      bTickOnCreate                                               OFFSET(get<bool>, {0x1C, 1, 0, 0})
	DMember(bool)                                      bServerOpen                                                 OFFSET(get<bool>, {0x1D, 1, 0, 0})
	DMember(bool)                                      bClientOpen                                                 OFFSET(get<bool>, {0x1E, 1, 0, 0})
	DMember(bool)                                      bInitialServer                                              OFFSET(get<bool>, {0x1F, 1, 0, 0})
	DMember(bool)                                      bInitialClient                                              OFFSET(get<bool>, {0x20, 1, 0, 0})
};

/// Class /Script/Engine.NetDriver
/// Size: 0x0720 (0x000028 - 0x000748)
class UNetDriver : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1864;

public:
	SMember(FString)                                   NetConnectionClassName                                      OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   ReplicationDriverClassName                                  OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	DMember(int32_t)                                   MaxDownloadSize                                             OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	DMember(bool)                                      bClampListenServerTickRate                                  OFFSET(get<bool>, {0x54, 1, 1, 0})
	DMember(int32_t)                                   NetServerMaxTickRate                                        OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	DMember(int32_t)                                   MaxNetTickRate                                              OFFSET(get<int32_t>, {0x5C, 4, 0, 0})
	DMember(int32_t)                                   MaxInternetClientRate                                       OFFSET(get<int32_t>, {0x60, 4, 0, 0})
	DMember(int32_t)                                   MaxClientRate                                               OFFSET(get<int32_t>, {0x64, 4, 0, 0})
	DMember(float)                                     ServerTravelPause                                           OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     SpawnPrioritySeconds                                        OFFSET(get<float>, {0x6C, 4, 0, 0})
	DMember(float)                                     RelevantTimeout                                             OFFSET(get<float>, {0x70, 4, 0, 0})
	DMember(float)                                     KeepAliveTime                                               OFFSET(get<float>, {0x74, 4, 0, 0})
	DMember(float)                                     InitialConnectTimeout                                       OFFSET(get<float>, {0x78, 4, 0, 0})
	DMember(float)                                     ConnectionTimeout                                           OFFSET(get<float>, {0x7C, 4, 0, 0})
	DMember(float)                                     TimeoutMultiplierForUnoptimizedBuilds                       OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(bool)                                      bNoTimeouts                                                 OFFSET(get<bool>, {0x84, 1, 0, 0})
	DMember(bool)                                      bNeverApplyNetworkEmulationSettings                         OFFSET(get<bool>, {0x85, 1, 0, 0})
	CMember(class UNetConnection*)                     ServerConnection                                            OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(TArray<class UNetConnection*>)             ClientConnections                                           OFFSET(get<T>, {0x90, 16, 0, 0})
	DMember(int32_t)                                   RecentlyDisconnectedTrackingTime                            OFFSET(get<int32_t>, {0x100, 4, 0, 0})
	CMember(class UWorld*)                             World                                                       OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(class UPackage*)                           WorldPackage                                                OFFSET(get<T>, {0x148, 8, 0, 0})
	CMember(class UClass*)                             NetConnectionClass                                          OFFSET(get<T>, {0x170, 8, 0, 0})
	CMember(class UClass*)                             ReplicationDriverClass                                      OFFSET(get<T>, {0x178, 8, 0, 0})
	SMember(FName)                                     NetDriverName                                               OFFSET(getStruct<T>, {0x190, 8, 0, 0})
	CMember(TArray<FChannelDefinition>)                ChannelDefinitions                                          OFFSET(get<T>, {0x198, 16, 0, 0})
	CMember(TMap<FName, FChannelDefinition>)           ChannelDefinitionMap                                        OFFSET(get<T>, {0x1A8, 80, 0, 0})
	CMember(TArray<class UChannel*>)                   ActorChannelPool                                            OFFSET(get<T>, {0x1F8, 16, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x210, 4, 0, 0})
	CMember(class UReplicationDriver*)                 ReplicationDriver                                           OFFSET(get<T>, {0x6E8, 8, 0, 0})
};

/// Class /Script/Engine.OnlineEngineInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UOnlineEngineInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.OnlineSession
/// Size: 0x0000 (0x000028 - 0x000028)
class UOnlineSession : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.MovementComponent
/// Size: 0x0040 (0x0000B0 - 0x0000F0)
class UMovementComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	CMember(class USceneComponent*)                    UpdatedComponent                                            OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UPrimitiveComponent*)                UpdatedPrimitive                                            OFFSET(get<T>, {0xB8, 8, 0, 0})
	SMember(FVector)                                   Velocity                                                    OFFSET(getStruct<T>, {0xC4, 12, 0, 0})
	SMember(FVector)                                   PlaneConstraintNormal                                       OFFSET(getStruct<T>, {0xD0, 12, 0, 0})
	SMember(FVector)                                   PlaneConstraintOrigin                                       OFFSET(getStruct<T>, {0xDC, 12, 0, 0})
	DMember(bool)                                      bUpdateOnlyIfRendered                                       OFFSET(get<bool>, {0xE8, 1, 1, 0})
	DMember(bool)                                      bAutoUpdateTickRegistration                                 OFFSET(get<bool>, {0xE8, 1, 1, 1})
	DMember(bool)                                      bTickBeforeOwner                                            OFFSET(get<bool>, {0xE8, 1, 1, 2})
	DMember(bool)                                      bAutoRegisterUpdatedComponent                               OFFSET(get<bool>, {0xE8, 1, 1, 3})
	DMember(bool)                                      bConstrainToPlane                                           OFFSET(get<bool>, {0xE8, 1, 1, 4})
	DMember(bool)                                      bSnapToPlaneAtStart                                         OFFSET(get<bool>, {0xE8, 1, 1, 5})
	DMember(bool)                                      bAutoRegisterPhysicsVolumeUpdates                           OFFSET(get<bool>, {0xE8, 1, 1, 6})
	DMember(bool)                                      bComponentShouldUpdatePhysicsVolume                         OFFSET(get<bool>, {0xE8, 1, 1, 7})
	CMember(EPlaneConstraintAxisSetting)               PlaneConstraintAxisSetting                                  OFFSET(get<T>, {0xEB, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.MovementComponent.StopMovementImmediately
	// void StopMovementImmediately();                                                                                          // [0x339eda0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SnapUpdatedComponentToPlane
	// void SnapUpdatedComponentToPlane();                                                                                      // [0x339ed80] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetUpdatedComponent
	// void SetUpdatedComponent(class USceneComponent* NewUpdatedComponent);                                                    // [0x339ec10] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintOrigin
	// void SetPlaneConstraintOrigin(FVector PlaneOrigin);                                                                      // [0x339eab0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintNormal
	// void SetPlaneConstraintNormal(FVector PlaneNormal);                                                                      // [0x339ea20] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintFromVectors
	// void SetPlaneConstraintFromVectors(FVector Forward, FVector Up);                                                         // [0x339e930] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintEnabled
	// void SetPlaneConstraintEnabled(bool bEnabled);                                                                           // [0x339e8a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintAxisSetting
	// void SetPlaneConstraintAxisSetting(EPlaneConstraintAxisSetting NewAxisSetting);                                          // [0x339e820] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.PhysicsVolumeChanged
	// void PhysicsVolumeChanged(class APhysicsVolume* NewVolume);                                                              // [0x339e5f0] Native|Public        
	// Function /Script/Engine.MovementComponent.K2_MoveUpdatedComponent
	// bool K2_MoveUpdatedComponent(FVector Delta, FRotator NewRotation, FHitResult& OutHit, bool bSweep, bool bTeleport);      // [0x339e0f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.K2_GetModifiedMaxSpeed
	// float K2_GetModifiedMaxSpeed();                                                                                          // [0x339e0b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.K2_GetMaxSpeedModifier
	// float K2_GetMaxSpeedModifier();                                                                                          // [0x339e070] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.IsExceedingMaxSpeed
	// bool IsExceedingMaxSpeed(float MaxSpeed);                                                                                // [0x339df30] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetPlaneConstraintOrigin
	// FVector GetPlaneConstraintOrigin();                                                                                      // [0x339def0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetPlaneConstraintNormal
	// FVector GetPlaneConstraintNormal();                                                                                      // [0x339deb0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetPlaneConstraintAxisSetting
	// EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting();                                                             // [0x339de90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetPhysicsVolume
	// class APhysicsVolume* GetPhysicsVolume();                                                                                // [0x339de60] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetMaxSpeed
	// float GetMaxSpeed();                                                                                                     // [0x339de20] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetGravityZ
	// float GetGravityZ();                                                                                                     // [0x339dc40] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.ConstrainNormalToPlane
	// FVector ConstrainNormalToPlane(FVector Normal);                                                                          // [0x339db90] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.ConstrainLocationToPlane
	// FVector ConstrainLocationToPlane(FVector Location);                                                                      // [0x339dae0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.ConstrainDirectionToPlane
	// FVector ConstrainDirectionToPlane(FVector Direction);                                                                    // [0x339da30] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.MovementProperties
/// Size: 0x0001 (0x000000 - 0x000001)
class FMovementProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(bool)                                      bCanCrouch                                                  OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bCanJump                                                    OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bCanWalk                                                    OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bCanSwim                                                    OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(bool)                                      bCanFly                                                     OFFSET(get<bool>, {0x0, 1, 1, 4})
};

/// Struct /Script/Engine.NavAgentProperties
/// Size: 0x002F (0x000001 - 0x000030)
class FNavAgentProperties : public FMovementProperties
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     AgentRadius                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     AgentHeight                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     AgentStepHeight                                             OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     NavWalkingSearchHeightScale                                 OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FSoftClassPath)                            PreferredNavData                                            OFFSET(getStruct<T>, {0x18, 24, 0, 0})
};

/// Class /Script/Engine.NavMovementComponent
/// Size: 0x0040 (0x0000F0 - 0x000130)
class UNavMovementComponent : public UMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	SMember(FNavAgentProperties)                       NavAgentProps                                               OFFSET(getStruct<T>, {0xF0, 48, 0, 0})
	DMember(float)                                     FixedPathBrakingDistance                                    OFFSET(get<float>, {0x120, 4, 0, 0})
	DMember(bool)                                      bUpdateNavAgentWithOwnersCollision                          OFFSET(get<bool>, {0x124, 1, 1, 0})
	DMember(bool)                                      bUseAccelerationForPaths                                    OFFSET(get<bool>, {0x124, 1, 1, 1})
	DMember(bool)                                      bUseFixedBrakingDistanceForPaths                            OFFSET(get<bool>, {0x124, 1, 1, 2})
	SMember(FMovementProperties)                       MovementState                                               OFFSET(getStruct<T>, {0x125, 1, 0, 0})
	CMember(class UObject*)                            PathFollowingComp                                           OFFSET(get<T>, {0x128, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.NavMovementComponent.StopMovementKeepPathing
	// void StopMovementKeepPathing();                                                                                          // [0x33a1830] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.NavMovementComponent.StopActiveMovement
	// void StopActiveMovement();                                                                                               // [0x33a1810] Native|Public|BlueprintCallable 
	// Function /Script/Engine.NavMovementComponent.IsSwimming
	// bool IsSwimming();                                                                                                       // [0x33a17e0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavMovementComponent.IsMovingOnGround
	// bool IsMovingOnGround();                                                                                                 // [0x32dcfd0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavMovementComponent.IsFlying
	// bool IsFlying();                                                                                                         // [0x33a17b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavMovementComponent.IsFalling
	// bool IsFalling();                                                                                                        // [0x32bd520] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavMovementComponent.IsCrouching
	// bool IsCrouching();                                                                                                      // [0x33a1780] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.PawnMovementComponent
/// Size: 0x0008 (0x000130 - 0x000138)
class UPawnMovementComponent : public UNavMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	CMember(class APawn*)                              PawnOwner                                                   OFFSET(get<T>, {0x130, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.PawnMovementComponent.K2_GetInputVector
	// FVector K2_GetInputVector();                                                                                             // [0x33b68e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.IsMoveInputIgnored
	// bool IsMoveInputIgnored();                                                                                               // [0x33b6a20] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.GetPendingInputVector
	// FVector GetPendingInputVector();                                                                                         // [0x33b68e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.GetPawnOwner
	// class APawn* GetPawnOwner();                                                                                             // [0x33b68b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.GetLastInputVector
	// FVector GetLastInputVector();                                                                                            // [0x33b6750] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.ConsumeInputVector
	// FVector ConsumeInputVector();                                                                                            // [0x33b63e0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PawnMovementComponent.AddInputVector
	// void AddInputVector(FVector WorldVector, bool bForce);                                                                   // [0x33b5e20] Native|Public|HasDefaults|BlueprintCallable 
};

/// Struct /Script/Engine.Vector_NetQuantize
/// Size: 0x0000 (0x00000C - 0x00000C)
class FVector_NetQuantize : public FVector
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/Engine.Vector_NetQuantizeNormal
/// Size: 0x0000 (0x00000C - 0x00000C)
class FVector_NetQuantizeNormal : public FVector
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/Engine.HitResult
/// Size: 0x008C (0x000000 - 0x00008C)
class FHitResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 140;

public:
	DMember(bool)                                      bBlockingHit                                                OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bStartPenetrating                                           OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(int32_t)                                   FaceIndex                                                   OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     Distance                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
	SMember(FVector_NetQuantize)                       Location                                                    OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	SMember(FVector_NetQuantize)                       ImpactPoint                                                 OFFSET(getStruct<T>, {0x1C, 12, 0, 0})
	SMember(FVector_NetQuantizeNormal)                 Normal                                                      OFFSET(getStruct<T>, {0x28, 12, 0, 0})
	SMember(FVector_NetQuantizeNormal)                 ImpactNormal                                                OFFSET(getStruct<T>, {0x34, 12, 0, 0})
	SMember(FVector_NetQuantize)                       TraceStart                                                  OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FVector_NetQuantize)                       TraceEnd                                                    OFFSET(getStruct<T>, {0x4C, 12, 0, 0})
	DMember(float)                                     PenetrationDepth                                            OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(int32_t)                                   Item                                                        OFFSET(get<int32_t>, {0x5C, 4, 0, 0})
	DMember(char)                                      ElementIndex                                                OFFSET(get<char>, {0x60, 1, 0, 0})
	CMember(TWeakObjectPtr<class UPhysicalMaterial*>)  PhysMaterial                                                OFFSET(get<T>, {0x64, 8, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             Actor                                                       OFFSET(get<T>, {0x6C, 8, 0, 0})
	CMember(TWeakObjectPtr<class UPrimitiveComponent*>) Component                                                  OFFSET(get<T>, {0x74, 8, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x7C, 8, 0, 0})
	SMember(FName)                                     MyBoneName                                                  OFFSET(getStruct<T>, {0x84, 8, 0, 0})
};

/// Struct /Script/Engine.FindFloorResult
/// Size: 0x0098 (0x000000 - 0x000098)
class FFindFloorResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	DMember(bool)                                      bBlockingHit                                                OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bWalkableFloor                                              OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bLineTrace                                                  OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(float)                                     FloorDist                                                   OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     LineDist                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FHitResult)                                HitResult                                                   OFFSET(getStruct<T>, {0xC, 140, 0, 0})
};

/// Struct /Script/Engine.NavAvoidanceMask
/// Size: 0x0004 (0x000000 - 0x000004)
class FNavAvoidanceMask : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bGroup0                                                     OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bGroup1                                                     OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bGroup2                                                     OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bGroup3                                                     OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(bool)                                      bGroup4                                                     OFFSET(get<bool>, {0x0, 1, 1, 4})
	DMember(bool)                                      bGroup5                                                     OFFSET(get<bool>, {0x0, 1, 1, 5})
	DMember(bool)                                      bGroup6                                                     OFFSET(get<bool>, {0x0, 1, 1, 6})
	DMember(bool)                                      bGroup7                                                     OFFSET(get<bool>, {0x0, 1, 1, 7})
	DMember(bool)                                      bGroup8                                                     OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(bool)                                      bGroup9                                                     OFFSET(get<bool>, {0x1, 1, 1, 1})
	DMember(bool)                                      bGroup10                                                    OFFSET(get<bool>, {0x1, 1, 1, 2})
	DMember(bool)                                      bGroup11                                                    OFFSET(get<bool>, {0x1, 1, 1, 3})
	DMember(bool)                                      bGroup12                                                    OFFSET(get<bool>, {0x1, 1, 1, 4})
	DMember(bool)                                      bGroup13                                                    OFFSET(get<bool>, {0x1, 1, 1, 5})
	DMember(bool)                                      bGroup14                                                    OFFSET(get<bool>, {0x1, 1, 1, 6})
	DMember(bool)                                      bGroup15                                                    OFFSET(get<bool>, {0x1, 1, 1, 7})
	DMember(bool)                                      bGroup16                                                    OFFSET(get<bool>, {0x2, 1, 1, 0})
	DMember(bool)                                      bGroup17                                                    OFFSET(get<bool>, {0x2, 1, 1, 1})
	DMember(bool)                                      bGroup18                                                    OFFSET(get<bool>, {0x2, 1, 1, 2})
	DMember(bool)                                      bGroup19                                                    OFFSET(get<bool>, {0x2, 1, 1, 3})
	DMember(bool)                                      bGroup20                                                    OFFSET(get<bool>, {0x2, 1, 1, 4})
	DMember(bool)                                      bGroup21                                                    OFFSET(get<bool>, {0x2, 1, 1, 5})
	DMember(bool)                                      bGroup22                                                    OFFSET(get<bool>, {0x2, 1, 1, 6})
	DMember(bool)                                      bGroup23                                                    OFFSET(get<bool>, {0x2, 1, 1, 7})
	DMember(bool)                                      bGroup24                                                    OFFSET(get<bool>, {0x3, 1, 1, 0})
	DMember(bool)                                      bGroup25                                                    OFFSET(get<bool>, {0x3, 1, 1, 1})
	DMember(bool)                                      bGroup26                                                    OFFSET(get<bool>, {0x3, 1, 1, 2})
	DMember(bool)                                      bGroup27                                                    OFFSET(get<bool>, {0x3, 1, 1, 3})
	DMember(bool)                                      bGroup28                                                    OFFSET(get<bool>, {0x3, 1, 1, 4})
	DMember(bool)                                      bGroup29                                                    OFFSET(get<bool>, {0x3, 1, 1, 5})
	DMember(bool)                                      bGroup30                                                    OFFSET(get<bool>, {0x3, 1, 1, 6})
	DMember(bool)                                      bGroup31                                                    OFFSET(get<bool>, {0x3, 1, 1, 7})
};

/// Struct /Script/Engine.CharacterMovementComponentPostPhysicsTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
class FCharacterMovementComponentPostPhysicsTickFunction : public FTickFunction
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.CharacterMovementComponent
/// Size: 0x09C8 (0x000138 - 0x000B00)
class UCharacterMovementComponent : public UPawnMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2816;

public:
	CMember(class ACharacter*)                         CharacterOwner                                              OFFSET(get<T>, {0x148, 8, 0, 0})
	DMember(float)                                     GravityScale                                                OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     MaxStepHeight                                               OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(float)                                     JumpZVelocity                                               OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(float)                                     JumpOffJumpZFactor                                          OFFSET(get<float>, {0x15C, 4, 0, 0})
	DMember(float)                                     WalkableFloorAngle                                          OFFSET(get<float>, {0x160, 4, 0, 0})
	DMember(float)                                     WalkableFloorZ                                              OFFSET(get<float>, {0x164, 4, 0, 0})
	CMember(TEnumAsByte<EMovementMode>)                MovementMode                                                OFFSET(get<T>, {0x168, 1, 0, 0})
	DMember(char)                                      CustomMovementMode                                          OFFSET(get<char>, {0x169, 1, 0, 0})
	CMember(ENetworkSmoothingMode)                     NetworkSmoothingMode                                        OFFSET(get<T>, {0x16A, 1, 0, 0})
	DMember(float)                                     GroundFriction                                              OFFSET(get<float>, {0x16C, 4, 0, 0})
	DMember(float)                                     MaxWalkSpeed                                                OFFSET(get<float>, {0x18C, 4, 0, 0})
	DMember(float)                                     MaxWalkSpeedCrouched                                        OFFSET(get<float>, {0x190, 4, 0, 0})
	DMember(float)                                     MaxSwimSpeed                                                OFFSET(get<float>, {0x194, 4, 0, 0})
	DMember(float)                                     MaxFlySpeed                                                 OFFSET(get<float>, {0x198, 4, 0, 0})
	DMember(float)                                     MaxCustomMovementSpeed                                      OFFSET(get<float>, {0x19C, 4, 0, 0})
	DMember(float)                                     MaxAcceleration                                             OFFSET(get<float>, {0x1A0, 4, 0, 0})
	DMember(float)                                     MinAnalogWalkSpeed                                          OFFSET(get<float>, {0x1A4, 4, 0, 0})
	DMember(float)                                     BrakingFrictionFactor                                       OFFSET(get<float>, {0x1A8, 4, 0, 0})
	DMember(float)                                     BrakingFriction                                             OFFSET(get<float>, {0x1AC, 4, 0, 0})
	DMember(float)                                     BrakingSubStepTime                                          OFFSET(get<float>, {0x1B0, 4, 0, 0})
	DMember(float)                                     BrakingDecelerationWalking                                  OFFSET(get<float>, {0x1B4, 4, 0, 0})
	DMember(float)                                     BrakingDecelerationFalling                                  OFFSET(get<float>, {0x1B8, 4, 0, 0})
	DMember(float)                                     BrakingDecelerationSwimming                                 OFFSET(get<float>, {0x1BC, 4, 0, 0})
	DMember(float)                                     BrakingDecelerationFlying                                   OFFSET(get<float>, {0x1C0, 4, 0, 0})
	DMember(float)                                     AirControl                                                  OFFSET(get<float>, {0x1C4, 4, 0, 0})
	DMember(float)                                     AirControlBoostMultiplier                                   OFFSET(get<float>, {0x1C8, 4, 0, 0})
	DMember(float)                                     AirControlBoostVelocityThreshold                            OFFSET(get<float>, {0x1CC, 4, 0, 0})
	DMember(float)                                     FallingLateralFriction                                      OFFSET(get<float>, {0x1D0, 4, 0, 0})
	DMember(float)                                     CrouchedHalfHeight                                          OFFSET(get<float>, {0x1D4, 4, 0, 0})
	DMember(float)                                     Buoyancy                                                    OFFSET(get<float>, {0x1D8, 4, 0, 0})
	DMember(float)                                     PerchRadiusThreshold                                        OFFSET(get<float>, {0x1DC, 4, 0, 0})
	DMember(float)                                     PerchAdditionalHeight                                       OFFSET(get<float>, {0x1E0, 4, 0, 0})
	SMember(FRotator)                                  RotationRate                                                OFFSET(getStruct<T>, {0x1E4, 12, 0, 0})
	DMember(bool)                                      bUseSeparateBrakingFriction                                 OFFSET(get<bool>, {0x1F0, 1, 1, 0})
	DMember(bool)                                      bApplyGravityWhileJumping                                   OFFSET(get<bool>, {0x1F0, 1, 1, 1})
	DMember(bool)                                      bUseControllerDesiredRotation                               OFFSET(get<bool>, {0x1F0, 1, 1, 2})
	DMember(bool)                                      bOrientRotationToMovement                                   OFFSET(get<bool>, {0x1F0, 1, 1, 3})
	DMember(bool)                                      bSweepWhileNavWalking                                       OFFSET(get<bool>, {0x1F0, 1, 1, 4})
	DMember(bool)                                      bMovementInProgress                                         OFFSET(get<bool>, {0x1F0, 1, 1, 6})
	DMember(bool)                                      bEnableScopedMovementUpdates                                OFFSET(get<bool>, {0x1F0, 1, 1, 7})
	DMember(bool)                                      bEnableServerDualMoveScopedMovementUpdates                  OFFSET(get<bool>, {0x1F1, 1, 1, 0})
	DMember(bool)                                      bForceMaxAccel                                              OFFSET(get<bool>, {0x1F1, 1, 1, 1})
	DMember(bool)                                      bRunPhysicsWithNoController                                 OFFSET(get<bool>, {0x1F1, 1, 1, 2})
	DMember(bool)                                      bForceNextFloorCheck                                        OFFSET(get<bool>, {0x1F1, 1, 1, 3})
	DMember(bool)                                      bShrinkProxyCapsule                                         OFFSET(get<bool>, {0x1F1, 1, 1, 4})
	DMember(bool)                                      bCanWalkOffLedges                                           OFFSET(get<bool>, {0x1F1, 1, 1, 5})
	DMember(bool)                                      bCanWalkOffLedgesWhenCrouching                              OFFSET(get<bool>, {0x1F1, 1, 1, 6})
	DMember(bool)                                      bNetworkSkipProxyPredictionOnNetUpdate                      OFFSET(get<bool>, {0x1F2, 1, 1, 1})
	DMember(bool)                                      bNetworkAlwaysReplicateTransformUpdateTimestamp             OFFSET(get<bool>, {0x1F2, 1, 1, 2})
	DMember(bool)                                      bDeferUpdateMoveComponent                                   OFFSET(get<bool>, {0x1F2, 1, 1, 3})
	DMember(bool)                                      bEnablePhysicsInteraction                                   OFFSET(get<bool>, {0x1F2, 1, 1, 4})
	DMember(bool)                                      bTouchForceScaledToMass                                     OFFSET(get<bool>, {0x1F2, 1, 1, 5})
	DMember(bool)                                      bPushForceScaledToMass                                      OFFSET(get<bool>, {0x1F2, 1, 1, 6})
	DMember(bool)                                      bPushForceUsingZOffset                                      OFFSET(get<bool>, {0x1F2, 1, 1, 7})
	DMember(bool)                                      bScalePushForceToVelocity                                   OFFSET(get<bool>, {0x1F3, 1, 1, 0})
	CMember(class USceneComponent*)                    DeferredUpdatedMoveComponent                                OFFSET(get<T>, {0x1F8, 8, 0, 0})
	DMember(float)                                     MaxOutOfWaterStepHeight                                     OFFSET(get<float>, {0x200, 4, 0, 0})
	DMember(float)                                     OutofWaterZ                                                 OFFSET(get<float>, {0x204, 4, 0, 0})
	DMember(float)                                     Mass                                                        OFFSET(get<float>, {0x208, 4, 0, 0})
	DMember(float)                                     StandingDownwardForceScale                                  OFFSET(get<float>, {0x20C, 4, 0, 0})
	DMember(float)                                     InitialPushForceFactor                                      OFFSET(get<float>, {0x210, 4, 0, 0})
	DMember(float)                                     PushForceFactor                                             OFFSET(get<float>, {0x214, 4, 0, 0})
	DMember(float)                                     PushForcePointZOffsetFactor                                 OFFSET(get<float>, {0x218, 4, 0, 0})
	DMember(float)                                     TouchForceFactor                                            OFFSET(get<float>, {0x21C, 4, 0, 0})
	DMember(float)                                     MinTouchForce                                               OFFSET(get<float>, {0x220, 4, 0, 0})
	DMember(float)                                     MaxTouchForce                                               OFFSET(get<float>, {0x224, 4, 0, 0})
	DMember(float)                                     RepulsionForce                                              OFFSET(get<float>, {0x228, 4, 0, 0})
	SMember(FVector)                                   Acceleration                                                OFFSET(getStruct<T>, {0x22C, 12, 0, 0})
	SMember(FQuat)                                     LastUpdateRotation                                          OFFSET(getStruct<T>, {0x240, 16, 0, 0})
	SMember(FVector)                                   LastUpdateLocation                                          OFFSET(getStruct<T>, {0x250, 12, 0, 0})
	SMember(FVector)                                   LastUpdateVelocity                                          OFFSET(getStruct<T>, {0x25C, 12, 0, 0})
	DMember(float)                                     ServerLastTransformUpdateTimeStamp                          OFFSET(get<float>, {0x268, 4, 0, 0})
	DMember(float)                                     ServerLastClientGoodMoveAckTime                             OFFSET(get<float>, {0x26C, 4, 0, 0})
	DMember(float)                                     ServerLastClientAdjustmentTime                              OFFSET(get<float>, {0x270, 4, 0, 0})
	SMember(FVector)                                   PendingImpulseToApply                                       OFFSET(getStruct<T>, {0x274, 12, 0, 0})
	SMember(FVector)                                   PendingForceToApply                                         OFFSET(getStruct<T>, {0x280, 12, 0, 0})
	DMember(float)                                     AnalogInputModifier                                         OFFSET(get<float>, {0x28C, 4, 0, 0})
	DMember(float)                                     MaxSimulationTimeStep                                       OFFSET(get<float>, {0x29C, 4, 0, 0})
	DMember(int32_t)                                   MaxSimulationIterations                                     OFFSET(get<int32_t>, {0x2A0, 4, 0, 0})
	DMember(int32_t)                                   MaxJumpApexAttemptsPerSimulation                            OFFSET(get<int32_t>, {0x2A4, 4, 0, 0})
	DMember(float)                                     MaxDepenetrationWithGeometry                                OFFSET(get<float>, {0x2A8, 4, 0, 0})
	DMember(float)                                     MaxDepenetrationWithGeometryAsProxy                         OFFSET(get<float>, {0x2AC, 4, 0, 0})
	DMember(float)                                     MaxDepenetrationWithPawn                                    OFFSET(get<float>, {0x2B0, 4, 0, 0})
	DMember(float)                                     MaxDepenetrationWithPawnAsProxy                             OFFSET(get<float>, {0x2B4, 4, 0, 0})
	DMember(float)                                     NetworkSimulatedSmoothLocationTime                          OFFSET(get<float>, {0x2B8, 4, 0, 0})
	DMember(float)                                     NetworkSimulatedSmoothRotationTime                          OFFSET(get<float>, {0x2BC, 4, 0, 0})
	DMember(float)                                     ListenServerNetworkSimulatedSmoothLocationTime              OFFSET(get<float>, {0x2C0, 4, 0, 0})
	DMember(float)                                     ListenServerNetworkSimulatedSmoothRotationTime              OFFSET(get<float>, {0x2C4, 4, 0, 0})
	DMember(float)                                     NetProxyShrinkRadius                                        OFFSET(get<float>, {0x2C8, 4, 0, 0})
	DMember(float)                                     NetProxyShrinkHalfHeight                                    OFFSET(get<float>, {0x2CC, 4, 0, 0})
	DMember(float)                                     NetworkMaxSmoothUpdateDistance                              OFFSET(get<float>, {0x2D0, 4, 0, 0})
	DMember(float)                                     NetworkNoSmoothUpdateDistance                               OFFSET(get<float>, {0x2D4, 4, 0, 0})
	DMember(float)                                     NetworkMinTimeBetweenClientAckGoodMoves                     OFFSET(get<float>, {0x2D8, 4, 0, 0})
	DMember(float)                                     NetworkMinTimeBetweenClientAdjustments                      OFFSET(get<float>, {0x2DC, 4, 0, 0})
	DMember(float)                                     NetworkMinTimeBetweenClientAdjustmentsLargeCorrection       OFFSET(get<float>, {0x2E0, 4, 0, 0})
	DMember(float)                                     NetworkLargeClientCorrectionDistance                        OFFSET(get<float>, {0x2E4, 4, 0, 0})
	DMember(float)                                     LedgeCheckThreshold                                         OFFSET(get<float>, {0x2E8, 4, 0, 0})
	DMember(float)                                     JumpOutOfWaterPitch                                         OFFSET(get<float>, {0x2EC, 4, 0, 0})
	SMember(FFindFloorResult)                          CurrentFloor                                                OFFSET(getStruct<T>, {0x2F0, 152, 0, 0})
	CMember(TEnumAsByte<EMovementMode>)                DefaultLandMovementMode                                     OFFSET(get<T>, {0x388, 1, 0, 0})
	CMember(TEnumAsByte<EMovementMode>)                DefaultWaterMovementMode                                    OFFSET(get<T>, {0x389, 1, 0, 0})
	CMember(TEnumAsByte<EMovementMode>)                GroundMovementMode                                          OFFSET(get<T>, {0x38A, 1, 0, 0})
	DMember(bool)                                      bMaintainHorizontalGroundVelocity                           OFFSET(get<bool>, {0x38B, 1, 1, 0})
	DMember(bool)                                      bImpartBaseVelocityX                                        OFFSET(get<bool>, {0x38B, 1, 1, 1})
	DMember(bool)                                      bImpartBaseVelocityY                                        OFFSET(get<bool>, {0x38B, 1, 1, 2})
	DMember(bool)                                      bImpartBaseVelocityZ                                        OFFSET(get<bool>, {0x38B, 1, 1, 3})
	DMember(bool)                                      bImpartBaseAngularVelocity                                  OFFSET(get<bool>, {0x38B, 1, 1, 4})
	DMember(bool)                                      bJustTeleported                                             OFFSET(get<bool>, {0x38B, 1, 1, 5})
	DMember(bool)                                      bNetworkUpdateReceived                                      OFFSET(get<bool>, {0x38B, 1, 1, 6})
	DMember(bool)                                      bNetworkMovementModeChanged                                 OFFSET(get<bool>, {0x38B, 1, 1, 7})
	DMember(bool)                                      bIgnoreClientMovementErrorChecksAndCorrection               OFFSET(get<bool>, {0x38C, 1, 1, 0})
	DMember(bool)                                      bServerAcceptClientAuthoritativePosition                    OFFSET(get<bool>, {0x38C, 1, 1, 1})
	DMember(bool)                                      bNotifyApex                                                 OFFSET(get<bool>, {0x38C, 1, 1, 2})
	DMember(bool)                                      bCheatFlying                                                OFFSET(get<bool>, {0x38C, 1, 1, 3})
	DMember(bool)                                      bWantsToCrouch                                              OFFSET(get<bool>, {0x38C, 1, 1, 4})
	DMember(bool)                                      bCrouchMaintainsBaseLocation                                OFFSET(get<bool>, {0x38C, 1, 1, 5})
	DMember(bool)                                      bIgnoreBaseRotation                                         OFFSET(get<bool>, {0x38C, 1, 1, 6})
	DMember(bool)                                      bFastAttachedMove                                           OFFSET(get<bool>, {0x38C, 1, 1, 7})
	DMember(bool)                                      bAlwaysCheckFloor                                           OFFSET(get<bool>, {0x38D, 1, 1, 0})
	DMember(bool)                                      bUseFlatBaseForFloorChecks                                  OFFSET(get<bool>, {0x38D, 1, 1, 1})
	DMember(bool)                                      bPerformingJumpOff                                          OFFSET(get<bool>, {0x38D, 1, 1, 2})
	DMember(bool)                                      bWantsToLeaveNavWalking                                     OFFSET(get<bool>, {0x38D, 1, 1, 3})
	DMember(bool)                                      bUseRVOAvoidance                                            OFFSET(get<bool>, {0x38D, 1, 1, 4})
	DMember(bool)                                      bRequestedMoveUseAcceleration                               OFFSET(get<bool>, {0x38D, 1, 1, 5})
	DMember(bool)                                      bWasSimulatingRootMotion                                    OFFSET(get<bool>, {0x38D, 1, 1, 7})
	DMember(bool)                                      bAllowPhysicsRotationDuringAnimRootMotion                   OFFSET(get<bool>, {0x38E, 1, 1, 0})
	DMember(bool)                                      bHasRequestedVelocity                                       OFFSET(get<bool>, {0x38E, 1, 1, 1})
	DMember(bool)                                      bRequestedMoveWithMaxSpeed                                  OFFSET(get<bool>, {0x38E, 1, 1, 2})
	DMember(bool)                                      bWasAvoidanceUpdated                                        OFFSET(get<bool>, {0x38E, 1, 1, 3})
	DMember(bool)                                      bProjectNavMeshWalking                                      OFFSET(get<bool>, {0x38E, 1, 1, 6})
	DMember(bool)                                      bProjectNavMeshOnBothWorldChannels                          OFFSET(get<bool>, {0x38E, 1, 1, 7})
	DMember(float)                                     AvoidanceConsiderationRadius                                OFFSET(get<float>, {0x3A0, 4, 0, 0})
	SMember(FVector)                                   RequestedVelocity                                           OFFSET(getStruct<T>, {0x3A4, 12, 0, 0})
	DMember(int32_t)                                   AvoidanceUID                                                OFFSET(get<int32_t>, {0x3B0, 4, 0, 0})
	SMember(FNavAvoidanceMask)                         AvoidanceGroup                                              OFFSET(getStruct<T>, {0x3B4, 4, 0, 0})
	SMember(FNavAvoidanceMask)                         GroupsToAvoid                                               OFFSET(getStruct<T>, {0x3B8, 4, 0, 0})
	SMember(FNavAvoidanceMask)                         GroupsToIgnore                                              OFFSET(getStruct<T>, {0x3BC, 4, 0, 0})
	DMember(float)                                     AvoidanceWeight                                             OFFSET(get<float>, {0x3C0, 4, 0, 0})
	SMember(FVector)                                   PendingLaunchVelocity                                       OFFSET(getStruct<T>, {0x3C4, 12, 0, 0})
	DMember(float)                                     NavMeshProjectionInterval                                   OFFSET(get<float>, {0x474, 4, 0, 0})
	DMember(float)                                     NavMeshProjectionTimer                                      OFFSET(get<float>, {0x478, 4, 0, 0})
	DMember(float)                                     NavMeshProjectionInterpSpeed                                OFFSET(get<float>, {0x47C, 4, 0, 0})
	DMember(float)                                     NavMeshProjectionHeightScaleUp                              OFFSET(get<float>, {0x480, 4, 0, 0})
	DMember(float)                                     NavMeshProjectionHeightScaleDown                            OFFSET(get<float>, {0x484, 4, 0, 0})
	DMember(float)                                     NavWalkingFloorDistTolerance                                OFFSET(get<float>, {0x488, 4, 0, 0})
	SMember(FCharacterMovementComponentPostPhysicsTickFunction) PostPhysicsTickFunction                            OFFSET(getStruct<T>, {0x490, 48, 0, 0})
	DMember(float)                                     MinTimeBetweenTimeStampResets                               OFFSET(get<float>, {0x4D8, 4, 0, 0})
	SMember(FRootMotionSourceGroup)                    CurrentRootMotion                                           OFFSET(getStruct<T>, {0x988, 56, 0, 0})
	SMember(FRootMotionSourceGroup)                    ServerCorrectionRootMotion                                  OFFSET(getStruct<T>, {0x9C0, 56, 0, 0})
	SMember(FRootMotionMovementParams)                 RootMotionParams                                            OFFSET(getStruct<T>, {0xA90, 64, 0, 0})
	SMember(FVector)                                   AnimRootMotionVelocity                                      OFFSET(getStruct<T>, {0xAD0, 12, 0, 0})


	/// Functions
	// Function /Script/Engine.CharacterMovementComponent.SetWalkableFloorZ
	// void SetWalkableFloorZ(float InWalkableFloorZ);                                                                          // [0x32dd5f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetWalkableFloorAngle
	// void SetWalkableFloorAngle(float InWalkableFloorAngle);                                                                  // [0x32dd570] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetMovementMode
	// void SetMovementMode(TEnumAsByte<EMovementMode> NewMovementMode, char NewCustomMode);                                    // [0x32dd4a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToIgnoreMask
	// void SetGroupsToIgnoreMask(FNavAvoidanceMask& GroupMask);                                                                // [0x140ccc0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToIgnore
	// void SetGroupsToIgnore(int32_t GroupFlags);                                                                              // [0x140cc30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToAvoidMask
	// void SetGroupsToAvoidMask(FNavAvoidanceMask& GroupMask);                                                                 // [0x140cba0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToAvoid
	// void SetGroupsToAvoid(int32_t GroupFlags);                                                                               // [0x140cb10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetAvoidanceGroupMask
	// void SetAvoidanceGroupMask(FNavAvoidanceMask& GroupMask);                                                                // [0x140c740] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetAvoidanceGroup
	// void SetAvoidanceGroup(int32_t GroupFlags);                                                                              // [0x140c6b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetAvoidanceEnabled
	// void SetAvoidanceEnabled(bool bEnable);                                                                                  // [0x32dd410] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.K2_GetWalkableFloorZ
	// float K2_GetWalkableFloorZ();                                                                                            // [0x32dd3e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle
	// float K2_GetWalkableFloorAngle();                                                                                        // [0x32dd3b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration
	// float K2_GetModifiedMaxAcceleration();                                                                                   // [0x32dd370] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.K2_FindFloor
	// void K2_FindFloor(FVector CapsuleLocation, FFindFloorResult& FloorResult);                                               // [0x32dd220] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.K2_ComputeFloorDist
	// void K2_ComputeFloorDist(FVector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, FFindFloorResult& FloorResult); // [0x32dd000] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.IsWalking
	// bool IsWalking();                                                                                                        // [0x32dcfd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.IsWalkable
	// bool IsWalkable(FHitResult& Hit);                                                                                        // [0x32dcee0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetValidPerchRadius
	// float GetValidPerchRadius();                                                                                             // [0x32dceb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetPerchRadiusThreshold
	// float GetPerchRadiusThreshold();                                                                                         // [0x32dce80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMovementBase
	// class UPrimitiveComponent* GetMovementBase();                                                                            // [0x32dce50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMinAnalogSpeed
	// float GetMinAnalogSpeed();                                                                                               // [0x32dce10] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime
	// float GetMaxJumpHeightWithJumpTime();                                                                                    // [0x32dcdd0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxJumpHeight
	// float GetMaxJumpHeight();                                                                                                // [0x32dcd90] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxBrakingDeceleration
	// float GetMaxBrakingDeceleration();                                                                                       // [0x32dcd50] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxAcceleration
	// float GetMaxAcceleration();                                                                                              // [0x32dcd10] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetLastUpdateVelocity
	// FVector GetLastUpdateVelocity();                                                                                         // [0x32dcce0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetLastUpdateRotation
	// FRotator GetLastUpdateRotation();                                                                                        // [0x32dcc90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetLastUpdateLocation
	// FVector GetLastUpdateLocation();                                                                                         // [0x32dcc60] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity
	// FVector GetImpartedMovementBaseVelocity();                                                                               // [0x32dcc20] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetCurrentAcceleration
	// FVector GetCurrentAcceleration();                                                                                        // [0x32dcbe0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetCharacterOwner
	// class ACharacter* GetCharacterOwner();                                                                                   // [0x32dcbc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetAnalogInputModifier
	// float GetAnalogInputModifier();                                                                                          // [0x32dcb90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.DisableMovement
	// void DisableMovement();                                                                                                  // [0x32dcb70] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.ClearAccumulatedForces
	// void ClearAccumulatedForces();                                                                                           // [0x32dcb50] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.CapsuleTouched
	// void CapsuleTouched(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x32dc930] Native|Protected|HasOutParms 
	// Function /Script/Engine.CharacterMovementComponent.CalcVelocity
	// void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);                              // [0x32dc7c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.AddImpulse
	// void AddImpulse(FVector Impulse, bool bVelocityChange);                                                                  // [0x32dc6e0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.AddForce
	// void AddForce(FVector Force);                                                                                            // [0x32dc650] Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.SoundEffectSourcePreset
/// Size: 0x0000 (0x000068 - 0x000068)
class USoundEffectSourcePreset : public USoundEffectPreset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Struct /Script/Engine.WeightedBlendable
/// Size: 0x0010 (0x000000 - 0x000010)
class FWeightedBlendable : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(class UObject*)                            Object                                                      OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.WeightedBlendables
/// Size: 0x0010 (0x000000 - 0x000010)
class FWeightedBlendables : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FWeightedBlendable>)                Array                                                       OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.PostProcessSettings
/// Size: 0x0550 (0x000000 - 0x000550)
class FPostProcessSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1360;

public:
	DMember(bool)                                      bOverride_WhiteTemp                                         OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bOverride_WhiteTint                                         OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bOverride_ColorSaturation                                   OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bOverride_ColorContrast                                     OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(bool)                                      bOverride_ColorGamma                                        OFFSET(get<bool>, {0x0, 1, 1, 4})
	DMember(bool)                                      bOverride_ColorGain                                         OFFSET(get<bool>, {0x0, 1, 1, 5})
	DMember(bool)                                      bOverride_ColorOffset                                       OFFSET(get<bool>, {0x0, 1, 1, 6})
	DMember(bool)                                      bOverride_ColorSaturationShadows                            OFFSET(get<bool>, {0x0, 1, 1, 7})
	DMember(bool)                                      bOverride_ColorContrastShadows                              OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(bool)                                      bOverride_ColorGammaShadows                                 OFFSET(get<bool>, {0x1, 1, 1, 1})
	DMember(bool)                                      bOverride_ColorGainShadows                                  OFFSET(get<bool>, {0x1, 1, 1, 2})
	DMember(bool)                                      bOverride_ColorOffsetShadows                                OFFSET(get<bool>, {0x1, 1, 1, 3})
	DMember(bool)                                      bOverride_ColorSaturationMidtones                           OFFSET(get<bool>, {0x1, 1, 1, 4})
	DMember(bool)                                      bOverride_ColorContrastMidtones                             OFFSET(get<bool>, {0x1, 1, 1, 5})
	DMember(bool)                                      bOverride_ColorGammaMidtones                                OFFSET(get<bool>, {0x1, 1, 1, 6})
	DMember(bool)                                      bOverride_ColorGainMidtones                                 OFFSET(get<bool>, {0x1, 1, 1, 7})
	DMember(bool)                                      bOverride_ColorOffsetMidtones                               OFFSET(get<bool>, {0x2, 1, 1, 0})
	DMember(bool)                                      bOverride_ColorSaturationHighlights                         OFFSET(get<bool>, {0x2, 1, 1, 1})
	DMember(bool)                                      bOverride_ColorContrastHighlights                           OFFSET(get<bool>, {0x2, 1, 1, 2})
	DMember(bool)                                      bOverride_ColorGammaHighlights                              OFFSET(get<bool>, {0x2, 1, 1, 3})
	DMember(bool)                                      bOverride_ColorGainHighlights                               OFFSET(get<bool>, {0x2, 1, 1, 4})
	DMember(bool)                                      bOverride_ColorOffsetHighlights                             OFFSET(get<bool>, {0x2, 1, 1, 5})
	DMember(bool)                                      bOverride_ColorCorrectionShadowsMax                         OFFSET(get<bool>, {0x2, 1, 1, 6})
	DMember(bool)                                      bOverride_ColorCorrectionHighlightsMin                      OFFSET(get<bool>, {0x2, 1, 1, 7})
	DMember(bool)                                      bOverride_BlueCorrection                                    OFFSET(get<bool>, {0x3, 1, 1, 0})
	DMember(bool)                                      bOverride_ExpandGamut                                       OFFSET(get<bool>, {0x3, 1, 1, 1})
	DMember(bool)                                      bOverride_ToneCurveAmount                                   OFFSET(get<bool>, {0x3, 1, 1, 2})
	DMember(bool)                                      bOverride_FilmWhitePoint                                    OFFSET(get<bool>, {0x3, 1, 1, 3})
	DMember(bool)                                      bOverride_FilmSaturation                                    OFFSET(get<bool>, {0x3, 1, 1, 4})
	DMember(bool)                                      bOverride_FilmChannelMixerRed                               OFFSET(get<bool>, {0x3, 1, 1, 5})
	DMember(bool)                                      bOverride_FilmChannelMixerGreen                             OFFSET(get<bool>, {0x3, 1, 1, 6})
	DMember(bool)                                      bOverride_FilmChannelMixerBlue                              OFFSET(get<bool>, {0x3, 1, 1, 7})
	DMember(bool)                                      bOverride_FilmContrast                                      OFFSET(get<bool>, {0x4, 1, 1, 0})
	DMember(bool)                                      bOverride_FilmDynamicRange                                  OFFSET(get<bool>, {0x4, 1, 1, 1})
	DMember(bool)                                      bOverride_FilmHealAmount                                    OFFSET(get<bool>, {0x4, 1, 1, 2})
	DMember(bool)                                      bOverride_FilmToeAmount                                     OFFSET(get<bool>, {0x4, 1, 1, 3})
	DMember(bool)                                      bOverride_FilmShadowTint                                    OFFSET(get<bool>, {0x4, 1, 1, 4})
	DMember(bool)                                      bOverride_FilmShadowTintBlend                               OFFSET(get<bool>, {0x4, 1, 1, 5})
	DMember(bool)                                      bOverride_FilmShadowTintAmount                              OFFSET(get<bool>, {0x4, 1, 1, 6})
	DMember(bool)                                      bOverride_FilmSlope                                         OFFSET(get<bool>, {0x4, 1, 1, 7})
	DMember(bool)                                      bOverride_FilmToe                                           OFFSET(get<bool>, {0x5, 1, 1, 0})
	DMember(bool)                                      bOverride_FilmShoulder                                      OFFSET(get<bool>, {0x5, 1, 1, 1})
	DMember(bool)                                      bOverride_FilmBlackClip                                     OFFSET(get<bool>, {0x5, 1, 1, 2})
	DMember(bool)                                      bOverride_FilmWhiteClip                                     OFFSET(get<bool>, {0x5, 1, 1, 3})
	DMember(bool)                                      bOverride_SceneColorTint                                    OFFSET(get<bool>, {0x5, 1, 1, 4})
	DMember(bool)                                      bOverride_SceneFringeIntensity                              OFFSET(get<bool>, {0x5, 1, 1, 5})
	DMember(bool)                                      bOverride_ChromaticAberrationStartOffset                    OFFSET(get<bool>, {0x5, 1, 1, 6})
	DMember(bool)                                      bOverride_AmbientCubemapTint                                OFFSET(get<bool>, {0x5, 1, 1, 7})
	DMember(bool)                                      bOverride_AmbientCubemapIntensity                           OFFSET(get<bool>, {0x6, 1, 1, 0})
	DMember(bool)                                      bOverride_BloomMethod                                       OFFSET(get<bool>, {0x6, 1, 1, 1})
	DMember(bool)                                      bOverride_BloomIntensity                                    OFFSET(get<bool>, {0x6, 1, 1, 2})
	DMember(bool)                                      bOverride_BloomThreshold                                    OFFSET(get<bool>, {0x6, 1, 1, 3})
	DMember(bool)                                      bOverride_Bloom1Tint                                        OFFSET(get<bool>, {0x6, 1, 1, 4})
	DMember(bool)                                      bOverride_Bloom1Size                                        OFFSET(get<bool>, {0x6, 1, 1, 5})
	DMember(bool)                                      bOverride_Bloom2Size                                        OFFSET(get<bool>, {0x6, 1, 1, 6})
	DMember(bool)                                      bOverride_Bloom2Tint                                        OFFSET(get<bool>, {0x6, 1, 1, 7})
	DMember(bool)                                      bOverride_Bloom3Tint                                        OFFSET(get<bool>, {0x7, 1, 1, 0})
	DMember(bool)                                      bOverride_Bloom3Size                                        OFFSET(get<bool>, {0x7, 1, 1, 1})
	DMember(bool)                                      bOverride_Bloom4Tint                                        OFFSET(get<bool>, {0x7, 1, 1, 2})
	DMember(bool)                                      bOverride_Bloom4Size                                        OFFSET(get<bool>, {0x7, 1, 1, 3})
	DMember(bool)                                      bOverride_Bloom5Tint                                        OFFSET(get<bool>, {0x7, 1, 1, 4})
	DMember(bool)                                      bOverride_Bloom5Size                                        OFFSET(get<bool>, {0x7, 1, 1, 5})
	DMember(bool)                                      bOverride_Bloom6Tint                                        OFFSET(get<bool>, {0x7, 1, 1, 6})
	DMember(bool)                                      bOverride_Bloom6Size                                        OFFSET(get<bool>, {0x7, 1, 1, 7})
	DMember(bool)                                      bOverride_BloomSizeScale                                    OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      bOverride_BloomConvolutionTexture                           OFFSET(get<bool>, {0x8, 1, 1, 1})
	DMember(bool)                                      bOverride_BloomConvolutionSize                              OFFSET(get<bool>, {0x8, 1, 1, 2})
	DMember(bool)                                      bOverride_BloomConvolutionCenterUV                          OFFSET(get<bool>, {0x8, 1, 1, 3})
	DMember(bool)                                      bOverride_BloomConvolutionPreFilter                         OFFSET(get<bool>, {0x8, 1, 1, 4})
	DMember(bool)                                      bOverride_BloomConvolutionPreFilterMin                      OFFSET(get<bool>, {0x8, 1, 1, 5})
	DMember(bool)                                      bOverride_BloomConvolutionPreFilterMax                      OFFSET(get<bool>, {0x8, 1, 1, 6})
	DMember(bool)                                      bOverride_BloomConvolutionPreFilterMult                     OFFSET(get<bool>, {0x8, 1, 1, 7})
	DMember(bool)                                      bOverride_BloomConvolutionBufferScale                       OFFSET(get<bool>, {0x9, 1, 1, 0})
	DMember(bool)                                      bOverride_BloomDirtMaskIntensity                            OFFSET(get<bool>, {0x9, 1, 1, 1})
	DMember(bool)                                      bOverride_BloomDirtMaskTint                                 OFFSET(get<bool>, {0x9, 1, 1, 2})
	DMember(bool)                                      bOverride_BloomDirtMask                                     OFFSET(get<bool>, {0x9, 1, 1, 3})
	DMember(bool)                                      bOverride_CameraShutterSpeed                                OFFSET(get<bool>, {0x9, 1, 1, 4})
	DMember(bool)                                      bOverride_CameraISO                                         OFFSET(get<bool>, {0x9, 1, 1, 5})
	DMember(bool)                                      bOverride_AutoExposureMethod                                OFFSET(get<bool>, {0x9, 1, 1, 6})
	DMember(bool)                                      bOverride_AutoExposureLowPercent                            OFFSET(get<bool>, {0x9, 1, 1, 7})
	DMember(bool)                                      bOverride_AutoExposureHighPercent                           OFFSET(get<bool>, {0xA, 1, 1, 0})
	DMember(bool)                                      bOverride_AutoExposureMinBrightness                         OFFSET(get<bool>, {0xA, 1, 1, 1})
	DMember(bool)                                      bOverride_AutoExposureMaxBrightness                         OFFSET(get<bool>, {0xA, 1, 1, 2})
	DMember(bool)                                      bOverride_AutoExposureCalibrationConstant                   OFFSET(get<bool>, {0xA, 1, 1, 3})
	DMember(bool)                                      bOverride_AutoExposureSpeedUp                               OFFSET(get<bool>, {0xA, 1, 1, 4})
	DMember(bool)                                      bOverride_AutoExposureSpeedDown                             OFFSET(get<bool>, {0xA, 1, 1, 5})
	DMember(bool)                                      bOverride_AutoExposureBias                                  OFFSET(get<bool>, {0xA, 1, 1, 6})
	DMember(bool)                                      bOverride_AutoExposureBiasCurve                             OFFSET(get<bool>, {0xA, 1, 1, 7})
	DMember(bool)                                      bOverride_AutoExposureMeterMask                             OFFSET(get<bool>, {0xB, 1, 1, 0})
	DMember(bool)                                      bOverride_AutoExposureApplyPhysicalCameraExposure           OFFSET(get<bool>, {0xB, 1, 1, 1})
	DMember(bool)                                      bOverride_HistogramLogMin                                   OFFSET(get<bool>, {0xB, 1, 1, 2})
	DMember(bool)                                      bOverride_HistogramLogMax                                   OFFSET(get<bool>, {0xB, 1, 1, 3})
	DMember(bool)                                      bOverride_LensFlareIntensity                                OFFSET(get<bool>, {0xB, 1, 1, 4})
	DMember(bool)                                      bOverride_LensFlareTint                                     OFFSET(get<bool>, {0xB, 1, 1, 5})
	DMember(bool)                                      bOverride_LensFlareTints                                    OFFSET(get<bool>, {0xB, 1, 1, 6})
	DMember(bool)                                      bOverride_LensFlareBokehSize                                OFFSET(get<bool>, {0xB, 1, 1, 7})
	DMember(bool)                                      bOverride_LensFlareBokehShape                               OFFSET(get<bool>, {0xC, 1, 1, 0})
	DMember(bool)                                      bOverride_LensFlareThreshold                                OFFSET(get<bool>, {0xC, 1, 1, 1})
	DMember(bool)                                      bOverride_VignetteIntensity                                 OFFSET(get<bool>, {0xC, 1, 1, 2})
	DMember(bool)                                      bOverride_GrainIntensity                                    OFFSET(get<bool>, {0xC, 1, 1, 3})
	DMember(bool)                                      bOverride_GrainJitter                                       OFFSET(get<bool>, {0xC, 1, 1, 4})
	DMember(bool)                                      bOverride_AmbientOcclusionIntensity                         OFFSET(get<bool>, {0xC, 1, 1, 5})
	DMember(bool)                                      bOverride_AmbientOcclusionStaticFraction                    OFFSET(get<bool>, {0xC, 1, 1, 6})
	DMember(bool)                                      bOverride_AmbientOcclusionRadius                            OFFSET(get<bool>, {0xC, 1, 1, 7})
	DMember(bool)                                      bOverride_AmbientOcclusionFadeDistance                      OFFSET(get<bool>, {0xD, 1, 1, 0})
	DMember(bool)                                      bOverride_AmbientOcclusionFadeRadius                        OFFSET(get<bool>, {0xD, 1, 1, 1})
	DMember(bool)                                      bOverride_AmbientOcclusionDistance                          OFFSET(get<bool>, {0xD, 1, 1, 2})
	DMember(bool)                                      bOverride_AmbientOcclusionRadiusInWS                        OFFSET(get<bool>, {0xD, 1, 1, 3})
	DMember(bool)                                      bOverride_AmbientOcclusionPower                             OFFSET(get<bool>, {0xD, 1, 1, 4})
	DMember(bool)                                      bOverride_AmbientOcclusionBias                              OFFSET(get<bool>, {0xD, 1, 1, 5})
	DMember(bool)                                      bOverride_AmbientOcclusionQuality                           OFFSET(get<bool>, {0xD, 1, 1, 6})
	DMember(bool)                                      bOverride_AmbientOcclusionMipBlend                          OFFSET(get<bool>, {0xD, 1, 1, 7})
	DMember(bool)                                      bOverride_AmbientOcclusionMipScale                          OFFSET(get<bool>, {0xE, 1, 1, 0})
	DMember(bool)                                      bOverride_AmbientOcclusionMipThreshold                      OFFSET(get<bool>, {0xE, 1, 1, 1})
	DMember(bool)                                      bOverride_AmbientOcclusionTemporalBlendWeight               OFFSET(get<bool>, {0xE, 1, 1, 2})
	DMember(bool)                                      bOverride_RayTracingAO                                      OFFSET(get<bool>, {0x10, 1, 1, 0})
	DMember(bool)                                      bOverride_RayTracingAOSamplesPerPixel                       OFFSET(get<bool>, {0x10, 1, 1, 1})
	DMember(bool)                                      bOverride_RayTracingAOIntensity                             OFFSET(get<bool>, {0x10, 1, 1, 2})
	DMember(bool)                                      bOverride_RayTracingAORadius                                OFFSET(get<bool>, {0x10, 1, 1, 3})
	DMember(bool)                                      bOverride_LPVIntensity                                      OFFSET(get<bool>, {0x14, 1, 1, 0})
	DMember(bool)                                      bOverride_LPVDirectionalOcclusionIntensity                  OFFSET(get<bool>, {0x14, 1, 1, 1})
	DMember(bool)                                      bOverride_LPVDirectionalOcclusionRadius                     OFFSET(get<bool>, {0x14, 1, 1, 2})
	DMember(bool)                                      bOverride_LPVDiffuseOcclusionExponent                       OFFSET(get<bool>, {0x14, 1, 1, 3})
	DMember(bool)                                      bOverride_LPVSpecularOcclusionExponent                      OFFSET(get<bool>, {0x14, 1, 1, 4})
	DMember(bool)                                      bOverride_LPVDiffuseOcclusionIntensity                      OFFSET(get<bool>, {0x14, 1, 1, 5})
	DMember(bool)                                      bOverride_LPVSpecularOcclusionIntensity                     OFFSET(get<bool>, {0x14, 1, 1, 6})
	DMember(bool)                                      bOverride_LPVSize                                           OFFSET(get<bool>, {0x14, 1, 1, 7})
	DMember(bool)                                      bOverride_LPVSecondaryOcclusionIntensity                    OFFSET(get<bool>, {0x15, 1, 1, 0})
	DMember(bool)                                      bOverride_LPVSecondaryBounceIntensity                       OFFSET(get<bool>, {0x15, 1, 1, 1})
	DMember(bool)                                      bOverride_LPVGeometryVolumeBias                             OFFSET(get<bool>, {0x15, 1, 1, 2})
	DMember(bool)                                      bOverride_LPVVplInjectionBias                               OFFSET(get<bool>, {0x15, 1, 1, 3})
	DMember(bool)                                      bOverride_LPVEmissiveInjectionIntensity                     OFFSET(get<bool>, {0x15, 1, 1, 4})
	DMember(bool)                                      bOverride_LPVFadeRange                                      OFFSET(get<bool>, {0x15, 1, 1, 5})
	DMember(bool)                                      bOverride_LPVDirectionalOcclusionFadeRange                  OFFSET(get<bool>, {0x15, 1, 1, 6})
	DMember(bool)                                      bOverride_IndirectLightingColor                             OFFSET(get<bool>, {0x15, 1, 1, 7})
	DMember(bool)                                      bOverride_IndirectLightingIntensity                         OFFSET(get<bool>, {0x16, 1, 1, 0})
	DMember(bool)                                      bOverride_ColorGradingIntensity                             OFFSET(get<bool>, {0x16, 1, 1, 1})
	DMember(bool)                                      bOverride_ColorGradingLUT                                   OFFSET(get<bool>, {0x16, 1, 1, 2})
	DMember(bool)                                      bOverride_DepthOfFieldFocalDistance                         OFFSET(get<bool>, {0x16, 1, 1, 3})
	DMember(bool)                                      bOverride_DepthOfFieldFstop                                 OFFSET(get<bool>, {0x16, 1, 1, 4})
	DMember(bool)                                      bOverride_DepthOfFieldMinFstop                              OFFSET(get<bool>, {0x16, 1, 1, 5})
	DMember(bool)                                      bOverride_DepthOfFieldBladeCount                            OFFSET(get<bool>, {0x16, 1, 1, 6})
	DMember(bool)                                      bOverride_DepthOfFieldSensorWidth                           OFFSET(get<bool>, {0x16, 1, 1, 7})
	DMember(bool)                                      bOverride_DepthOfFieldDepthBlurRadius                       OFFSET(get<bool>, {0x17, 1, 1, 0})
	DMember(bool)                                      bOverride_DepthOfFieldDepthBlurAmount                       OFFSET(get<bool>, {0x17, 1, 1, 1})
	DMember(bool)                                      bOverride_DepthOfFieldFocalRegion                           OFFSET(get<bool>, {0x17, 1, 1, 2})
	DMember(bool)                                      bOverride_DepthOfFieldNearTransitionRegion                  OFFSET(get<bool>, {0x17, 1, 1, 3})
	DMember(bool)                                      bOverride_DepthOfFieldFarTransitionRegion                   OFFSET(get<bool>, {0x17, 1, 1, 4})
	DMember(bool)                                      bOverride_DepthOfFieldScale                                 OFFSET(get<bool>, {0x17, 1, 1, 5})
	DMember(bool)                                      bOverride_DepthOfFieldNearBlurSize                          OFFSET(get<bool>, {0x17, 1, 1, 6})
	DMember(bool)                                      bOverride_DepthOfFieldFarBlurSize                           OFFSET(get<bool>, {0x17, 1, 1, 7})
	DMember(bool)                                      bOverride_MobileHQGaussian                                  OFFSET(get<bool>, {0x18, 1, 1, 0})
	DMember(bool)                                      bOverride_DepthOfFieldOcclusion                             OFFSET(get<bool>, {0x18, 1, 1, 1})
	DMember(bool)                                      bOverride_DepthOfFieldSkyFocusDistance                      OFFSET(get<bool>, {0x18, 1, 1, 2})
	DMember(bool)                                      bOverride_DepthOfFieldVignetteSize                          OFFSET(get<bool>, {0x18, 1, 1, 3})
	DMember(bool)                                      bOverride_MotionBlurAmount                                  OFFSET(get<bool>, {0x18, 1, 1, 4})
	DMember(bool)                                      bOverride_MotionBlurMax                                     OFFSET(get<bool>, {0x18, 1, 1, 5})
	DMember(bool)                                      bOverride_MotionBlurTargetFPS                               OFFSET(get<bool>, {0x18, 1, 1, 6})
	DMember(bool)                                      bOverride_MotionBlurPerObjectSize                           OFFSET(get<bool>, {0x18, 1, 1, 7})
	DMember(bool)                                      bOverride_ScreenPercentage                                  OFFSET(get<bool>, {0x19, 1, 1, 0})
	DMember(bool)                                      bOverride_ScreenSpaceReflectionIntensity                    OFFSET(get<bool>, {0x19, 1, 1, 1})
	DMember(bool)                                      bOverride_ScreenSpaceReflectionQuality                      OFFSET(get<bool>, {0x19, 1, 1, 2})
	DMember(bool)                                      bOverride_ScreenSpaceReflectionMaxRoughness                 OFFSET(get<bool>, {0x19, 1, 1, 3})
	DMember(bool)                                      bOverride_ScreenSpaceReflectionRoughnessScale               OFFSET(get<bool>, {0x19, 1, 1, 4})
	DMember(bool)                                      bOverride_ScreenSpaceReflectionMobileDistanceFade           OFFSET(get<bool>, {0x19, 1, 1, 5})
	DMember(bool)                                      bOverride_ReflectionsType                                   OFFSET(get<bool>, {0x1C, 1, 1, 0})
	DMember(bool)                                      bOverride_RayTracingReflectionsMaxRoughness                 OFFSET(get<bool>, {0x1C, 1, 1, 1})
	DMember(bool)                                      bOverride_RayTracingReflectionsMaxBounces                   OFFSET(get<bool>, {0x1C, 1, 1, 2})
	DMember(bool)                                      bOverride_RayTracingReflectionsSamplesPerPixel              OFFSET(get<bool>, {0x1C, 1, 1, 3})
	DMember(bool)                                      bOverride_RayTracingReflectionsShadows                      OFFSET(get<bool>, {0x1C, 1, 1, 4})
	DMember(bool)                                      bOverride_RayTracingReflectionsTranslucency                 OFFSET(get<bool>, {0x1C, 1, 1, 5})
	DMember(bool)                                      bOverride_TranslucencyType                                  OFFSET(get<bool>, {0x1C, 1, 1, 6})
	DMember(bool)                                      bOverride_RayTracingTranslucencyMaxRoughness                OFFSET(get<bool>, {0x1C, 1, 1, 7})
	DMember(bool)                                      bOverride_RayTracingTranslucencyRefractionRays              OFFSET(get<bool>, {0x1D, 1, 1, 0})
	DMember(bool)                                      bOverride_RayTracingTranslucencySamplesPerPixel             OFFSET(get<bool>, {0x1D, 1, 1, 1})
	DMember(bool)                                      bOverride_RayTracingTranslucencyShadows                     OFFSET(get<bool>, {0x1D, 1, 1, 2})
	DMember(bool)                                      bOverride_RayTracingTranslucencyRefraction                  OFFSET(get<bool>, {0x1D, 1, 1, 3})
	DMember(bool)                                      bOverride_RayTracingGI                                      OFFSET(get<bool>, {0x1D, 1, 1, 4})
	DMember(bool)                                      bOverride_RayTracingGIMaxBounces                            OFFSET(get<bool>, {0x1D, 1, 1, 5})
	DMember(bool)                                      bOverride_RayTracingGISamplesPerPixel                       OFFSET(get<bool>, {0x1D, 1, 1, 6})
	DMember(bool)                                      bOverride_PathTracingMaxBounces                             OFFSET(get<bool>, {0x1D, 1, 1, 7})
	DMember(bool)                                      bOverride_PathTracingSamplesPerPixel                        OFFSET(get<bool>, {0x1E, 1, 1, 0})
	DMember(bool)                                      bMobileHQGaussian                                           OFFSET(get<bool>, {0x20, 1, 1, 0})
	CMember(TEnumAsByte<EBloomMethod>)                 BloomMethod                                                 OFFSET(get<T>, {0x21, 1, 0, 0})
	CMember(TEnumAsByte<EAutoExposureMethod>)          AutoExposureMethod                                          OFFSET(get<T>, {0x22, 1, 0, 0})
	DMember(float)                                     WhiteTemp                                                   OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     WhiteTint                                                   OFFSET(get<float>, {0x28, 4, 0, 0})
	SMember(FVector4)                                  ColorSaturation                                             OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FVector4)                                  ColorContrast                                               OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FVector4)                                  ColorGamma                                                  OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	SMember(FVector4)                                  ColorGain                                                   OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	SMember(FVector4)                                  ColorOffset                                                 OFFSET(getStruct<T>, {0x70, 16, 0, 0})
	SMember(FVector4)                                  ColorSaturationShadows                                      OFFSET(getStruct<T>, {0x80, 16, 0, 0})
	SMember(FVector4)                                  ColorContrastShadows                                        OFFSET(getStruct<T>, {0x90, 16, 0, 0})
	SMember(FVector4)                                  ColorGammaShadows                                           OFFSET(getStruct<T>, {0xA0, 16, 0, 0})
	SMember(FVector4)                                  ColorGainShadows                                            OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FVector4)                                  ColorOffsetShadows                                          OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FVector4)                                  ColorSaturationMidtones                                     OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	SMember(FVector4)                                  ColorContrastMidtones                                       OFFSET(getStruct<T>, {0xE0, 16, 0, 0})
	SMember(FVector4)                                  ColorGammaMidtones                                          OFFSET(getStruct<T>, {0xF0, 16, 0, 0})
	SMember(FVector4)                                  ColorGainMidtones                                           OFFSET(getStruct<T>, {0x100, 16, 0, 0})
	SMember(FVector4)                                  ColorOffsetMidtones                                         OFFSET(getStruct<T>, {0x110, 16, 0, 0})
	SMember(FVector4)                                  ColorSaturationHighlights                                   OFFSET(getStruct<T>, {0x120, 16, 0, 0})
	SMember(FVector4)                                  ColorContrastHighlights                                     OFFSET(getStruct<T>, {0x130, 16, 0, 0})
	SMember(FVector4)                                  ColorGammaHighlights                                        OFFSET(getStruct<T>, {0x140, 16, 0, 0})
	SMember(FVector4)                                  ColorGainHighlights                                         OFFSET(getStruct<T>, {0x150, 16, 0, 0})
	SMember(FVector4)                                  ColorOffsetHighlights                                       OFFSET(getStruct<T>, {0x160, 16, 0, 0})
	DMember(float)                                     ColorCorrectionHighlightsMin                                OFFSET(get<float>, {0x170, 4, 0, 0})
	DMember(float)                                     ColorCorrectionShadowsMax                                   OFFSET(get<float>, {0x174, 4, 0, 0})
	DMember(float)                                     BlueCorrection                                              OFFSET(get<float>, {0x178, 4, 0, 0})
	DMember(float)                                     ExpandGamut                                                 OFFSET(get<float>, {0x17C, 4, 0, 0})
	DMember(float)                                     ToneCurveAmount                                             OFFSET(get<float>, {0x180, 4, 0, 0})
	DMember(float)                                     FilmSlope                                                   OFFSET(get<float>, {0x184, 4, 0, 0})
	DMember(float)                                     FilmToe                                                     OFFSET(get<float>, {0x188, 4, 0, 0})
	DMember(float)                                     FilmShoulder                                                OFFSET(get<float>, {0x18C, 4, 0, 0})
	DMember(float)                                     FilmBlackClip                                               OFFSET(get<float>, {0x190, 4, 0, 0})
	DMember(float)                                     FilmWhiteClip                                               OFFSET(get<float>, {0x194, 4, 0, 0})
	SMember(FLinearColor)                              FilmWhitePoint                                              OFFSET(getStruct<T>, {0x198, 16, 0, 0})
	SMember(FLinearColor)                              FilmShadowTint                                              OFFSET(getStruct<T>, {0x1A8, 16, 0, 0})
	DMember(float)                                     FilmShadowTintBlend                                         OFFSET(get<float>, {0x1B8, 4, 0, 0})
	DMember(float)                                     FilmShadowTintAmount                                        OFFSET(get<float>, {0x1BC, 4, 0, 0})
	DMember(float)                                     FilmSaturation                                              OFFSET(get<float>, {0x1C0, 4, 0, 0})
	SMember(FLinearColor)                              FilmChannelMixerRed                                         OFFSET(getStruct<T>, {0x1C4, 16, 0, 0})
	SMember(FLinearColor)                              FilmChannelMixerGreen                                       OFFSET(getStruct<T>, {0x1D4, 16, 0, 0})
	SMember(FLinearColor)                              FilmChannelMixerBlue                                        OFFSET(getStruct<T>, {0x1E4, 16, 0, 0})
	DMember(float)                                     FilmContrast                                                OFFSET(get<float>, {0x1F4, 4, 0, 0})
	DMember(float)                                     FilmToeAmount                                               OFFSET(get<float>, {0x1F8, 4, 0, 0})
	DMember(float)                                     FilmHealAmount                                              OFFSET(get<float>, {0x1FC, 4, 0, 0})
	DMember(float)                                     FilmDynamicRange                                            OFFSET(get<float>, {0x200, 4, 0, 0})
	SMember(FLinearColor)                              SceneColorTint                                              OFFSET(getStruct<T>, {0x204, 16, 0, 0})
	DMember(float)                                     SceneFringeIntensity                                        OFFSET(get<float>, {0x214, 4, 0, 0})
	DMember(float)                                     ChromaticAberrationStartOffset                              OFFSET(get<float>, {0x218, 4, 0, 0})
	DMember(float)                                     BloomIntensity                                              OFFSET(get<float>, {0x21C, 4, 0, 0})
	DMember(float)                                     BloomThreshold                                              OFFSET(get<float>, {0x220, 4, 0, 0})
	DMember(float)                                     BloomSizeScale                                              OFFSET(get<float>, {0x224, 4, 0, 0})
	DMember(float)                                     Bloom1Size                                                  OFFSET(get<float>, {0x228, 4, 0, 0})
	DMember(float)                                     Bloom2Size                                                  OFFSET(get<float>, {0x22C, 4, 0, 0})
	DMember(float)                                     Bloom3Size                                                  OFFSET(get<float>, {0x230, 4, 0, 0})
	DMember(float)                                     Bloom4Size                                                  OFFSET(get<float>, {0x234, 4, 0, 0})
	DMember(float)                                     Bloom5Size                                                  OFFSET(get<float>, {0x238, 4, 0, 0})
	DMember(float)                                     Bloom6Size                                                  OFFSET(get<float>, {0x23C, 4, 0, 0})
	SMember(FLinearColor)                              Bloom1Tint                                                  OFFSET(getStruct<T>, {0x240, 16, 0, 0})
	SMember(FLinearColor)                              Bloom2Tint                                                  OFFSET(getStruct<T>, {0x250, 16, 0, 0})
	SMember(FLinearColor)                              Bloom3Tint                                                  OFFSET(getStruct<T>, {0x260, 16, 0, 0})
	SMember(FLinearColor)                              Bloom4Tint                                                  OFFSET(getStruct<T>, {0x270, 16, 0, 0})
	SMember(FLinearColor)                              Bloom5Tint                                                  OFFSET(getStruct<T>, {0x280, 16, 0, 0})
	SMember(FLinearColor)                              Bloom6Tint                                                  OFFSET(getStruct<T>, {0x290, 16, 0, 0})
	DMember(float)                                     BloomConvolutionSize                                        OFFSET(get<float>, {0x2A0, 4, 0, 0})
	CMember(class UTexture2D*)                         BloomConvolutionTexture                                     OFFSET(get<T>, {0x2A8, 8, 0, 0})
	SMember(FVector2D)                                 BloomConvolutionCenterUV                                    OFFSET(getStruct<T>, {0x2B0, 8, 0, 0})
	DMember(float)                                     BloomConvolutionPreFilterMin                                OFFSET(get<float>, {0x2B8, 4, 0, 0})
	DMember(float)                                     BloomConvolutionPreFilterMax                                OFFSET(get<float>, {0x2BC, 4, 0, 0})
	DMember(float)                                     BloomConvolutionPreFilterMult                               OFFSET(get<float>, {0x2C0, 4, 0, 0})
	DMember(float)                                     BloomConvolutionBufferScale                                 OFFSET(get<float>, {0x2C4, 4, 0, 0})
	CMember(class UTexture*)                           BloomDirtMask                                               OFFSET(get<T>, {0x2C8, 8, 0, 0})
	DMember(float)                                     BloomDirtMaskIntensity                                      OFFSET(get<float>, {0x2D0, 4, 0, 0})
	SMember(FLinearColor)                              BloomDirtMaskTint                                           OFFSET(getStruct<T>, {0x2D4, 16, 0, 0})
	SMember(FLinearColor)                              AmbientCubemapTint                                          OFFSET(getStruct<T>, {0x2E4, 16, 0, 0})
	DMember(float)                                     AmbientCubemapIntensity                                     OFFSET(get<float>, {0x2F4, 4, 0, 0})
	CMember(class UTextureCube*)                       AmbientCubemap                                              OFFSET(get<T>, {0x2F8, 8, 0, 0})
	DMember(float)                                     CameraShutterSpeed                                          OFFSET(get<float>, {0x300, 4, 0, 0})
	DMember(float)                                     CameraISO                                                   OFFSET(get<float>, {0x304, 4, 0, 0})
	DMember(float)                                     DepthOfFieldFstop                                           OFFSET(get<float>, {0x308, 4, 0, 0})
	DMember(float)                                     DepthOfFieldMinFstop                                        OFFSET(get<float>, {0x30C, 4, 0, 0})
	DMember(int32_t)                                   DepthOfFieldBladeCount                                      OFFSET(get<int32_t>, {0x310, 4, 0, 0})
	DMember(float)                                     AutoExposureBias                                            OFFSET(get<float>, {0x314, 4, 0, 0})
	DMember(float)                                     AutoExposureBiasBackup                                      OFFSET(get<float>, {0x318, 4, 0, 0})
	DMember(bool)                                      bOverride_AutoExposureBiasBackup                            OFFSET(get<bool>, {0x31C, 1, 1, 0})
	DMember(bool)                                      AutoExposureApplyPhysicalCameraExposure                     OFFSET(get<bool>, {0x320, 1, 1, 0})
	CMember(class UCurveFloat*)                        AutoExposureBiasCurve                                       OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UTexture*)                           AutoExposureMeterMask                                       OFFSET(get<T>, {0x330, 8, 0, 0})
	DMember(float)                                     AutoExposureLowPercent                                      OFFSET(get<float>, {0x338, 4, 0, 0})
	DMember(float)                                     AutoExposureHighPercent                                     OFFSET(get<float>, {0x33C, 4, 0, 0})
	DMember(float)                                     AutoExposureMinBrightness                                   OFFSET(get<float>, {0x340, 4, 0, 0})
	DMember(float)                                     AutoExposureMaxBrightness                                   OFFSET(get<float>, {0x344, 4, 0, 0})
	DMember(float)                                     AutoExposureSpeedUp                                         OFFSET(get<float>, {0x348, 4, 0, 0})
	DMember(float)                                     AutoExposureSpeedDown                                       OFFSET(get<float>, {0x34C, 4, 0, 0})
	DMember(float)                                     HistogramLogMin                                             OFFSET(get<float>, {0x350, 4, 0, 0})
	DMember(float)                                     HistogramLogMax                                             OFFSET(get<float>, {0x354, 4, 0, 0})
	DMember(float)                                     AutoExposureCalibrationConstant                             OFFSET(get<float>, {0x358, 4, 0, 0})
	DMember(float)                                     LensFlareIntensity                                          OFFSET(get<float>, {0x35C, 4, 0, 0})
	SMember(FLinearColor)                              LensFlareTint                                               OFFSET(getStruct<T>, {0x360, 16, 0, 0})
	DMember(float)                                     LensFlareBokehSize                                          OFFSET(get<float>, {0x370, 4, 0, 0})
	DMember(float)                                     LensFlareThreshold                                          OFFSET(get<float>, {0x374, 4, 0, 0})
	CMember(class UTexture*)                           LensFlareBokehShape                                         OFFSET(get<T>, {0x378, 8, 0, 0})
	SMember(FLinearColor)                              LensFlareTints                                              OFFSET(getStruct<T>, {0x380, 128, 0, 0})
	DMember(float)                                     VignetteIntensity                                           OFFSET(get<float>, {0x400, 4, 0, 0})
	DMember(float)                                     GrainJitter                                                 OFFSET(get<float>, {0x404, 4, 0, 0})
	DMember(float)                                     GrainIntensity                                              OFFSET(get<float>, {0x408, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionIntensity                                   OFFSET(get<float>, {0x40C, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionStaticFraction                              OFFSET(get<float>, {0x410, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionRadius                                      OFFSET(get<float>, {0x414, 4, 0, 0})
	DMember(bool)                                      AmbientOcclusionRadiusInWS                                  OFFSET(get<bool>, {0x418, 1, 1, 0})
	DMember(float)                                     AmbientOcclusionFadeDistance                                OFFSET(get<float>, {0x41C, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionFadeRadius                                  OFFSET(get<float>, {0x420, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionDistance                                    OFFSET(get<float>, {0x424, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionPower                                       OFFSET(get<float>, {0x428, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionBias                                        OFFSET(get<float>, {0x42C, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionQuality                                     OFFSET(get<float>, {0x430, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionMipBlend                                    OFFSET(get<float>, {0x434, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionMipScale                                    OFFSET(get<float>, {0x438, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionMipThreshold                                OFFSET(get<float>, {0x43C, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionTemporalBlendWeight                         OFFSET(get<float>, {0x440, 4, 0, 0})
	DMember(bool)                                      RayTracingAO                                                OFFSET(get<bool>, {0x444, 1, 1, 0})
	DMember(int32_t)                                   RayTracingAOSamplesPerPixel                                 OFFSET(get<int32_t>, {0x448, 4, 0, 0})
	DMember(float)                                     RayTracingAOIntensity                                       OFFSET(get<float>, {0x44C, 4, 0, 0})
	DMember(float)                                     RayTracingAORadius                                          OFFSET(get<float>, {0x450, 4, 0, 0})
	SMember(FLinearColor)                              IndirectLightingColor                                       OFFSET(getStruct<T>, {0x454, 16, 0, 0})
	DMember(float)                                     IndirectLightingIntensity                                   OFFSET(get<float>, {0x464, 4, 0, 0})
	CMember(ERayTracingGlobalIlluminationType)         RayTracingGIType                                            OFFSET(get<T>, {0x468, 1, 0, 0})
	DMember(int32_t)                                   RayTracingGIMaxBounces                                      OFFSET(get<int32_t>, {0x46C, 4, 0, 0})
	DMember(int32_t)                                   RayTracingGISamplesPerPixel                                 OFFSET(get<int32_t>, {0x470, 4, 0, 0})
	DMember(float)                                     ColorGradingIntensity                                       OFFSET(get<float>, {0x474, 4, 0, 0})
	CMember(class UTexture*)                           ColorGradingLUT                                             OFFSET(get<T>, {0x478, 8, 0, 0})
	DMember(float)                                     DepthOfFieldSensorWidth                                     OFFSET(get<float>, {0x480, 4, 0, 0})
	DMember(float)                                     DepthOfFieldFocalDistance                                   OFFSET(get<float>, {0x484, 4, 0, 0})
	DMember(float)                                     DepthOfFieldDepthBlurAmount                                 OFFSET(get<float>, {0x488, 4, 0, 0})
	DMember(float)                                     DepthOfFieldDepthBlurRadius                                 OFFSET(get<float>, {0x48C, 4, 0, 0})
	DMember(float)                                     DepthOfFieldFocalRegion                                     OFFSET(get<float>, {0x490, 4, 0, 0})
	DMember(float)                                     DepthOfFieldNearTransitionRegion                            OFFSET(get<float>, {0x494, 4, 0, 0})
	DMember(float)                                     DepthOfFieldFarTransitionRegion                             OFFSET(get<float>, {0x498, 4, 0, 0})
	DMember(float)                                     DepthOfFieldScale                                           OFFSET(get<float>, {0x49C, 4, 0, 0})
	DMember(float)                                     DepthOfFieldNearBlurSize                                    OFFSET(get<float>, {0x4A0, 4, 0, 0})
	DMember(float)                                     DepthOfFieldFarBlurSize                                     OFFSET(get<float>, {0x4A4, 4, 0, 0})
	DMember(float)                                     DepthOfFieldOcclusion                                       OFFSET(get<float>, {0x4A8, 4, 0, 0})
	DMember(float)                                     DepthOfFieldSkyFocusDistance                                OFFSET(get<float>, {0x4AC, 4, 0, 0})
	DMember(float)                                     DepthOfFieldVignetteSize                                    OFFSET(get<float>, {0x4B0, 4, 0, 0})
	DMember(float)                                     MotionBlurAmount                                            OFFSET(get<float>, {0x4B4, 4, 0, 0})
	DMember(float)                                     MotionBlurMax                                               OFFSET(get<float>, {0x4B8, 4, 0, 0})
	DMember(int32_t)                                   MotionBlurTargetFPS                                         OFFSET(get<int32_t>, {0x4BC, 4, 0, 0})
	DMember(float)                                     MotionBlurPerObjectSize                                     OFFSET(get<float>, {0x4C0, 4, 0, 0})
	DMember(float)                                     LPVIntensity                                                OFFSET(get<float>, {0x4C4, 4, 0, 0})
	DMember(float)                                     LPVVplInjectionBias                                         OFFSET(get<float>, {0x4C8, 4, 0, 0})
	DMember(float)                                     LPVSize                                                     OFFSET(get<float>, {0x4CC, 4, 0, 0})
	DMember(float)                                     LPVSecondaryOcclusionIntensity                              OFFSET(get<float>, {0x4D0, 4, 0, 0})
	DMember(float)                                     LPVSecondaryBounceIntensity                                 OFFSET(get<float>, {0x4D4, 4, 0, 0})
	DMember(float)                                     LPVGeometryVolumeBias                                       OFFSET(get<float>, {0x4D8, 4, 0, 0})
	DMember(float)                                     LPVEmissiveInjectionIntensity                               OFFSET(get<float>, {0x4DC, 4, 0, 0})
	DMember(float)                                     LPVDirectionalOcclusionIntensity                            OFFSET(get<float>, {0x4E0, 4, 0, 0})
	DMember(float)                                     LPVDirectionalOcclusionRadius                               OFFSET(get<float>, {0x4E4, 4, 0, 0})
	DMember(float)                                     LPVDiffuseOcclusionExponent                                 OFFSET(get<float>, {0x4E8, 4, 0, 0})
	DMember(float)                                     LPVSpecularOcclusionExponent                                OFFSET(get<float>, {0x4EC, 4, 0, 0})
	DMember(float)                                     LPVDiffuseOcclusionIntensity                                OFFSET(get<float>, {0x4F0, 4, 0, 0})
	DMember(float)                                     LPVSpecularOcclusionIntensity                               OFFSET(get<float>, {0x4F4, 4, 0, 0})
	CMember(EReflectionsType)                          ReflectionsType                                             OFFSET(get<T>, {0x4F8, 1, 0, 0})
	DMember(float)                                     ScreenSpaceReflectionIntensity                              OFFSET(get<float>, {0x4FC, 4, 0, 0})
	DMember(float)                                     ScreenSpaceReflectionQuality                                OFFSET(get<float>, {0x500, 4, 0, 0})
	DMember(float)                                     ScreenSpaceReflectionMaxRoughness                           OFFSET(get<float>, {0x504, 4, 0, 0})
	DMember(float)                                     ScreenSpaceReflectionMobileDistanceFade                     OFFSET(get<float>, {0x508, 4, 0, 0})
	DMember(float)                                     RayTracingReflectionsMaxRoughness                           OFFSET(get<float>, {0x50C, 4, 0, 0})
	DMember(int32_t)                                   RayTracingReflectionsMaxBounces                             OFFSET(get<int32_t>, {0x510, 4, 0, 0})
	DMember(int32_t)                                   RayTracingReflectionsSamplesPerPixel                        OFFSET(get<int32_t>, {0x514, 4, 0, 0})
	CMember(EReflectedAndRefractedRayTracedShadows)    RayTracingReflectionsShadows                                OFFSET(get<T>, {0x518, 1, 0, 0})
	DMember(bool)                                      RayTracingReflectionsTranslucency                           OFFSET(get<bool>, {0x519, 1, 1, 0})
	CMember(ETranslucencyType)                         TranslucencyType                                            OFFSET(get<T>, {0x51A, 1, 0, 0})
	DMember(float)                                     RayTracingTranslucencyMaxRoughness                          OFFSET(get<float>, {0x51C, 4, 0, 0})
	DMember(int32_t)                                   RayTracingTranslucencyRefractionRays                        OFFSET(get<int32_t>, {0x520, 4, 0, 0})
	DMember(int32_t)                                   RayTracingTranslucencySamplesPerPixel                       OFFSET(get<int32_t>, {0x524, 4, 0, 0})
	CMember(EReflectedAndRefractedRayTracedShadows)    RayTracingTranslucencyShadows                               OFFSET(get<T>, {0x528, 1, 0, 0})
	DMember(bool)                                      RayTracingTranslucencyRefraction                            OFFSET(get<bool>, {0x529, 1, 1, 0})
	DMember(int32_t)                                   PathTracingMaxBounces                                       OFFSET(get<int32_t>, {0x52C, 4, 0, 0})
	DMember(int32_t)                                   PathTracingSamplesPerPixel                                  OFFSET(get<int32_t>, {0x530, 4, 0, 0})
	DMember(float)                                     LPVFadeRange                                                OFFSET(get<float>, {0x534, 4, 0, 0})
	DMember(float)                                     LPVDirectionalOcclusionFadeRange                            OFFSET(get<float>, {0x538, 4, 0, 0})
	DMember(float)                                     ScreenPercentage                                            OFFSET(get<float>, {0x53C, 4, 0, 0})
	SMember(FWeightedBlendables)                       WeightedBlendables                                          OFFSET(getStruct<T>, {0x540, 16, 0, 0})
};

/// Class /Script/Engine.CameraActor
/// Size: 0x0580 (0x000220 - 0x0007A0)
class ACameraActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1952;

public:
	CMember(TEnumAsByte<EAutoReceiveInput>)            AutoActivateForPlayer                                       OFFSET(get<T>, {0x220, 1, 0, 0})
	CMember(class UCameraComponent*)                   CameraComponent                                             OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class USceneComponent*)                    SceneComponent                                              OFFSET(get<T>, {0x230, 8, 0, 0})
	DMember(bool)                                      bConstrainAspectRatio                                       OFFSET(get<bool>, {0x240, 1, 1, 0})
	DMember(float)                                     AspectRatio                                                 OFFSET(get<float>, {0x244, 4, 0, 0})
	DMember(float)                                     FOVAngle                                                    OFFSET(get<float>, {0x248, 4, 0, 0})
	DMember(float)                                     PostProcessBlendWeight                                      OFFSET(get<float>, {0x24C, 4, 0, 0})
	SMember(FPostProcessSettings)                      PostProcessSettings                                         OFFSET(getStruct<T>, {0x250, 1360, 0, 0})


	/// Functions
	// Function /Script/Engine.CameraActor.GetAutoActivatePlayerIndex
	// int32_t GetAutoActivatePlayerIndex();                                                                                    // [0x32d2dc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.FOscillator
/// Size: 0x000C (0x000000 - 0x00000C)
class FFOscillator : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     Amplitude                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Frequency                                                   OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(TEnumAsByte<EInitialOscillatorOffset>)     InitialOffset                                               OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(EOscillatorWaveform)                       Waveform                                                    OFFSET(get<T>, {0x9, 1, 0, 0})
};

/// Struct /Script/Engine.ROscillator
/// Size: 0x0024 (0x000000 - 0x000024)
class FROscillator : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	SMember(FFOscillator)                              Pitch                                                       OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FFOscillator)                              Yaw                                                         OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FFOscillator)                              Roll                                                        OFFSET(getStruct<T>, {0x18, 12, 0, 0})
};

/// Struct /Script/Engine.VOscillator
/// Size: 0x0024 (0x000000 - 0x000024)
class FVOscillator : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	SMember(FFOscillator)                              X                                                           OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FFOscillator)                              Y                                                           OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FFOscillator)                              Z                                                           OFFSET(getStruct<T>, {0x18, 12, 0, 0})
};

/// Class /Script/Engine.MatineeCameraShake
/// Size: 0x00E8 (0x000098 - 0x000180)
class UMatineeCameraShake : public UCameraShakeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	DMember(float)                                     OscillationDuration                                         OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(float)                                     OscillationBlendInTime                                      OFFSET(get<float>, {0x9C, 4, 0, 0})
	DMember(float)                                     OscillationBlendOutTime                                     OFFSET(get<float>, {0xA0, 4, 0, 0})
	SMember(FROscillator)                              RotOscillation                                              OFFSET(getStruct<T>, {0xA4, 36, 0, 0})
	SMember(FVOscillator)                              LocOscillation                                              OFFSET(getStruct<T>, {0xC8, 36, 0, 0})
	SMember(FFOscillator)                              FOVOscillation                                              OFFSET(getStruct<T>, {0xEC, 12, 0, 0})
	DMember(float)                                     AnimPlayRate                                                OFFSET(get<float>, {0xF8, 4, 0, 0})
	DMember(float)                                     AnimScale                                                   OFFSET(get<float>, {0xFC, 4, 0, 0})
	DMember(float)                                     AnimBlendInTime                                             OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     AnimBlendOutTime                                            OFFSET(get<float>, {0x104, 4, 0, 0})
	DMember(float)                                     RandomAnimSegmentDuration                                   OFFSET(get<float>, {0x108, 4, 0, 0})
	CMember(class UCameraAnim*)                        Anim                                                        OFFSET(get<T>, {0x110, 8, 0, 0})
	DMember(bool)                                      bRandomAnimSegment                                          OFFSET(get<bool>, {0x118, 1, 1, 0})
	DMember(float)                                     OscillatorTimeRemaining                                     OFFSET(get<float>, {0x11C, 4, 0, 0})
	CMember(class UCameraAnimInst*)                    AnimInst                                                    OFFSET(get<T>, {0x120, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.MatineeCameraShake.ReceiveStopShake
	// void ReceiveStopShake(bool bImmediately);                                                                                // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.MatineeCameraShake.ReceivePlayShake
	// void ReceivePlayShake(float Scale);                                                                                      // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.MatineeCameraShake.ReceiveIsFinished
	// bool ReceiveIsFinished();                                                                                                // [0x1221f70] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.MatineeCameraShake.BlueprintUpdateCameraShake
	// void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, FMinimalViewInfo& POV, FMinimalViewInfo& ModifiedPOV);     // [0x198a600] Event|Public|HasOutParms|BlueprintEvent 
};

/// Class /Script/Engine.ShapeComponent
/// Size: 0x0018 (0x000468 - 0x000480)
class UShapeComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1152;

public:
	CMember(class UBodySetup*)                         ShapeBodySetup                                              OFFSET(get<T>, {0x468, 8, 0, 0})
	CMember(class UClass*)                             AreaClass                                                   OFFSET(get<T>, {0x470, 8, 0, 0})
	SMember(FColor)                                    ShapeColor                                                  OFFSET(getStruct<T>, {0x478, 4, 0, 0})
	DMember(bool)                                      bDrawOnlyIfSelected                                         OFFSET(get<bool>, {0x47C, 1, 1, 0})
	DMember(bool)                                      bShouldCollideWhenPlacing                                   OFFSET(get<bool>, {0x47C, 1, 1, 1})
	DMember(bool)                                      bDynamicObstacle                                            OFFSET(get<bool>, {0x47C, 1, 1, 2})
};

/// Class /Script/Engine.BoxComponent
/// Size: 0x0010 (0x000480 - 0x000490)
class UBoxComponent : public UShapeComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1168;

public:
	SMember(FVector)                                   BoxExtent                                                   OFFSET(getStruct<T>, {0x480, 12, 0, 0})
	DMember(float)                                     LineThickness                                               OFFSET(get<float>, {0x48C, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.BoxComponent.SetBoxExtent
	// void SetBoxExtent(FVector InBoxExtent, bool bUpdateOverlaps);                                                            // [0x32cf030] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.BoxComponent.GetUnscaledBoxExtent
	// FVector GetUnscaledBoxExtent();                                                                                          // [0x32cf000] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.BoxComponent.GetScaledBoxExtent
	// FVector GetScaledBoxExtent();                                                                                            // [0x32cefa0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.SphereComponent
/// Size: 0x0010 (0x000480 - 0x000490)
class USphereComponent : public UShapeComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1168;

public:
	DMember(float)                                     SphereRadius                                                OFFSET(get<float>, {0x480, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.SphereComponent.SetSphereRadius
	// void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);                                                        // [0x3403910] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SphereComponent.GetUnscaledSphereRadius
	// float GetUnscaledSphereRadius();                                                                                         // [0x32d9610] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SphereComponent.GetShapeScale
	// float GetShapeScale();                                                                                                   // [0x3401a70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SphereComponent.GetScaledSphereRadius
	// float GetScaledSphereRadius();                                                                                           // [0x3401a20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.TriggerBase
/// Size: 0x0008 (0x000220 - 0x000228)
class ATriggerBase : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(class UShapeComponent*)                    CollisionComponent                                          OFFSET(get<T>, {0x220, 8, 0, 0})
};

/// Class /Script/Engine.TriggerBox
/// Size: 0x0000 (0x000228 - 0x000228)
class ATriggerBox : public ATriggerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
};

/// Class /Script/Engine.ChildActorComponent
/// Size: 0x0038 (0x0001F8 - 0x000230)
class UChildActorComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(class UClass*)                             ChildActorClass                                             OFFSET(get<T>, {0x1F8, 8, 0, 0})
	CMember(class AActor*)                             ChildActor                                                  OFFSET(get<T>, {0x200, 8, 0, 0})
	CMember(class AActor*)                             ChildActorTemplate                                          OFFSET(get<T>, {0x208, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.ChildActorComponent.SetChildActorClass
	// void SetChildActorClass(class UClass* InClass);                                                                          // [0x32e12a0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.GameInstance
/// Size: 0x0180 (0x000028 - 0x0001A8)
class UGameInstance : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 424;

public:
	CMember(TArray<class ULocalPlayer*>)               LocalPlayers                                                OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(class UOnlineSession*)                     OnlineSession                                               OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TArray<class UObject*>)                    ReferencedObjects                                           OFFSET(get<T>, {0x50, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPawnControllerChangedDelegates                            OFFSET(getStruct<T>, {0x78, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.GameInstance.ReceiveShutdown
	// void ReceiveShutdown();                                                                                                  // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameInstance.ReceiveInit
	// void ReceiveInit();                                                                                                      // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameInstance.HandleTravelError
	// void HandleTravelError(TEnumAsByte<ETravelFailure> FailureType);                                                         // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameInstance.HandleNetworkError
	// void HandleNetworkError(TEnumAsByte<ENetworkFailure> FailureType, bool bIsServer);                                       // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameInstance.DebugRemovePlayer
	// void DebugRemovePlayer(int32_t ControllerId);                                                                            // [0x32fc2a0] Exec|Native|Public   
	// Function /Script/Engine.GameInstance.DebugCreatePlayer
	// void DebugCreatePlayer(int32_t ControllerId);                                                                            // [0x32fc210] Exec|Native|Public   
};

/// Class /Script/Engine.ArrowComponent
/// Size: 0x0018 (0x000468 - 0x000480)
class UArrowComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1152;

public:
	SMember(FColor)                                    ArrowColor                                                  OFFSET(getStruct<T>, {0x468, 4, 0, 0})
	DMember(float)                                     ArrowSize                                                   OFFSET(get<float>, {0x46C, 4, 0, 0})
	DMember(float)                                     ArrowLength                                                 OFFSET(get<float>, {0x470, 4, 0, 0})
	DMember(float)                                     ScreenSize                                                  OFFSET(get<float>, {0x474, 4, 0, 0})
	DMember(bool)                                      bIsScreenSizeScaled                                         OFFSET(get<bool>, {0x478, 1, 1, 0})
	DMember(bool)                                      bTreatAsASprite                                             OFFSET(get<bool>, {0x478, 1, 1, 1})


	/// Functions
	// Function /Script/Engine.ArrowComponent.SetArrowColor
	// void SetArrowColor(FLinearColor NewColor);                                                                               // [0x32b8d90] Native|Public|HasDefaults|BlueprintCallable 
};

/// Struct /Script/Engine.EngineShowFlagsSetting
/// Size: 0x0018 (0x000000 - 0x000018)
class FEngineShowFlagsSetting : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   ShowFlagName                                                OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      Enabled                                                     OFFSET(get<bool>, {0x10, 1, 0, 0})
};

/// Class /Script/Engine.SceneCaptureComponent
/// Size: 0x00B8 (0x0001F8 - 0x0002B0)
class USceneCaptureComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(ESceneCapturePrimitiveRenderMode)          PrimitiveRenderMode                                         OFFSET(get<T>, {0x1F8, 1, 0, 0})
	CMember(TEnumAsByte<ESceneCaptureSource>)          CaptureSource                                               OFFSET(get<T>, {0x1F9, 1, 0, 0})
	DMember(bool)                                      bCaptureEveryFrame                                          OFFSET(get<bool>, {0x1FA, 1, 1, 0})
	DMember(bool)                                      bCaptureOnMovement                                          OFFSET(get<bool>, {0x1FA, 1, 1, 1})
	DMember(bool)                                      bAlwaysPersistRenderingState                                OFFSET(get<bool>, {0x1FB, 1, 0, 0})
	CMember(TArray<TWeakObjectPtr<UPrimitiveComponent*>>) HiddenComponents                                         OFFSET(get<T>, {0x200, 16, 0, 0})
	CMember(TArray<class AActor*>)                     HiddenActors                                                OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<UPrimitiveComponent*>>) ShowOnlyComponents                                       OFFSET(get<T>, {0x220, 16, 0, 0})
	CMember(TArray<class AActor*>)                     ShowOnlyActors                                              OFFSET(get<T>, {0x230, 16, 0, 0})
	DMember(float)                                     LODDistanceFactor                                           OFFSET(get<float>, {0x240, 4, 0, 0})
	DMember(float)                                     MaxViewDistanceOverride                                     OFFSET(get<float>, {0x244, 4, 0, 0})
	DMember(int32_t)                                   CaptureSortPriority                                         OFFSET(get<int32_t>, {0x248, 4, 0, 0})
	DMember(bool)                                      bUseRayTracingIfEnabled                                     OFFSET(get<bool>, {0x24C, 1, 0, 0})
	CMember(TArray<FEngineShowFlagsSetting>)           ShowFlagSettings                                            OFFSET(get<T>, {0x250, 16, 0, 0})
	SMember(FString)                                   ProfilingEventName                                          OFFSET(getStruct<T>, {0x290, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.SceneCaptureComponent.ShowOnlyComponent
	// void ShowOnlyComponent(class UPrimitiveComponent* InComponent);                                                          // [0x33e3180] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.ShowOnlyActorComponents
	// void ShowOnlyActorComponents(class AActor* InActor, bool bIncludeFromChildActors);                                       // [0x33e30b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.SetCaptureSortPriority
	// void SetCaptureSortPriority(int32_t NewCaptureSortPriority);                                                             // [0x33e2c50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.RemoveShowOnlyComponent
	// void RemoveShowOnlyComponent(class UPrimitiveComponent* InComponent);                                                    // [0x33e2a70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents
	// void RemoveShowOnlyActorComponents(class AActor* InActor, bool bIncludeFromChildActors);                                 // [0x33e29a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.HideComponent
	// void HideComponent(class UPrimitiveComponent* InComponent);                                                              // [0x33e0250] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.HideActorComponents
	// void HideActorComponents(class AActor* InActor, bool bIncludeFromChildActors);                                           // [0x33e0180] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.ClearShowOnlyComponents
	// void ClearShowOnlyComponents();                                                                                          // [0x33df820] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.ClearHiddenComponents
	// void ClearHiddenComponents();                                                                                            // [0x33df800] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneCaptureComponent2D
/// Size: 0x0600 (0x0002B0 - 0x0008B0)
class USceneCaptureComponent2D : public USceneCaptureComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2224;

public:
	CMember(TEnumAsByte<ECameraProjectionMode>)        ProjectionType                                              OFFSET(get<T>, {0x2B0, 1, 0, 0})
	DMember(float)                                     FOVAngle                                                    OFFSET(get<float>, {0x2B4, 4, 0, 0})
	DMember(float)                                     OrthoWidth                                                  OFFSET(get<float>, {0x2B8, 4, 0, 0})
	CMember(class UTextureRenderTarget2D*)             TextureTarget                                               OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(TEnumAsByte<ESceneCaptureCompositeMode>)   CompositeMode                                               OFFSET(get<T>, {0x2C8, 1, 0, 0})
	SMember(FPostProcessSettings)                      PostProcessSettings                                         OFFSET(getStruct<T>, {0x2D0, 1360, 0, 0})
	DMember(float)                                     PostProcessBlendWeight                                      OFFSET(get<float>, {0x820, 4, 0, 0})
	DMember(bool)                                      bOverride_CustomNearClippingPlane                           OFFSET(get<bool>, {0x824, 1, 1, 0})
	DMember(float)                                     CustomNearClippingPlane                                     OFFSET(get<float>, {0x828, 4, 0, 0})
	DMember(bool)                                      bUseCustomProjectionMatrix                                  OFFSET(get<bool>, {0x82C, 1, 0, 0})
	SMember(FMatrix)                                   CustomProjectionMatrix                                      OFFSET(getStruct<T>, {0x830, 64, 0, 0})
	DMember(bool)                                      bEnableClipPlane                                            OFFSET(get<bool>, {0x870, 1, 0, 0})
	SMember(FVector)                                   ClipPlaneBase                                               OFFSET(getStruct<T>, {0x874, 12, 0, 0})
	SMember(FVector)                                   ClipPlaneNormal                                             OFFSET(getStruct<T>, {0x880, 12, 0, 0})
	DMember(bool)                                      bCameraCutThisFrame                                         OFFSET(get<bool>, {0x88C, 1, 1, 0})
	DMember(bool)                                      bConsiderUnrenderedOpaquePixelAsFullyTranslucent            OFFSET(get<bool>, {0x88C, 1, 1, 1})
	DMember(bool)                                      bDisableFlipCopyGLES                                        OFFSET(get<bool>, {0x890, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.SceneCaptureComponent2D.CaptureScene
	// void CaptureScene();                                                                                                     // [0x33df7e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent2D.AddOrUpdateBlendable
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                    // [0x33df690] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SpringArmComponent
/// Size: 0x0088 (0x0001F8 - 0x000280)
class USpringArmComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	DMember(float)                                     TargetArmLength                                             OFFSET(get<float>, {0x1F8, 4, 0, 0})
	SMember(FVector)                                   SocketOffset                                                OFFSET(getStruct<T>, {0x1FC, 12, 0, 0})
	SMember(FVector)                                   TargetOffset                                                OFFSET(getStruct<T>, {0x208, 12, 0, 0})
	DMember(float)                                     ProbeSize                                                   OFFSET(get<float>, {0x214, 4, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            ProbeChannel                                                OFFSET(get<T>, {0x218, 1, 0, 0})
	DMember(bool)                                      bDoCollisionTest                                            OFFSET(get<bool>, {0x21C, 1, 1, 0})
	DMember(bool)                                      bUsePawnControlRotation                                     OFFSET(get<bool>, {0x21C, 1, 1, 1})
	DMember(bool)                                      bInheritPitch                                               OFFSET(get<bool>, {0x21C, 1, 1, 2})
	DMember(bool)                                      bInheritYaw                                                 OFFSET(get<bool>, {0x21C, 1, 1, 3})
	DMember(bool)                                      bInheritRoll                                                OFFSET(get<bool>, {0x21C, 1, 1, 4})
	DMember(bool)                                      bEnableCameraLag                                            OFFSET(get<bool>, {0x21C, 1, 1, 5})
	DMember(bool)                                      bEnableCameraRotationLag                                    OFFSET(get<bool>, {0x21C, 1, 1, 6})
	DMember(bool)                                      bUseCameraLagSubstepping                                    OFFSET(get<bool>, {0x21C, 1, 1, 7})
	DMember(bool)                                      bDrawDebugLagMarkers                                        OFFSET(get<bool>, {0x21D, 1, 1, 0})
	DMember(float)                                     CameraLagSpeed                                              OFFSET(get<float>, {0x220, 4, 0, 0})
	DMember(float)                                     CameraRotationLagSpeed                                      OFFSET(get<float>, {0x224, 4, 0, 0})
	DMember(float)                                     CameraLagMaxTimeStep                                        OFFSET(get<float>, {0x228, 4, 0, 0})
	DMember(float)                                     CameraLagMaxDistance                                        OFFSET(get<float>, {0x22C, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.SpringArmComponent.IsCollisionFixApplied
	// bool IsCollisionFixApplied();                                                                                            // [0x3406d90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SpringArmComponent.GetUnfixedCameraPosition
	// FVector GetUnfixedCameraPosition();                                                                                      // [0x3406d50] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SpringArmComponent.GetTargetRotation
	// FRotator GetTargetRotation();                                                                                            // [0x3406d10] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.TextRenderComponent
/// Size: 0x0058 (0x000468 - 0x0004C0)
class UTextRenderComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1216;

public:
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x468, 24, 0, 0})
	CMember(class UMaterialInterface*)                 TextMaterial                                                OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(class UFont*)                              Font                                                        OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(TEnumAsByte<EHorizTextAligment>)           HorizontalAlignment                                         OFFSET(get<T>, {0x490, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalTextAligment>)        VerticalAlignment                                           OFFSET(get<T>, {0x491, 1, 0, 0})
	SMember(FColor)                                    TextRenderColor                                             OFFSET(getStruct<T>, {0x494, 4, 0, 0})
	DMember(float)                                     XScale                                                      OFFSET(get<float>, {0x498, 4, 0, 0})
	DMember(float)                                     YScale                                                      OFFSET(get<float>, {0x49C, 4, 0, 0})
	DMember(float)                                     WorldSize                                                   OFFSET(get<float>, {0x4A0, 4, 0, 0})
	DMember(float)                                     InvDefaultSize                                              OFFSET(get<float>, {0x4A4, 4, 0, 0})
	DMember(float)                                     HorizSpacingAdjust                                          OFFSET(get<float>, {0x4A8, 4, 0, 0})
	DMember(float)                                     VertSpacingAdjust                                           OFFSET(get<float>, {0x4AC, 4, 0, 0})
	DMember(bool)                                      bAlwaysRenderAsText                                         OFFSET(get<bool>, {0x4B0, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.TextRenderComponent.SetYScale
	// void SetYScale(float Value);                                                                                             // [0x340ecd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetXScale
	// void SetXScale(float Value);                                                                                             // [0x340ec50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetWorldSize
	// void SetWorldSize(float Value);                                                                                          // [0x340ebd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetVertSpacingAdjust
	// void SetVertSpacingAdjust(float Value);                                                                                  // [0x340ead0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalTextAligment> Value);                                                     // [0x340eb50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetTextRenderColor
	// void SetTextRenderColor(FColor Value);                                                                                   // [0x340ea50] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetTextMaterial
	// void SetTextMaterial(class UMaterialInterface* Material);                                                                // [0x340e9c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetText
	// void SetText(FString Value);                                                                                             // [0x340e920] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetHorizSpacingAdjust
	// void SetHorizSpacingAdjust(float Value);                                                                                 // [0x340e820] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizTextAligment> Value);                                                      // [0x340e8a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetFont
	// void SetFont(class UFont* Value);                                                                                        // [0x340e790] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.K2_SetText
	// void K2_SetText(FText& Value);                                                                                           // [0x340e6c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.GetTextWorldSize
	// FVector GetTextWorldSize();                                                                                              // [0x340e5b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TextRenderComponent.GetTextLocalSize
	// FVector GetTextLocalSize();                                                                                              // [0x340e570] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CameraComponent
/// Size: 0x05E8 (0x0001F8 - 0x0007E0)
class UCameraComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2016;

public:
	DMember(float)                                     FieldOfView                                                 OFFSET(get<float>, {0x1F8, 4, 0, 0})
	DMember(float)                                     OrthoWidth                                                  OFFSET(get<float>, {0x1FC, 4, 0, 0})
	DMember(float)                                     OrthoNearClipPlane                                          OFFSET(get<float>, {0x200, 4, 0, 0})
	DMember(float)                                     OrthoFarClipPlane                                           OFFSET(get<float>, {0x204, 4, 0, 0})
	DMember(float)                                     AspectRatio                                                 OFFSET(get<float>, {0x208, 4, 0, 0})
	DMember(bool)                                      bConstrainAspectRatio                                       OFFSET(get<bool>, {0x20C, 1, 1, 0})
	DMember(bool)                                      bUseFieldOfViewForLOD                                       OFFSET(get<bool>, {0x20C, 1, 1, 1})
	DMember(bool)                                      bLockToHmd                                                  OFFSET(get<bool>, {0x20C, 1, 1, 2})
	DMember(bool)                                      bUsePawnControlRotation                                     OFFSET(get<bool>, {0x20C, 1, 1, 3})
	CMember(TEnumAsByte<ECameraProjectionMode>)        ProjectionMode                                              OFFSET(get<T>, {0x20D, 1, 0, 0})
	DMember(float)                                     PostProcessBlendWeight                                      OFFSET(get<float>, {0x240, 4, 0, 0})
	DMember(float)                                     MinAdaptRatio                                               OFFSET(get<float>, {0x244, 4, 0, 0})
	DMember(float)                                     MaxAdaptRatio                                               OFFSET(get<float>, {0x248, 4, 0, 0})
	DMember(float)                                     VFOVWeight                                                  OFFSET(get<float>, {0x24C, 4, 0, 0})
	SMember(FPostProcessSettings)                      PostProcessSettings                                         OFFSET(getStruct<T>, {0x290, 1360, 0, 0})


	/// Functions
	// Function /Script/Engine.CameraComponent.SetUseFieldOfViewForLOD
	// void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);                                                              // [0x32d4d30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetProjectionMode
	// void SetProjectionMode(TEnumAsByte<ECameraProjectionMode> InProjectionMode);                                             // [0x32d4c30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetPostProcessBlendWeight
	// void SetPostProcessBlendWeight(float InPostProcessBlendWeight);                                                          // [0x32d4bb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetOrthoWidth
	// void SetOrthoWidth(float InOrthoWidth);                                                                                  // [0x32d4b30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetOrthoNearClipPlane
	// void SetOrthoNearClipPlane(float InOrthoNearClipPlane);                                                                  // [0x32d4ab0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetOrthoFarClipPlane
	// void SetOrthoFarClipPlane(float InOrthoFarClipPlane);                                                                    // [0x32d4a30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetFieldOfView
	// void SetFieldOfView(float InFieldOfView);                                                                                // [0x2a75780] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetConstraintAspectRatio
	// void SetConstraintAspectRatio(bool bInConstrainAspectRatio);                                                             // [0x32d4920] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetAspectRatio
	// void SetAspectRatio(float InAspectRatio);                                                                                // [0x32d48a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.RemoveBlendable
	// void RemoveBlendable(TScriptInterface<Class> InBlendableObject);                                                         // [0x32d4770] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.OnCameraMeshHiddenChanged
	// void OnCameraMeshHiddenChanged();                                                                                        // [0x9a7970] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.GetCameraView
	// void GetCameraView(float DeltaTime, FMinimalViewInfo& DesiredView);                                                      // [0x32d2df0] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.AddOrUpdateBlendable
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                    // [0x32d2b40] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SkyLight
/// Size: 0x0010 (0x000220 - 0x000230)
class ASkyLight : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(class USkyLightComponent*)                 LightComponent                                              OFFSET(get<T>, {0x220, 8, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x228, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.SkyLight.OnRep_bEnabled
	// void OnRep_bEnabled();                                                                                                   // [0xc51440] Native|Public        
};

/// Class /Script/Engine.Texture
/// Size: 0x0078 (0x000060 - 0x0000D8)
class UTexture : public UStreamableRenderAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FGuid)                                     LightingGuid                                                OFFSET(getStruct<T>, {0x68, 16, 0, 0})
	DMember(int32_t)                                   LODBias                                                     OFFSET(get<int32_t>, {0x78, 4, 0, 0})
	CMember(TEnumAsByte<TextureCompressionSettings>)   CompressionSettings                                         OFFSET(get<T>, {0x7C, 1, 0, 0})
	CMember(TEnumAsByte<TextureFilter>)                Filter                                                      OFFSET(get<T>, {0x7D, 1, 0, 0})
	CMember(ETextureMipLoadOptions)                    MipLoadOptions                                              OFFSET(get<T>, {0x7E, 1, 0, 0})
	CMember(TEnumAsByte<TextureGroup>)                 LODGroup                                                    OFFSET(get<T>, {0x7F, 1, 0, 0})
	SMember(FPerPlatformFloat)                         Downscale                                                   OFFSET(getStruct<T>, {0x80, 4, 0, 0})
	CMember(ETextureDownscaleOptions)                  DownscaleOptions                                            OFFSET(get<T>, {0x84, 1, 0, 0})
	DMember(bool)                                      SRGB                                                        OFFSET(get<bool>, {0x85, 1, 1, 0})
	DMember(bool)                                      bNoTiling                                                   OFFSET(get<bool>, {0x85, 1, 1, 1})
	DMember(bool)                                      VirtualTextureStreaming                                     OFFSET(get<bool>, {0x85, 1, 1, 2})
	DMember(bool)                                      CompressionYCoCg                                            OFFSET(get<bool>, {0x85, 1, 1, 3})
	DMember(bool)                                      bNotOfflineProcessed                                        OFFSET(get<bool>, {0x85, 1, 1, 4})
	DMember(bool)                                      bAsyncResourceReleaseHasBeenStarted                         OFFSET(get<bool>, {0x85, 1, 1, 5})
	CMember(TArray<class UAssetUserData*>)             AssetUserData                                               OFFSET(get<T>, {0x88, 16, 0, 0})
};

/// Class /Script/Engine.TextureCube
/// Size: 0x0058 (0x0000D8 - 0x000130)
class UTextureCube : public UTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
};

/// Struct /Script/Engine.StaticMeshComponentLODInfo
/// Size: 0x0090 (0x000000 - 0x000090)
class FStaticMeshComponentLODInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Struct /Script/Engine.StreamingTextureBuildInfo
/// Size: 0x000C (0x000000 - 0x00000C)
class FStreamingTextureBuildInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(uint32_t)                                  PackedRelativeBox                                           OFFSET(get<uint32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   TextureLevelIndex                                           OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(float)                                     TexelFactor                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.LightmassPrimitiveSettings
/// Size: 0x0018 (0x000000 - 0x000018)
class FLightmassPrimitiveSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(bool)                                      bUseTwoSidedLighting                                        OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bShadowIndirectOnly                                         OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bUseEmissiveForStaticLighting                               OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bUseVertexNormalForHemisphereGather                         OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(float)                                     EmissiveLightFalloffExponent                                OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     EmissiveLightExplicitInfluenceRadius                        OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     EmissiveBoost                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     DiffuseBoost                                                OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     FullyOccludedSamplesFraction                                OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Class /Script/Engine.StaticMeshComponent
/// Size: 0x0070 (0x000490 - 0x000500)
class UStaticMeshComponent : public UMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1280;

public:
	DMember(int32_t)                                   ForcedLodModel                                              OFFSET(get<int32_t>, {0x490, 4, 0, 0})
	DMember(int32_t)                                   PreviousLODLevel                                            OFFSET(get<int32_t>, {0x494, 4, 0, 0})
	DMember(int32_t)                                   MinLOD                                                      OFFSET(get<int32_t>, {0x498, 4, 0, 0})
	DMember(int32_t)                                   SubDivisionStepSize                                         OFFSET(get<int32_t>, {0x49C, 4, 0, 0})
	CMember(class UStaticMesh*)                        StaticMesh                                                  OFFSET(get<T>, {0x4A0, 8, 0, 0})
	SMember(FColor)                                    WireframeColorOverride                                      OFFSET(getStruct<T>, {0x4A8, 4, 0, 0})
	DMember(bool)                                      bEvaluateWorldPositionOffset                                OFFSET(get<bool>, {0x4AC, 1, 1, 0})
	DMember(bool)                                      bOverrideWireframeColor                                     OFFSET(get<bool>, {0x4AC, 1, 1, 1})
	DMember(bool)                                      bOverrideMinLod                                             OFFSET(get<bool>, {0x4AC, 1, 1, 2})
	DMember(bool)                                      bOverrideNavigationExport                                   OFFSET(get<bool>, {0x4AC, 1, 1, 3})
	DMember(bool)                                      bForceNavigationObstacle                                    OFFSET(get<bool>, {0x4AC, 1, 1, 4})
	DMember(bool)                                      bDisallowMeshPaintPerInstance                               OFFSET(get<bool>, {0x4AC, 1, 1, 5})
	DMember(bool)                                      bIgnoreInstanceForTextureStreaming                          OFFSET(get<bool>, {0x4AC, 1, 1, 6})
	DMember(bool)                                      bOverrideLightMapRes                                        OFFSET(get<bool>, {0x4AC, 1, 1, 7})
	DMember(bool)                                      bCastDistanceFieldIndirectShadow                            OFFSET(get<bool>, {0x4AD, 1, 1, 0})
	DMember(bool)                                      bOverrideDistanceFieldSelfShadowBias                        OFFSET(get<bool>, {0x4AD, 1, 1, 1})
	DMember(bool)                                      bUseSubDivisions                                            OFFSET(get<bool>, {0x4AD, 1, 1, 2})
	DMember(bool)                                      bUseDefaultCollision                                        OFFSET(get<bool>, {0x4AD, 1, 1, 3})
	DMember(bool)                                      bReverseCulling                                             OFFSET(get<bool>, {0x4AD, 1, 1, 4})
	DMember(int32_t)                                   OverriddenLightMapRes                                       OFFSET(get<int32_t>, {0x4B0, 4, 0, 0})
	DMember(float)                                     DistanceFieldIndirectShadowMinVisibility                    OFFSET(get<float>, {0x4B4, 4, 0, 0})
	DMember(float)                                     DistanceFieldSelfShadowBias                                 OFFSET(get<float>, {0x4B8, 4, 0, 0})
	DMember(float)                                     StreamingDistanceMultiplier                                 OFFSET(get<float>, {0x4BC, 4, 0, 0})
	CMember(TArray<FStaticMeshComponentLODInfo>)       LODData                                                     OFFSET(get<T>, {0x4C0, 16, 0, 0})
	CMember(TArray<FStreamingTextureBuildInfo>)        StreamingTextureData                                        OFFSET(get<T>, {0x4D0, 16, 0, 0})
	SMember(FLightmassPrimitiveSettings)               LightmassSettings                                           OFFSET(getStruct<T>, {0x4E0, 24, 0, 0})


	/// Functions
	// Function /Script/Engine.StaticMeshComponent.SetStaticMesh
	// bool SetStaticMesh(class UStaticMesh* NewMesh);                                                                          // [0x1246740] Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.SetReverseCulling
	// void SetReverseCulling(bool ReverseCulling);                                                                             // [0x340ba70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.SetForcedLodModel
	// void SetForcedLodModel(int32_t NewForcedLodModel);                                                                       // [0x340b630] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.SetEvaluateWorldPositionOffsetInRayTracing
	// void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);                                                          // [0x340b5a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias
	// void SetDistanceFieldSelfShadowBias(float NewValue);                                                                     // [0x340b320] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.OnRep_StaticMesh
	// void OnRep_StaticMesh(class UStaticMesh* OldStaticMesh);                                                                 // [0x340b290] Final|Native|Public  
	// Function /Script/Engine.StaticMeshComponent.GetLocalBounds
	// void GetLocalBounds(FVector& Min, FVector& Max);                                                                         // [0x340b0f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.InstancedStaticMeshInstanceData
/// Size: 0x0040 (0x000000 - 0x000040)
class FInstancedStaticMeshInstanceData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FMatrix)                                   Transform                                                   OFFSET(getStruct<T>, {0x0, 64, 0, 0})
};

/// Struct /Script/Engine.InstancedStaticMeshMappingInfo
/// Size: 0x0008 (0x000000 - 0x000008)
class FInstancedStaticMeshMappingInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Class /Script/Engine.InstancedStaticMeshComponent
/// Size: 0x00A8 (0x0004F8 - 0x0005A0)
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1440;

public:
	CMember(TArray<FInstancedStaticMeshInstanceData>)  PerInstanceSMData                                           OFFSET(get<T>, {0x4F8, 16, 0, 0})
	DMember(int32_t)                                   NumCustomDataFloats                                         OFFSET(get<int32_t>, {0x508, 4, 0, 0})
	CMember(TArray<float>)                             PerInstanceSMCustomData                                     OFFSET(get<T>, {0x510, 16, 0, 0})
	DMember(int32_t)                                   InstancingRandomSeed                                        OFFSET(get<int32_t>, {0x520, 4, 0, 0})
	DMember(int32_t)                                   InstanceStartCullDistance                                   OFFSET(get<int32_t>, {0x524, 4, 0, 0})
	DMember(int32_t)                                   InstanceEndCullDistance                                     OFFSET(get<int32_t>, {0x528, 4, 0, 0})
	CMember(TArray<int32_t>)                           InstanceReorderTable                                        OFFSET(get<T>, {0x530, 16, 0, 0})
	DMember(int32_t)                                   NumPendingLightmaps                                         OFFSET(get<int32_t>, {0x588, 4, 0, 0})
	CMember(TArray<FInstancedStaticMeshMappingInfo>)   CachedMappings                                              OFFSET(get<T>, {0x590, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.InstancedStaticMeshComponent.UpdateInstanceTransform
	// bool UpdateInstanceTransform(int32_t InstanceIndex, FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // [0x331ac90] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.SetCustomDataValue
	// bool SetCustomDataValue(int32_t InstanceIndex, int32_t CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty); // [0x331ab30] Native|Public|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.SetCullDistances
	// void SetCullDistances(int32_t StartCullDistance, int32_t EndCullDistance);                                               // [0x331aa60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.RemoveInstance
	// bool RemoveInstance(int32_t InstanceIndex);                                                                              // [0x331a9a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstanceTransform
	// bool GetInstanceTransform(int32_t InstanceIndex, FTransform& OutInstanceTransform, bool bWorldSpace);                    // [0x331a020] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere
	// TArray<int32_t> GetInstancesOverlappingSphere(FVector& Center, float Radius, bool bSphereInWorldSpace);                  // [0x331a2b0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox
	// TArray<int32_t> GetInstancesOverlappingBox(FBox& Box, bool bBoxInWorldSpace);                                            // [0x331a180] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstanceCount
	// int32_t GetInstanceCount();                                                                                              // [0x3319ff0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InstancedStaticMeshComponent.ClearInstances
	// void ClearInstances();                                                                                                   // [0x3319780] Native|Public|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransforms
	// bool BatchUpdateInstancesTransforms(int32_t StartInstanceIndex, TArray<FTransform>& NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // [0x3319580] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransform
	// bool BatchUpdateInstancesTransform(int32_t StartInstanceIndex, int32_t NumInstances, FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // [0x3319330] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace
	// int32_t AddInstanceWorldSpace(FTransform& WorldTransform);                                                               // [0x3319110] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.AddInstances
	// TArray<int32_t> AddInstances(TArray<FTransform>& InstanceTransforms, bool bShouldReturnIndices);                         // [0x33191f0] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.AddInstance
	// int32_t AddInstance(FTransform& InstanceTransform);                                                                      // [0x3319030] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.HierarchicalInstancedStaticMeshComponent
/// Size: 0x00F0 (0x0005A0 - 0x000690)
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1680;

public:
	CMember(TArray<int32_t>)                           SortedInstances                                             OFFSET(get<T>, {0x5B0, 16, 0, 0})
	DMember(int32_t)                                   NumBuiltInstances                                           OFFSET(get<int32_t>, {0x5C0, 4, 0, 0})
	SMember(FBox)                                      BuiltInstanceBounds                                         OFFSET(getStruct<T>, {0x5C8, 28, 0, 0})
	SMember(FBox)                                      UnbuiltInstanceBounds                                       OFFSET(getStruct<T>, {0x5E4, 28, 0, 0})
	CMember(TArray<FBox>)                              UnbuiltInstanceBoundsList                                   OFFSET(get<T>, {0x600, 16, 0, 0})
	DMember(bool)                                      bEnableDensityScaling                                       OFFSET(get<bool>, {0x610, 1, 1, 0})
	DMember(int32_t)                                   OcclusionLayerNumNodes                                      OFFSET(get<int32_t>, {0x618, 4, 0, 0})
	SMember(FBoxSphereBounds)                          CacheMeshExtendedBounds                                     OFFSET(getStruct<T>, {0x61C, 28, 0, 0})
	DMember(bool)                                      bDisableCollision                                           OFFSET(get<bool>, {0x638, 1, 0, 0})
	DMember(int32_t)                                   InstanceCountToRender                                       OFFSET(get<int32_t>, {0x63C, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances
	// bool RemoveInstances(TArray<int32_t>& InstancesToRemove);                                                                // [0x33151c0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.StaticMeshActor
/// Size: 0x0010 (0x000220 - 0x000230)
class AStaticMeshActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(class UStaticMeshComponent*)               StaticMeshComponent                                         OFFSET(get<T>, {0x220, 8, 0, 0})
	DMember(bool)                                      bStaticMeshReplicateMovement                                OFFSET(get<bool>, {0x228, 1, 0, 0})
	CMember(ENavDataGatheringMode)                     NavigationGeometryGatheringMode                             OFFSET(get<T>, {0x229, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.StaticMeshActor.SetMobility
	// void SetMobility(TEnumAsByte<EComponentMobility> InMobility);                                                            // [0x340b7e0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.LightmassMaterialInterfaceSettings
/// Size: 0x0010 (0x000000 - 0x000010)
class FLightmassMaterialInterfaceSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     EmissiveBoost                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     DiffuseBoost                                                OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     ExportResolutionScale                                       OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      bCastShadowAsMasked                                         OFFSET(get<bool>, {0xC, 1, 1, 0})
	DMember(bool)                                      bOverrideCastShadowAsMasked                                 OFFSET(get<bool>, {0xC, 1, 1, 1})
	DMember(bool)                                      bOverrideEmissiveBoost                                      OFFSET(get<bool>, {0xC, 1, 1, 2})
	DMember(bool)                                      bOverrideDiffuseBoost                                       OFFSET(get<bool>, {0xC, 1, 1, 3})
	DMember(bool)                                      bOverrideExportResolutionScale                              OFFSET(get<bool>, {0xC, 1, 1, 4})
};

/// Struct /Script/Engine.MaterialTextureInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FMaterialTextureInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     SamplingScale                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   UVChannelIndex                                              OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	SMember(FName)                                     TextureName                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Class /Script/Engine.MaterialInterface
/// Size: 0x0060 (0x000028 - 0x000088)
class UMaterialInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(class USubsurfaceProfile*)                 SubsurfaceProfile                                           OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FLightmassMaterialInterfaceSettings)       LightmassSettings                                           OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	CMember(TArray<FMaterialTextureInfo>)              TextureStreamingData                                        OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<class UAssetUserData*>)             AssetUserData                                               OFFSET(get<T>, {0x70, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.MaterialInterface.SetForceMipLevelsToBeResident
	// void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int32_t CinematicTextureGroups, bool bFastResponse); // [0x339ad20] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInterface.GetPhysicalMaterialMask
	// class UPhysicalMaterialMask* GetPhysicalMaterialMask();                                                                  // [0x339a6f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MaterialInterface.GetPhysicalMaterialFromMap
	// class UPhysicalMaterial* GetPhysicalMaterialFromMap(int32_t Index);                                                      // [0x339a650] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MaterialInterface.GetPhysicalMaterial
	// class UPhysicalMaterial* GetPhysicalMaterial();                                                                          // [0x29f3550] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MaterialInterface.GetParameterInfo
	// FMaterialParameterInfo GetParameterInfo(TEnumAsByte<EMaterialParameterAssociation> Association, FName ParameterName, class UMaterialFunctionInterface* LayerFunction); // [0x339a530] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MaterialInterface.GetBaseMaterial
	// class UMaterial* GetBaseMaterial();                                                                                      // [0x339a500] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.MaterialParameterInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FMaterialParameterInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<EMaterialParameterAssociation>) Association                                                OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(int32_t)                                   Index                                                       OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.ScalarParameterValue
/// Size: 0x0024 (0x000000 - 0x000024)
class FScalarParameterValue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(float)                                     ParameterValue                                              OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x14, 16, 0, 0})
};

/// Struct /Script/Engine.VectorParameterValue
/// Size: 0x0030 (0x000000 - 0x000030)
class FVectorParameterValue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FLinearColor)                              ParameterValue                                              OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.TextureParameterValue
/// Size: 0x0028 (0x000000 - 0x000028)
class FTextureParameterValue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(class UTexture*)                           ParameterValue                                              OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Engine.RuntimeVirtualTextureParameterValue
/// Size: 0x0028 (0x000000 - 0x000028)
class FRuntimeVirtualTextureParameterValue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(class URuntimeVirtualTexture*)             ParameterValue                                              OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Engine.FontParameterValue
/// Size: 0x0030 (0x000000 - 0x000030)
class FFontParameterValue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(class UFont*)                              FontValue                                                   OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(int32_t)                                   FontPage                                                    OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x1C, 16, 0, 0})
};

/// Struct /Script/Engine.MaterialInstanceBasePropertyOverrides
/// Size: 0x000C (0x000000 - 0x00000C)
class FMaterialInstanceBasePropertyOverrides : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(bool)                                      bOverride_OpacityMaskClipValue                              OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bOverride_BlendMode                                         OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bOverride_ShadingModel                                      OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bOverride_DitheredLODTransition                             OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(bool)                                      bOverride_CastDynamicShadowAsMasked                         OFFSET(get<bool>, {0x0, 1, 1, 4})
	DMember(bool)                                      bOverride_TwoSided                                          OFFSET(get<bool>, {0x0, 1, 1, 5})
	DMember(bool)                                      bOverride_ShadingRate                                       OFFSET(get<bool>, {0x0, 1, 1, 6})
	DMember(bool)                                      TwoSided                                                    OFFSET(get<bool>, {0x0, 1, 1, 7})
	DMember(bool)                                      DitheredLODTransition                                       OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(bool)                                      bCastDynamicShadowAsMasked                                  OFFSET(get<bool>, {0x1, 1, 1, 1})
	CMember(TEnumAsByte<EBlendMode>)                   BlendMode                                                   OFFSET(get<T>, {0x2, 1, 0, 0})
	CMember(TEnumAsByte<EMaterialShadingModel>)        ShadingModel                                                OFFSET(get<T>, {0x3, 1, 0, 0})
	CMember(TEnumAsByte<EMaterialShadingRate>)         ShadingRate                                                 OFFSET(get<T>, {0x4, 1, 0, 0})
	DMember(float)                                     OpacityMaskClipValue                                        OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.StaticParameterBase
/// Size: 0x0024 (0x000000 - 0x000024)
class FStaticParameterBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	SMember(FMaterialParameterInfo)                    ParameterInfo                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      bOverride                                                   OFFSET(get<bool>, {0x10, 1, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x14, 16, 0, 0})
};

/// Struct /Script/Engine.StaticSwitchParameter
/// Size: 0x0004 (0x000024 - 0x000028)
class FStaticSwitchParameter : public FStaticParameterBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(bool)                                      Value                                                       OFFSET(get<bool>, {0x24, 1, 0, 0})
};

/// Struct /Script/Engine.StaticComponentMaskParameter
/// Size: 0x0004 (0x000024 - 0x000028)
class FStaticComponentMaskParameter : public FStaticParameterBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(bool)                                      R                                                           OFFSET(get<bool>, {0x24, 1, 0, 0})
	DMember(bool)                                      G                                                           OFFSET(get<bool>, {0x25, 1, 0, 0})
	DMember(bool)                                      B                                                           OFFSET(get<bool>, {0x26, 1, 0, 0})
	DMember(bool)                                      A                                                           OFFSET(get<bool>, {0x27, 1, 0, 0})
};

/// Struct /Script/Engine.StaticTerrainLayerWeightParameter
/// Size: 0x0008 (0x000024 - 0x00002C)
class FStaticTerrainLayerWeightParameter : public FStaticParameterBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 44;

public:
	DMember(int32_t)                                   WeightmapIndex                                              OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(bool)                                      bWeightBasedBlend                                           OFFSET(get<bool>, {0x28, 1, 0, 0})
};

/// Struct /Script/Engine.MaterialLayersFunctions
/// Size: 0x0040 (0x000000 - 0x000040)
class FMaterialLayersFunctions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<class UMaterialFunctionInterface*>) Layers                                                      OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<class UMaterialFunctionInterface*>) Blends                                                      OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<bool>)                              LayerStates                                                 OFFSET(get<T>, {0x20, 16, 0, 0})
	SMember(FString)                                   KeyString                                                   OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Engine.StaticMaterialLayersParameter
/// Size: 0x0044 (0x000024 - 0x000068)
class FStaticMaterialLayersParameter : public FStaticParameterBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FMaterialLayersFunctions)                  Value                                                       OFFSET(getStruct<T>, {0x28, 64, 0, 0})
};

/// Struct /Script/Engine.StaticParameterSet
/// Size: 0x0040 (0x000000 - 0x000040)
class FStaticParameterSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FStaticSwitchParameter>)            StaticSwitchParameters                                      OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FStaticComponentMaskParameter>)     StaticComponentMaskParameters                               OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FStaticTerrainLayerWeightParameter>) TerrainLayerWeightParameters                               OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FStaticMaterialLayersParameter>)    MaterialLayersParameters                                    OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Engine.MaterialCachedParameterEntry
/// Size: 0x0040 (0x000000 - 0x000040)
class FMaterialCachedParameterEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<uint64_t>)                          NameHashes                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FMaterialParameterInfo>)            ParameterInfos                                              OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FGuid>)                             ExpressionGuids                                             OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<bool>)                              Overrides                                                   OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Engine.MaterialCachedParameters
/// Size: 0x01A0 (0x000000 - 0x0001A0)
class FMaterialCachedParameters : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	SMember(FMaterialCachedParameterEntry)             RuntimeEntries                                              OFFSET(getStruct<T>, {0x0, 320, 0, 0})
	CMember(TArray<float>)                             ScalarValues                                                OFFSET(get<T>, {0x140, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      VectorValues                                                OFFSET(get<T>, {0x150, 16, 0, 0})
	CMember(TArray<class UTexture*>)                   TextureValues                                               OFFSET(get<T>, {0x160, 16, 0, 0})
	CMember(TArray<class UFont*>)                      FontValues                                                  OFFSET(get<T>, {0x170, 16, 0, 0})
	CMember(TArray<int32_t>)                           FontPageValues                                              OFFSET(get<T>, {0x180, 16, 0, 0})
	CMember(TArray<class URuntimeVirtualTexture*>)     RuntimeVirtualTextureValues                                 OFFSET(get<T>, {0x190, 16, 0, 0})
};

/// Class /Script/Engine.MaterialInstance
/// Size: 0x02F0 (0x000088 - 0x000378)
class UMaterialInstance : public UMaterialInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 888;

public:
	CMember(class UPhysicalMaterial*)                  PhysMaterial                                                OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(class UPhysicalMaterial*)                  PhysicalMaterialMap                                         OFFSET(get<T>, {0x90, 64, 0, 0})
	CMember(class UMaterialInterface*)                 Parent                                                      OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(class UMaterialInstance*)                  ResourceParent                                              OFFSET(get<T>, {0xD8, 8, 0, 0})
	DMember(bool)                                      bHasStaticPermutationResource                               OFFSET(get<bool>, {0xE0, 1, 1, 0})
	DMember(bool)                                      bOverrideSubsurfaceProfile                                  OFFSET(get<bool>, {0xE0, 1, 1, 1})
	CMember(TArray<FScalarParameterValue>)             ScalarParameterValues                                       OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(TArray<FVectorParameterValue>)             VectorParameterValues                                       OFFSET(get<T>, {0xF8, 16, 0, 0})
	CMember(TArray<FTextureParameterValue>)            TextureParameterValues                                      OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(TArray<FRuntimeVirtualTextureParameterValue>) RuntimeVirtualTextureParameterValues                     OFFSET(get<T>, {0x118, 16, 0, 0})
	CMember(TArray<FFontParameterValue>)               FontParameterValues                                         OFFSET(get<T>, {0x128, 16, 0, 0})
	SMember(FMaterialInstanceBasePropertyOverrides)    BasePropertyOverrides                                       OFFSET(getStruct<T>, {0x138, 12, 0, 0})
	SMember(FStaticParameterSet)                       StaticParameters                                            OFFSET(getStruct<T>, {0x150, 64, 0, 0})
	SMember(FMaterialCachedParameters)                 CachedLayerParameters                                       OFFSET(getStruct<T>, {0x190, 416, 0, 0})
	CMember(TArray<class UObject*>)                    CachedReferencedTextures                                    OFFSET(get<T>, {0x330, 16, 0, 0})
	CMember(TArray<class UMaterialParameterCollection*>) CachedReferencedParameterCollections                      OFFSET(get<T>, {0x340, 16, 0, 0})
};

/// Class /Script/Engine.MaterialInstanceConstant
/// Size: 0x0008 (0x000378 - 0x000380)
class UMaterialInstanceConstant : public UMaterialInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	CMember(class UPhysicalMaterialMask*)              PhysMaterialMask                                            OFFSET(get<T>, {0x378, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.MaterialInstanceConstant.K2_GetVectorParameterValue
	// FLinearColor K2_GetVectorParameterValue(FName ParameterName);                                                            // [0x339aa90] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceConstant.K2_GetTextureParameterValue
	// class UTexture* K2_GetTextureParameterValue(FName ParameterName);                                                        // [0x339a940] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceConstant.K2_GetScalarParameterValue
	// float K2_GetScalarParameterValue(FName ParameterName);                                                                   // [0x339a7f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.MaterialExpressionCustomOutput
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionCustomOutput : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.DynamicBlueprintBinding
/// Size: 0x0000 (0x000028 - 0x000028)
class UDynamicBlueprintBinding : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.BlueprintCore
/// Size: 0x0028 (0x000028 - 0x000050)
class UBlueprintCore : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UClass*)                             SkeletonGeneratedClass                                      OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UClass*)                             GeneratedClass                                              OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bLegacyNeedToPurgeSkelRefs                                  OFFSET(get<bool>, {0x38, 1, 0, 0})
	SMember(FGuid)                                     BlueprintGuid                                               OFFSET(getStruct<T>, {0x3C, 16, 0, 0})
};

/// Class /Script/Engine.Blueprint
/// Size: 0x0050 (0x000050 - 0x0000A0)
class UBlueprint : public UBlueprintCore
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(class UClass*)                             ParentClass                                                 OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(TEnumAsByte<EBlueprintType>)               BlueprintType                                               OFFSET(get<T>, {0x58, 1, 0, 0})
	DMember(bool)                                      bRecompileOnLoad                                            OFFSET(get<bool>, {0x59, 1, 1, 0})
	DMember(bool)                                      bHasBeenRegenerated                                         OFFSET(get<bool>, {0x59, 1, 1, 1})
	DMember(bool)                                      bIsRegeneratingOnLoad                                       OFFSET(get<bool>, {0x59, 1, 1, 2})
	DMember(int32_t)                                   BlueprintSystemVersion                                      OFFSET(get<int32_t>, {0x5C, 4, 0, 0})
	CMember(class USimpleConstructionScript*)          SimpleConstructionScript                                    OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(TArray<class UActorComponent*>)            ComponentTemplates                                          OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<class UTimelineTemplate*>)          Timelines                                                   OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TArray<FBPComponentClassOverride>)         ComponentClassOverrides                                     OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(class UInheritableComponentHandler*)       InheritableComponentHandler                                 OFFSET(get<T>, {0x98, 8, 0, 0})
};

/// Class /Script/Engine.Model
/// Size: 0x0230 (0x000028 - 0x000258)
class UModel : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
};

/// Class /Script/Engine.Channel
/// Size: 0x0048 (0x000028 - 0x000070)
class UChannel : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(class UNetConnection*)                     Connection                                                  OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/Engine.ActorChannel
/// Size: 0x0228 (0x000070 - 0x000298)
class UActorChannel : public UChannel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(class AActor*)                             Actor                                                       OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(TArray<class UObject*>)                    CreateSubObjects                                            OFFSET(get<T>, {0x160, 16, 0, 0})
};

/// Class /Script/Engine.AnimationAsset
/// Size: 0x0058 (0x000028 - 0x000080)
class UAnimationAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(class USkeleton*)                          Skeleton                                                    OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TArray<class UAnimMetaData*>)              MetaData                                                    OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<class UAssetUserData*>)             AssetUserData                                               OFFSET(get<T>, {0x70, 16, 0, 0})
};

/// Struct /Script/Engine.InterpolationParameter
/// Size: 0x0008 (0x000000 - 0x000008)
class FInterpolationParameter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     InterpolationTime                                           OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<EFilterInterpolationType>)     InterpolationType                                           OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Struct /Script/Engine.PerBoneInterpolation
/// Size: 0x0014 (0x000000 - 0x000014)
class FPerBoneInterpolation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FBoneReference)                            BoneReference                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(float)                                     InterpolationSpeedPerSec                                    OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.BlendSample
/// Size: 0x0018 (0x000000 - 0x000018)
class FBlendSample : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UAnimSequence*)                      Animation                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector)                                   SampleValue                                                 OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	DMember(float)                                     RateScale                                                   OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Struct /Script/Engine.EditorElement
/// Size: 0x0018 (0x000000 - 0x000018)
class FEditorElement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   Indices                                                     OFFSET(get<int32_t>, {0x0, 12, 0, 0})
	DMember(float)                                     Weights                                                     OFFSET(get<float>, {0xC, 12, 0, 0})
};

/// Struct /Script/Engine.BlendParameter
/// Size: 0x0020 (0x000000 - 0x000020)
class FBlendParameter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   DisplayName                                                 OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(float)                                     Min                                                         OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     Max                                                         OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   GridNum                                                     OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Class /Script/Engine.BlendSpaceBase
/// Size: 0x00C8 (0x000080 - 0x000148)
class UBlendSpaceBase : public UAnimationAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	DMember(bool)                                      bRotationBlendInMeshSpace                                   OFFSET(get<bool>, {0x88, 1, 0, 0})
	DMember(float)                                     AnimLength                                                  OFFSET(get<float>, {0x8C, 4, 0, 0})
	SMember(FInterpolationParameter)                   InterpolationParam                                          OFFSET(getStruct<T>, {0x90, 24, 0, 0})
	DMember(float)                                     TargetWeightInterpolationSpeedPerSec                        OFFSET(get<float>, {0xA8, 4, 0, 0})
	CMember(TEnumAsByte<ENotifyTriggerMode>)           NotifyTriggerMode                                           OFFSET(get<T>, {0xAC, 1, 0, 0})
	CMember(TArray<FPerBoneInterpolation>)             PerBoneBlend                                                OFFSET(get<T>, {0xB0, 16, 0, 0})
	DMember(int32_t)                                   SampleIndexWithMarkers                                      OFFSET(get<int32_t>, {0xC0, 4, 0, 0})
	CMember(TArray<FBlendSample>)                      SampleData                                                  OFFSET(get<T>, {0xC8, 16, 0, 0})
	CMember(TArray<FEditorElement>)                    GridSamples                                                 OFFSET(get<T>, {0xD8, 16, 0, 0})
	SMember(FBlendParameter)                           BlendParameters                                             OFFSET(getStruct<T>, {0xE8, 96, 0, 0})
};

/// Class /Script/Engine.BlendSpace
/// Size: 0x0008 (0x000148 - 0x000150)
class UBlendSpace : public UBlendSpaceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	CMember(TEnumAsByte<EBlendSpaceAxis>)              AxisToScaleAnimation                                        OFFSET(get<T>, {0x148, 1, 0, 0})
};

/// Class /Script/Engine.AimOffsetBlendSpace
/// Size: 0x0000 (0x000150 - 0x000150)
class UAimOffsetBlendSpace : public UBlendSpace
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
};

/// Class /Script/Engine.BlendSpace1D
/// Size: 0x0008 (0x000148 - 0x000150)
class UBlendSpace1D : public UBlendSpaceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	DMember(bool)                                      bScaleAnimation                                             OFFSET(get<bool>, {0x148, 1, 0, 0})
};

/// Class /Script/Engine.AimOffsetBlendSpace1D
/// Size: 0x0000 (0x000150 - 0x000150)
class UAimOffsetBlendSpace1D : public UBlendSpace1D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
};

/// Class /Script/Engine.AISystemBase
/// Size: 0x0030 (0x000028 - 0x000058)
class UAISystemBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FSoftClassPath)                            AISystemClassName                                           OFFSET(getStruct<T>, {0x28, 24, 0, 0})
	SMember(FName)                                     AISystemModuleName                                          OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	DMember(bool)                                      bInstantiateAISystemOnClient                                OFFSET(get<bool>, {0x50, 1, 0, 0})
};

/// Class /Script/Engine.AmbientSound
/// Size: 0x0008 (0x000220 - 0x000228)
class AAmbientSound : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(class UAudioComponent*)                    AudioComponent                                              OFFSET(get<T>, {0x220, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.AmbientSound.Stop
	// void Stop();                                                                                                             // [0x32a4490] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AmbientSound.Play
	// void Play(float StartTime);                                                                                              // [0x32a3ee0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AmbientSound.FadeOut
	// void FadeOut(float FadeOutDuration, float FadeVolumeLevel);                                                              // [0x32a3ca0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AmbientSound.FadeIn
	// void FadeIn(float FadeInDuration, float FadeVolumeLevel);                                                                // [0x32a3bd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AmbientSound.AdjustVolume
	// void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);                                                  // [0x32a3a60] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.CustomAttributeSetting
/// Size: 0x0020 (0x000000 - 0x000020)
class FCustomAttributeSetting : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   Name                                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   Meaning                                                     OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Class /Script/Engine.AnimationSettings
/// Size: 0x0098 (0x000038 - 0x0000D0)
class UAnimationSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	DMember(int32_t)                                   CompressCommandletVersion                                   OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	CMember(TArray<FString>)                           KeyEndEffectorsMatchNameArray                               OFFSET(get<T>, {0x40, 16, 0, 0})
	DMember(bool)                                      ForceRecompression                                          OFFSET(get<bool>, {0x50, 1, 0, 0})
	DMember(bool)                                      bForceBelowThreshold                                        OFFSET(get<bool>, {0x51, 1, 0, 0})
	DMember(bool)                                      bFirstRecompressUsingCurrentOrDefault                       OFFSET(get<bool>, {0x52, 1, 0, 0})
	DMember(bool)                                      bRaiseMaxErrorToExisting                                    OFFSET(get<bool>, {0x53, 1, 0, 0})
	DMember(bool)                                      bEnablePerformanceLog                                       OFFSET(get<bool>, {0x54, 1, 0, 0})
	DMember(bool)                                      bStripAnimationDataOnDedicatedServer                        OFFSET(get<bool>, {0x55, 1, 0, 0})
	DMember(bool)                                      bTickAnimationOnSkeletalMeshInit                            OFFSET(get<bool>, {0x56, 1, 0, 0})
	CMember(TArray<FCustomAttributeSetting>)           BoneCustomAttributesNames                                   OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<FString>)                           BoneNamesWithCustomAttributes                               OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TMap<FName, ECustomAttributeBlendType>)    AttributeBlendModes                                         OFFSET(get<T>, {0x78, 80, 0, 0})
	CMember(ECustomAttributeBlendType)                 DefaultAttributeBlendMode                                   OFFSET(get<T>, {0xC8, 1, 0, 0})
};

/// Struct /Script/Engine.AnimGroupInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FAnimGroupInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FLinearColor)                              Color                                                       OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Class /Script/Engine.AnimBlueprint
/// Size: 0x0028 (0x0000A0 - 0x0000C8)
class UAnimBlueprint : public UBlueprint
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(class USkeleton*)                          TargetSkeleton                                              OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(TArray<FAnimGroupInfo>)                    Groups                                                      OFFSET(get<T>, {0xB0, 16, 0, 0})
	DMember(bool)                                      bUseMultiThreadedAnimationUpdate                            OFFSET(get<bool>, {0xC0, 1, 0, 0})
	DMember(bool)                                      bWarnAboutBlueprintUsage                                    OFFSET(get<bool>, {0xC1, 1, 0, 0})
};

/// Struct /Script/Engine.BakedStateExitTransition
/// Size: 0x0020 (0x000000 - 0x000020)
class FBakedStateExitTransition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(int32_t)                                   CanTakeDelegateIndex                                        OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   CustomResultNodeIndex                                       OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   TransitionIndex                                             OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(bool)                                      bDesiredTransitionReturnValue                               OFFSET(get<bool>, {0xC, 1, 0, 0})
	DMember(bool)                                      bAutomaticRemainingTimeRule                                 OFFSET(get<bool>, {0xD, 1, 0, 0})
	CMember(TArray<int32_t>)                           PoseEvaluatorLinks                                          OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.BakedAnimationState
/// Size: 0x0058 (0x000000 - 0x000058)
class FBakedAnimationState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FName)                                     StateName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<FBakedStateExitTransition>)         Transitions                                                 OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   StateRootNodeIndex                                          OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   StartNotify                                                 OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   EndNotify                                                   OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   FullyBlendedNotify                                          OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(bool)                                      bIsAConduit                                                 OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(int32_t)                                   EntryRuleNodeIndex                                          OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	CMember(TArray<int32_t>)                           PlayerNodeIndices                                           OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<int32_t>)                           LayerNodeIndices                                            OFFSET(get<T>, {0x40, 16, 0, 0})
	DMember(bool)                                      bAlwaysResetOnEntry                                         OFFSET(get<bool>, {0x50, 1, 0, 0})
};

/// Struct /Script/Engine.AnimationStateBase
/// Size: 0x0008 (0x000000 - 0x000008)
class FAnimationStateBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     StateName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.AnimationTransitionBetweenStates
/// Size: 0x0038 (0x000008 - 0x000040)
class FAnimationTransitionBetweenStates : public FAnimationStateBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(int32_t)                                   PreviousState                                               OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   NextState                                                   OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(float)                                     CrossfadeDuration                                           OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   StartNotify                                                 OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   EndNotify                                                   OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   InterruptNotify                                             OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	CMember(EAlphaBlendOption)                         BlendMode                                                   OFFSET(get<T>, {0x20, 1, 0, 0})
	CMember(class UCurveFloat*)                        CustomCurve                                                 OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UBlendProfile*)                      BlendProfile                                                OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TEnumAsByte<ETransitionLogicType>)         LogicType                                                   OFFSET(get<T>, {0x38, 1, 0, 0})
};

/// Struct /Script/Engine.BakedAnimationStateMachine
/// Size: 0x0030 (0x000000 - 0x000030)
class FBakedAnimationStateMachine : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FName)                                     MachineName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   InitialState                                                OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(TArray<FBakedAnimationState>)              States                                                      OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FAnimationTransitionBetweenStates>) Transitions                                                 OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.CachedPoseIndices
/// Size: 0x0010 (0x000000 - 0x000010)
class FCachedPoseIndices : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<int32_t>)                           OrderedSavedPoseNodeIndices                                 OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.ExposedValueCopyRecord
/// Size: 0x0008 (0x000000 - 0x000008)
class FExposedValueCopyRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   CopyIndex                                                   OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(EPostCopyOperation)                        PostCopyOperation                                           OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Struct /Script/Engine.ExposedValueHandler
/// Size: 0x0050 (0x000000 - 0x000050)
class FExposedValueHandler : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     BoundFunction                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<FExposedValueCopyRecord>)           CopyRecords                                                 OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(class UFunction*)                          Function                                                    OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/Engine.GraphAssetPlayerInformation
/// Size: 0x0010 (0x000000 - 0x000010)
class FGraphAssetPlayerInformation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<int32_t>)                           PlayerNodeIndices                                           OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.AnimGraphBlendOptions
/// Size: 0x0008 (0x000000 - 0x000008)
class FAnimGraphBlendOptions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     BlendInTime                                                 OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     BlendOutTime                                                OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Class /Script/Engine.AnimBlueprintGeneratedClass
/// Size: 0x0288 (0x000328 - 0x0005B0)
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1456;

public:
	CMember(TArray<FBakedAnimationStateMachine>)       BakedStateMachines                                          OFFSET(get<T>, {0x330, 16, 0, 0})
	CMember(class USkeleton*)                          TargetSkeleton                                              OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(TArray<FAnimNotifyEvent>)                  AnimNotifies                                                OFFSET(get<T>, {0x348, 16, 0, 0})
	CMember(TMap<FName, FCachedPoseIndices>)           OrderedSavedPoseIndicesMap                                  OFFSET(get<T>, {0x358, 80, 0, 0})
	CMember(TArray<FName>)                             SyncGroupNames                                              OFFSET(get<T>, {0x428, 16, 0, 0})
	CMember(TArray<FExposedValueHandler>)              EvaluateGraphExposedInputs                                  OFFSET(get<T>, {0x438, 16, 0, 0})
	CMember(TMap<FName, FGraphAssetPlayerInformation>) GraphAssetPlayerInformation                                 OFFSET(get<T>, {0x448, 80, 0, 0})
	CMember(TMap<FName, FAnimGraphBlendOptions>)       GraphBlendOptions                                           OFFSET(get<T>, {0x498, 80, 0, 0})
	SMember(FPropertyAccessLibrary)                    PropertyAccessLibrary                                       OFFSET(getStruct<T>, {0x4E8, 200, 0, 0})
};

/// Class /Script/Engine.AnimBoneCompressionSettings
/// Size: 0x0010 (0x000028 - 0x000038)
class UAnimBoneCompressionSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<class UAnimBoneCompressionCodec*>)  Codecs                                                      OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/Engine.AnimBlueprintFunction
/// Size: 0x0068 (0x000000 - 0x000068)
class FAnimBlueprintFunction : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     Group                                                       OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   OutputPoseNodeIndex                                         OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	CMember(TArray<FName>)                             InputPoseNames                                              OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(TArray<int32_t>)                           InputPoseNodeIndices                                        OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(bool)                                      bImplemented                                                OFFSET(get<bool>, {0x60, 1, 0, 0})
};

/// Struct /Script/Engine.AnimBlueprintFunctionData
/// Size: 0x0040 (0x000000 - 0x000040)
class FAnimBlueprintFunctionData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<InputPoseNodeProperties>)           InputPoseNodeProperties                                     OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<InputProperties>)                   InputProperties                                             OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Engine.AnimClassData
/// Size: 0x0308 (0x000028 - 0x000330)
class UAnimClassData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(TArray<FBakedAnimationStateMachine>)       BakedStateMachines                                          OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(class USkeleton*)                          TargetSkeleton                                              OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(TArray<FAnimNotifyEvent>)                  AnimNotifies                                                OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TMap<FName, FCachedPoseIndices>)           OrderedSavedPoseIndicesMap                                  OFFSET(get<T>, {0x58, 80, 0, 0})
	CMember(TArray<FAnimBlueprintFunction>)            AnimBlueprintFunctions                                      OFFSET(get<T>, {0xA8, 16, 0, 0})
	CMember(TArray<FAnimBlueprintFunctionData>)        AnimBlueprintFunctionData                                   OFFSET(get<T>, {0xB8, 16, 0, 0})
	CMember(TArray<AnimNodeProperties>)                AnimNodeProperties                                          OFFSET(get<T>, {0xC8, 16, 0, 0})
	CMember(TArray<LinkedAnimGraphNodeProperties>)     LinkedAnimGraphNodeProperties                               OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(TArray<LinkedAnimLayerNodeProperties>)     LinkedAnimLayerNodeProperties                               OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(TArray<PreUpdateNodeProperties>)           PreUpdateNodeProperties                                     OFFSET(get<T>, {0x128, 16, 0, 0})
	CMember(TArray<DynamicResetNodeProperties>)        DynamicResetNodeProperties                                  OFFSET(get<T>, {0x148, 16, 0, 0})
	CMember(TArray<StateMachineNodeProperties>)        StateMachineNodeProperties                                  OFFSET(get<T>, {0x168, 16, 0, 0})
	CMember(TArray<InitializationNodeProperties>)      InitializationNodeProperties                                OFFSET(get<T>, {0x188, 16, 0, 0})
	CMember(TMap<FName, FGraphAssetPlayerInformation>) GraphNameAssetPlayers                                       OFFSET(get<T>, {0x1A8, 80, 0, 0})
	CMember(TArray<FName>)                             SyncGroupNames                                              OFFSET(get<T>, {0x1F8, 16, 0, 0})
	CMember(TArray<FExposedValueHandler>)              EvaluateGraphExposedInputs                                  OFFSET(get<T>, {0x208, 16, 0, 0})
	CMember(TMap<FName, FAnimGraphBlendOptions>)       GraphBlendOptions                                           OFFSET(get<T>, {0x218, 80, 0, 0})
	SMember(FPropertyAccessLibrary)                    PropertyAccessLibrary                                       OFFSET(getStruct<T>, {0x268, 200, 0, 0})
};

/// Class /Script/Engine.AnimClassInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimClassInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Engine.SmartName
/// Size: 0x000C (0x000000 - 0x00000C)
class FSmartName : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.AnimCurveBase
/// Size: 0x0018 (0x000000 - 0x000018)
class FAnimCurveBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     LastObservedName                                            OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FSmartName)                                Name                                                        OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	DMember(int32_t)                                   CurveTypeFlags                                              OFFSET(get<int32_t>, {0x14, 4, 0, 0})
};

/// Struct /Script/Engine.FloatCurve
/// Size: 0x0080 (0x000018 - 0x000098)
class FFloatCurve : public FAnimCurveBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FRichCurve)                                FloatCurve                                                  OFFSET(getStruct<T>, {0x18, 128, 0, 0})
};

/// Struct /Script/Engine.RawCurveTracks
/// Size: 0x0010 (0x000000 - 0x000010)
class FRawCurveTracks : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FFloatCurve>)                       FloatCurves                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/Engine.AnimSequenceBase
/// Size: 0x0028 (0x000080 - 0x0000A8)
class UAnimSequenceBase : public UAnimationAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TArray<FAnimNotifyEvent>)                  Notifies                                                    OFFSET(get<T>, {0x80, 16, 0, 0})
	DMember(float)                                     SequenceLength                                              OFFSET(get<float>, {0x90, 4, 0, 0})
	DMember(float)                                     RateScale                                                   OFFSET(get<float>, {0x94, 4, 0, 0})
	SMember(FRawCurveTracks)                           RawCurveData                                                OFFSET(getStruct<T>, {0x98, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AnimSequenceBase.GetPlayLength
	// float GetPlayLength();                                                                                                   // [0xc8adf0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.AnimCompositeBase
/// Size: 0x0000 (0x0000A8 - 0x0000A8)
class UAnimCompositeBase : public UAnimSequenceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
};

/// Struct /Script/Engine.AnimSegment
/// Size: 0x0020 (0x000000 - 0x000020)
class FAnimSegment : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UAnimSequenceBase*)                  AnimReference                                               OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     StartPos                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     AnimStartTime                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     AnimEndTime                                                 OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     AnimPlayRate                                                OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   LoopingCount                                                OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.AnimTrack
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FAnimSegment>)                      AnimSegments                                                OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/Engine.AnimComposite
/// Size: 0x0010 (0x0000A8 - 0x0000B8)
class UAnimComposite : public UAnimCompositeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FAnimTrack)                                AnimationTrack                                              OFFSET(getStruct<T>, {0xA8, 16, 0, 0})
};

/// Class /Script/Engine.AnimCompress
/// Size: 0x0008 (0x000038 - 0x000040)
class UAnimCompress : public UAnimBoneCompressionCodec
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bNeedsSkeleton                                              OFFSET(get<bool>, {0x38, 1, 1, 0})
	CMember(TEnumAsByte<AnimationCompressionFormat>)   TranslationCompressionFormat                                OFFSET(get<T>, {0x3C, 1, 0, 0})
	CMember(TEnumAsByte<AnimationCompressionFormat>)   RotationCompressionFormat                                   OFFSET(get<T>, {0x3D, 1, 0, 0})
	CMember(TEnumAsByte<AnimationCompressionFormat>)   ScaleCompressionFormat                                      OFFSET(get<T>, {0x3E, 1, 0, 0})
};

/// Class /Script/Engine.AnimCompress_BitwiseCompressOnly
/// Size: 0x0000 (0x000040 - 0x000040)
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.AnimCompress_LeastDestructive
/// Size: 0x0000 (0x000040 - 0x000040)
class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.AnimCompress_RemoveLinearKeys
/// Size: 0x0020 (0x000040 - 0x000060)
class UAnimCompress_RemoveLinearKeys : public UAnimCompress
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(float)                                     MaxPosDiff                                                  OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     MaxAngleDiff                                                OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     MaxScaleDiff                                                OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     MaxEffectorDiff                                             OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     MinEffectorDiff                                             OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     EffectorDiffSocket                                          OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     ParentKeyScale                                              OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(bool)                                      bRetarget                                                   OFFSET(get<bool>, {0x5C, 1, 1, 0})
	DMember(bool)                                      bActuallyFilterLinearKeys                                   OFFSET(get<bool>, {0x5C, 1, 1, 1})
};

/// Class /Script/Engine.AnimCompress_PerTrackCompression
/// Size: 0x0078 (0x000060 - 0x0000D8)
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	DMember(float)                                     MaxZeroingThreshold                                         OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     MaxPosDiffBitwise                                           OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     MaxAngleDiffBitwise                                         OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     MaxScaleDiffBitwise                                         OFFSET(get<float>, {0x6C, 4, 0, 0})
	CMember(TArray<TEnumAsByte<AnimationCompressionFormat>>) AllowedRotationFormats                                OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<TEnumAsByte<AnimationCompressionFormat>>) AllowedTranslationFormats                             OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<TEnumAsByte<AnimationCompressionFormat>>) AllowedScaleFormats                                   OFFSET(get<T>, {0x90, 16, 0, 0})
	DMember(bool)                                      bResampleAnimation                                          OFFSET(get<bool>, {0xA0, 1, 1, 0})
	DMember(float)                                     ResampledFramerate                                          OFFSET(get<float>, {0xA4, 4, 0, 0})
	DMember(int32_t)                                   MinKeysForResampling                                        OFFSET(get<int32_t>, {0xA8, 4, 0, 0})
	DMember(bool)                                      bUseAdaptiveError                                           OFFSET(get<bool>, {0xAC, 1, 1, 0})
	DMember(bool)                                      bUseOverrideForEndEffectors                                 OFFSET(get<bool>, {0xAC, 1, 1, 1})
	DMember(int32_t)                                   TrackHeightBias                                             OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
	DMember(float)                                     ParentingDivisor                                            OFFSET(get<float>, {0xB4, 4, 0, 0})
	DMember(float)                                     ParentingDivisorExponent                                    OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(bool)                                      bUseAdaptiveError2                                          OFFSET(get<bool>, {0xBC, 1, 1, 0})
	DMember(float)                                     RotationErrorSourceRatio                                    OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     TranslationErrorSourceRatio                                 OFFSET(get<float>, {0xC4, 4, 0, 0})
	DMember(float)                                     ScaleErrorSourceRatio                                       OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(float)                                     MaxErrorPerTrackRatio                                       OFFSET(get<float>, {0xCC, 4, 0, 0})
	DMember(float)                                     PerturbationProbeSize                                       OFFSET(get<float>, {0xD0, 4, 0, 0})
};

/// Class /Script/Engine.AnimCompress_RemoveEverySecondKey
/// Size: 0x0008 (0x000040 - 0x000048)
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(int32_t)                                   MinKeys                                                     OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(bool)                                      bStartAtSecondKey                                           OFFSET(get<bool>, {0x44, 1, 1, 0})
};

/// Class /Script/Engine.AnimCompress_RemoveTrivialKeys
/// Size: 0x0010 (0x000040 - 0x000050)
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     MaxPosDiff                                                  OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     MaxAngleDiff                                                OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     MaxScaleDiff                                                OFFSET(get<float>, {0x48, 4, 0, 0})
};

/// Class /Script/Engine.AnimCurveCompressionCodec_CompressedRichCurve
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AnimCurveCompressionCodec_UniformIndexable
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AnimCurveCompressionCodec_UniformlySampled
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AnimCurveCompressionSettings
/// Size: 0x0008 (0x000028 - 0x000030)
class UAnimCurveCompressionSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UAnimCurveCompressionCodec*)         Codec                                                       OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/Engine.AnimLayerInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimLayerInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AnimMetaData
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimMetaData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Engine.AlphaBlend
/// Size: 0x0030 (0x000000 - 0x000030)
class FAlphaBlend : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UCurveFloat*)                        CustomCurve                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     BlendTime                                                   OFFSET(get<float>, {0x8, 4, 0, 0})
	CMember(EAlphaBlendOption)                         BlendOption                                                 OFFSET(get<T>, {0x24, 1, 0, 0})
};

/// Struct /Script/Engine.AnimSyncMarker
/// Size: 0x000C (0x000000 - 0x00000C)
class FAnimSyncMarker : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     MarkerName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.MarkerSyncData
/// Size: 0x0020 (0x000000 - 0x000020)
class FMarkerSyncData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FAnimSyncMarker>)                   AuthoredSyncMarkers                                         OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.CompositeSection
/// Size: 0x0028 (0x000030 - 0x000058)
class FCompositeSection : public FAnimLinkableElement
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FName)                                     SectionName                                                 OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	DMember(float)                                     StartTime                                                   OFFSET(get<float>, {0x38, 4, 0, 0})
	SMember(FName)                                     NextSectionName                                             OFFSET(getStruct<T>, {0x3C, 8, 0, 0})
	CMember(TArray<class UAnimMetaData*>)              MetaData                                                    OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Struct /Script/Engine.SlotAnimationTrack
/// Size: 0x0018 (0x000000 - 0x000018)
class FSlotAnimationTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     SlotName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FAnimTrack)                                AnimTrack                                                   OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.BranchingPoint
/// Size: 0x0010 (0x000030 - 0x000040)
class FBranchingPoint : public FAnimLinkableElement
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     EventName                                                   OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	DMember(float)                                     DisplayTime                                                 OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     TriggerTimeOffset                                           OFFSET(get<float>, {0x3C, 4, 0, 0})
};

/// Struct /Script/Engine.BranchingPointMarker
/// Size: 0x000C (0x000000 - 0x00000C)
class FBranchingPointMarker : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   NotifyIndex                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(float)                                     TriggerTime                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(TEnumAsByte<EAnimNotifyEventType>)         NotifyEventType                                             OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/Engine.TimeStretchCurveMarker
/// Size: 0x0010 (0x000000 - 0x000010)
class FTimeStretchCurveMarker : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 12, 0, 0})
	DMember(float)                                     Alpha                                                       OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.TimeStretchCurve
/// Size: 0x0028 (0x000000 - 0x000028)
class FTimeStretchCurve : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(float)                                     SamplingRate                                                OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     CurveValueMinPrecision                                      OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(TArray<FTimeStretchCurveMarker>)           Markers                                                     OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(float)                                     Sum_dT_i_by_C_i                                             OFFSET(get<float>, {0x18, 12, 0, 0})
};

/// Class /Script/Engine.AnimMontage
/// Size: 0x0128 (0x0000A8 - 0x0001D0)
class UAnimMontage : public UAnimCompositeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	SMember(FAlphaBlend)                               BlendIn                                                     OFFSET(getStruct<T>, {0xA8, 48, 0, 0})
	DMember(float)                                     BlendInTime                                                 OFFSET(get<float>, {0xD8, 4, 0, 0})
	SMember(FAlphaBlend)                               BlendOut                                                    OFFSET(getStruct<T>, {0xE0, 48, 0, 0})
	DMember(float)                                     BlendOutTime                                                OFFSET(get<float>, {0x110, 4, 0, 0})
	DMember(float)                                     BlendOutTriggerTime                                         OFFSET(get<float>, {0x114, 4, 0, 0})
	SMember(FName)                                     SyncGroup                                                   OFFSET(getStruct<T>, {0x118, 8, 0, 0})
	DMember(int32_t)                                   SyncSlotIndex                                               OFFSET(get<int32_t>, {0x120, 4, 0, 0})
	SMember(FMarkerSyncData)                           MarkerData                                                  OFFSET(getStruct<T>, {0x128, 32, 0, 0})
	CMember(TArray<FCompositeSection>)                 CompositeSections                                           OFFSET(get<T>, {0x148, 16, 0, 0})
	CMember(TArray<FSlotAnimationTrack>)               SlotAnimTracks                                              OFFSET(get<T>, {0x158, 16, 0, 0})
	CMember(TArray<FBranchingPoint>)                   BranchingPoints                                             OFFSET(get<T>, {0x168, 16, 0, 0})
	DMember(bool)                                      bEnableRootMotionTranslation                                OFFSET(get<bool>, {0x178, 1, 0, 0})
	DMember(bool)                                      bEnableRootMotionRotation                                   OFFSET(get<bool>, {0x179, 1, 0, 0})
	DMember(bool)                                      bEnableAutoBlendOut                                         OFFSET(get<bool>, {0x17A, 1, 0, 0})
	CMember(TEnumAsByte<ERootMotionRootLock>)          RootMotionRootLock                                          OFFSET(get<T>, {0x17B, 1, 0, 0})
	CMember(TArray<FBranchingPointMarker>)             BranchingPointMarkers                                       OFFSET(get<T>, {0x180, 16, 0, 0})
	CMember(TArray<int32_t>)                           BranchingPointStateNotifyIndices                            OFFSET(get<T>, {0x190, 16, 0, 0})
	SMember(FTimeStretchCurve)                         TimeStretchCurve                                            OFFSET(getStruct<T>, {0x1A0, 40, 0, 0})
	SMember(FName)                                     TimeStretchCurveName                                        OFFSET(getStruct<T>, {0x1C8, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.AnimMontage.GetDefaultBlendOutTime
	// float GetDefaultBlendOutTime();                                                                                          // [0x32b25a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.AnimNotify_PauseClothingSimulation
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotify_PauseClothingSimulation : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.AnimNotify_PlayParticleEffect
/// Size: 0x0058 (0x000038 - 0x000090)
class UAnimNotify_PlayParticleEffect : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(class UParticleSystem*)                    PSTemplate                                                  OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FVector)                                   LocationOffset                                              OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FRotator)                                  RotationOffset                                              OFFSET(getStruct<T>, {0x4C, 12, 0, 0})
	SMember(FVector)                                   Scale                                                       OFFSET(getStruct<T>, {0x58, 12, 0, 0})
	DMember(bool)                                      Attached                                                    OFFSET(get<bool>, {0x80, 1, 1, 0})
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x84, 8, 0, 0})
};

/// Class /Script/Engine.AnimNotify_PlaySound
/// Size: 0x0020 (0x000038 - 0x000058)
class UAnimNotify_PlaySound : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class USoundBase*)                         Sound                                                       OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(float)                                     VolumeMultiplier                                            OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     PitchMultiplier                                             OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(bool)                                      bFollow                                                     OFFSET(get<bool>, {0x48, 1, 1, 0})
	SMember(FName)                                     AttachName                                                  OFFSET(getStruct<T>, {0x4C, 8, 0, 0})
};

/// Class /Script/Engine.AnimNotify_ResetClothingSimulation
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotify_ResetClothingSimulation : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.AnimNotify_ResetDynamics
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotify_ResetDynamics : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.AnimNotify_ResumeClothingSimulation
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.AnimNotifyState_DisableRootMotion
/// Size: 0x0000 (0x000030 - 0x000030)
class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.AnimNotifyState_TimedParticleEffect
/// Size: 0x0030 (0x000030 - 0x000060)
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UParticleSystem*)                    PSTemplate                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FVector)                                   LocationOffset                                              OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FRotator)                                  RotationOffset                                              OFFSET(getStruct<T>, {0x4C, 12, 0, 0})
	DMember(bool)                                      bDestroyAtEnd                                               OFFSET(get<bool>, {0x58, 1, 0, 0})
};

/// Class /Script/Engine.AnimNotifyState_Trail
/// Size: 0x0028 (0x000030 - 0x000058)
class UAnimNotifyState_Trail : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class UParticleSystem*)                    PSTemplate                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FName)                                     FirstSocketName                                             OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FName)                                     SecondSocketName                                            OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	CMember(TEnumAsByte<ETrailWidthMode>)              WidthScaleMode                                              OFFSET(get<T>, {0x48, 1, 0, 0})
	SMember(FName)                                     WidthScaleCurve                                             OFFSET(getStruct<T>, {0x4C, 8, 0, 0})
	DMember(bool)                                      bRecycleSpawnedSystems                                      OFFSET(get<bool>, {0x54, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.AnimNotifyState_Trail.OverridePSTemplate
	// class UParticleSystem* OverridePSTemplate(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);   // [0x198a600] Event|Public|BlueprintEvent|Const 
};

/// Struct /Script/Engine.TrackToSkeletonMap
/// Size: 0x0004 (0x000000 - 0x000004)
class FTrackToSkeletonMap : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   BoneTreeIndex                                               OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.StringCurveKey
/// Size: 0x0018 (0x000000 - 0x000018)
class FStringCurveKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FString)                                   Value                                                       OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.StringCurve
/// Size: 0x0020 (0x000068 - 0x000088)
class FStringCurve : public FIndexedCurve
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FString)                                   DefaultValue                                                OFFSET(getStruct<T>, {0x68, 16, 0, 0})
	CMember(TArray<FStringCurveKey>)                   Keys                                                        OFFSET(get<T>, {0x78, 16, 0, 0})
};

/// Struct /Script/Engine.BakedStringCustomAttribute
/// Size: 0x0090 (0x000000 - 0x000090)
class FBakedStringCustomAttribute : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FName)                                     AttributeName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FStringCurve)                              StringCurve                                                 OFFSET(getStruct<T>, {0x8, 136, 0, 0})
};

/// Struct /Script/Engine.IntegralKey
/// Size: 0x0008 (0x000000 - 0x000008)
class FIntegralKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Value                                                       OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.IntegralCurve
/// Size: 0x0018 (0x000068 - 0x000080)
class FIntegralCurve : public FIndexedCurve
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TArray<FIntegralKey>)                      Keys                                                        OFFSET(get<T>, {0x68, 16, 0, 0})
	DMember(int32_t)                                   DefaultValue                                                OFFSET(get<int32_t>, {0x78, 4, 0, 0})
	DMember(bool)                                      bUseDefaultValueBeforeFirstKey                              OFFSET(get<bool>, {0x7C, 1, 0, 0})
};

/// Struct /Script/Engine.BakedIntegerCustomAttribute
/// Size: 0x0088 (0x000000 - 0x000088)
class FBakedIntegerCustomAttribute : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FName)                                     AttributeName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FIntegralCurve)                            IntCurve                                                    OFFSET(getStruct<T>, {0x8, 128, 0, 0})
};

/// Struct /Script/Engine.SimpleCurveKey
/// Size: 0x0008 (0x000000 - 0x000008)
class FSimpleCurveKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.SimpleCurve
/// Size: 0x0018 (0x000070 - 0x000088)
class FSimpleCurve : public FRealCurve
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TEnumAsByte<ERichCurveInterpMode>)         InterpMode                                                  OFFSET(get<T>, {0x70, 1, 0, 0})
	CMember(TArray<FSimpleCurveKey>)                   Keys                                                        OFFSET(get<T>, {0x78, 16, 0, 0})
};

/// Struct /Script/Engine.BakedFloatCustomAttribute
/// Size: 0x0090 (0x000000 - 0x000090)
class FBakedFloatCustomAttribute : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FName)                                     AttributeName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FSimpleCurve)                              FloatCurve                                                  OFFSET(getStruct<T>, {0x8, 136, 0, 0})
};

/// Struct /Script/Engine.BakedCustomAttributePerBoneData
/// Size: 0x0038 (0x000000 - 0x000038)
class FBakedCustomAttributePerBoneData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(int32_t)                                   BoneTreeIndex                                               OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(TArray<FBakedStringCustomAttribute>)       StringAttributes                                            OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<FBakedIntegerCustomAttribute>)      IntAttributes                                               OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(TArray<FBakedFloatCustomAttribute>)        FloatAttributes                                             OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.AnimSequence
/// Size: 0x0108 (0x0000A8 - 0x0001B0)
class UAnimSequence : public UAnimSequenceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	DMember(int32_t)                                   NumFrames                                                   OFFSET(get<int32_t>, {0xA8, 4, 0, 0})
	CMember(TArray<FTrackToSkeletonMap>)               TrackToSkeletonMapTable                                     OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(class UAnimBoneCompressionSettings*)       BoneCompressionSettings                                     OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(class UAnimCurveCompressionSettings*)      CurveCompressionSettings                                    OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(TEnumAsByte<EAdditiveAnimationType>)       AdditiveAnimType                                            OFFSET(get<T>, {0x150, 1, 0, 0})
	CMember(TEnumAsByte<EAdditiveBasePoseType>)        RefPoseType                                                 OFFSET(get<T>, {0x151, 1, 0, 0})
	CMember(class UAnimSequence*)                      RefPoseSeq                                                  OFFSET(get<T>, {0x158, 8, 0, 0})
	DMember(int32_t)                                   RefFrameIndex                                               OFFSET(get<int32_t>, {0x160, 4, 0, 0})
	SMember(FName)                                     RetargetSource                                              OFFSET(getStruct<T>, {0x164, 8, 0, 0})
	CMember(EAnimInterpolationType)                    Interpolation                                               OFFSET(get<T>, {0x16C, 1, 0, 0})
	DMember(bool)                                      bEnableRootMotion                                           OFFSET(get<bool>, {0x16D, 1, 0, 0})
	CMember(TEnumAsByte<ERootMotionRootLock>)          RootMotionRootLock                                          OFFSET(get<T>, {0x16E, 1, 0, 0})
	DMember(bool)                                      bForceRootLock                                              OFFSET(get<bool>, {0x16F, 1, 0, 0})
	DMember(bool)                                      bUseNormalizedRootMotionScale                               OFFSET(get<bool>, {0x170, 1, 0, 0})
	DMember(bool)                                      bRootMotionSettingsCopiedFromMontage                        OFFSET(get<bool>, {0x171, 1, 0, 0})
	CMember(TArray<FAnimSyncMarker>)                   AuthoredSyncMarkers                                         OFFSET(get<T>, {0x178, 16, 0, 0})
	CMember(TArray<FBakedCustomAttributePerBoneData>)  BakedPerBoneCustomAttributeData                             OFFSET(get<T>, {0x1A0, 16, 0, 0})
};

/// Struct /Script/Engine.AnimSetMeshLinkup
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimSetMeshLinkup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<int32_t>)                           BoneToTrackTable                                            OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/Engine.AnimSet
/// Size: 0x00C8 (0x000028 - 0x0000F0)
class UAnimSet : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	DMember(bool)                                      bAnimRotationOnly                                           OFFSET(get<bool>, {0x28, 1, 1, 0})
	CMember(TArray<FName>)                             TrackBoneNames                                              OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FAnimSetMeshLinkup>)                LinkupCache                                                 OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<char>)                              BoneUseAnimTranslation                                      OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<char>)                              ForceUseMeshTranslation                                     OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<FName>)                             UseTranslationBoneNames                                     OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FName>)                             ForceMeshTranslationBoneNames                               OFFSET(get<T>, {0x80, 16, 0, 0})
	SMember(FName)                                     PreviewSkelMeshName                                         OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	SMember(FName)                                     BestRatioSkelMeshName                                       OFFSET(getStruct<T>, {0x98, 8, 0, 0})
};

/// Class /Script/Engine.AnimSingleNodeInstance
/// Size: 0x0018 (0x0002B8 - 0x0002D0)
class UAnimSingleNodeInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	CMember(class UAnimationAsset*)                    CurrentAsset                                                OFFSET(get<T>, {0x2B8, 8, 0, 0})
	SMember(FDelegateProperty)                         PostEvaluateAnimEvent                                       OFFSET(getStruct<T>, {0x2C0, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AnimSingleNodeInstance.StopAnim
	// void StopAnim();                                                                                                         // [0x32b57b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetReverse
	// void SetReverse(bool bInReverse);                                                                                        // [0x32b5720] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPreviewCurveOverride
	// void SetPreviewCurveOverride(FName& PoseName, float Value, bool bRemoveIfZero);                                          // [0x32b5600] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime
	// void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);                            // [0x32b54e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPosition
	// void SetPosition(float InPosition, bool bFireNotifies);                                                                  // [0x32b5400] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPlayRate
	// void SetPlayRate(float InPlayRate);                                                                                      // [0x32b52f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPlaying
	// void SetPlaying(bool bIsPlaying);                                                                                        // [0x32b5370] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetLooping
	// void SetLooping(bool bIsLooping);                                                                                        // [0x32b5260] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetBlendSpaceInput
	// void SetBlendSpaceInput(FVector& InBlendInput);                                                                          // [0x32b51d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetAnimationAsset
	// void SetAnimationAsset(class UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);                              // [0x32b50b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.PlayAnim
	// void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);                                                 // [0x32b4fa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.GetLength
	// float GetLength();                                                                                                       // [0x32b4f70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.GetAnimationAsset
	// class UAnimationAsset* GetAnimationAsset();                                                                              // [0x32b4f40] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.AnimStateMachineTypes
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnimStateMachineTypes : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.AnimStreamable
/// Size: 0x0038 (0x0000A8 - 0x0000E0)
class UAnimStreamable : public UAnimSequenceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	DMember(int32_t)                                   NumFrames                                                   OFFSET(get<int32_t>, {0xA8, 4, 0, 0})
	CMember(EAnimInterpolationType)                    Interpolation                                               OFFSET(get<T>, {0xAC, 1, 0, 0})
	SMember(FName)                                     RetargetSource                                              OFFSET(getStruct<T>, {0xB0, 8, 0, 0})
	CMember(class UAnimBoneCompressionSettings*)       BoneCompressionSettings                                     OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(class UAnimCurveCompressionSettings*)      CurveCompressionSettings                                    OFFSET(get<T>, {0xD0, 8, 0, 0})
	DMember(bool)                                      bEnableRootMotion                                           OFFSET(get<bool>, {0xD8, 1, 0, 0})
	CMember(TEnumAsByte<ERootMotionRootLock>)          RootMotionRootLock                                          OFFSET(get<T>, {0xD9, 1, 0, 0})
	DMember(bool)                                      bForceRootLock                                              OFFSET(get<bool>, {0xDA, 1, 0, 0})
	DMember(bool)                                      bUseNormalizedRootMotionScale                               OFFSET(get<bool>, {0xDB, 1, 0, 0})
};

/// Class /Script/Engine.AssetExportTask
/// Size: 0x0050 (0x000028 - 0x000078)
class UAssetExportTask : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(class UObject*)                            Object                                                      OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UExporter*)                          Exporter                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FString)                                   Filename                                                    OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      bSelected                                                   OFFSET(get<bool>, {0x48, 1, 0, 0})
	DMember(bool)                                      bReplaceIdentical                                           OFFSET(get<bool>, {0x49, 1, 0, 0})
	DMember(bool)                                      bPrompt                                                     OFFSET(get<bool>, {0x4A, 1, 0, 0})
	DMember(bool)                                      bAutomated                                                  OFFSET(get<bool>, {0x4B, 1, 0, 0})
	DMember(bool)                                      bUseFileArchive                                             OFFSET(get<bool>, {0x4C, 1, 0, 0})
	DMember(bool)                                      bWriteEmptyFiles                                            OFFSET(get<bool>, {0x4D, 1, 0, 0})
	CMember(TArray<class UObject*>)                    IgnoreObjectList                                            OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(class UObject*)                            options                                                     OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(TArray<FString>)                           Errors                                                      OFFSET(get<T>, {0x68, 16, 0, 0})
};

/// Struct /Script/Engine.PrimaryAssetRules
/// Size: 0x000C (0x000000 - 0x00000C)
class FPrimaryAssetRules : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   ChunkId                                                     OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(bool)                                      bApplyRecursively                                           OFFSET(get<bool>, {0x8, 1, 0, 0})
	CMember(EPrimaryAssetCookRule)                     CookRule                                                    OFFSET(get<T>, {0x9, 1, 0, 0})
};

/// Struct /Script/Engine.PrimaryAssetTypeInfo
/// Size: 0x0088 (0x000000 - 0x000088)
class FPrimaryAssetTypeInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FName)                                     PrimaryAssetType                                            OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             AssetBaseClass                                              OFFSET(get<T>, {0x8, 40, 0, 0})
	CMember(class UClass*)                             AssetBaseClassLoaded                                        OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bHasBlueprintClasses                                        OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(bool)                                      bIsEditorOnly                                               OFFSET(get<bool>, {0x39, 1, 0, 0})
	CMember(TArray<FDirectoryPath>)                    Directories                                                 OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FSoftObjectPath>)                   SpecificAssets                                              OFFSET(get<T>, {0x50, 16, 0, 0})
	SMember(FPrimaryAssetRules)                        Rules                                                       OFFSET(getStruct<T>, {0x60, 12, 0, 0})
	CMember(TArray<FString>)                           AssetScanPaths                                              OFFSET(get<T>, {0x70, 16, 0, 0})
	DMember(bool)                                      bIsDynamicAsset                                             OFFSET(get<bool>, {0x80, 1, 0, 0})
	DMember(int32_t)                                   NumberOfAssets                                              OFFSET(get<int32_t>, {0x84, 4, 0, 0})
};

/// Struct /Script/Engine.PrimaryAssetRulesOverride
/// Size: 0x001C (0x000000 - 0x00001C)
class FPrimaryAssetRulesOverride : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FPrimaryAssetId)                           PrimaryAssetId                                              OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FPrimaryAssetRules)                        Rules                                                       OFFSET(getStruct<T>, {0x10, 12, 0, 0})
};

/// Struct /Script/Engine.PrimaryAssetRulesCustomOverride
/// Size: 0x0038 (0x000000 - 0x000038)
class FPrimaryAssetRulesCustomOverride : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FPrimaryAssetType)                         PrimaryAssetType                                            OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FDirectoryPath)                            FilterDirectory                                             OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FString)                                   FilterString                                                OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	SMember(FPrimaryAssetRules)                        Rules                                                       OFFSET(getStruct<T>, {0x28, 12, 0, 0})
};

/// Struct /Script/Engine.AssetManagerRedirect
/// Size: 0x0020 (0x000000 - 0x000020)
class FAssetManagerRedirect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   Old                                                         OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   New                                                         OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Class /Script/Engine.AssetManagerSettings
/// Size: 0x00C8 (0x000038 - 0x000100)
class UAssetManagerSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	CMember(TArray<FPrimaryAssetTypeInfo>)             PrimaryAssetTypesToScan                                     OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FDirectoryPath>)                    DirectoriesToExclude                                        OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<FPrimaryAssetRulesOverride>)        PrimaryAssetRules                                           OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<FPrimaryAssetRulesCustomOverride>)  CustomPrimaryAssetRules                                     OFFSET(get<T>, {0x68, 16, 0, 0})
	DMember(bool)                                      bOnlyCookProductionAssets                                   OFFSET(get<bool>, {0x78, 1, 0, 0})
	DMember(bool)                                      bShouldManagerDetermineTypeAndName                          OFFSET(get<bool>, {0x79, 1, 0, 0})
	DMember(bool)                                      bShouldGuessTypeAndNameInEditor                             OFFSET(get<bool>, {0x7A, 1, 0, 0})
	DMember(bool)                                      bShouldAcquireMissingChunksOnLoad                           OFFSET(get<bool>, {0x7B, 1, 0, 0})
	CMember(TArray<FAssetManagerRedirect>)             PrimaryAssetIdRedirects                                     OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<FAssetManagerRedirect>)             PrimaryAssetTypeRedirects                                   OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<FAssetManagerRedirect>)             AssetPathRedirects                                          OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TSet<FName>)                               MetaDataTagsForAssetRegistry                                OFFSET(get<T>, {0xB0, 80, 0, 0})
};

/// Struct /Script/Engine.AssetMapping
/// Size: 0x0010 (0x000000 - 0x000010)
class FAssetMapping : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UAnimationAsset*)                    SourceAsset                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UAnimationAsset*)                    TargetAsset                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/Engine.AssetMappingTable
/// Size: 0x0010 (0x000028 - 0x000038)
class UAssetMappingTable : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FAssetMapping>)                     MappedAssets                                                OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.AsyncActionHandleSaveGame
/// Size: 0x0038 (0x000030 - 0x000068)
class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FMulticastInlineDelegate)                  Completed                                                   OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	CMember(class USaveGame*)                          SaveGameObject                                              OFFSET(get<T>, {0x60, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot
	// class UAsyncActionHandleSaveGame* AsyncSaveGameToSlot(class UObject* WorldContextObject, class USaveGame* SaveGameObject, FString SlotName, int32_t UserIndex); // [0x32bcb50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.AsyncActionHandleSaveGame.AsyncLoadGameFromSlot
	// class UAsyncActionHandleSaveGame* AsyncLoadGameFromSlot(class UObject* WorldContextObject, FString SlotName, int32_t UserIndex); // [0x32bc4f0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetBase
/// Size: 0x0048 (0x000030 - 0x000078)
class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAsset
/// Size: 0x0010 (0x000078 - 0x000088)
class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FMulticastInlineDelegate)                  Completed                                                   OFFSET(getStruct<T>, {0x78, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset
	// class UAsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(class UObject* WorldContextObject, FPrimaryAssetId PrimaryAsset, TArray<FName>& LoadBundles); // [0x32bc610] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetClass
/// Size: 0x0010 (0x000078 - 0x000088)
class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FMulticastInlineDelegate)                  Completed                                                   OFFSET(getStruct<T>, {0x78, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass
	// class UAsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(class UObject* WorldContextObject, FPrimaryAssetId PrimaryAsset, TArray<FName>& LoadBundles); // [0x32bc750] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetList
/// Size: 0x0010 (0x000078 - 0x000088)
class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FMulticastInlineDelegate)                  Completed                                                   OFFSET(getStruct<T>, {0x78, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList
	// class UAsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(class UObject* WorldContextObject, TArray<FPrimaryAssetId>& PrimaryAssetList, TArray<FName>& LoadBundles); // [0x32bc9f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetClassList
/// Size: 0x0010 (0x000078 - 0x000088)
class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FMulticastInlineDelegate)                  Completed                                                   OFFSET(getStruct<T>, {0x78, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList
	// class UAsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(class UObject* WorldContextObject, TArray<FPrimaryAssetId>& PrimaryAssetList, TArray<FName>& LoadBundles); // [0x32bc890] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionChangePrimaryAssetBundles
/// Size: 0x0010 (0x000078 - 0x000088)
class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FMulticastInlineDelegate)                  Completed                                                   OFFSET(getStruct<T>, {0x78, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList
	// class UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(class UObject* WorldContextObject, TArray<FPrimaryAssetId>& PrimaryAssetList, TArray<FName>& AddBundles, TArray<FName>& RemoveBundles); // [0x32bc330] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets
	// class UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(class UObject* WorldContextObject, TArray<FName>& NewBundles, TArray<FName>& OldBundles); // [0x32bc1d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AtmosphericFog
/// Size: 0x0008 (0x000220 - 0x000228)
class AAtmosphericFog : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(class UAtmosphericFogComponent*)           AtmosphericFogComponent                                     OFFSET(get<T>, {0x220, 8, 0, 0})
};

/// Struct /Script/Engine.AtmospherePrecomputeParameters
/// Size: 0x002C (0x000000 - 0x00002C)
class FAtmospherePrecomputeParameters : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 44;

public:
	DMember(float)                                     DensityHeight                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     DecayHeight                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   MaxScatteringOrder                                          OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   TransmittanceTexWidth                                       OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   TransmittanceTexHeight                                      OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   IrradianceTexWidth                                          OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   IrradianceTexHeight                                         OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   InscatterAltitudeSampleNum                                  OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   InscatterMuNum                                              OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   InscatterMuSNum                                             OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   InscatterNuNum                                              OFFSET(get<int32_t>, {0x28, 4, 0, 0})
};

/// Class /Script/Engine.AtmosphericFogComponent
/// Size: 0x0108 (0x0001F8 - 0x000300)
class UAtmosphericFogComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:
	DMember(float)                                     SunMultiplier                                               OFFSET(get<float>, {0x1F8, 4, 0, 0})
	DMember(float)                                     FogMultiplier                                               OFFSET(get<float>, {0x1FC, 4, 0, 0})
	DMember(float)                                     DensityMultiplier                                           OFFSET(get<float>, {0x200, 4, 0, 0})
	DMember(float)                                     DensityOffset                                               OFFSET(get<float>, {0x204, 4, 0, 0})
	DMember(float)                                     DistanceScale                                               OFFSET(get<float>, {0x208, 4, 0, 0})
	DMember(float)                                     AltitudeScale                                               OFFSET(get<float>, {0x20C, 4, 0, 0})
	DMember(float)                                     DistanceOffset                                              OFFSET(get<float>, {0x210, 4, 0, 0})
	DMember(float)                                     GroundOffset                                                OFFSET(get<float>, {0x214, 4, 0, 0})
	DMember(float)                                     StartDistance                                               OFFSET(get<float>, {0x218, 4, 0, 0})
	DMember(float)                                     SunDiscScale                                                OFFSET(get<float>, {0x21C, 4, 0, 0})
	DMember(float)                                     DefaultBrightness                                           OFFSET(get<float>, {0x220, 4, 0, 0})
	SMember(FColor)                                    DefaultLightColor                                           OFFSET(getStruct<T>, {0x224, 4, 0, 0})
	DMember(bool)                                      bDisableSunDisk                                             OFFSET(get<bool>, {0x228, 1, 1, 0})
	DMember(bool)                                      bAtmosphereAffectsSunIlluminance                            OFFSET(get<bool>, {0x228, 1, 1, 1})
	DMember(bool)                                      bDisableGroundScattering                                    OFFSET(get<bool>, {0x228, 1, 1, 2})
	SMember(FAtmospherePrecomputeParameters)           PrecomputeParams                                            OFFSET(getStruct<T>, {0x22C, 44, 0, 0})
	CMember(class UTexture2D*)                         TransmittanceTexture                                        OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(class UTexture2D*)                         IrradianceTexture                                           OFFSET(get<T>, {0x260, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.AtmosphericFogComponent.StartPrecompute
	// void StartPrecompute();                                                                                                  // [0x9a7970] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetSunMultiplier
	// void SetSunMultiplier(float NewSunMultiplier);                                                                           // [0x32be7b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetStartDistance
	// void SetStartDistance(float NewStartDistance);                                                                           // [0x32be660] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetPrecomputeParams
	// void SetPrecomputeParams(float DensityHeight, int32_t MaxScatteringOrder, int32_t InscatterAltitudeSampleNum);           // [0x32be310] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetFogMultiplier
	// void SetFogMultiplier(float NewFogMultiplier);                                                                           // [0x32bdfa0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDistanceScale
	// void SetDistanceScale(float NewDistanceScale);                                                                           // [0x32bde50] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDistanceOffset
	// void SetDistanceOffset(float NewDistanceOffset);                                                                         // [0x32bddd0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDensityOffset
	// void SetDensityOffset(float NewDensityOffset);                                                                           // [0x32bdd50] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDensityMultiplier
	// void SetDensityMultiplier(float NewDensityMultiplier);                                                                   // [0x32bdcd0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDefaultLightColor
	// void SetDefaultLightColor(FLinearColor NewLightColor);                                                                   // [0x32bdc40] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDefaultBrightness
	// void SetDefaultBrightness(float NewBrightness);                                                                          // [0x32bdbc0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetAltitudeScale
	// void SetAltitudeScale(float NewAltitudeScale);                                                                           // [0x32bd8d0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.DisableSunDisk
	// void DisableSunDisk(bool NewSunDisk);                                                                                    // [0x32bce10] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.DisableGroundScattering
	// void DisableGroundScattering(bool NewGroundScattering);                                                                  // [0x32bcd80] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.AudioBus
/// Size: 0x0008 (0x000028 - 0x000030)
class UAudioBus : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(EAudioBusChannels)                         AudioBusChannels                                            OFFSET(get<T>, {0x28, 1, 0, 0})
	DMember(bool)                                      bIsAutomatic                                                OFFSET(get<bool>, {0x29, 1, 0, 0})
};

/// Struct /Script/Engine.AudioQualitySettings
/// Size: 0x0020 (0x000000 - 0x000020)
class FAudioQualitySettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(int32_t)                                   MaxChannels                                                 OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Class /Script/Engine.AudioSettings
/// Size: 0x0110 (0x000038 - 0x000148)
class UAudioSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	SMember(FSoftObjectPath)                           DefaultSoundClassName                                       OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	SMember(FSoftObjectPath)                           DefaultMediaSoundClassName                                  OFFSET(getStruct<T>, {0x50, 24, 0, 0})
	SMember(FSoftObjectPath)                           DefaultSoundConcurrencyName                                 OFFSET(getStruct<T>, {0x68, 24, 0, 0})
	SMember(FSoftObjectPath)                           DefaultBaseSoundMix                                         OFFSET(getStruct<T>, {0x80, 24, 0, 0})
	SMember(FSoftObjectPath)                           VoiPSoundClass                                              OFFSET(getStruct<T>, {0x98, 24, 0, 0})
	SMember(FSoftObjectPath)                           MasterSubmix                                                OFFSET(getStruct<T>, {0xB0, 24, 0, 0})
	SMember(FSoftObjectPath)                           ReverbSubmix                                                OFFSET(getStruct<T>, {0xC8, 24, 0, 0})
	SMember(FSoftObjectPath)                           EQSubmix                                                    OFFSET(getStruct<T>, {0xE0, 24, 0, 0})
	CMember(EVoiceSampleRate)                          VoiPSampleRate                                              OFFSET(get<T>, {0xF8, 4, 0, 0})
	DMember(float)                                     DefaultReverbSendLevel                                      OFFSET(get<float>, {0xFC, 4, 0, 0})
	DMember(int32_t)                                   MaximumConcurrentStreams                                    OFFSET(get<int32_t>, {0x100, 4, 0, 0})
	DMember(float)                                     GlobalMinPitchScale                                         OFFSET(get<float>, {0x104, 4, 0, 0})
	DMember(float)                                     GlobalMaxPitchScale                                         OFFSET(get<float>, {0x108, 4, 0, 0})
	CMember(TArray<FAudioQualitySettings>)             QualityLevels                                               OFFSET(get<T>, {0x110, 16, 0, 0})
	DMember(bool)                                      bAllowPlayWhenSilent                                        OFFSET(get<bool>, {0x120, 1, 1, 0})
	DMember(bool)                                      bDisableMasterEQ                                            OFFSET(get<bool>, {0x120, 1, 1, 1})
	DMember(bool)                                      bAllowCenterChannel3DPanning                                OFFSET(get<bool>, {0x120, 1, 1, 2})
	DMember(uint32_t)                                  NumStoppingSources                                          OFFSET(get<uint32_t>, {0x124, 4, 0, 0})
	CMember(EPanningMethod)                            PanningMethod                                               OFFSET(get<T>, {0x128, 1, 0, 0})
	CMember(EMonoChannelUpmixMethod)                   MonoChannelUpmixMethod                                      OFFSET(get<T>, {0x129, 1, 0, 0})
	SMember(FString)                                   DialogueFilenameFormat                                      OFFSET(getStruct<T>, {0x130, 16, 0, 0})
};

/// Struct /Script/Engine.ReverbSettings
/// Size: 0x0020 (0x000000 - 0x000020)
class FReverbSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(bool)                                      bApplyReverb                                                OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(class UReverbEffect*)                      ReverbEffect                                                OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class USoundEffectSubmixPreset*)           ReverbPluginEffect                                          OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(float)                                     Volume                                                      OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     FadeTime                                                    OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Struct /Script/Engine.InteriorSettings
/// Size: 0x0024 (0x000000 - 0x000024)
class FInteriorSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	DMember(bool)                                      bIsWorldSettings                                            OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     ExteriorVolume                                              OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     ExteriorTime                                                OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     ExteriorLPF                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     ExteriorLPFTime                                             OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     InteriorVolume                                              OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     InteriorTime                                                OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     InteriorLPF                                                 OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     InteriorLPFTime                                             OFFSET(get<float>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.AudioVolumeSubmixSendSettings
/// Size: 0x0018 (0x000000 - 0x000018)
class FAudioVolumeSubmixSendSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(EAudioVolumeLocationState)                 ListenerLocationState                                       OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(EAudioVolumeLocationState)                 SourceLocationState                                         OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(TArray<FSoundSubmixSendInfo>)              SubmixSends                                                 OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.AudioVolumeSubmixOverrideSettings
/// Size: 0x0020 (0x000000 - 0x000020)
class FAudioVolumeSubmixOverrideSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class USoundSubmix*)                       Submix                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<class USoundEffectSubmixPreset*>)   SubmixEffectChain                                           OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(float)                                     CrossfadeTime                                               OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Class /Script/Engine.AudioVolume
/// Size: 0x0070 (0x000258 - 0x0002C8)
class AAudioVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
	DMember(float)                                     Priority                                                    OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x25C, 1, 1, 0})
	SMember(FReverbSettings)                           Settings                                                    OFFSET(getStruct<T>, {0x260, 32, 0, 0})
	SMember(FInteriorSettings)                         AmbientZoneSettings                                         OFFSET(getStruct<T>, {0x280, 36, 0, 0})
	CMember(TArray<FAudioVolumeSubmixSendSettings>)    SubmixSendSettings                                          OFFSET(get<T>, {0x2A8, 16, 0, 0})
	CMember(TArray<FAudioVolumeSubmixOverrideSettings>) SubmixOverrideSettings                                     OFFSET(get<T>, {0x2B8, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AudioVolume.SetSubmixSendSettings
	// void SetSubmixSendSettings(TArray<FAudioVolumeSubmixSendSettings>& NewSubmixSendSettings);                               // [0x32c2300] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.SetSubmixOverrideSettings
	// void SetSubmixOverrideSettings(TArray<FAudioVolumeSubmixOverrideSettings>& NewSubmixOverrideSettings);                   // [0x32c2230] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.SetReverbSettings
	// void SetReverbSettings(FReverbSettings& NewReverbSettings);                                                              // [0x32c1ff0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.SetPriority
	// void SetPriority(float NewPriority);                                                                                     // [0x32c1f70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.SetInteriorSettings
	// void SetInteriorSettings(FInteriorSettings& NewInteriorSettings);                                                        // [0x32c1ed0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.SetEnabled
	// void SetEnabled(bool bNewEnabled);                                                                                       // [0x32c1e40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.OnRep_bEnabled
	// void OnRep_bEnabled();                                                                                                   // [0x32c1d50] Final|Native|Private 
};

/// Class /Script/Engine.AutoDestroySubsystem
/// Size: 0x0018 (0x000030 - 0x000048)
class UAutoDestroySubsystem : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<class AActor*>)                     ActorsToPoll                                                OFFSET(get<T>, {0x38, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.AutoDestroySubsystem.OnActorEndPlay
	// void OnActorEndPlay(class AActor* Actor, TEnumAsByte<EEndPlayReason> EndPlayReason);                                     // [0x32c1c80] Final|Native|Private 
};

/// Struct /Script/Engine.EditorMapPerformanceTestDefinition
/// Size: 0x0020 (0x000000 - 0x000020)
class FEditorMapPerformanceTestDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FSoftObjectPath)                           PerformanceTestmap                                          OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(int32_t)                                   TestTimer                                                   OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.FilePath
/// Size: 0x0010 (0x000000 - 0x000010)
class FFilePath : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FString)                                   FilePath                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.ImportFactorySettingValues
/// Size: 0x0020 (0x000000 - 0x000020)
class FImportFactorySettingValues : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   SettingName                                                 OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   Value                                                       OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.EditorImportWorkflowDefinition
/// Size: 0x0020 (0x000000 - 0x000020)
class FEditorImportWorkflowDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FFilePath)                                 ImportFilePath                                              OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<FImportFactorySettingValues>)       FactorySettings                                             OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.BuildPromotionImportWorkflowSettings
/// Size: 0x0150 (0x000000 - 0x000150)
class FBuildPromotionImportWorkflowSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	SMember(FEditorImportWorkflowDefinition)           Diffuse                                                     OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           Normal                                                      OFFSET(getStruct<T>, {0x20, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           StaticMesh                                                  OFFSET(getStruct<T>, {0x40, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           ReimportStaticMesh                                          OFFSET(getStruct<T>, {0x60, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           BlendShapeMesh                                              OFFSET(getStruct<T>, {0x80, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           MorphMesh                                                   OFFSET(getStruct<T>, {0xA0, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           SkeletalMesh                                                OFFSET(getStruct<T>, {0xC0, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           Animation                                                   OFFSET(getStruct<T>, {0xE0, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           Sound                                                       OFFSET(getStruct<T>, {0x100, 32, 0, 0})
	SMember(FEditorImportWorkflowDefinition)           SurroundSound                                               OFFSET(getStruct<T>, {0x120, 32, 0, 0})
	CMember(TArray<FEditorImportWorkflowDefinition>)   OtherAssetsToImport                                         OFFSET(get<T>, {0x140, 16, 0, 0})
};

/// Struct /Script/Engine.BuildPromotionOpenAssetSettings
/// Size: 0x0060 (0x000000 - 0x000060)
class FBuildPromotionOpenAssetSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FFilePath)                                 BlueprintAsset                                              OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FFilePath)                                 MaterialAsset                                               OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FFilePath)                                 ParticleSystemAsset                                         OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FFilePath)                                 SkeletalMeshAsset                                           OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FFilePath)                                 StaticMeshAsset                                             OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FFilePath)                                 TextureAsset                                                OFFSET(getStruct<T>, {0x50, 16, 0, 0})
};

/// Struct /Script/Engine.BuildPromotionNewProjectSettings
/// Size: 0x0020 (0x000000 - 0x000020)
class FBuildPromotionNewProjectSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FDirectoryPath)                            NewProjectFolderOverride                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   NewProjectNameOverride                                      OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.BuildPromotionTestSettings
/// Size: 0x01F0 (0x000000 - 0x0001F0)
class FBuildPromotionTestSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	SMember(FFilePath)                                 DefaultStaticMeshAsset                                      OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FBuildPromotionImportWorkflowSettings)     ImportWorkflow                                              OFFSET(getStruct<T>, {0x10, 336, 0, 0})
	SMember(FBuildPromotionOpenAssetSettings)          OpenAssets                                                  OFFSET(getStruct<T>, {0x160, 96, 0, 0})
	SMember(FBuildPromotionNewProjectSettings)         NewProjectSettings                                          OFFSET(getStruct<T>, {0x1C0, 32, 0, 0})
	SMember(FFilePath)                                 SourceControlMaterial                                       OFFSET(getStruct<T>, {0x1E0, 16, 0, 0})
};

/// Struct /Script/Engine.MaterialEditorPromotionSettings
/// Size: 0x0030 (0x000000 - 0x000030)
class FMaterialEditorPromotionSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FFilePath)                                 DefaultMaterialAsset                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FFilePath)                                 DefaultDiffuseTexture                                       OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FFilePath)                                 DefaultNormalTexture                                        OFFSET(getStruct<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.ParticleEditorPromotionSettings
/// Size: 0x0010 (0x000000 - 0x000010)
class FParticleEditorPromotionSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FFilePath)                                 DefaultParticleAsset                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.BlueprintEditorPromotionSettings
/// Size: 0x0030 (0x000000 - 0x000030)
class FBlueprintEditorPromotionSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FFilePath)                                 FirstMeshPath                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FFilePath)                                 SecondMeshPath                                              OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FFilePath)                                 DefaultParticleAsset                                        OFFSET(getStruct<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.ExternalToolDefinition
/// Size: 0x0060 (0x000000 - 0x000060)
class FExternalToolDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FString)                                   ToolName                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FFilePath)                                 ExecutablePath                                              OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   CommandLineOptions                                          OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FDirectoryPath)                            WorkingDirectory                                            OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   ScriptExtension                                             OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FDirectoryPath)                            ScriptDirectory                                             OFFSET(getStruct<T>, {0x50, 16, 0, 0})
};

/// Struct /Script/Engine.EditorImportExportTestDefinition
/// Size: 0x0038 (0x000000 - 0x000038)
class FEditorImportExportTestDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FFilePath)                                 ImportFilePath                                              OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   ExportFileExtension                                         OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	DMember(bool)                                      bSkipExport                                                 OFFSET(get<bool>, {0x20, 1, 0, 0})
	CMember(TArray<FImportFactorySettingValues>)       FactorySettings                                             OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/Engine.LaunchOnTestSettings
/// Size: 0x0020 (0x000000 - 0x000020)
class FLaunchOnTestSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FFilePath)                                 LaunchOnTestmap                                             OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   DeviceID                                                    OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Class /Script/Engine.AutomationTestSettings
/// Size: 0x0318 (0x000028 - 0x000340)
class UAutomationTestSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	CMember(TArray<FString>)                           EngineTestModules                                           OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<FString>)                           EditorTestModules                                           OFFSET(get<T>, {0x38, 16, 0, 0})
	SMember(FSoftObjectPath)                           AutomationTestmap                                           OFFSET(getStruct<T>, {0x48, 24, 0, 0})
	CMember(TArray<FEditorMapPerformanceTestDefinition>) EditorPerformanceTestMaps                                 OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<FSoftObjectPath>)                   AssetsToOpen                                                OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FString>)                           MapsToPIETest                                               OFFSET(get<T>, {0x80, 16, 0, 0})
	SMember(FBuildPromotionTestSettings)               BuildPromotionTest                                          OFFSET(getStruct<T>, {0x90, 496, 0, 0})
	SMember(FMaterialEditorPromotionSettings)          MaterialEditorPromotionTest                                 OFFSET(getStruct<T>, {0x280, 48, 0, 0})
	SMember(FParticleEditorPromotionSettings)          ParticleEditorPromotionTest                                 OFFSET(getStruct<T>, {0x2B0, 16, 0, 0})
	SMember(FBlueprintEditorPromotionSettings)         BlueprintEditorPromotionTest                                OFFSET(getStruct<T>, {0x2C0, 48, 0, 0})
	CMember(TArray<FString>)                           TestLevelFolders                                            OFFSET(get<T>, {0x2F0, 16, 0, 0})
	CMember(TArray<FExternalToolDefinition>)           ExternalTools                                               OFFSET(get<T>, {0x300, 16, 0, 0})
	CMember(TArray<FEditorImportExportTestDefinition>) ImportExportTestDefinitions                                 OFFSET(get<T>, {0x310, 16, 0, 0})
	CMember(TArray<FLaunchOnTestSettings>)             LaunchOnSettings                                            OFFSET(get<T>, {0x320, 16, 0, 0})
	SMember(FIntPoint)                                 DefaultScreenshotResolution                                 OFFSET(getStruct<T>, {0x330, 8, 0, 0})
	DMember(float)                                     PIETestDuration                                             OFFSET(get<float>, {0x338, 4, 0, 0})
};

/// Class /Script/Engine.AvoidanceManager
/// Size: 0x00B8 (0x000028 - 0x0000E0)
class UAvoidanceManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	DMember(float)                                     DefaultTimeToLive                                           OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     LockTimeAfterAvoid                                          OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     LockTimeAfterClean                                          OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     DeltaTimeToPredict                                          OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     ArtificialRadiusExpansion                                   OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     TestHeightDifference                                        OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     HeightCheckMargin                                           OFFSET(get<float>, {0x48, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.AvoidanceManager.RegisterMovementComponent
	// bool RegisterMovementComponent(class UMovementComponent* MovementComp, float AvoidanceWeight);                           // [0x32c1d70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AvoidanceManager.GetObjectCount
	// int32_t GetObjectCount();                                                                                                // [0x32c1c50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AvoidanceManager.GetNewAvoidanceUID
	// int32_t GetNewAvoidanceUID();                                                                                            // [0x32c1c20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AvoidanceManager.GetAvoidanceVelocityForComponent
	// FVector GetAvoidanceVelocityForComponent(class UMovementComponent* MovementComp);                                        // [0x32c1b70] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Struct /Script/Engine.BandwidthTestItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FBandwidthTestItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<char>)                              Kilobyte                                                    OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.BandwidthTestGenerator
/// Size: 0x0020 (0x000000 - 0x000020)
class FBandwidthTestGenerator : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FBandwidthTestItem>)                ReplicatedBuffers                                           OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/Engine.BandwidthTestActor
/// Size: 0x0020 (0x000220 - 0x000240)
class ABandwidthTestActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	SMember(FBandwidthTestGenerator)                   BandwidthGenerator                                          OFFSET(getStruct<T>, {0x220, 32, 0, 0})
};

/// Class /Script/Engine.BillboardComponent
/// Size: 0x0028 (0x000468 - 0x000490)
class UBillboardComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1168;

public:
	CMember(class UTexture2D*)                         Sprite                                                      OFFSET(get<T>, {0x468, 8, 0, 0})
	DMember(bool)                                      bIsScreenSizeScaled                                         OFFSET(get<bool>, {0x470, 1, 1, 0})
	DMember(float)                                     ScreenSize                                                  OFFSET(get<float>, {0x474, 4, 0, 0})
	DMember(float)                                     U                                                           OFFSET(get<float>, {0x478, 4, 0, 0})
	DMember(float)                                     UL                                                          OFFSET(get<float>, {0x47C, 4, 0, 0})
	DMember(float)                                     V                                                           OFFSET(get<float>, {0x480, 4, 0, 0})
	DMember(float)                                     VL                                                          OFFSET(get<float>, {0x484, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.BillboardComponent.SetUV
	// void SetUV(int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL);                                                    // [0x32c23d0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.BillboardComponent.SetSpriteAndUV
	// void SetSpriteAndUV(class UTexture2D* NewSprite, int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL);              // [0x32c20a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.BillboardComponent.SetSprite
	// void SetSprite(class UTexture2D* NewSprite);                                                                             // [0xb4b400] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.BlendableInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlendableInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Engine.BoneNode
/// Size: 0x0010 (0x000000 - 0x000010)
class FBoneNode : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   ParentIndex                                                 OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(TEnumAsByte<EBoneTranslationRetargetingMode>) TranslationRetargetingMode                               OFFSET(get<T>, {0xC, 1, 0, 0})
};

/// Struct /Script/Engine.VirtualBone
/// Size: 0x0018 (0x000000 - 0x000018)
class FVirtualBone : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     SourceBoneName                                              OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     TargetBoneName                                              OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     VirtualBoneName                                             OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.SmartNameContainer
/// Size: 0x0050 (0x000000 - 0x000050)
class FSmartNameContainer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Struct /Script/Engine.AnimSlotGroup
/// Size: 0x0018 (0x000000 - 0x000018)
class FAnimSlotGroup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     GroupName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<FName>)                             SlotNames                                                   OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Class /Script/Engine.Skeleton
/// Size: 0x0350 (0x000028 - 0x000378)
class USkeleton : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 888;

public:
	CMember(TArray<FBoneNode>)                         BoneTree                                                    OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FTransform>)                        RefLocalPoses                                               OFFSET(get<T>, {0x48, 16, 0, 0})
	SMember(FGuid)                                     VirtualBoneGuid                                             OFFSET(getStruct<T>, {0x180, 16, 0, 0})
	CMember(TArray<FVirtualBone>)                      VirtualBones                                                OFFSET(get<T>, {0x190, 16, 0, 0})
	CMember(TArray<class USkeletalMeshSocket*>)        Sockets                                                     OFFSET(get<T>, {0x1A0, 16, 0, 0})
	SMember(FSmartNameContainer)                       SmartNames                                                  OFFSET(getStruct<T>, {0x200, 80, 0, 0})
	CMember(TArray<class UBlendProfile*>)              BlendProfiles                                               OFFSET(get<T>, {0x280, 16, 0, 0})
	CMember(TArray<FAnimSlotGroup>)                    SlotGroups                                                  OFFSET(get<T>, {0x290, 16, 0, 0})
	CMember(TArray<class UAssetUserData*>)             AssetUserData                                               OFFSET(get<T>, {0x368, 16, 0, 0})
};

/// Struct /Script/Engine.BlendProfileBoneEntry
/// Size: 0x0014 (0x000000 - 0x000014)
class FBlendProfileBoneEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FBoneReference)                            BoneReference                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(float)                                     BlendScale                                                  OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Class /Script/Engine.BlendProfile
/// Size: 0x0020 (0x000028 - 0x000048)
class UBlendProfile : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class USkeleton*)                          OwningSkeleton                                              OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<FBlendProfileBoneEntry>)            ProfileEntries                                              OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Engine.BlockingVolume
/// Size: 0x0000 (0x000258 - 0x000258)
class ABlockingVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
};

/// Class /Script/Engine.BlueprintExtension
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintExtension : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.BlueprintMapLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.BlueprintMapLibrary.SetMapPropertyByName
	// void SetMapPropertyByName(class UObject* Object, FName PropertyName, TMap<int32_t, int32_t>& Value);                     // [0x32c6b30] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Values
	// void Map_Values(TMap<int32_t, int32_t>& TargetMap, TArray<int32_t>& Values);                                             // [0x32c6a20] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Remove
	// bool Map_Remove(TMap<int32_t, int32_t>& TargetMap, int32_t& Key);                                                        // [0x32c6870] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Length
	// int32_t Map_Length(TMap<int32_t, int32_t>& TargetMap);                                                                   // [0x32c67c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Keys
	// void Map_Keys(TMap<int32_t, int32_t>& TargetMap, TArray<int32_t>& Keys);                                                 // [0x32c66b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Find
	// bool Map_Find(TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& Value);                                          // [0x32c6410] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Contains
	// bool Map_Contains(TMap<int32_t, int32_t>& TargetMap, int32_t& Key);                                                      // [0x32c6260] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Clear
	// void Map_Clear(TMap<int32_t, int32_t>& TargetMap);                                                                       // [0x32c61c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Add
	// void Map_Add(TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& Value);                                           // [0x32c5f40] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.BlueprintPathsLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.BlueprintPathsLibrary.VideoCaptureDir
	// FString VideoCaptureDir();                                                                                               // [0x32cc3b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ValidatePath
	// void ValidatePath(FString InPath, bool& bDidSucceed, FText& OutReason);                                                  // [0x32cc240] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.Split
	// void Split(FString InPath, FString& PathPart, FString& FilenamePart, FString& ExtensionPart);                            // [0x32cc080] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.SourceConfigDir
	// FString SourceConfigDir();                                                                                               // [0x32caf10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ShouldSaveToUserDir
	// bool ShouldSaveToUserDir();                                                                                              // [0x32cc050] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ShaderWorkingDir
	// FString ShaderWorkingDir();                                                                                              // [0x32cbfd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.SetProjectFilePath
	// void SetProjectFilePath(FString NewGameProjectFilePath);                                                                 // [0x32cbf40] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.BlueprintPathsLibrary.SetExtension
	// FString SetExtension(FString InPath, FString InNewExtension);                                                            // [0x32cbe00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ScreenShotDir
	// FString ScreenShotDir();                                                                                                 // [0x32cbd80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.SandboxesDir
	// FString SandboxesDir();                                                                                                  // [0x32cb580] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.RootDir
	// FString RootDir();                                                                                                       // [0x32cb500] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.RemoveDuplicateSlashes
	// void RemoveDuplicateSlashes(FString InPath, FString& OutPath);                                                           // [0x32cb410] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectUserDir
	// FString ProjectUserDir();                                                                                                // [0x32cb390] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectSavedDir
	// FString ProjectSavedDir();                                                                                               // [0x32cb310] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectPluginsDir
	// FString ProjectPluginsDir();                                                                                             // [0x32cb290] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectPersistentDownloadDir
	// FString ProjectPersistentDownloadDir();                                                                                  // [0x32cb210] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectModsDir
	// FString ProjectModsDir();                                                                                                // [0x32cb190] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectLogDir
	// FString ProjectLogDir();                                                                                                 // [0x32cb110] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectIntermediateDir
	// FString ProjectIntermediateDir();                                                                                        // [0x32cb090] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectDir
	// FString ProjectDir();                                                                                                    // [0x32cb010] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectContentDir
	// FString ProjectContentDir();                                                                                             // [0x32caf90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectConfigDir
	// FString ProjectConfigDir();                                                                                              // [0x32caf10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProfilingDir
	// FString ProfilingDir();                                                                                                  // [0x32cae90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.NormalizeFilename
	// void NormalizeFilename(FString InPath, FString& OutPath);                                                                // [0x32cada0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.NormalizeDirectoryName
	// void NormalizeDirectoryName(FString InPath, FString& OutPath);                                                           // [0x32cacb0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.MakeValidFileName
	// FString MakeValidFileName(FString inString, FString InReplacementChar);                                                  // [0x32cab70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.MakeStandardFilename
	// void MakeStandardFilename(FString InPath, FString& OutPath);                                                             // [0x32caa80] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.MakePlatformFilename
	// void MakePlatformFilename(FString InPath, FString& OutPath);                                                             // [0x32ca990] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.MakePathRelativeTo
	// bool MakePathRelativeTo(FString InPath, FString InRelativeTo, FString& OutPath);                                         // [0x32ca830] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.LaunchDir
	// FString LaunchDir();                                                                                                     // [0x32ca7b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.IsSamePath
	// bool IsSamePath(FString PathA, FString PathB);                                                                           // [0x32ca6c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.IsRestrictedPath
	// bool IsRestrictedPath(FString InPath);                                                                                   // [0x32ca620] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.IsRelative
	// bool IsRelative(FString InPath);                                                                                         // [0x32ca580] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.IsProjectFilePathSet
	// bool IsProjectFilePathSet();                                                                                             // [0x32ca550] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.IsDrive
	// bool IsDrive(FString InPath);                                                                                            // [0x32ca4b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.HasProjectPersistentDownloadDir
	// bool HasProjectPersistentDownloadDir();                                                                                  // [0x32ca480] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetToolTipLocalizationPaths
	// TArray<FString> GetToolTipLocalizationPaths();                                                                           // [0x32ca440] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetRestrictedFolderNames
	// TArray<FString> GetRestrictedFolderNames();                                                                              // [0x32ca400] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetRelativePathToRoot
	// FString GetRelativePathToRoot();                                                                                         // [0x32ca3c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetPropertyNameLocalizationPaths
	// TArray<FString> GetPropertyNameLocalizationPaths();                                                                      // [0x32ca380] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetProjectFilePath
	// FString GetProjectFilePath();                                                                                            // [0x32ca300] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetPath
	// FString GetPath(FString InPath);                                                                                         // [0x32ca220] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetInvalidFileSystemChars
	// FString GetInvalidFileSystemChars();                                                                                     // [0x32ca060] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetGameLocalizationPaths
	// TArray<FString> GetGameLocalizationPaths();                                                                              // [0x32ca020] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetExtension
	// FString GetExtension(FString InPath, bool bIncludeDot);                                                                  // [0x32c9f00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetEngineLocalizationPaths
	// TArray<FString> GetEngineLocalizationPaths();                                                                            // [0x32c9ec0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetEditorLocalizationPaths
	// TArray<FString> GetEditorLocalizationPaths();                                                                            // [0x32c9e80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetCleanFilename
	// FString GetCleanFilename(FString InPath);                                                                                // [0x32c9d70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetBaseFilename
	// FString GetBaseFilename(FString InPath, bool bRemovePath);                                                               // [0x32c9c50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GeneratedConfigDir
	// FString GeneratedConfigDir();                                                                                            // [0x32c9bd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GameUserDeveloperDir
	// FString GameUserDeveloperDir();                                                                                          // [0x32c9b50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GameSourceDir
	// FString GameSourceDir();                                                                                                 // [0x32c9ad0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GameDevelopersDir
	// FString GameDevelopersDir();                                                                                             // [0x32c9a50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GameAgnosticSavedDir
	// FString GameAgnosticSavedDir();                                                                                          // [0x32c99d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.FileExists
	// bool FileExists(FString InPath);                                                                                         // [0x32c9930] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.FeaturePackDir
	// FString FeaturePackDir();                                                                                                // [0x32c98b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EnterprisePluginsDir
	// FString EnterprisePluginsDir();                                                                                          // [0x32c9830] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EnterpriseFeaturePackDir
	// FString EnterpriseFeaturePackDir();                                                                                      // [0x32c97b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EnterpriseDir
	// FString EnterpriseDir();                                                                                                 // [0x32c9730] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineVersionAgnosticUserDir
	// FString EngineVersionAgnosticUserDir();                                                                                  // [0x32c96b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineUserDir
	// FString EngineUserDir();                                                                                                 // [0x32c9630] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineSourceDir
	// FString EngineSourceDir();                                                                                               // [0x32c95b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineSavedDir
	// FString EngineSavedDir();                                                                                                // [0x32c9530] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EnginePluginsDir
	// FString EnginePluginsDir();                                                                                              // [0x32c94b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineIntermediateDir
	// FString EngineIntermediateDir();                                                                                         // [0x32c9430] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineDir
	// FString EngineDir();                                                                                                     // [0x32c93b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineContentDir
	// FString EngineContentDir();                                                                                              // [0x32c9330] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineConfigDir
	// FString EngineConfigDir();                                                                                               // [0x32c92b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.DirectoryExists
	// bool DirectoryExists(FString InPath);                                                                                    // [0x32c9210] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.DiffDir
	// FString DiffDir();                                                                                                       // [0x32c9190] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.CreateTempFilename
	// FString CreateTempFilename(FString Path, FString Prefix, FString Extension);                                             // [0x32c9000] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ConvertToSandboxPath
	// FString ConvertToSandboxPath(FString InPath, FString InSandboxName);                                                     // [0x32c8ec0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ConvertRelativePathToFull
	// FString ConvertRelativePathToFull(FString InPath, FString InBasePath);                                                   // [0x32c8d80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ConvertFromSandboxPath
	// FString ConvertFromSandboxPath(FString InPath, FString InSandboxName);                                                   // [0x32c8c40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.Combine
	// FString Combine(TArray<FString>& InPaths);                                                                               // [0x32c8b30] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.CollapseRelativeDirectories
	// bool CollapseRelativeDirectories(FString InPath, FString& OutPath);                                                      // [0x32c8a30] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.CloudDir
	// FString CloudDir();                                                                                                      // [0x32c89b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ChangeExtension
	// FString ChangeExtension(FString InPath, FString InNewExtension);                                                         // [0x32c8850] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.BugItDir
	// FString BugItDir();                                                                                                      // [0x32c86c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.AutomationTransientDir
	// FString AutomationTransientDir();                                                                                        // [0x32c8640] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.AutomationLogDir
	// FString AutomationLogDir();                                                                                              // [0x32c85c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.AutomationDir
	// FString AutomationDir();                                                                                                 // [0x32c8540] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.PlatformGameInstance
/// Size: 0x00D0 (0x0001A8 - 0x000278)
class UPlatformGameInstance : public UGameInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 632;

public:
	SMember(FMulticastInlineDelegate)                  ApplicationWillDeactivateDelegate                           OFFSET(getStruct<T>, {0x1A8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationHasReactivatedDelegate                           OFFSET(getStruct<T>, {0x1B8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationWillEnterBackgroundDelegate                      OFFSET(getStruct<T>, {0x1C8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationHasEnteredForegroundDelegate                     OFFSET(getStruct<T>, {0x1D8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationWillTerminateDelegate                            OFFSET(getStruct<T>, {0x1E8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationShouldUnloadResourcesDelegate                    OFFSET(getStruct<T>, {0x1F8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationReceivedStartupArgumentsDelegate                 OFFSET(getStruct<T>, {0x208, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationRegisteredForRemoteNotificationsDelegate         OFFSET(getStruct<T>, {0x218, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationRegisteredForUserNotificationsDelegate           OFFSET(getStruct<T>, {0x228, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationFailedToRegisterForRemoteNotificationsDelegate   OFFSET(getStruct<T>, {0x238, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationReceivedRemoteNotificationDelegate               OFFSET(getStruct<T>, {0x248, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationReceivedLocalNotificationDelegate                OFFSET(getStruct<T>, {0x258, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ApplicationReceivedScreenOrientationChangedNotificationDelegate OFFSET(getStruct<T>, {0x268, 16, 0, 0})
};

/// Class /Script/Engine.BlueprintPlatformLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationFromNow
	// int32_t ScheduleLocalNotificationFromNow(int32_t inSecondsFromNow, FText& Title, FText& Body, FText& Action, FString ActivationEvent); // [0x32cbaf0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeFromNow
	// void ScheduleLocalNotificationBadgeFromNow(int32_t inSecondsFromNow, FString ActivationEvent);                           // [0x32cba20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeAtTime
	// int32_t ScheduleLocalNotificationBadgeAtTime(FDateTime& FireDateTime, bool LocalTime, FString ActivationEvent);          // [0x32cb8e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationAtTime
	// int32_t ScheduleLocalNotificationAtTime(FDateTime& FireDateTime, bool LocalTime, FText& Title, FText& Body, FText& Action, FString ActivationEvent); // [0x32cb600] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.GetLaunchNotification
	// void GetLaunchNotification(bool& NotificationLaunchedApp, FString& ActivationEvent, int32_t& FireDate);                  // [0x32ca0e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.GetDeviceOrientation
	// TEnumAsByte<EScreenOrientation> GetDeviceOrientation();                                                                  // [0x32c9e50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPlatformLibrary.ClearAllLocalNotifications
	// void ClearAllLocalNotifications();                                                                                       // [0x32c8990] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.CancelLocalNotificationById
	// void CancelLocalNotificationById(int32_t NotificationId);                                                                // [0x32c87d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.CancelLocalNotification
	// void CancelLocalNotification(FString ActivationEvent);                                                                   // [0x32c8740] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.BlueprintSetLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.BlueprintSetLibrary.SetSetPropertyByName
	// void SetSetPropertyByName(class UObject* Object, FName PropertyName, TSet<int32_t>& Value);                              // [0x32cf110] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Union
	// void Set_Union(TSet<int32_t>& A, TSet<int32_t>& B, TSet<int32_t>& Result);                                               // [0x32cfea0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_ToArray
	// void Set_ToArray(TSet<int32_t>& A, TArray<int32_t>& Result);                                                             // [0x32cfd90] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_RemoveItems
	// void Set_RemoveItems(TSet<int32_t>& TargetSet, TArray<int32_t>& Items);                                                  // [0x32cfc80] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Remove
	// bool Set_Remove(TSet<int32_t>& TargetSet, int32_t& Item);                                                                // [0x32cfad0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Length
	// int32_t Set_Length(TSet<int32_t>& TargetSet);                                                                            // [0x32cfa20] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Intersection
	// void Set_Intersection(TSet<int32_t>& A, TSet<int32_t>& B, TSet<int32_t>& Result);                                        // [0x32cf8a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Difference
	// void Set_Difference(TSet<int32_t>& A, TSet<int32_t>& B, TSet<int32_t>& Result);                                          // [0x32cf720] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Contains
	// bool Set_Contains(TSet<int32_t>& TargetSet, int32_t& ItemToFind);                                                        // [0x32cf570] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Clear
	// void Set_Clear(TSet<int32_t>& TargetSet);                                                                                // [0x32cf4d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_AddItems
	// void Set_AddItems(TSet<int32_t>& TargetSet, TArray<int32_t>& NewItems);                                                  // [0x32cf3c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Add
	// void Set_Add(TSet<int32_t>& TargetSet, int32_t& NewItem);                                                                // [0x32cf210] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Struct /Script/Engine.KShapeElem
/// Size: 0x0030 (0x000000 - 0x000030)
class FKShapeElem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     RestOffset                                                  OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0xC, 8, 0, 0})
	DMember(bool)                                      bContributeToMass                                           OFFSET(get<bool>, {0x18, 1, 1, 0})
	CMember(TEnumAsByte<ECollisionEnabled>)            CollisionEnabled                                            OFFSET(get<T>, {0x19, 1, 0, 0})
};

/// Struct /Script/Engine.KSphereElem
/// Size: 0x0010 (0x000030 - 0x000040)
class FKSphereElem : public FKShapeElem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FVector)                                   Center                                                      OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x3C, 4, 0, 0})
};

/// Struct /Script/Engine.KBoxElem
/// Size: 0x0028 (0x000030 - 0x000058)
class FKBoxElem : public FKShapeElem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FVector)                                   Center                                                      OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
	DMember(float)                                     X                                                           OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     Y                                                           OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     Z                                                           OFFSET(get<float>, {0x50, 4, 0, 0})
};

/// Struct /Script/Engine.KSphylElem
/// Size: 0x0020 (0x000030 - 0x000050)
class FKSphylElem : public FKShapeElem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FVector)                                   Center                                                      OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     Length                                                      OFFSET(get<float>, {0x4C, 4, 0, 0})
};

/// Struct /Script/Engine.KConvexElem
/// Size: 0x0080 (0x000030 - 0x0000B0)
class FKConvexElem : public FKShapeElem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(TArray<FVector>)                           VertexData                                                  OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<int32_t>)                           IndexData                                                   OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FBox)                                      ElemBox                                                     OFFSET(getStruct<T>, {0x50, 28, 0, 0})
	SMember(FTransform)                                Transform                                                   OFFSET(getStruct<T>, {0x70, 48, 0, 0})
};

/// Struct /Script/Engine.KTaperedCapsuleElem
/// Size: 0x0028 (0x000030 - 0x000058)
class FKTaperedCapsuleElem : public FKShapeElem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FVector)                                   Center                                                      OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
	DMember(float)                                     Radius0                                                     OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     Radius1                                                     OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     Length                                                      OFFSET(get<float>, {0x50, 4, 0, 0})
};

/// Struct /Script/Engine.KAggregateGeom
/// Size: 0x0058 (0x000000 - 0x000058)
class FKAggregateGeom : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<FKSphereElem>)                      SphereElems                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FKBoxElem>)                         BoxElems                                                    OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FKSphylElem>)                       SphylElems                                                  OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FKConvexElem>)                      ConvexElems                                                 OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FKTaperedCapsuleElem>)              TaperedCapsuleElems                                         OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/Engine.BodySetup
/// Size: 0x0258 (0x000048 - 0x0002A0)
class UBodySetup : public UBodySetupCore
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	SMember(FKAggregateGeom)                           AggGeom                                                     OFFSET(getStruct<T>, {0x48, 88, 0, 0})
	DMember(bool)                                      bAlwaysFullAnimWeight                                       OFFSET(get<bool>, {0xA0, 1, 1, 0})
	DMember(bool)                                      bConsiderForBounds                                          OFFSET(get<bool>, {0xA0, 1, 1, 1})
	DMember(bool)                                      bMeshCollideAll                                             OFFSET(get<bool>, {0xA0, 1, 1, 2})
	DMember(bool)                                      bDoubleSidedGeometry                                        OFFSET(get<bool>, {0xA0, 1, 1, 3})
	DMember(bool)                                      bGenerateNonMirroredCollision                               OFFSET(get<bool>, {0xA0, 1, 1, 4})
	DMember(bool)                                      bSharedCookedData                                           OFFSET(get<bool>, {0xA0, 1, 1, 5})
	DMember(bool)                                      bGenerateMirroredCollision                                  OFFSET(get<bool>, {0xA0, 1, 1, 6})
	DMember(bool)                                      bSupportUVsAndFaceRemap                                     OFFSET(get<bool>, {0xA0, 1, 1, 7})
	CMember(class UPhysicalMaterial*)                  PhysMaterial                                                OFFSET(get<T>, {0xA8, 8, 0, 0})
	SMember(FWalkableSlopeOverride)                    WalkableSlopeOverride                                       OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FBodyInstance)                             DefaultInstance                                             OFFSET(getStruct<T>, {0x128, 344, 0, 0})
	SMember(FVector)                                   BuildScale3D                                                OFFSET(getStruct<T>, {0x288, 12, 0, 0})
};

/// Struct /Script/Engine.BranchFilter
/// Size: 0x000C (0x000000 - 0x00000C)
class FBranchFilter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   BlendDepth                                                  OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.InputBlendPose
/// Size: 0x0068 (0x000000 - 0x000068)
class FInputBlendPose : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<FBranchFilter>)                     BranchFilters                                               OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      bFilterCurves                                               OFFSET(get<bool>, {0x10, 1, 0, 0})
	CMember(TSet<FName>)                               CurveFilters                                                OFFSET(get<T>, {0x18, 80, 0, 0})
};

/// Class /Script/Engine.BoneMaskFilter
/// Size: 0x0010 (0x000028 - 0x000038)
class UBoneMaskFilter : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FInputBlendPose>)                   BlendPoses                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.BookmarkBase
/// Size: 0x0000 (0x000028 - 0x000028)
class UBookmarkBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.BookMark
/// Size: 0x0028 (0x000028 - 0x000050)
class UBookMark : public UBookmarkBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x28, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x34, 12, 0, 0})
	CMember(TArray<FString>)                           HiddenLevels                                                OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/Engine.BookMark2D
/// Size: 0x0010 (0x000028 - 0x000038)
class UBookMark2D : public UBookmarkBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     Zoom2D                                                      OFFSET(get<float>, {0x28, 4, 0, 0})
	SMember(FIntPoint)                                 Location                                                    OFFSET(getStruct<T>, {0x2C, 8, 0, 0})
};

/// Class /Script/Engine.BoundsCopyComponent
/// Size: 0x0070 (0x0000B0 - 0x000120)
class UBoundsCopyComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	CMember(TWeakObjectPtr<class AActor*>)             BoundsSourceActor                                           OFFSET(get<T>, {0xB0, 8, 0, 0})
	DMember(bool)                                      bUseCollidingComponentsForSourceBounds                      OFFSET(get<bool>, {0xD8, 1, 0, 0})
	DMember(bool)                                      bKeepOwnBoundsScale                                         OFFSET(get<bool>, {0xD9, 1, 0, 0})
	DMember(bool)                                      bUseCollidingComponentsForOwnBounds                         OFFSET(get<bool>, {0xDA, 1, 0, 0})
	SMember(FTransform)                                PostTransform                                               OFFSET(getStruct<T>, {0xE0, 48, 0, 0})
	DMember(bool)                                      bCopyXBounds                                                OFFSET(get<bool>, {0x110, 1, 0, 0})
	DMember(bool)                                      bCopyYBounds                                                OFFSET(get<bool>, {0x111, 1, 0, 0})
	DMember(bool)                                      bCopyZBounds                                                OFFSET(get<bool>, {0x112, 1, 0, 0})
};

/// Class /Script/Engine.ReflectionCapture
/// Size: 0x0008 (0x000220 - 0x000228)
class AReflectionCapture : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(class UReflectionCaptureComponent*)        CaptureComponent                                            OFFSET(get<T>, {0x220, 8, 0, 0})
};

/// Class /Script/Engine.BoxReflectionCapture
/// Size: 0x0000 (0x000228 - 0x000228)
class ABoxReflectionCapture : public AReflectionCapture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
};

/// Class /Script/Engine.ReflectionCaptureComponent
/// Size: 0x0088 (0x0001F8 - 0x000280)
class UReflectionCaptureComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	CMember(class UBillboardComponent*)                CaptureOffsetComponent                                      OFFSET(get<T>, {0x1F8, 8, 0, 0})
	CMember(EReflectionSourceType)                     ReflectionSourceType                                        OFFSET(get<T>, {0x200, 1, 0, 0})
	CMember(EMobileReflectionCompression)              MobileReflectionCompression                                 OFFSET(get<T>, {0x201, 1, 0, 0})
	CMember(class UTextureCube*)                       Cubemap                                                     OFFSET(get<T>, {0x208, 8, 0, 0})
	DMember(float)                                     SourceCubemapAngle                                          OFFSET(get<float>, {0x210, 4, 0, 0})
	DMember(float)                                     Brightness                                                  OFFSET(get<float>, {0x214, 4, 0, 0})
	DMember(float)                                     SM5BrightnessMul                                            OFFSET(get<float>, {0x218, 4, 0, 0})
	DMember(bool)                                      bModifyMaxValueRGBM                                         OFFSET(get<bool>, {0x21C, 1, 0, 0})
	DMember(float)                                     MaxValueRGBM                                                OFFSET(get<float>, {0x220, 4, 0, 0})
	CMember(EMobileReflectionLevel)                    ReflectionLevel                                             OFFSET(get<T>, {0x224, 1, 0, 0})
	SMember(FVector)                                   CaptureOffset                                               OFFSET(getStruct<T>, {0x228, 12, 0, 0})
	SMember(FGuid)                                     MapBuildDataId                                              OFFSET(getStruct<T>, {0x234, 16, 0, 0})
	CMember(class UTextureCube*)                       CachedEncodedHDRCubemap                                     OFFSET(get<T>, {0x258, 8, 0, 0})
};

/// Class /Script/Engine.BoxReflectionCaptureComponent
/// Size: 0x0018 (0x000278 - 0x000290)
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	DMember(float)                                     BoxTransitionDistance                                       OFFSET(get<float>, {0x278, 4, 0, 0})
	CMember(class UBoxComponent*)                      PreviewInfluenceBox                                         OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UBoxComponent*)                      PreviewCaptureBox                                           OFFSET(get<T>, {0x288, 8, 0, 0})
};

/// Class /Script/Engine.Breakpoint
/// Size: 0x0018 (0x000028 - 0x000040)
class UBreakpoint : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x28, 1, 1, 0})
	CMember(class UEdGraphNode*)                       Node                                                        OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bStepOnce                                                   OFFSET(get<bool>, {0x38, 1, 1, 0})
	DMember(bool)                                      bStepOnce_WasPreviouslyDisabled                             OFFSET(get<bool>, {0x38, 1, 1, 1})
	DMember(bool)                                      bStepOnce_RemoveAfterHit                                    OFFSET(get<bool>, {0x38, 1, 1, 2})
};

/// Struct /Script/Engine.BuilderPoly
/// Size: 0x0020 (0x000000 - 0x000020)
class FBuilderPoly : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<int32_t>)                           VertexIndices                                               OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   Direction                                                   OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	SMember(FName)                                     ItemName                                                    OFFSET(getStruct<T>, {0x14, 8, 0, 0})
	DMember(int32_t)                                   PolyFlags                                                   OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
};

/// Class /Script/Engine.BrushBuilder
/// Size: 0x0058 (0x000028 - 0x000080)
class UBrushBuilder : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FString)                                   BitmapFilename                                              OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   Tooltip                                                     OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      NotifyBadParams                                             OFFSET(get<bool>, {0x48, 1, 1, 0})
	CMember(TArray<FVector>)                           Vertices                                                    OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FBuilderPoly>)                      Polys                                                       OFFSET(get<T>, {0x60, 16, 0, 0})
	SMember(FName)                                     Layer                                                       OFFSET(getStruct<T>, {0x70, 8, 0, 0})
	DMember(bool)                                      MergeCoplanars                                              OFFSET(get<bool>, {0x78, 1, 1, 0})
};

/// Class /Script/Engine.BrushComponent
/// Size: 0x0018 (0x000468 - 0x000480)
class UBrushComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1152;

public:
	CMember(class UModel*)                             Brush                                                       OFFSET(get<T>, {0x468, 8, 0, 0})
	CMember(class UBodySetup*)                         BrushBodySetup                                              OFFSET(get<T>, {0x470, 8, 0, 0})
};

/// Class /Script/Engine.BrushShape
/// Size: 0x0000 (0x000258 - 0x000258)
class ABrushShape : public ABrush
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
};

/// Class /Script/Engine.ButtonStyleAsset
/// Size: 0x03A8 (0x000028 - 0x0003D0)
class UButtonStyleAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 976;

public:
	SMember(FButtonStyle)                              ButtonStyle                                                 OFFSET(getStruct<T>, {0x30, 928, 0, 0})
};

/// Class /Script/Engine.CameraAnim
/// Size: 0x0598 (0x000028 - 0x0005C0)
class UCameraAnim : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1472;

public:
	CMember(class UInterpGroup*)                       CameraInterpGroup                                           OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(float)                                     AnimLength                                                  OFFSET(get<float>, {0x30, 4, 0, 0})
	SMember(FBox)                                      BoundingBox                                                 OFFSET(getStruct<T>, {0x34, 28, 0, 0})
	DMember(bool)                                      bRelativeToInitialTransform                                 OFFSET(get<bool>, {0x50, 1, 1, 0})
	DMember(bool)                                      bRelativeToInitialFOV                                       OFFSET(get<bool>, {0x50, 1, 1, 1})
	DMember(float)                                     BaseFOV                                                     OFFSET(get<float>, {0x54, 4, 0, 0})
	SMember(FPostProcessSettings)                      BasePostProcessSettings                                     OFFSET(getStruct<T>, {0x60, 1360, 0, 0})
	DMember(float)                                     BasePostProcessBlendWeight                                  OFFSET(get<float>, {0x5B0, 4, 0, 0})
};

/// Class /Script/Engine.CameraAnimInst
/// Size: 0x00E8 (0x000028 - 0x000110)
class UCameraAnimInst : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	CMember(class UCameraAnim*)                        CamAnim                                                     OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UInterpGroupInst*)                   InterpGroupInst                                             OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     PlayRate                                                    OFFSET(get<float>, {0x50, 4, 0, 0})
	CMember(class UInterpTrackMove*)                   MoveTrack                                                   OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(class UInterpTrackInstMove*)               MoveInst                                                    OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(ECameraShakePlaySpace)                     PlaySpace                                                   OFFSET(get<T>, {0x78, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.CameraAnimInst.Stop
	// void Stop(bool bImmediate);                                                                                              // [0x32d4f60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraAnimInst.SetScale
	// void SetScale(float NewDuration);                                                                                        // [0x32d4cb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraAnimInst.SetDuration
	// void SetDuration(float NewDuration);                                                                                     // [0x32d49b0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.CameraBlockingVolume
/// Size: 0x0000 (0x000258 - 0x000258)
class ACameraBlockingVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
};

/// Class /Script/Engine.CameraModifier
/// Size: 0x0020 (0x000028 - 0x000048)
class UCameraModifier : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bDebug                                                      OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(bool)                                      bExclusive                                                  OFFSET(get<bool>, {0x28, 1, 1, 1})
	DMember(char)                                      Priority                                                    OFFSET(get<char>, {0x2C, 1, 0, 0})
	CMember(class APlayerCameraManager*)               CameraOwner                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     AlphaInTime                                                 OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     AlphaOutTime                                                OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     Alpha                                                       OFFSET(get<float>, {0x40, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.CameraModifier.IsDisabled
	// bool IsDisabled();                                                                                                       // [0x1221a60] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CameraModifier.GetViewTarget
	// class AActor* GetViewTarget();                                                                                           // [0x29f3580] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CameraModifier.EnableModifier
	// void EnableModifier();                                                                                                   // [0x116c190] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraModifier.DisableModifier
	// void DisableModifier(bool bImmediate);                                                                                   // [0x32d2c90] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraModifier.BlueprintModifyPostProcess
	// void BlueprintModifyPostProcess(float DeltaTime, float& PostProcessBlendWeight, FPostProcessSettings& PostProcessSettings); // [0x198a600] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/Engine.CameraModifier.BlueprintModifyCamera
	// void BlueprintModifyCamera(float DeltaTime, FVector ViewLocation, FRotator ViewRotation, float FOV, FVector& NewViewLocation, FRotator& NewViewRotation, float& NewFOV); // [0x198a600] BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
};

/// Struct /Script/Engine.ActiveCameraShakeInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FActiveCameraShakeInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UCameraShakeBase*)                   ShakeInstance                                               OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UCameraShakeSourceComponent*>) ShakeSource                                        OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.PooledCameraShakes
/// Size: 0x0010 (0x000000 - 0x000010)
class FPooledCameraShakes : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<class UCameraShakeBase*>)           PooledShakes                                                OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/Engine.CameraModifier_CameraShake
/// Size: 0x0068 (0x000048 - 0x0000B0)
class UCameraModifier_CameraShake : public UCameraModifier
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(TArray<FActiveCameraShakeInfo>)            ActiveShakes                                                OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TMap<class UClass*, FPooledCameraShakes>)  ExpiredPooledShakesMap                                      OFFSET(get<T>, {0x58, 80, 0, 0})
	DMember(float)                                     SplitScreenShakeScale                                       OFFSET(get<float>, {0xA8, 4, 0, 0})
};

/// Class /Script/Engine.CameraShakeSourceActor
/// Size: 0x0008 (0x000220 - 0x000228)
class ACameraShakeSourceActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(class UCameraShakeSourceComponent*)        CameraShakeSourceComponent                                  OFFSET(get<T>, {0x220, 8, 0, 0})
};

/// Class /Script/Engine.CameraShakeSourceComponent
/// Size: 0x0028 (0x0001F8 - 0x000220)
class UCameraShakeSourceComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	CMember(ECameraShakeAttenuation)                   Attenuation                                                 OFFSET(get<T>, {0x1F8, 1, 0, 0})
	DMember(float)                                     InnerAttenuationRadius                                      OFFSET(get<float>, {0x1FC, 4, 0, 0})
	DMember(float)                                     OuterAttenuationRadius                                      OFFSET(get<float>, {0x200, 4, 0, 0})
	CMember(class UClass*)                             CameraShake                                                 OFFSET(get<T>, {0x208, 8, 0, 0})
	DMember(bool)                                      bAutoStart                                                  OFFSET(get<bool>, {0x210, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.CameraShakeSourceComponent.StopAllCameraShakesOfType
	// void StopAllCameraShakesOfType(class UClass* InCameraShake, bool bImmediately);                                          // [0x32d5080] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraShakeSourceComponent.StopAllCameraShakes
	// void StopAllCameraShakes(bool bImmediately);                                                                             // [0x32d4ff0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraShakeSourceComponent.StartCameraShake
	// void StartCameraShake(class UClass* InCameraShake, float Scale, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot); // [0x32d4de0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.CameraShakeSourceComponent.Start
	// void Start();                                                                                                            // [0x32d4dc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraShakeSourceComponent.GetAttenuationFactor
	// float GetAttenuationFactor(FVector& Location);                                                                           // [0x32d2d20] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.Canvas
/// Size: 0x02A8 (0x000028 - 0x0002D0)
class UCanvas : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	DMember(float)                                     OrgX                                                        OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     OrgY                                                        OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     ClipX                                                       OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     ClipY                                                       OFFSET(get<float>, {0x34, 4, 0, 0})
	SMember(FColor)                                    DrawColor                                                   OFFSET(getStruct<T>, {0x38, 4, 0, 0})
	DMember(bool)                                      bCenterX                                                    OFFSET(get<bool>, {0x3C, 1, 1, 0})
	DMember(bool)                                      bCenterY                                                    OFFSET(get<bool>, {0x3C, 1, 1, 1})
	DMember(bool)                                      bNoSmooth                                                   OFFSET(get<bool>, {0x3C, 1, 1, 2})
	DMember(int32_t)                                   SizeX                                                       OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   SizeY                                                       OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	SMember(FPlane)                                    ColorModulate                                               OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	CMember(class UTexture2D*)                         DefaultTexture                                              OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(class UTexture2D*)                         GradientTexture0                                            OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(class UReporterGraph*)                     ReporterGraph                                               OFFSET(get<T>, {0x70, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.Canvas.K2_TextSize
	// FVector2D K2_TextSize(class UFont* RenderFont, FString RenderText, FVector2D Scale);                                     // [0x32d4640] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_StrLen
	// FVector2D K2_StrLen(class UFont* RenderFont, FString RenderText);                                                        // [0x32d4550] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_Project
	// FVector K2_Project(FVector WorldLocation);                                                                               // [0x32d44a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawTriangle
	// void K2_DrawTriangle(class UTexture* RenderTexture, TArray<FCanvasUVTri> Triangles);                                     // [0x32d4370] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawTexture
	// void K2_DrawTexture(class UTexture* RenderTexture, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, FLinearColor RenderColor, TEnumAsByte<EBlendMode> BlendMode, float Rotation, FVector2D PivotPoint); // [0x32d40c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawText
	// void K2_DrawText(class UFont* RenderFont, FString RenderText, FVector2D ScreenPosition, FVector2D Scale, FLinearColor RenderColor, float Kerning, FLinearColor ShadowColor, FVector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, FLinearColor OutlineColor); // [0x32d3d00] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawPolygon
	// void K2_DrawPolygon(class UTexture* RenderTexture, FVector2D ScreenPosition, FVector2D Radius, int32_t NumberOfSides, FLinearColor RenderColor); // [0x32d3b50] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawMaterialTriangle
	// void K2_DrawMaterialTriangle(class UMaterialInterface* RenderMaterial, TArray<FCanvasUVTri> Triangles);                  // [0x32d3a20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawMaterial
	// void K2_DrawMaterial(class UMaterialInterface* RenderMaterial, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, float Rotation, FVector2D PivotPoint); // [0x32d37e0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawLine
	// void K2_DrawLine(FVector2D ScreenPositionA, FVector2D ScreenPositionB, float Thickness, FLinearColor RenderColor);       // [0x32d3680] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawBox
	// void K2_DrawBox(FVector2D ScreenPosition, FVector2D ScreenSize, float Thickness, FLinearColor RenderColor);              // [0x32d3520] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawBorder
	// void K2_DrawBorder(class UTexture* BorderTexture, class UTexture* BackgroundTexture, class UTexture* LeftBorderTexture, class UTexture* RightBorderTexture, class UTexture* TopBorderTexture, class UTexture* BottomBorderTexture, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, FLinearColor RenderColor, FVector2D BorderScale, FVector2D BackgroundScale, float Rotation, FVector2D PivotPoint, FVector2D CornerSize); // [0x32d3090] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_Deproject
	// void K2_Deproject(FVector2D ScreenPosition, FVector& WorldOrigin, FVector& WorldDirection);                              // [0x32d2f70] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.TextureRenderTarget
/// Size: 0x0008 (0x0000D8 - 0x0000E0)
class UTextureRenderTarget : public UTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	DMember(float)                                     TargetGamma                                                 OFFSET(get<float>, {0xD8, 4, 0, 0})
};

/// Class /Script/Engine.TextureRenderTarget2D
/// Size: 0x0028 (0x0000E0 - 0x000108)
class UTextureRenderTarget2D : public UTextureRenderTarget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	DMember(int32_t)                                   SizeX                                                       OFFSET(get<int32_t>, {0xE0, 4, 0, 0})
	DMember(int32_t)                                   SizeY                                                       OFFSET(get<int32_t>, {0xE4, 4, 0, 0})
	SMember(FLinearColor)                              ClearColor                                                  OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               AddressX                                                    OFFSET(get<T>, {0xF8, 1, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               AddressY                                                    OFFSET(get<T>, {0xF9, 1, 0, 0})
	DMember(bool)                                      bForceLinearGamma                                           OFFSET(get<bool>, {0xFA, 1, 1, 0})
	DMember(bool)                                      bHDR                                                        OFFSET(get<bool>, {0xFA, 1, 1, 1})
	DMember(bool)                                      bGPUSharedFlag                                              OFFSET(get<bool>, {0xFA, 1, 1, 2})
	CMember(TEnumAsByte<ETextureRenderTargetFormat>)   RenderTargetFormat                                          OFFSET(get<T>, {0xFB, 1, 0, 0})
	DMember(bool)                                      bAutoGenerateMips                                           OFFSET(get<bool>, {0xFC, 1, 1, 0})
	CMember(TEnumAsByte<TextureFilter>)                MipsSamplerFilter                                           OFFSET(get<T>, {0xFD, 1, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               MipsAddressU                                                OFFSET(get<T>, {0xFE, 1, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               MipsAddressV                                                OFFSET(get<T>, {0xFF, 1, 0, 0})
	CMember(TEnumAsByte<EPixelFormat>)                 OverrideFormat                                              OFFSET(get<T>, {0x100, 1, 0, 0})
};

/// Class /Script/Engine.CanvasRenderTarget2D
/// Size: 0x0020 (0x000108 - 0x000128)
class UCanvasRenderTarget2D : public UTextureRenderTarget2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	SMember(FMulticastInlineDelegate)                  OnCanvasRenderTargetUpdate                                  OFFSET(getStruct<T>, {0x108, 16, 0, 0})
	CMember(TWeakObjectPtr<class UWorld*>)             World                                                       OFFSET(get<T>, {0x118, 8, 0, 0})
	DMember(bool)                                      bShouldClearRenderTargetOnReceiveUpdate                     OFFSET(get<bool>, {0x120, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.CanvasRenderTarget2D.UpdateResource
	// void UpdateResource();                                                                                                   // [0x1602830] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CanvasRenderTarget2D.ReceiveUpdate
	// void ReceiveUpdate(class UCanvas* Canvas, int32_t Width, int32_t Height);                                                // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.CanvasRenderTarget2D.GetSize
	// void GetSize(int32_t& Width, int32_t& Height);                                                                           // [0x32d9530] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D
	// class UCanvasRenderTarget2D* CreateCanvasRenderTarget2D(class UObject* WorldContextObject, class UClass* CanvasRenderTarget2DClass, int32_t Width, int32_t Height); // [0x32d8f50] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.CapsuleComponent
/// Size: 0x0010 (0x000480 - 0x000490)
class UCapsuleComponent : public UShapeComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1168;

public:
	DMember(float)                                     CapsuleHalfHeight                                           OFFSET(get<float>, {0x480, 4, 0, 0})
	DMember(float)                                     CapsuleRadius                                               OFFSET(get<float>, {0x484, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.CapsuleComponent.SetCapsuleSize
	// void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);                                           // [0x32db590] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CapsuleComponent.SetCapsuleRadius
	// void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);                                                               // [0x32db4b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CapsuleComponent.SetCapsuleHalfHeight
	// void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);                                                       // [0x32db3d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere
	// void GetUnscaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere);                  // [0x32d9770] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleSize
	// void GetUnscaledCapsuleSize(float& OutRadius, float& OutHalfHeight);                                                     // [0x32d9680] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleRadius
	// float GetUnscaledCapsuleRadius();                                                                                        // [0x32d9660] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere
	// float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();                                                                  // [0x32d9630] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight
	// float GetUnscaledCapsuleHalfHeight();                                                                                    // [0x32d9610] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetShapeScale
	// float GetShapeScale();                                                                                                   // [0x32d94f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere
	// void GetScaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere);                    // [0x32d93d0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleSize
	// void GetScaledCapsuleSize(float& OutRadius, float& OutHalfHeight);                                                       // [0x32d92c0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleRadius
	// float GetScaledCapsuleRadius();                                                                                          // [0x32d9280] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere
	// float GetScaledCapsuleHalfHeight_WithoutHemisphere();                                                                    // [0x32d9230] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleHalfHeight
	// float GetScaledCapsuleHalfHeight();                                                                                      // [0x32d9200] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CheatManager
/// Size: 0x0050 (0x000028 - 0x000078)
class UCheatManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(class ADebugCameraController*)             DebugCameraControllerRef                                    OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UClass*)                             DebugCameraControllerClass                                  OFFSET(get<T>, {0x30, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.CheatManager.Walk
	// void Walk();                                                                                                             // [0xc8b150] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.ViewSelf
	// void ViewSelf();                                                                                                         // [0x32e17b0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.ViewPlayer
	// void ViewPlayer(FString S);                                                                                              // [0x32e1710] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.ViewClass
	// void ViewClass(class UClass* DesiredClass);                                                                              // [0x32e1680] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.ViewActor
	// void ViewActor(FName ActorName);                                                                                         // [0x32e15f0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.UpdateSafeArea
	// void UpdateSafeArea();                                                                                                   // [0x32e15d0] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet
	// void ToggleServerStatReplicatorUpdateStatNet();                                                                          // [0x32e15b0] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite
	// void ToggleServerStatReplicatorClientOverwrite();                                                                        // [0x32e1590] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ToggleDebugCamera
	// void ToggleDebugCamera();                                                                                                // [0x32e1570] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.ToggleAILogging
	// void ToggleAILogging();                                                                                                  // [0x1606ab0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.TestCollisionDistance
	// void TestCollisionDistance();                                                                                            // [0x32e1550] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.Teleport
	// void Teleport();                                                                                                         // [0x1629620] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.Summon
	// void Summon(FString ClassName);                                                                                          // [0x32e14b0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.StreamLevelOut
	// void StreamLevelOut(FName PackageName);                                                                                  // [0x32e1420] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.StreamLevelIn
	// void StreamLevelIn(FName PackageName);                                                                                   // [0x32e1390] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.SpawnServerStatReplicator
	// void SpawnServerStatReplicator();                                                                                        // [0x32e1370] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.Slomo
	// void Slomo(float NewTimeDilation);                                                                                       // [0x1647400] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.SetWorldOrigin
	// void SetWorldOrigin();                                                                                                   // [0x32e1350] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.SetMouseSensitivityToDefault
	// void SetMouseSensitivityToDefault();                                                                                     // [0x32e1330] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.ServerToggleAILogging
	// void ServerToggleAILogging();                                                                                            // [0x32e1250] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.CheatManager.ReceiveInitCheatManager
	// void ReceiveInitCheatManager();                                                                                          // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.CheatManager.ReceiveEndPlay
	// void ReceiveEndPlay();                                                                                                   // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.CheatManager.PlayersOnly
	// void PlayersOnly();                                                                                                      // [0x32e1230] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.OnlyLoadLevel
	// void OnlyLoadLevel(FName PackageName);                                                                                   // [0x32e11a0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.LogLoc
	// void LogLoc();                                                                                                           // [0x32e1180] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.InvertMouse
	// void InvertMouse();                                                                                                      // [0x32e1160] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.God
	// void God();                                                                                                              // [0x1601bf0] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.Ghost
	// void Ghost();                                                                                                            // [0x116c190] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.FreezeFrame
	// void FreezeFrame(float Delay);                                                                                           // [0x162fd90] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.Fly
	// void Fly();                                                                                                              // [0x116c1b0] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.FlushLog
	// void FlushLog();                                                                                                         // [0x32e1140] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.EnableDebugCamera
	// void EnableDebugCamera();                                                                                                // [0x32e1120] Native|Protected|BlueprintCallable 
	// Function /Script/Engine.CheatManager.DumpVoiceMutingState
	// void DumpVoiceMutingState();                                                                                             // [0x32e1100] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DumpPartyState
	// void DumpPartyState();                                                                                                   // [0x32e10e0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DumpOnlineSessionState
	// void DumpOnlineSessionState();                                                                                           // [0x32e10c0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DumpChatState
	// void DumpChatState();                                                                                                    // [0x32e10a0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DisableDebugCamera
	// void DisableDebugCamera();                                                                                               // [0x32e1080] Native|Protected|BlueprintCallable 
	// Function /Script/Engine.CheatManager.DestroyTarget
	// void DestroyTarget();                                                                                                    // [0x1602810] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.DestroyServerStatReplicator
	// void DestroyServerStatReplicator();                                                                                      // [0x32e1060] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.DestroyPawns
	// void DestroyPawns(class UClass* aClass);                                                                                 // [0x29ef890] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DestroyAllPawnsExceptTarget
	// void DestroyAllPawnsExceptTarget();                                                                                      // [0x32e1040] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DestroyAll
	// void DestroyAll(class UClass* aClass);                                                                                   // [0xc8b2f0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepSize
	// void DebugCapsuleSweepSize(float HalfHeight, float Radius);                                                              // [0x32e0f70] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepPawn
	// void DebugCapsuleSweepPawn();                                                                                            // [0x32e0f50] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepComplex
	// void DebugCapsuleSweepComplex(bool bTraceComplex);                                                                       // [0x32e0ec0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepClear
	// void DebugCapsuleSweepClear();                                                                                           // [0x32e0ea0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepChannel
	// void DebugCapsuleSweepChannel(TEnumAsByte<ECollisionChannel> Channel);                                                   // [0x32e0e20] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepCapture
	// void DebugCapsuleSweepCapture();                                                                                         // [0x32e0e00] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweep
	// void DebugCapsuleSweep();                                                                                                // [0x32e0de0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DamageTarget
	// void DamageTarget(float DamageAmount);                                                                                   // [0x32e0d50] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.CheatScript
	// void CheatScript(FString ScriptName);                                                                                    // [0x32e0c60] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ChangeSize
	// void ChangeSize(float F);                                                                                                // [0x1636040] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.BugItStringCreator
	// void BugItStringCreator(FVector ViewLocation, FRotator ViewRotation, FString& GoString, FString& LocString);             // [0x32e0aa0] Exec|Native|Public|HasOutParms|HasDefaults 
	// Function /Script/Engine.CheatManager.BugItGo
	// void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);                                             // [0x32e08b0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.BugIt
	// void BugIt(FString ScreenShotDescription);                                                                               // [0x32e0810] Exec|Native|Public   
};

/// Class /Script/Engine.CheckBoxStyleAsset
/// Size: 0x0818 (0x000028 - 0x000840)
class UCheckBoxStyleAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2112;

public:
	SMember(FCheckBoxStyle)                            CheckBoxStyle                                               OFFSET(getStruct<T>, {0x30, 2064, 0, 0})
};

/// Class /Script/Engine.ChildConnection
/// Size: 0x0008 (0x001AF0 - 0x001AF8)
class UChildConnection : public UNetConnection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 6904;

public:
	CMember(class UNetConnection*)                     Parent                                                      OFFSET(get<T>, {0x1AF0, 8, 0, 0})
};

/// Struct /Script/Engine.DelegateArray
/// Size: 0x0010 (0x000000 - 0x000010)
class FDelegateArray : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FDelegateProperty>)                 Delegates                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/Engine.PlatformInterfaceBase
/// Size: 0x0010 (0x000028 - 0x000038)
class UPlatformInterfaceBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FDelegateArray>)                    AllDelegates                                                OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.CloudStorageBase
/// Size: 0x0018 (0x000038 - 0x000050)
class UCloudStorageBase : public UPlatformInterfaceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<FString>)                           LocalCloudFiles                                             OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      bSuppressDelegateCalls                                      OFFSET(get<bool>, {0x48, 1, 1, 0})
};

/// Struct /Script/Engine.CollisionResponseTemplate
/// Size: 0x0048 (0x000000 - 0x000048)
class FCollisionResponseTemplate : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<ECollisionEnabled>)            CollisionEnabled                                            OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(bool)                                      bCanModify                                                  OFFSET(get<bool>, {0xA, 1, 0, 0})
	SMember(FName)                                     ObjectTypeName                                              OFFSET(getStruct<T>, {0x2C, 8, 0, 0})
	CMember(TArray<FResponseChannel>)                  CustomResponses                                             OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Struct /Script/Engine.CustomChannelSetup
/// Size: 0x000C (0x000000 - 0x00000C)
class FCustomChannelSetup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	CMember(TEnumAsByte<ECollisionChannel>)            Channel                                                     OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionResponse>)           DefaultResponse                                             OFFSET(get<T>, {0x1, 1, 0, 0})
	DMember(bool)                                      bTraceType                                                  OFFSET(get<bool>, {0x2, 1, 0, 0})
	DMember(bool)                                      bStaticObject                                               OFFSET(get<bool>, {0x3, 1, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x4, 8, 0, 0})
};

/// Struct /Script/Engine.CustomProfile
/// Size: 0x0018 (0x000000 - 0x000018)
class FCustomProfile : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<FResponseChannel>)                  CustomResponses                                             OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.Redirector
/// Size: 0x0010 (0x000000 - 0x000010)
class FRedirector : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     OldName                                                     OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     NewName                                                     OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Class /Script/Engine.CollisionProfile
/// Size: 0x0138 (0x000038 - 0x000170)
class UCollisionProfile : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	CMember(TArray<FCollisionResponseTemplate>)        Profiles                                                    OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FCustomChannelSetup>)               DefaultChannelResponses                                     OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<FCustomProfile>)                    EditProfiles                                                OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<FRedirector>)                       ProfileRedirects                                            OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<FRedirector>)                       CollisionChannelRedirects                                   OFFSET(get<T>, {0x78, 16, 0, 0})
};

/// Struct /Script/Engine.BlueprintComponentDelegateBinding
/// Size: 0x0018 (0x000000 - 0x000018)
class FBlueprintComponentDelegateBinding : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     ComponentPropertyName                                       OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     DelegatePropertyName                                        OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     FunctionNameToBind                                          OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Class /Script/Engine.ComponentDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UComponentDelegateBinding : public UDynamicBlueprintBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FBlueprintComponentDelegateBinding>) ComponentDelegateBindings                                  OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.ActorComponentInstanceDataTransientOuter
/// Size: 0x0000 (0x000028 - 0x000028)
class UActorComponentInstanceDataTransientOuter : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.CurveTable
/// Size: 0x0078 (0x000028 - 0x0000A0)
class UCurveTable : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
};

/// Class /Script/Engine.CompositeCurveTable
/// Size: 0x0028 (0x0000A0 - 0x0000C8)
class UCompositeCurveTable : public UCurveTable
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(TArray<class UCurveTable*>)                ParentTables                                                OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TArray<class UCurveTable*>)                OldParentTables                                             OFFSET(get<T>, {0xB0, 16, 0, 0})
};

/// Class /Script/Engine.DataTable
/// Size: 0x0088 (0x000028 - 0x0000B0)
class UDataTable : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(class UScriptStruct*)                      RowStruct                                                   OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      bStripFromClientBuilds                                      OFFSET(get<bool>, {0x80, 1, 1, 0})
	DMember(bool)                                      bIgnoreExtraFields                                          OFFSET(get<bool>, {0x80, 1, 1, 1})
	DMember(bool)                                      bIgnoreMissingFields                                        OFFSET(get<bool>, {0x80, 1, 1, 2})
	SMember(FString)                                   ImportKeyField                                              OFFSET(getStruct<T>, {0x88, 16, 0, 0})
};

/// Class /Script/Engine.CompositeDataTable
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UCompositeDataTable : public UDataTable
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(TArray<class UDataTable*>)                 ParentTables                                                OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TArray<class UDataTable*>)                 OldParentTables                                             OFFSET(get<T>, {0xC0, 16, 0, 0})
};

/// Class /Script/Engine.Console
/// Size: 0x0108 (0x000028 - 0x000130)
class UConsole : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	CMember(class ULocalPlayer*)                       ConsoleTargetPlayer                                         OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UTexture2D*)                         DefaultTexture_Black                                        OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UTexture2D*)                         DefaultTexture_White                                        OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TArray<FString>)                           HistoryBuffer                                               OFFSET(get<T>, {0x68, 16, 0, 0})
};

/// Class /Script/Engine.ControlChannel
/// Size: 0x0018 (0x000070 - 0x000088)
class UControlChannel : public UChannel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
};

/// Class /Script/Engine.StreamingSettings
/// Size: 0x0038 (0x000038 - 0x000070)
class UStreamingSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(bool)                                      AsyncLoadingThreadEnabled                                   OFFSET(get<bool>, {0x38, 1, 1, 0})
	DMember(bool)                                      WarnIfTimeLimitExceeded                                     OFFSET(get<bool>, {0x38, 1, 1, 1})
	DMember(float)                                     TimeLimitExceededMultiplier                                 OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     TimeLimitExceededMinTime                                    OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   MinBulkDataSizeForAsyncLoading                              OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	DMember(bool)                                      UseBackgroundLevelStreaming                                 OFFSET(get<bool>, {0x48, 1, 1, 0})
	DMember(bool)                                      AsyncLoadingUseFullTimeLimit                                OFFSET(get<bool>, {0x48, 1, 1, 1})
	DMember(float)                                     AsyncLoadingTimeLimit                                       OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     PriorityAsyncLoadingExtraTime                               OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     LevelStreamingActorsUpdateTimeLimit                         OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     PriorityLevelStreamingActorsUpdateExtraTime                 OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(int32_t)                                   LevelStreamingComponentsRegistrationGranularity             OFFSET(get<int32_t>, {0x5C, 4, 0, 0})
	DMember(float)                                     LevelStreamingUnregisterComponentsTimeLimit                 OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(int32_t)                                   LevelStreamingComponentsUnregistrationGranularity           OFFSET(get<int32_t>, {0x64, 4, 0, 0})
	DMember(bool)                                      FlushStreamingOnExit                                        OFFSET(get<bool>, {0x68, 1, 1, 0})
	DMember(bool)                                      EventDrivenLoaderEnabled                                    OFFSET(get<bool>, {0x68, 1, 1, 1})
};

/// Class /Script/Engine.GarbageCollectionSettings
/// Size: 0x0020 (0x000038 - 0x000058)
class UGarbageCollectionSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(float)                                     TimeBetweenPurgingPendingKillObjects                        OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(bool)                                      FlushStreamingOnGC                                          OFFSET(get<bool>, {0x3C, 1, 1, 0})
	DMember(bool)                                      AllowParallelGC                                             OFFSET(get<bool>, {0x3C, 1, 1, 1})
	DMember(bool)                                      IncrementalBeginDestroyEnabled                              OFFSET(get<bool>, {0x3C, 1, 1, 2})
	DMember(bool)                                      MultithreadedDestructionEnabled                             OFFSET(get<bool>, {0x3C, 1, 1, 3})
	DMember(bool)                                      CreateGCClusters                                            OFFSET(get<bool>, {0x3C, 1, 1, 4})
	DMember(bool)                                      AssetClusteringEnabled                                      OFFSET(get<bool>, {0x3C, 1, 1, 5})
	DMember(bool)                                      ActorClusteringEnabled                                      OFFSET(get<bool>, {0x3C, 1, 1, 6})
	DMember(bool)                                      BlueprintClusteringEnabled                                  OFFSET(get<bool>, {0x3C, 1, 1, 7})
	DMember(bool)                                      UseDisregardForGCOnDedicatedServers                         OFFSET(get<bool>, {0x3D, 1, 1, 0})
	DMember(int32_t)                                   MinGCClusterSize                                            OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   NumRetriesBeforeForcingGC                                   OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	DMember(int32_t)                                   MaxObjectsNotConsideredByGC                                 OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(int32_t)                                   SizeOfPermanentObjectPool                                   OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	DMember(int32_t)                                   MaxObjectsInGame                                            OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	DMember(int32_t)                                   MaxObjectsInEditor                                          OFFSET(get<int32_t>, {0x54, 4, 0, 0})
};

/// Struct /Script/Engine.CullDistanceSizePair
/// Size: 0x0008 (0x000000 - 0x000008)
class FCullDistanceSizePair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Size                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     CullDistance                                                OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Class /Script/Engine.CullDistanceVolume
/// Size: 0x0018 (0x000258 - 0x000270)
class ACullDistanceVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	CMember(TArray<FCullDistanceSizePair>)             CullDistances                                               OFFSET(get<T>, {0x258, 16, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x268, 1, 1, 0})
};

/// Class /Script/Engine.CurveBase
/// Size: 0x0008 (0x000028 - 0x000030)
class UCurveBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/Engine.CurveBase.GetValueRange
	// void GetValueRange(float& MinValue, float& MaxValue);                                                                    // [0x32e3ce0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CurveBase.GetTimeRange
	// void GetTimeRange(float& MinTime, float& MaxTime);                                                                       // [0x32e3c00] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CurveEdPresetCurve
/// Size: 0x0000 (0x000028 - 0x000028)
class UCurveEdPresetCurve : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.CurveFloat
/// Size: 0x0088 (0x000030 - 0x0000B8)
class UCurveFloat : public UCurveBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FRichCurve)                                FloatCurve                                                  OFFSET(getStruct<T>, {0x30, 128, 0, 0})
	DMember(bool)                                      bIsEventCurve                                               OFFSET(get<bool>, {0xB0, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.CurveFloat.GetFloatValue
	// float GetFloatValue(float InTime);                                                                                       // [0x32e3b60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CurveLinearColor
/// Size: 0x0220 (0x000030 - 0x000250)
class UCurveLinearColor : public UCurveBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	SMember(FRichCurve)                                FloatCurves                                                 OFFSET(getStruct<T>, {0x30, 512, 0, 0})
	DMember(float)                                     AdjustHue                                                   OFFSET(get<float>, {0x230, 4, 0, 0})
	DMember(float)                                     AdjustSaturation                                            OFFSET(get<float>, {0x234, 4, 0, 0})
	DMember(float)                                     AdjustBrightness                                            OFFSET(get<float>, {0x238, 4, 0, 0})
	DMember(float)                                     AdjustBrightnessCurve                                       OFFSET(get<float>, {0x23C, 4, 0, 0})
	DMember(float)                                     AdjustVibrance                                              OFFSET(get<float>, {0x240, 4, 0, 0})
	DMember(float)                                     AdjustMinAlpha                                              OFFSET(get<float>, {0x244, 4, 0, 0})
	DMember(float)                                     AdjustMaxAlpha                                              OFFSET(get<float>, {0x248, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.CurveLinearColor.GetLinearColorValue
	// FLinearColor GetLinearColorValue(float InTime);                                                                          // [0x32e9390] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CurveLinearColor.GetClampedLinearColorValue
	// FLinearColor GetClampedLinearColorValue(float InTime);                                                                   // [0x32e8b70] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.Texture2D
/// Size: 0x0028 (0x0000D8 - 0x000100)
class UTexture2D : public UTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	DMember(int32_t)                                   LevelIndex                                                  OFFSET(get<int32_t>, {0xD8, 4, 0, 0})
	DMember(int32_t)                                   FirstResourceMemMip                                         OFFSET(get<int32_t>, {0xDC, 4, 0, 0})
	DMember(bool)                                      bTemporarilyDisableStreaming                                OFFSET(get<bool>, {0xE0, 1, 1, 0})
	CMember(TEnumAsByte<TextureAddress>)               AddressX                                                    OFFSET(get<T>, {0xE1, 1, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               AddressY                                                    OFFSET(get<T>, {0xE2, 1, 0, 0})
	SMember(FIntPoint)                                 ImportedSize                                                OFFSET(getStruct<T>, {0xE4, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.Texture2D.Blueprint_GetSizeY
	// int32_t Blueprint_GetSizeY();                                                                                            // [0x340e240] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Texture2D.Blueprint_GetSizeX
	// int32_t Blueprint_GetSizeX();                                                                                            // [0x340e210] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CurveLinearColorAtlas
/// Size: 0x0018 (0x000100 - 0x000118)
class UCurveLinearColorAtlas : public UTexture2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	DMember(uint32_t)                                  TextureSize                                                 OFFSET(get<uint32_t>, {0x100, 4, 0, 0})
	CMember(TArray<class UCurveLinearColor*>)          GradientCurves                                              OFFSET(get<T>, {0x108, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.CurveLinearColorAtlas.GetCurvePosition
	// bool GetCurvePosition(class UCurveLinearColor* InCurve, float& Position);                                                // [0x32e8c10] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.CurveSourceInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UCurveSourceInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.CurveSourceInterface.GetCurveValue
	// float GetCurveValue(FName CurveName);                                                                                    // [0x32e8cf0] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.CurveSourceInterface.GetCurves
	// void GetCurves(TArray<FNamedCurveValue>& OutValues);                                                                     // [0x12012b0] Native|Event|Public|HasOutParms|BlueprintEvent|Const 
	// Function /Script/Engine.CurveSourceInterface.GetBindingName
	// FName GetBindingName();                                                                                                  // [0x32e8b30] Native|Event|Public|BlueprintEvent|Const 
};

/// Class /Script/Engine.CurveVector
/// Size: 0x0180 (0x000030 - 0x0001B0)
class UCurveVector : public UCurveBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	SMember(FRichCurve)                                FloatCurves                                                 OFFSET(getStruct<T>, {0x30, 384, 0, 0})


	/// Functions
	// Function /Script/Engine.CurveVector.GetVectorValue
	// FVector GetVectorValue(float InTime);                                                                                    // [0x32e9460] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DamageType
/// Size: 0x0018 (0x000028 - 0x000040)
class UDamageType : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bCausedByWorld                                              OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(bool)                                      bScaleMomentumByMass                                        OFFSET(get<bool>, {0x28, 1, 1, 1})
	DMember(bool)                                      bRadialDamageVelChange                                      OFFSET(get<bool>, {0x28, 1, 1, 2})
	DMember(float)                                     DamageImpulse                                               OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     DestructibleImpulse                                         OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     DestructibleDamageSpreadScale                               OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     DamageFalloff                                               OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/Engine.DataTableFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.DataTableFunctionLibrary.GetDataTableRowNames
	// void GetDataTableRowNames(class UDataTable* Table, TArray<FName>& OutRowNames);                                          // [0x32e9280] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.DataTableFunctionLibrary.GetDataTableRowFromName
	// bool GetDataTableRowFromName(class UDataTable* Table, FName RowName, FTableRowBase& OutRow);                             // [0x32e8ef0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.DataTableFunctionLibrary.GetDataTableColumnAsString
	// TArray<FString> GetDataTableColumnAsString(class UDataTable* DataTable, FName PropertyName);                             // [0x32e8d90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.DataTableFunctionLibrary.EvaluateCurveTableRow
	// void EvaluateCurveTableRow(class UCurveTable* CurveTable, FName RowName, float InXY, TEnumAsByte<EEvaluateCurveTableResult>& OutResult, float& OutXY, FString ContextString); // [0x32e8930] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.DataTableFunctionLibrary.DoesDataTableRowExist
	// bool DoesDataTableRowExist(class UDataTable* Table, FName RowName);                                                      // [0x32e8860] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.DebugCameraController
/// Size: 0x0108 (0x000570 - 0x000678)
class ADebugCameraController : public APlayerController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1656;

public:
	DMember(bool)                                      bShowSelectedInfo                                           OFFSET(get<bool>, {0x570, 1, 1, 0})
	DMember(bool)                                      bIsFrozenRendering                                          OFFSET(get<bool>, {0x570, 1, 1, 1})
	DMember(bool)                                      bIsOrbitingSelectedActor                                    OFFSET(get<bool>, {0x570, 1, 1, 2})
	DMember(bool)                                      bOrbitPivotUseCenter                                        OFFSET(get<bool>, {0x570, 1, 1, 3})
	DMember(bool)                                      bEnableBufferVisualization                                  OFFSET(get<bool>, {0x570, 1, 1, 4})
	DMember(bool)                                      bEnableBufferVisualizationFullMode                          OFFSET(get<bool>, {0x570, 1, 1, 5})
	DMember(bool)                                      bIsBufferVisualizationInputSetup                            OFFSET(get<bool>, {0x570, 1, 1, 6})
	DMember(bool)                                      bLastDisplayEnabled                                         OFFSET(get<bool>, {0x570, 1, 1, 7})
	CMember(class UDrawFrustumComponent*)              DrawFrustum                                                 OFFSET(get<T>, {0x578, 8, 0, 0})
	CMember(class AActor*)                             SelectedActor                                               OFFSET(get<T>, {0x580, 8, 0, 0})
	CMember(class UPrimitiveComponent*)                SelectedComponent                                           OFFSET(get<T>, {0x588, 8, 0, 0})
	SMember(FHitResult)                                SelectedHitPoint                                            OFFSET(getStruct<T>, {0x590, 140, 0, 0})
	CMember(class APlayerController*)                  OriginalControllerRef                                       OFFSET(get<T>, {0x620, 8, 0, 0})
	CMember(class UPlayer*)                            OriginalPlayer                                              OFFSET(get<T>, {0x628, 8, 0, 0})
	DMember(float)                                     SpeedScale                                                  OFFSET(get<float>, {0x630, 4, 0, 0})
	DMember(float)                                     InitialMaxSpeed                                             OFFSET(get<float>, {0x634, 4, 0, 0})
	DMember(float)                                     InitialAccel                                                OFFSET(get<float>, {0x638, 4, 0, 0})
	DMember(float)                                     InitialDecel                                                OFFSET(get<float>, {0x63C, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.DebugCameraController.ToggleDisplay
	// void ToggleDisplay();                                                                                                    // [0x32e9630] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DebugCameraController.ShowDebugSelectedInfo
	// void ShowDebugSelectedInfo();                                                                                            // [0x32e9610] Exec|Native|Public   
	// Function /Script/Engine.DebugCameraController.SetPawnMovementSpeedScale
	// void SetPawnMovementSpeedScale(float NewSpeedScale);                                                                     // [0x32e9590] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DebugCameraController.ReceiveOnDeactivate
	// void ReceiveOnDeactivate(class APlayerController* RestoredPC);                                                           // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.DebugCameraController.ReceiveOnActorSelected
	// void ReceiveOnActorSelected(class AActor* NewSelectedActor, FVector& SelectHitLocation, FVector& SelectHitNormal, FHitResult& Hit); // [0x198a600] Event|Protected|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.DebugCameraController.ReceiveOnActivate
	// void ReceiveOnActivate(class APlayerController* OriginalPC);                                                             // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.DebugCameraController.GetSelectedActor
	// class AActor* GetSelectedActor();                                                                                        // [0x32e9430] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.DebugCameraControllerSettingsViewModeIndex
/// Size: 0x0010 (0x000000 - 0x000010)
class FDebugCameraControllerSettingsViewModeIndex : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TEnumAsByte<EViewModeIndex>)               ViewModeIndex                                               OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Class /Script/Engine.DebugCameraControllerSettings
/// Size: 0x0010 (0x000038 - 0x000048)
class UDebugCameraControllerSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FDebugCameraControllerSettingsViewModeIndex>) CycleViewModes                                    OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Struct /Script/Engine.DebugTextInfo
/// Size: 0x0060 (0x000000 - 0x000060)
class FDebugTextInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class AActor*)                             SrcActor                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector)                                   SrcActorOffset                                              OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	SMember(FVector)                                   SrcActorDesiredOffset                                       OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	SMember(FString)                                   DebugText                                                   OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	DMember(float)                                     TimeRemaining                                               OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x34, 4, 0, 0})
	SMember(FColor)                                    TextColor                                                   OFFSET(getStruct<T>, {0x38, 4, 0, 0})
	DMember(bool)                                      bAbsoluteLocation                                           OFFSET(get<bool>, {0x3C, 1, 1, 0})
	DMember(bool)                                      bKeepAttachedToActor                                        OFFSET(get<bool>, {0x3C, 1, 1, 1})
	DMember(bool)                                      bDrawShadow                                                 OFFSET(get<bool>, {0x3C, 1, 1, 2})
	SMember(FVector)                                   OrigActorLocation                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	CMember(class UFont*)                              Font                                                        OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(float)                                     FontScale                                                   OFFSET(get<float>, {0x58, 4, 0, 0})
};

/// Class /Script/Engine.HUD
/// Size: 0x00F0 (0x000220 - 0x000310)
class AHUD : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	CMember(class APlayerController*)                  PlayerOwner                                                 OFFSET(get<T>, {0x220, 8, 0, 0})
	DMember(bool)                                      bLostFocusPaused                                            OFFSET(get<bool>, {0x228, 1, 1, 0})
	DMember(bool)                                      bShowHUD                                                    OFFSET(get<bool>, {0x228, 1, 1, 1})
	DMember(bool)                                      bShowDebugInfo                                              OFFSET(get<bool>, {0x228, 1, 1, 2})
	DMember(int32_t)                                   CurrentTargetIndex                                          OFFSET(get<int32_t>, {0x22C, 4, 0, 0})
	DMember(bool)                                      bShowHitBoxDebugInfo                                        OFFSET(get<bool>, {0x230, 1, 1, 0})
	DMember(bool)                                      bShowOverlays                                               OFFSET(get<bool>, {0x230, 1, 1, 1})
	DMember(bool)                                      bEnableDebugTextShadow                                      OFFSET(get<bool>, {0x230, 1, 1, 2})
	CMember(TArray<class AActor*>)                     PostRenderedActors                                          OFFSET(get<T>, {0x238, 16, 0, 0})
	CMember(TArray<FName>)                             DebugDisplay                                                OFFSET(get<T>, {0x250, 16, 0, 0})
	CMember(TArray<FName>)                             ToggledDebugCategories                                      OFFSET(get<T>, {0x260, 16, 0, 0})
	CMember(class UCanvas*)                            Canvas                                                      OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(class UCanvas*)                            DebugCanvas                                                 OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(TArray<FDebugTextInfo>)                    DebugTextList                                               OFFSET(get<T>, {0x280, 16, 0, 0})
	CMember(class UClass*)                             ShowDebugTargetDesiredClass                                 OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class AActor*)                             ShowDebugTargetActor                                        OFFSET(get<T>, {0x298, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.HUD.ShowHUD
	// void ShowHUD();                                                                                                          // [0xc51440] Exec|Native|Public   
	// Function /Script/Engine.HUD.ShowDebugToggleSubCategory
	// void ShowDebugToggleSubCategory(FName Category);                                                                         // [0x3315430] Final|Exec|Native|Public 
	// Function /Script/Engine.HUD.ShowDebugForReticleTargetToggle
	// void ShowDebugForReticleTargetToggle(class UClass* DesiredClass);                                                        // [0x33153a0] Final|Exec|Native|Public 
	// Function /Script/Engine.HUD.ShowDebug
	// void ShowDebug(FName DebugType);                                                                                         // [0x3315310] Exec|Native|Public   
	// Function /Script/Engine.HUD.RemoveDebugText
	// void RemoveDebugText(class AActor* SrcActor, bool bLeaveDurationText);                                                   // [0x33150f0] Final|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.HUD.RemoveAllDebugStrings
	// void RemoveAllDebugStrings();                                                                                            // [0x33150d0] Final|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.HUD.ReceiveHitBoxRelease
	// void ReceiveHitBoxRelease(FName BoxName);                                                                                // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.ReceiveHitBoxEndCursorOver
	// void ReceiveHitBoxEndCursorOver(FName BoxName);                                                                          // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.ReceiveHitBoxClick
	// void ReceiveHitBoxClick(FName BoxName);                                                                                  // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.ReceiveHitBoxBeginCursorOver
	// void ReceiveHitBoxBeginCursorOver(FName BoxName);                                                                        // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.ReceiveDrawHUD
	// void ReceiveDrawHUD(int32_t SizeX, int32_t SizeY);                                                                       // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.Project
	// FVector Project(FVector Location);                                                                                       // [0x3314c20] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.PreviousDebugTarget
	// void PreviousDebugTarget();                                                                                              // [0x3314c00] Exec|Native|Public   
	// Function /Script/Engine.HUD.NextDebugTarget
	// void NextDebugTarget();                                                                                                  // [0x13e1b40] Exec|Native|Public   
	// Function /Script/Engine.HUD.GetTextSize
	// void GetTextSize(FString Text, float& OutWidth, float& OutHeight, class UFont* Font, float Scale);                       // [0x33140e0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.GetOwningPlayerController
	// class APlayerController* GetOwningPlayerController();                                                                    // [0x127f280] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.GetOwningPawn
	// class APawn* GetOwningPawn();                                                                                            // [0x33140b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.GetActorsInSelectionRectangle
	// void GetActorsInSelectionRectangle(class UClass* ClassFilter, FVector2D& FirstPoint, FVector2D& SecondPoint, TArray<AActor*>& OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed); // [0x3313e90] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.HUD.DrawTextureSimple
	// void DrawTextureSimple(class UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);         // [0x3313ce0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawTexture
	// void DrawTexture(class UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, FLinearColor TintColor, TEnumAsByte<EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, FVector2D RotPivot); // [0x3313880] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawText
	// void DrawText(FString Text, FLinearColor TextColor, float ScreenX, float ScreenY, class UFont* Font, float Scale, bool bScalePosition); // [0x3313640] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawRect
	// void DrawRect(FLinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);                       // [0x3313480] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawMaterialTriangle
	// void DrawMaterialTriangle(class UMaterialInterface* Material, FVector2D V0_Pos, FVector2D V1_Pos, FVector2D V2_Pos, FVector2D V0_UV, FVector2D V1_UV, FVector2D V2_UV, FLinearColor V0_Color, FLinearColor V1_Color, FLinearColor V2_Color); // [0x3313190] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawMaterialSimple
	// void DrawMaterialSimple(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition); // [0x3312f70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawMaterial
	// void DrawMaterial(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, FVector2D RotPivot); // [0x3312ba0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawLine
	// void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, FLinearColor LineColor, float LineThickness); // [0x33129a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.Deproject
	// void Deproject(float ScreenX, float ScreenY, FVector& WorldPosition, FVector& WorldDirection);                           // [0x3312820] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.AddHitBox
	// void AddHitBox(FVector2D Position, FVector2D Size, FName InName, bool bConsumesInput, int32_t Priority);                 // [0x3312500] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.AddDebugText
	// void AddDebugText(FString DebugText, class AActor* SrcActor, float Duration, FVector Offset, FVector DesiredOffset, FColor TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale, bool bDrawShadow); // [0x3312140] Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
};

/// Class /Script/Engine.DebugCameraHUD
/// Size: 0x0000 (0x000310 - 0x000310)
class ADebugCameraHUD : public AHUD
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
};

/// Class /Script/Engine.DebugDrawService
/// Size: 0x0000 (0x000028 - 0x000028)
class UDebugDrawService : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.DecalActor
/// Size: 0x0008 (0x000220 - 0x000228)
class ADecalActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(class UDecalComponent*)                    Decal                                                       OFFSET(get<T>, {0x220, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.DecalActor.SetDecalMaterial
	// void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);                                                       // [0x32e9500] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalActor.GetDecalMaterial
	// class UMaterialInterface* GetDecalMaterial();                                                                            // [0x32e9360] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalActor.CreateDynamicMaterialInstance
	// class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();                                                         // [0x32e8830] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.DecalComponent
/// Size: 0x0048 (0x0001F8 - 0x000240)
class UDecalComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(class UMaterialInterface*)                 DecalMaterial                                               OFFSET(get<T>, {0x1F8, 8, 0, 0})
	DMember(int32_t)                                   SortOrder                                                   OFFSET(get<int32_t>, {0x200, 4, 0, 0})
	DMember(float)                                     FadeScreenSize                                              OFFSET(get<float>, {0x204, 4, 0, 0})
	DMember(float)                                     FadeStartDelay                                              OFFSET(get<float>, {0x208, 4, 0, 0})
	DMember(float)                                     FadeDuration                                                OFFSET(get<float>, {0x20C, 4, 0, 0})
	DMember(float)                                     FadeInDuration                                              OFFSET(get<float>, {0x210, 4, 0, 0})
	DMember(float)                                     FadeInStartDelay                                            OFFSET(get<float>, {0x214, 4, 0, 0})
	DMember(bool)                                      bDestroyOwnerAfterFade                                      OFFSET(get<bool>, {0x218, 1, 1, 0})
	SMember(FVector)                                   DecalSize                                                   OFFSET(getStruct<T>, {0x21C, 12, 0, 0})


	/// Functions
	// Function /Script/Engine.DecalComponent.SetSortOrder
	// void SetSortOrder(int32_t Value);                                                                                        // [0x32ed130] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.SetFadeScreenSize
	// void SetFadeScreenSize(float NewFadeScreenSize);                                                                         // [0x32ecea0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.SetFadeOut
	// void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);                                           // [0x32ecd80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.SetFadeIn
	// void SetFadeIn(float StartDelay, float Duaration);                                                                       // [0x32eccb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.SetDecalMaterial
	// void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);                                                       // [0x32eca00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.GetFadeStartDelay
	// float GetFadeStartDelay();                                                                                               // [0x32ec570] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.GetFadeInStartDelay
	// float GetFadeInStartDelay();                                                                                             // [0x32ec540] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.GetFadeInDuration
	// float GetFadeInDuration();                                                                                               // [0x32ec510] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.GetFadeDuration
	// float GetFadeDuration();                                                                                                 // [0x32ec4e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.GetDecalMaterial
	// class UMaterialInterface* GetDecalMaterial();                                                                            // [0x32ec4b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.CreateDynamicMaterialInstance
	// class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();                                                         // [0x32ec480] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.DefaultPawn
/// Size: 0x0028 (0x000280 - 0x0002A8)
class ADefaultPawn : public APawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	DMember(float)                                     BaseTurnRate                                                OFFSET(get<float>, {0x280, 4, 0, 0})
	DMember(float)                                     BaseLookUpRate                                              OFFSET(get<float>, {0x284, 4, 0, 0})
	CMember(class UPawnMovementComponent*)             MovementComponent                                           OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class USphereComponent*)                   CollisionComponent                                          OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               MeshComponent                                               OFFSET(get<T>, {0x298, 8, 0, 0})
	DMember(bool)                                      bAddDefaultMovementBindings                                 OFFSET(get<bool>, {0x2A0, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.DefaultPawn.TurnAtRate
	// void TurnAtRate(float Rate);                                                                                             // [0x32ed1c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.DefaultPawn.MoveUp_World
	// void MoveUp_World(float Val);                                                                                            // [0x32ec750] Native|Public|BlueprintCallable 
	// Function /Script/Engine.DefaultPawn.MoveRight
	// void MoveRight(float Val);                                                                                               // [0x32ec6c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.DefaultPawn.MoveForward
	// void MoveForward(float Val);                                                                                             // [0x32ec630] Native|Public|BlueprintCallable 
	// Function /Script/Engine.DefaultPawn.LookUpAtRate
	// void LookUpAtRate(float Rate);                                                                                           // [0x32ec5a0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PhysicsVolume
/// Size: 0x0010 (0x000258 - 0x000268)
class APhysicsVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	DMember(float)                                     TerminalVelocity                                            OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0x25C, 4, 0, 0})
	DMember(float)                                     FluidFriction                                               OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(bool)                                      bWaterVolume                                                OFFSET(get<bool>, {0x264, 1, 1, 0})
	DMember(bool)                                      bPhysicsOnContact                                           OFFSET(get<bool>, {0x264, 1, 1, 1})
};

/// Class /Script/Engine.DefaultPhysicsVolume
/// Size: 0x0000 (0x000268 - 0x000268)
class ADefaultPhysicsVolume : public APhysicsVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
};

/// Class /Script/Engine.DemoNetConnection
/// Size: 0x0070 (0x001AF0 - 0x001B60)
class UDemoNetConnection : public UNetConnection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 7008;

public:
};

/// Struct /Script/Engine.RollbackNetStartupActorInfo
/// Size: 0x00B0 (0x000000 - 0x0000B0)
class FRollbackNetStartupActorInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(class UObject*)                            Archetype                                                   OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class ULevel*)                             Level                                                       OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TArray<class UObject*>)                    ObjReferences                                               OFFSET(get<T>, {0xA0, 16, 0, 0})
};

/// Struct /Script/Engine.MulticastRecordOptions
/// Size: 0x0018 (0x000000 - 0x000018)
class FMulticastRecordOptions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   FuncPathName                                                OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      bServerSkip                                                 OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(bool)                                      bClientSkip                                                 OFFSET(get<bool>, {0x11, 1, 0, 0})
};

/// Class /Script/Engine.DemoNetDriver
/// Size: 0x0B78 (0x000748 - 0x0012C0)
class UDemoNetDriver : public UNetDriver
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 4800;

public:
	CMember(TMap<FString, FRollbackNetStartupActorInfo>) RollbackNetStartupActors                                  OFFSET(get<T>, {0x840, 80, 0, 0})
	DMember(float)                                     CheckpointSaveMaxMSPerFrame                                 OFFSET(get<float>, {0x9EC, 4, 0, 0})
	CMember(TArray<FMulticastRecordOptions>)           MulticastRecordOptions                                      OFFSET(get<T>, {0xA10, 16, 0, 0})
	DMember(bool)                                      bIsLocalReplay                                              OFFSET(get<bool>, {0xA20, 1, 0, 0})
	CMember(TArray<class APlayerController*>)          SpectatorControllers                                        OFFSET(get<T>, {0xA28, 16, 0, 0})
};

/// Class /Script/Engine.PendingNetGame
/// Size: 0x0098 (0x000028 - 0x0000C0)
class UPendingNetGame : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(class UNetDriver*)                         NetDriver                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UDemoNetDriver*)                     DemoNetDriver                                               OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Engine.DemoPendingNetGame
/// Size: 0x0000 (0x0000C0 - 0x0000C0)
class UDemoPendingNetGame : public UPendingNetGame
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
};

/// Class /Script/Engine.DestructibleInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UDestructibleInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Engine.TextureLODGroup
/// Size: 0x0064 (0x000000 - 0x000064)
class FTextureLODGroup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 100;

public:
	CMember(TEnumAsByte<TextureGroup>)                 Group                                                       OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   LODBias                                                     OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   LODBias_Smaller                                             OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   LODBias_Smallest                                            OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   NumStreamedMips                                             OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	CMember(TEnumAsByte<TextureMipGenSettings>)        MipGenSettings                                              OFFSET(get<T>, {0x20, 1, 0, 0})
	DMember(int32_t)                                   MinLODSize                                                  OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   MaxLODSize                                                  OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   MaxLODSize_Smaller                                          OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(int32_t)                                   MaxLODSize_Smallest                                         OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   OptionalLODBias                                             OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   OptionalMaxLODSize                                          OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	SMember(FName)                                     MinMagFilter                                                OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FName)                                     MipFilter                                                   OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	CMember(ETextureMipLoadOptions)                    MipLoadOptions                                              OFFSET(get<T>, {0x50, 1, 0, 0})
	DMember(bool)                                      DuplicateNonOptionalMips                                    OFFSET(get<bool>, {0x51, 1, 0, 0})
	DMember(float)                                     Downscale                                                   OFFSET(get<float>, {0x54, 4, 0, 0})
	CMember(ETextureDownscaleOptions)                  DownscaleOptions                                            OFFSET(get<T>, {0x58, 1, 0, 0})
	DMember(int32_t)                                   VirtualTextureTileCountBias                                 OFFSET(get<int32_t>, {0x5C, 4, 0, 0})
	DMember(int32_t)                                   VirtualTextureTileSizeBias                                  OFFSET(get<int32_t>, {0x60, 4, 0, 0})
};

/// Class /Script/Engine.TextureLODSettings
/// Size: 0x0010 (0x000028 - 0x000038)
class UTextureLODSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FTextureLODGroup>)                  TextureLODGroups                                            OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.DeviceProfile
/// Size: 0x0070 (0x000038 - 0x0000A8)
class UDeviceProfile : public UTextureLODSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FString)                                   DeviceType                                                  OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	SMember(FString)                                   BaseProfileName                                             OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	CMember(class UObject*)                            Parent                                                      OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(TArray<FString>)                           CVars                                                       OFFSET(get<T>, {0x88, 16, 0, 0})
};

/// Class /Script/Engine.DeviceProfileFragment
/// Size: 0x0010 (0x000028 - 0x000038)
class UDeviceProfileFragment : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.DeviceProfileManager
/// Size: 0x0088 (0x000028 - 0x0000B0)
class UDeviceProfileManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(TArray<class UObject*>)                    Profiles                                                    OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.DialogueSoundWaveProxy
/// Size: 0x0018 (0x0001B8 - 0x0001D0)
class UDialogueSoundWaveProxy : public USoundBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
};

/// Class /Script/Engine.DialogueVoice
/// Size: 0x0018 (0x000028 - 0x000040)
class UDialogueVoice : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TEnumAsByte<EGrammaticalGender>)           Gender                                                      OFFSET(get<T>, {0x28, 1, 0, 0})
	CMember(TEnumAsByte<EGrammaticalNumber>)           Plurality                                                   OFFSET(get<T>, {0x29, 1, 0, 0})
	SMember(FGuid)                                     LocalizationGUID                                            OFFSET(getStruct<T>, {0x2C, 16, 0, 0})
};

/// Struct /Script/Engine.DialogueContext
/// Size: 0x0018 (0x000000 - 0x000018)
class FDialogueContext : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UDialogueVoice*)                     Speaker                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<class UDialogueVoice*>)             Targets                                                     OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.DialogueContextMapping
/// Size: 0x0038 (0x000000 - 0x000038)
class FDialogueContextMapping : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FDialogueContext)                          Context                                                     OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	CMember(class USoundWave*)                         SoundWave                                                   OFFSET(get<T>, {0x18, 8, 0, 0})
	SMember(FString)                                   LocalizationKeyFormat                                       OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	CMember(class UDialogueSoundWaveProxy*)            Proxy                                                       OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/Engine.DialogueWave
/// Size: 0x0048 (0x000028 - 0x000070)
class UDialogueWave : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(bool)                                      bMature                                                     OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(bool)                                      bOverride_SubtitleOverride                                  OFFSET(get<bool>, {0x28, 1, 1, 1})
	SMember(FString)                                   SpokenText                                                  OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   SubtitleOverride                                            OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(TArray<FDialogueContextMapping>)           ContextMappings                                             OFFSET(get<T>, {0x50, 16, 0, 0})
	SMember(FGuid)                                     LocalizationGUID                                            OFFSET(getStruct<T>, {0x60, 16, 0, 0})
};

/// Class /Script/Engine.Light
/// Size: 0x0010 (0x000220 - 0x000230)
class ALight : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(class ULightComponent*)                    LightComponent                                              OFFSET(get<T>, {0x220, 8, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x228, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.Light.ToggleEnabled
	// void ToggleEnabled();                                                                                                    // [0x3383b00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetLightFunctionScale
	// void SetLightFunctionScale(FVector NewLightFunctionScale);                                                               // [0x3383360] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Light.SetLightFunctionMaterial
	// void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);                                       // [0x3383240] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetLightFunctionFadeDistance
	// void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);                                                   // [0x3383140] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetLightColor
	// void SetLightColor(FLinearColor NewLightColor);                                                                          // [0x3382f50] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Light.SetEnabled
	// void SetEnabled(bool bSetEnabled);                                                                                       // [0x3382b00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetCastShadows
	// void SetCastShadows(bool bNewValue);                                                                                     // [0x33826e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetBrightness
	// void SetBrightness(float NewBrightness);                                                                                 // [0x3382540] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetAffectTranslucentLighting
	// void SetAffectTranslucentLighting(bool bNewValue);                                                                       // [0x3382220] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.OnRep_bEnabled
	// void OnRep_bEnabled();                                                                                                   // [0xc51440] Native|Public        
	// Function /Script/Engine.Light.IsEnabled
	// bool IsEnabled();                                                                                                        // [0x3381a30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Light.GetLightColor
	// FLinearColor GetLightColor();                                                                                            // [0x3381970] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Light.GetBrightness
	// float GetBrightness();                                                                                                   // [0x33818e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DirectionalLight
/// Size: 0x0000 (0x000230 - 0x000230)
class ADirectionalLight : public ALight
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
};

/// Class /Script/Engine.LightComponentBase
/// Size: 0x0038 (0x0001F8 - 0x000230)
class ULightComponentBase : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	SMember(FGuid)                                     LightGuid                                                   OFFSET(getStruct<T>, {0x1F8, 16, 0, 0})
	DMember(float)                                     Brightness                                                  OFFSET(get<float>, {0x208, 4, 0, 0})
	DMember(float)                                     Intensity                                                   OFFSET(get<float>, {0x20C, 4, 0, 0})
	SMember(FColor)                                    LightColor                                                  OFFSET(getStruct<T>, {0x210, 4, 0, 0})
	DMember(bool)                                      bAffectsWorld                                               OFFSET(get<bool>, {0x214, 1, 1, 0})
	DMember(bool)                                      CastShadows                                                 OFFSET(get<bool>, {0x214, 1, 1, 1})
	DMember(bool)                                      CastStaticShadows                                           OFFSET(get<bool>, {0x214, 1, 1, 2})
	DMember(bool)                                      CastDynamicShadows                                          OFFSET(get<bool>, {0x214, 1, 1, 3})
	DMember(bool)                                      bAffectTranslucentLighting                                  OFFSET(get<bool>, {0x214, 1, 1, 4})
	DMember(bool)                                      bTransmission                                               OFFSET(get<bool>, {0x214, 1, 1, 5})
	DMember(bool)                                      bCastVolumetricShadow                                       OFFSET(get<bool>, {0x214, 1, 1, 6})
	DMember(bool)                                      bCastDeepShadow                                             OFFSET(get<bool>, {0x214, 1, 1, 7})
	DMember(bool)                                      bCastRaytracedShadow                                        OFFSET(get<bool>, {0x215, 1, 1, 0})
	DMember(bool)                                      bAffectReflection                                           OFFSET(get<bool>, {0x215, 1, 1, 1})
	DMember(bool)                                      bAffectGlobalIllumination                                   OFFSET(get<bool>, {0x215, 1, 1, 2})
	DMember(float)                                     DeepShadowLayerDistribution                                 OFFSET(get<float>, {0x218, 4, 0, 0})
	DMember(float)                                     IndirectLightingIntensity                                   OFFSET(get<float>, {0x21C, 4, 0, 0})
	DMember(float)                                     VolumetricScatteringIntensity                               OFFSET(get<float>, {0x220, 4, 0, 0})
	DMember(int32_t)                                   SamplesPerPixel                                             OFFSET(get<int32_t>, {0x224, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.LightComponentBase.SetSamplesPerPixel
	// void SetSamplesPerPixel(int32_t NewValue);                                                                               // [0x3383640] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetCastVolumetricShadow
	// void SetCastVolumetricShadow(bool bNewValue);                                                                            // [0x3382800] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetCastShadows
	// void SetCastShadows(bool bNewValue);                                                                                     // [0x3382770] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetCastRaytracedShadow
	// void SetCastRaytracedShadow(bool bNewValue);                                                                             // [0x3382650] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetCastDeepShadow
	// void SetCastDeepShadow(bool bNewValue);                                                                                  // [0x33825c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetAffectReflection
	// void SetAffectReflection(bool bNewValue);                                                                                // [0x3382190] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetAffectGlobalIllumination
	// void SetAffectGlobalIllumination(bool bNewValue);                                                                        // [0x3382100] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.GetLightColor
	// FLinearColor GetLightColor();                                                                                            // [0x33819b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.LightComponent
/// Size: 0x0108 (0x000228 - 0x000330)
class ULightComponent : public ULightComponentBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	DMember(float)                                     Temperature                                                 OFFSET(get<float>, {0x228, 4, 0, 0})
	DMember(float)                                     MaxDrawDistance                                             OFFSET(get<float>, {0x22C, 4, 0, 0})
	DMember(float)                                     MaxDistanceFadeRange                                        OFFSET(get<float>, {0x230, 4, 0, 0})
	DMember(bool)                                      bUseTemperature                                             OFFSET(get<bool>, {0x234, 1, 1, 0})
	DMember(int32_t)                                   ShadowMapChannel                                            OFFSET(get<int32_t>, {0x238, 4, 0, 0})
	DMember(float)                                     MinRoughness                                                OFFSET(get<float>, {0x240, 4, 0, 0})
	DMember(float)                                     SpecularScale                                               OFFSET(get<float>, {0x244, 4, 0, 0})
	DMember(float)                                     ShadowResolutionScale                                       OFFSET(get<float>, {0x248, 4, 0, 0})
	DMember(float)                                     ShadowBias                                                  OFFSET(get<float>, {0x24C, 4, 0, 0})
	DMember(float)                                     ShadowSlopeBias                                             OFFSET(get<float>, {0x250, 4, 0, 0})
	DMember(float)                                     ShadowSharpen                                               OFFSET(get<float>, {0x254, 4, 0, 0})
	DMember(float)                                     ContactShadowLength                                         OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(bool)                                      ContactShadowLengthInWS                                     OFFSET(get<bool>, {0x25C, 1, 1, 0})
	DMember(bool)                                      InverseSquaredFalloff                                       OFFSET(get<bool>, {0x25C, 1, 1, 1})
	DMember(bool)                                      CastTranslucentShadows                                      OFFSET(get<bool>, {0x25C, 1, 1, 2})
	DMember(bool)                                      bCastShadowsFromCinematicObjectsOnly                        OFFSET(get<bool>, {0x25C, 1, 1, 3})
	DMember(bool)                                      bAffectDynamicIndirectLighting                              OFFSET(get<bool>, {0x25C, 1, 1, 4})
	DMember(bool)                                      bForceCachedShadowsForMovablePrimitives                     OFFSET(get<bool>, {0x25C, 1, 1, 5})
	DMember(bool)                                      bVisibleInReflectionCaptures                                OFFSET(get<bool>, {0x260, 1, 1, 0})
	SMember(FLightingChannels)                         LightingChannels                                            OFFSET(getStruct<T>, {0x261, 1, 0, 0})
	CMember(class UMaterialInterface*)                 LightFunctionMaterial                                       OFFSET(get<T>, {0x268, 8, 0, 0})
	SMember(FVector)                                   LightFunctionScale                                          OFFSET(getStruct<T>, {0x270, 12, 0, 0})
	CMember(class UTextureLightProfile*)               IESTexture                                                  OFFSET(get<T>, {0x280, 8, 0, 0})
	DMember(bool)                                      bUseIESBrightness                                           OFFSET(get<bool>, {0x288, 1, 1, 0})
	DMember(float)                                     IESBrightnessScale                                          OFFSET(get<float>, {0x28C, 4, 0, 0})
	DMember(float)                                     LightFunctionFadeDistance                                   OFFSET(get<float>, {0x290, 4, 0, 0})
	DMember(float)                                     DisabledBrightness                                          OFFSET(get<float>, {0x294, 4, 0, 0})
	DMember(bool)                                      bEnableLightShaftBloom                                      OFFSET(get<bool>, {0x298, 1, 1, 0})
	DMember(float)                                     BloomScale                                                  OFFSET(get<float>, {0x29C, 4, 0, 0})
	DMember(float)                                     BloomThreshold                                              OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(float)                                     BloomMaxBrightness                                          OFFSET(get<float>, {0x2A4, 4, 0, 0})
	SMember(FColor)                                    BloomTint                                                   OFFSET(getStruct<T>, {0x2A8, 4, 0, 0})
	DMember(bool)                                      bUseRayTracedDistanceFieldShadows                           OFFSET(get<bool>, {0x2AC, 1, 0, 0})
	DMember(float)                                     RayStartOffsetDepthScale                                    OFFSET(get<float>, {0x2B0, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.LightComponent.SetVolumetricScatteringIntensity
	// void SetVolumetricScatteringIntensity(float NewIntensity);                                                               // [0x3383a80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetUseIESBrightness
	// void SetUseIESBrightness(bool bNewValue);                                                                                // [0x33839f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetTransmission
	// void SetTransmission(bool bNewValue);                                                                                    // [0x3383960] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetTemperature
	// void SetTemperature(float NewTemperature);                                                                               // [0x33838e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetSpecularScale
	// void SetSpecularScale(float NewValue);                                                                                   // [0x3383860] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetShadowSlopeBias
	// void SetShadowSlopeBias(float NewValue);                                                                                 // [0x3383750] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetShadowBias
	// void SetShadowBias(float NewValue);                                                                                      // [0x33836d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightingChannels
	// void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);                                                // [0x3383480] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightFunctionScale
	// void SetLightFunctionScale(FVector NewLightFunctionScale);                                                               // [0x33833f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightFunctionMaterial
	// void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);                                       // [0x33832d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightFunctionFadeDistance
	// void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);                                                   // [0x33831c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightFunctionDisabledBrightness
	// void SetLightFunctionDisabledBrightness(float NewValue);                                                                 // [0x33830c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightColor
	// void SetLightColor(FLinearColor NewLightColor, bool bSRGB);                                                              // [0x3382fe0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetIntensity
	// void SetIntensity(float NewIntensity);                                                                                   // [0x3382db0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetIndirectLightingIntensity
	// void SetIndirectLightingIntensity(float NewIntensity);                                                                   // [0x3382d30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetIESTexture
	// void SetIESTexture(class UTextureLightProfile* NewValue);                                                                // [0x3382ca0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetIESBrightnessScale
	// void SetIESBrightnessScale(float NewValue);                                                                              // [0x3382c20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives
	// void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);                                                          // [0x3382b90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetEnableLightShaftBloom
	// void SetEnableLightShaftBloom(bool bNewValue);                                                                           // [0x3382a70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetBloomTint
	// void SetBloomTint(FColor NewValue);                                                                                      // [0x33824c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetBloomThreshold
	// void SetBloomThreshold(float NewValue);                                                                                  // [0x3382440] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetBloomScale
	// void SetBloomScale(float NewValue);                                                                                      // [0x33823c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetBloomMaxBrightness
	// void SetBloomMaxBrightness(float NewValue);                                                                              // [0x3382340] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetAffectTranslucentLighting
	// void SetAffectTranslucentLighting(bool bNewValue);                                                                       // [0x33822b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetAffectDynamicIndirectLighting
	// void SetAffectDynamicIndirectLighting(bool bNewValue);                                                                   // [0x3382070] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.LightmassLightSettings
/// Size: 0x000C (0x000000 - 0x00000C)
class FLightmassLightSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     IndirectLightingSaturation                                  OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     ShadowExponent                                              OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(bool)                                      bUseAreaShadowsForStationaryLight                           OFFSET(get<bool>, {0x8, 1, 0, 0})
};

/// Struct /Script/Engine.LightmassDirectionalLightSettings
/// Size: 0x0004 (0x00000C - 0x000010)
class FLightmassDirectionalLightSettings : public FLightmassLightSettings
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     LightSourceAngle                                            OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Class /Script/Engine.DirectionalLightComponent
/// Size: 0x00C8 (0x000328 - 0x0003F0)
class UDirectionalLightComponent : public ULightComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	DMember(float)                                     ShadowCascadeBiasDistribution                               OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(bool)                                      bEnableLightShaftOcclusion                                  OFFSET(get<bool>, {0x32C, 1, 1, 0})
	DMember(float)                                     OcclusionMaskDarkness                                       OFFSET(get<float>, {0x330, 4, 0, 0})
	DMember(float)                                     OcclusionDepthRange                                         OFFSET(get<float>, {0x334, 4, 0, 0})
	SMember(FVector)                                   LightShaftOverrideDirection                                 OFFSET(getStruct<T>, {0x338, 12, 0, 0})
	DMember(float)                                     WholeSceneDynamicShadowRadius                               OFFSET(get<float>, {0x344, 4, 0, 0})
	DMember(float)                                     DynamicShadowDistanceMovableLight                           OFFSET(get<float>, {0x348, 4, 0, 0})
	DMember(float)                                     DynamicShadowDistanceStationaryLight                        OFFSET(get<float>, {0x34C, 4, 0, 0})
	DMember(int32_t)                                   DynamicShadowCascades                                       OFFSET(get<int32_t>, {0x350, 4, 0, 0})
	DMember(float)                                     CascadeDistributionExponent                                 OFFSET(get<float>, {0x354, 4, 0, 0})
	DMember(float)                                     CascadeTransitionFraction                                   OFFSET(get<float>, {0x358, 4, 0, 0})
	DMember(float)                                     ShadowDistanceFadeoutFraction                               OFFSET(get<float>, {0x35C, 4, 0, 0})
	DMember(bool)                                      bUseInsetShadowsForMovableObjects                           OFFSET(get<bool>, {0x360, 1, 1, 0})
	DMember(int32_t)                                   FarShadowCascadeCount                                       OFFSET(get<int32_t>, {0x364, 4, 0, 0})
	DMember(float)                                     FarShadowDistance                                           OFFSET(get<float>, {0x368, 4, 0, 0})
	DMember(float)                                     DistanceFieldShadowDistance                                 OFFSET(get<float>, {0x36C, 4, 0, 0})
	DMember(float)                                     LightSourceAngle                                            OFFSET(get<float>, {0x370, 4, 0, 0})
	DMember(float)                                     LightSourceSoftAngle                                        OFFSET(get<float>, {0x374, 4, 0, 0})
	DMember(float)                                     ShadowSourceAngleFactor                                     OFFSET(get<float>, {0x378, 4, 0, 0})
	DMember(float)                                     TraceDistance                                               OFFSET(get<float>, {0x37C, 4, 0, 0})
	DMember(bool)                                      bUsedAsAtmosphereSunLight                                   OFFSET(get<bool>, {0x380, 1, 1, 0})
	DMember(int32_t)                                   AtmosphereSunLightIndex                                     OFFSET(get<int32_t>, {0x384, 4, 0, 0})
	SMember(FLinearColor)                              AtmosphereSunDiskColorScale                                 OFFSET(getStruct<T>, {0x388, 16, 0, 0})
	DMember(bool)                                      bPerPixelAtmosphereTransmittance                            OFFSET(get<bool>, {0x398, 1, 1, 0})
	DMember(bool)                                      bCastShadowsOnClouds                                        OFFSET(get<bool>, {0x398, 1, 1, 1})
	DMember(bool)                                      bCastShadowsOnAtmosphere                                    OFFSET(get<bool>, {0x398, 1, 1, 2})
	DMember(bool)                                      bCastCloudShadows                                           OFFSET(get<bool>, {0x398, 1, 1, 3})
	DMember(float)                                     CloudShadowStrength                                         OFFSET(get<float>, {0x39C, 4, 0, 0})
	DMember(float)                                     CloudShadowOnAtmosphereStrength                             OFFSET(get<float>, {0x3A0, 4, 0, 0})
	DMember(float)                                     CloudShadowOnSurfaceStrength                                OFFSET(get<float>, {0x3A4, 4, 0, 0})
	DMember(float)                                     CloudShadowDepthBias                                        OFFSET(get<float>, {0x3A8, 4, 0, 0})
	DMember(float)                                     CloudShadowExtent                                           OFFSET(get<float>, {0x3AC, 4, 0, 0})
	DMember(float)                                     CloudShadowMapResolutionScale                               OFFSET(get<float>, {0x3B0, 4, 0, 0})
	DMember(float)                                     CloudShadowRaySampleCountScale                              OFFSET(get<float>, {0x3B4, 4, 0, 0})
	SMember(FLinearColor)                              CloudScatteredLuminanceScale                                OFFSET(getStruct<T>, {0x3B8, 16, 0, 0})
	SMember(FLightmassDirectionalLightSettings)        LightmassSettings                                           OFFSET(getStruct<T>, {0x3C8, 16, 0, 0})
	DMember(bool)                                      bCastModulatedShadows                                       OFFSET(get<bool>, {0x3D8, 1, 1, 0})
	SMember(FColor)                                    ModulatedShadowColor                                        OFFSET(getStruct<T>, {0x3DC, 4, 0, 0})
	DMember(float)                                     ShadowAmount                                                OFFSET(get<float>, {0x3E0, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction
	// void SetShadowDistanceFadeoutFraction(float NewValue);                                                                   // [0x32ed0b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetShadowAmount
	// void SetShadowAmount(float NewValue);                                                                                    // [0x32ed030] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetOcclusionMaskDarkness
	// void SetOcclusionMaskDarkness(float NewValue);                                                                           // [0x32ecfb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetLightShaftOverrideDirection
	// void SetLightShaftOverrideDirection(FVector NewValue);                                                                   // [0x32ecf20] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion
	// void SetEnableLightShaftOcclusion(bool bNewValue);                                                                       // [0x32ecc20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight
	// void SetDynamicShadowDistanceStationaryLight(float NewValue);                                                            // [0x32ecba0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight
	// void SetDynamicShadowDistanceMovableLight(float NewValue);                                                               // [0x32ecb20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetDynamicShadowCascades
	// void SetDynamicShadowCascades(int32_t NewValue);                                                                         // [0x32eca90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetCascadeTransitionFraction
	// void SetCascadeTransitionFraction(float NewValue);                                                                       // [0x32ec980] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetCascadeDistributionExponent
	// void SetCascadeDistributionExponent(float NewValue);                                                                     // [0x32ec900] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetAtmosphereSunLightIndex
	// void SetAtmosphereSunLightIndex(int32_t NewValue);                                                                       // [0x32ec870] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetAtmosphereSunLight
	// void SetAtmosphereSunLight(bool bNewValue);                                                                              // [0x32ec7e0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.Distribution
/// Size: 0x0008 (0x000028 - 0x000030)
class UDistribution : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.DistributionFloat
/// Size: 0x0008 (0x000030 - 0x000038)
class UDistributionFloat : public UDistribution
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bCanBeBaked                                                 OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bBakedDataSuccesfully                                       OFFSET(get<bool>, {0x30, 1, 1, 2})
};

/// Class /Script/Engine.DistributionFloatConstant
/// Size: 0x0008 (0x000038 - 0x000040)
class UDistributionFloatConstant : public UDistributionFloat
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     Constant                                                    OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/Engine.DistributionFloatConstantCurve
/// Size: 0x0018 (0x000038 - 0x000050)
class UDistributionFloatConstantCurve : public UDistributionFloat
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FInterpCurveFloat)                         ConstantCurve                                               OFFSET(getStruct<T>, {0x38, 24, 0, 0})
};

/// Class /Script/Engine.DistributionFloatParameterBase
/// Size: 0x0020 (0x000040 - 0x000060)
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	DMember(float)                                     MinInput                                                    OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     MaxInput                                                    OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     MinOutput                                                   OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     MaxOutput                                                   OFFSET(get<float>, {0x54, 4, 0, 0})
	CMember(TEnumAsByte<DistributionParamMode>)        ParamMode                                                   OFFSET(get<T>, {0x58, 1, 0, 0})
};

/// Class /Script/Engine.DistributionFloatParticleParameter
/// Size: 0x0000 (0x000060 - 0x000060)
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Class /Script/Engine.DistributionFloatUniform
/// Size: 0x0008 (0x000038 - 0x000040)
class UDistributionFloatUniform : public UDistributionFloat
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     Min                                                         OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     Max                                                         OFFSET(get<float>, {0x3C, 4, 0, 0})
};

/// Class /Script/Engine.DistributionFloatUniformCurve
/// Size: 0x0018 (0x000038 - 0x000050)
class UDistributionFloatUniformCurve : public UDistributionFloat
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FInterpCurveVector2D)                      ConstantCurve                                               OFFSET(getStruct<T>, {0x38, 24, 0, 0})
};

/// Class /Script/Engine.DistributionVector
/// Size: 0x0008 (0x000030 - 0x000038)
class UDistributionVector : public UDistribution
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bCanBeBaked                                                 OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bIsDirty                                                    OFFSET(get<bool>, {0x30, 1, 1, 1})
	DMember(bool)                                      bBakedDataSuccesfully                                       OFFSET(get<bool>, {0x30, 1, 1, 2})
};

/// Class /Script/Engine.DistributionVectorConstant
/// Size: 0x0018 (0x000038 - 0x000050)
class UDistributionVectorConstant : public UDistributionVector
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FVector)                                   Constant                                                    OFFSET(getStruct<T>, {0x38, 12, 0, 0})
	DMember(bool)                                      bLockAxes                                                   OFFSET(get<bool>, {0x44, 1, 1, 0})
	CMember(TEnumAsByte<EDistributionVectorLockFlags>) LockedAxes                                                  OFFSET(get<T>, {0x48, 1, 0, 0})
};

/// Class /Script/Engine.DistributionVectorConstantCurve
/// Size: 0x0020 (0x000038 - 0x000058)
class UDistributionVectorConstantCurve : public UDistributionVector
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FInterpCurveVector)                        ConstantCurve                                               OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	DMember(bool)                                      bLockAxes                                                   OFFSET(get<bool>, {0x50, 1, 1, 0})
	CMember(TEnumAsByte<EDistributionVectorLockFlags>) LockedAxes                                                  OFFSET(get<T>, {0x54, 1, 0, 0})
};

/// Class /Script/Engine.DistributionVectorParameterBase
/// Size: 0x0040 (0x000050 - 0x000090)
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	SMember(FVector)                                   MinInput                                                    OFFSET(getStruct<T>, {0x58, 12, 0, 0})
	SMember(FVector)                                   MaxInput                                                    OFFSET(getStruct<T>, {0x64, 12, 0, 0})
	SMember(FVector)                                   MinOutput                                                   OFFSET(getStruct<T>, {0x70, 12, 0, 0})
	SMember(FVector)                                   MaxOutput                                                   OFFSET(getStruct<T>, {0x7C, 12, 0, 0})
	CMember(TEnumAsByte<DistributionParamMode>)        ParamModes                                                  OFFSET(get<T>, {0x88, 3, 0, 0})
};

/// Class /Script/Engine.DistributionVectorParticleParameter
/// Size: 0x0000 (0x000090 - 0x000090)
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Class /Script/Engine.DistributionVectorUniform
/// Size: 0x0028 (0x000038 - 0x000060)
class UDistributionVectorUniform : public UDistributionVector
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FVector)                                   Max                                                         OFFSET(getStruct<T>, {0x38, 12, 0, 0})
	SMember(FVector)                                   Min                                                         OFFSET(getStruct<T>, {0x44, 12, 0, 0})
	DMember(bool)                                      bLockAxes                                                   OFFSET(get<bool>, {0x50, 1, 1, 0})
	CMember(TEnumAsByte<EDistributionVectorLockFlags>) LockedAxes                                                  OFFSET(get<T>, {0x54, 1, 0, 0})
	CMember(TEnumAsByte<EDistributionVectorMirrorFlags>) MirrorFlags                                               OFFSET(get<T>, {0x55, 3, 0, 0})
	DMember(bool)                                      bUseExtremes                                                OFFSET(get<bool>, {0x58, 1, 1, 0})
};

/// Class /Script/Engine.DistributionVectorUniformCurve
/// Size: 0x0028 (0x000038 - 0x000060)
class UDistributionVectorUniformCurve : public UDistributionVector
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FInterpCurveTwoVectors)                    ConstantCurve                                               OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	DMember(bool)                                      bLockAxes1                                                  OFFSET(get<bool>, {0x50, 1, 1, 0})
	DMember(bool)                                      bLockAxes2                                                  OFFSET(get<bool>, {0x50, 1, 1, 1})
	CMember(TEnumAsByte<EDistributionVectorLockFlags>) LockedAxes                                                  OFFSET(get<T>, {0x54, 2, 0, 0})
	CMember(TEnumAsByte<EDistributionVectorMirrorFlags>) MirrorFlags                                               OFFSET(get<T>, {0x56, 3, 0, 0})
	DMember(bool)                                      bUseExtremes                                                OFFSET(get<bool>, {0x5C, 1, 1, 0})
};

/// Class /Script/Engine.DocumentationActor
/// Size: 0x0008 (0x000220 - 0x000228)
class ADocumentationActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
};

/// Class /Script/Engine.DPICustomScalingRule
/// Size: 0x0000 (0x000028 - 0x000028)
class UDPICustomScalingRule : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.DrawFrustumComponent
/// Size: 0x0028 (0x000468 - 0x000490)
class UDrawFrustumComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1168;

public:
	SMember(FColor)                                    FrustumColor                                                OFFSET(getStruct<T>, {0x468, 4, 0, 0})
	DMember(float)                                     FrustumAngle                                                OFFSET(get<float>, {0x46C, 4, 0, 0})
	DMember(float)                                     FrustumAspectRatio                                          OFFSET(get<float>, {0x470, 4, 0, 0})
	DMember(float)                                     FrustumStartDist                                            OFFSET(get<float>, {0x474, 4, 0, 0})
	DMember(float)                                     FrustumEndDist                                              OFFSET(get<float>, {0x478, 4, 0, 0})
	CMember(class UTexture*)                           Texture                                                     OFFSET(get<T>, {0x480, 8, 0, 0})
};

/// Class /Script/Engine.DrawSphereComponent
/// Size: 0x0000 (0x000490 - 0x000490)
class UDrawSphereComponent : public USphereComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1168;

public:
};

/// Class /Script/Engine.EdGraph
/// Size: 0x0038 (0x000028 - 0x000060)
class UEdGraph : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UClass*)                             Schema                                                      OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TArray<class UEdGraphNode*>)               Nodes                                                       OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(bool)                                      bEditable                                                   OFFSET(get<bool>, {0x40, 1, 1, 0})
	DMember(bool)                                      bAllowDeletion                                              OFFSET(get<bool>, {0x40, 1, 1, 1})
	DMember(bool)                                      bAllowRenaming                                              OFFSET(get<bool>, {0x40, 1, 1, 2})
};

/// Class /Script/Engine.GraphNodeContextMenuContext
/// Size: 0x0028 (0x000028 - 0x000050)
class UGraphNodeContextMenuContext : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UBlueprint*)                         Blueprint                                                   OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UEdGraph*)                           Graph                                                       OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UEdGraphNode*)                       Node                                                        OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(bool)                                      bIsDebugging                                                OFFSET(get<bool>, {0x48, 1, 0, 0})
};

/// Class /Script/Engine.EdGraphNode
/// Size: 0x0070 (0x000028 - 0x000098)
class UEdGraphNode : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(TArray<class UEdGraphPin_Deprecated*>)     DeprecatedPins                                              OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(int32_t)                                   NodePosX                                                    OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(int32_t)                                   NodePosY                                                    OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	DMember(int32_t)                                   NodeWidth                                                   OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	DMember(int32_t)                                   NodeHeight                                                  OFFSET(get<int32_t>, {0x54, 4, 0, 0})
	CMember(TEnumAsByte<ENodeAdvancedPins>)            AdvancedPinDisplay                                          OFFSET(get<T>, {0x58, 1, 0, 0})
	CMember(ENodeEnabledState)                         EnabledState                                                OFFSET(get<T>, {0x59, 1, 0, 0})
	DMember(bool)                                      bDisplayAsDisabled                                          OFFSET(get<bool>, {0x5B, 1, 1, 1})
	DMember(bool)                                      bUserSetEnabledState                                        OFFSET(get<bool>, {0x5B, 1, 1, 2})
	DMember(bool)                                      bIsNodeEnabled                                              OFFSET(get<bool>, {0x5B, 1, 1, 4})
	DMember(bool)                                      bHasCompilerMessage                                         OFFSET(get<bool>, {0x5B, 1, 1, 6})
	SMember(FString)                                   NodeComment                                                 OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	DMember(int32_t)                                   ErrorType                                                   OFFSET(get<int32_t>, {0x70, 4, 0, 0})
	SMember(FString)                                   ErrorMsg                                                    OFFSET(getStruct<T>, {0x78, 16, 0, 0})
	SMember(FGuid)                                     NodeGuid                                                    OFFSET(getStruct<T>, {0x88, 16, 0, 0})
};

/// Class /Script/Engine.EdGraphNode_Documentation
/// Size: 0x0020 (0x000098 - 0x0000B8)
class UEdGraphNode_Documentation : public UEdGraphNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FString)                                   Link                                                        OFFSET(getStruct<T>, {0x98, 16, 0, 0})
	SMember(FString)                                   Excerpt                                                     OFFSET(getStruct<T>, {0xA8, 16, 0, 0})
};

/// Struct /Script/Engine.EdGraphTerminalType
/// Size: 0x001C (0x000000 - 0x00001C)
class FEdGraphTerminalType : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FName)                                     TerminalCategory                                            OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     TerminalSubCategory                                         OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UObject*>)            TerminalSubCategoryObject                                   OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(bool)                                      bTerminalIsConst                                            OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(bool)                                      bTerminalIsWeakPointer                                      OFFSET(get<bool>, {0x19, 1, 0, 0})
	DMember(bool)                                      bTerminalIsUObjectWrapper                                   OFFSET(get<bool>, {0x1A, 1, 0, 0})
};

/// Struct /Script/Engine.EdGraphPinType
/// Size: 0x0058 (0x000000 - 0x000058)
class FEdGraphPinType : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FName)                                     PinCategory                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     PinSubCategory                                              OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UObject*>)            PinSubCategoryObject                                        OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FSimpleMemberReference)                    PinSubCategoryMemberReference                               OFFSET(getStruct<T>, {0x18, 32, 0, 0})
	SMember(FEdGraphTerminalType)                      PinValueType                                                OFFSET(getStruct<T>, {0x38, 28, 0, 0})
	CMember(EPinContainerType)                         ContainerType                                               OFFSET(get<T>, {0x54, 1, 0, 0})
	DMember(bool)                                      bIsArray                                                    OFFSET(get<bool>, {0x55, 1, 1, 0})
	DMember(bool)                                      bIsReference                                                OFFSET(get<bool>, {0x55, 1, 1, 1})
	DMember(bool)                                      bIsConst                                                    OFFSET(get<bool>, {0x55, 1, 1, 2})
	DMember(bool)                                      bIsWeakPointer                                              OFFSET(get<bool>, {0x55, 1, 1, 3})
	DMember(bool)                                      bIsUObjectWrapper                                           OFFSET(get<bool>, {0x55, 1, 1, 4})
};

/// Class /Script/Engine.EdGraphPin_Deprecated
/// Size: 0x00F0 (0x000028 - 0x000118)
class UEdGraphPin_Deprecated : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	SMember(FString)                                   PinName                                                     OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   PinToolTip                                                  OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	CMember(TEnumAsByte<EEdGraphPinDirection>)         Direction                                                   OFFSET(get<T>, {0x48, 1, 0, 0})
	SMember(FEdGraphPinType)                           PinType                                                     OFFSET(getStruct<T>, {0x50, 88, 0, 0})
	SMember(FString)                                   DefaultValue                                                OFFSET(getStruct<T>, {0xA8, 16, 0, 0})
	SMember(FString)                                   AutogeneratedDefaultValue                                   OFFSET(getStruct<T>, {0xB8, 16, 0, 0})
	CMember(class UObject*)                            DefaultObject                                               OFFSET(get<T>, {0xC8, 8, 0, 0})
	SMember(FText)                                     DefaultTextValue                                            OFFSET(getStruct<T>, {0xD0, 24, 0, 0})
	CMember(TArray<class UEdGraphPin_Deprecated*>)     LinkedTo                                                    OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(TArray<class UEdGraphPin_Deprecated*>)     SubPins                                                     OFFSET(get<T>, {0xF8, 16, 0, 0})
	CMember(class UEdGraphPin_Deprecated*)             ParentPin                                                   OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(class UEdGraphPin_Deprecated*)             ReferencePassThroughConnection                              OFFSET(get<T>, {0x110, 8, 0, 0})
};

/// Class /Script/Engine.EdGraphSchema
/// Size: 0x0000 (0x000028 - 0x000028)
class UEdGraphSchema : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Emitter
/// Size: 0x0050 (0x000220 - 0x000270)
class AEmitter : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	CMember(class UParticleSystemComponent*)           ParticleSystemComponent                                     OFFSET(get<T>, {0x220, 8, 0, 0})
	DMember(bool)                                      bDestroyOnSystemFinish                                      OFFSET(get<bool>, {0x228, 1, 1, 0})
	DMember(bool)                                      bPostUpdateTickGroup                                        OFFSET(get<bool>, {0x228, 1, 1, 1})
	DMember(bool)                                      bCurrentlyActive                                            OFFSET(get<bool>, {0x228, 1, 1, 2})
	SMember(FMulticastInlineDelegate)                  OnParticleSpawn                                             OFFSET(getStruct<T>, {0x230, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnParticleBurst                                             OFFSET(getStruct<T>, {0x240, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnParticleDeath                                             OFFSET(getStruct<T>, {0x250, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnParticleCollide                                           OFFSET(getStruct<T>, {0x260, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.Emitter.ToggleActive
	// void ToggleActive();                                                                                                     // [0x32f08d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetVectorParameter
	// void SetVectorParameter(FName ParameterName, FVector Param);                                                             // [0x32f07f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetTemplate
	// void SetTemplate(class UParticleSystem* NewTemplate);                                                                    // [0x32f0760] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetMaterialParameter
	// void SetMaterialParameter(FName ParameterName, class UMaterialInterface* Param);                                         // [0x32f0690] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetFloatParameter
	// void SetFloatParameter(FName ParameterName, float Param);                                                                // [0x32f05c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetColorParameter
	// void SetColorParameter(FName ParameterName, FLinearColor Param);                                                         // [0x32f04f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetActorParameter
	// void SetActorParameter(FName ParameterName, class AActor* Param);                                                        // [0x32f0420] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.OnRep_bCurrentlyActive
	// void OnRep_bCurrentlyActive();                                                                                           // [0x32f0400] Native|Public        
	// Function /Script/Engine.Emitter.OnParticleSystemFinished
	// void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);                                        // [0x32f0370] Native|Public        
	// Function /Script/Engine.Emitter.IsActive
	// bool IsActive();                                                                                                         // [0x32f0340] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Emitter.Deactivate
	// void Deactivate();                                                                                                       // [0x32f0320] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.Activate
	// void Activate();                                                                                                         // [0x32f0300] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.EmitterCameraLensEffectBase
/// Size: 0x0070 (0x000270 - 0x0002E0)
class AEmitterCameraLensEffectBase : public AEmitter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	CMember(class UParticleSystem*)                    PS_CameraEffect                                             OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(class UParticleSystem*)                    PS_CameraEffectNonExtremeContent                            OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class APlayerCameraManager*)               BaseCamera                                                  OFFSET(get<T>, {0x280, 8, 0, 0})
	SMember(FTransform)                                RelativeTransform                                           OFFSET(getStruct<T>, {0x290, 48, 0, 0})
	DMember(float)                                     BaseFOV                                                     OFFSET(get<float>, {0x2C0, 4, 0, 0})
	DMember(bool)                                      bAllowMultipleInstances                                     OFFSET(get<bool>, {0x2C4, 1, 1, 0})
	DMember(bool)                                      bResetWhenRetriggered                                       OFFSET(get<bool>, {0x2C4, 1, 1, 1})
	CMember(TArray<class UClass*>)                     EmittersToTreatAsSame                                       OFFSET(get<T>, {0x2C8, 16, 0, 0})
	DMember(float)                                     DistFromCamera                                              OFFSET(get<float>, {0x2D8, 4, 0, 0})
};

/// Class /Script/Engine.ViewModeUtils
/// Size: 0x0000 (0x000028 - 0x000028)
class UViewModeUtils : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.EngineBaseTypes
/// Size: 0x0000 (0x000028 - 0x000028)
class UEngineBaseTypes : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.EngineHandlerComponentFactory
/// Size: 0x0000 (0x000028 - 0x000028)
class UEngineHandlerComponentFactory : public UHandlerComponentFactory
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.LocalMessage
/// Size: 0x0000 (0x000028 - 0x000028)
class ULocalMessage : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.EngineMessage
/// Size: 0x0080 (0x000028 - 0x0000A8)
class UEngineMessage : public ULocalMessage
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FString)                                   FailedPlaceMessage                                          OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   MaxedOutMessage                                             OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	SMember(FString)                                   EnteredMessage                                              OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FString)                                   LeftMessage                                                 OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	SMember(FString)                                   GlobalNameChange                                            OFFSET(getStruct<T>, {0x68, 16, 0, 0})
	SMember(FString)                                   SpecEnteredMessage                                          OFFSET(getStruct<T>, {0x78, 16, 0, 0})
	SMember(FString)                                   NewPlayerMessage                                            OFFSET(getStruct<T>, {0x88, 16, 0, 0})
	SMember(FString)                                   NewSpecMessage                                              OFFSET(getStruct<T>, {0x98, 16, 0, 0})
};

/// Class /Script/Engine.EngineTypes
/// Size: 0x0000 (0x000028 - 0x000028)
class UEngineTypes : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ExponentialHeightFog
/// Size: 0x0010 (0x000220 - 0x000230)
class AExponentialHeightFog : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(class UExponentialHeightFogComponent*)     Component                                                   OFFSET(get<T>, {0x220, 8, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x228, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.ExponentialHeightFog.OnRep_bEnabled
	// void OnRep_bEnabled();                                                                                                   // [0xc51440] Native|Public        
};

/// Struct /Script/Engine.ExponentialHeightFogData
/// Size: 0x000C (0x000000 - 0x00000C)
class FExponentialHeightFogData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     FogDensity                                                  OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     FogHeightFalloff                                            OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     FogHeightOffset                                             OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/Engine.ExponentialHeightFogComponent
/// Size: 0x00A8 (0x0001F8 - 0x0002A0)
class UExponentialHeightFogComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	DMember(float)                                     FogDensity                                                  OFFSET(get<float>, {0x1F8, 4, 0, 0})
	DMember(float)                                     FogHeightFalloff                                            OFFSET(get<float>, {0x1FC, 4, 0, 0})
	SMember(FExponentialHeightFogData)                 SecondFogData                                               OFFSET(getStruct<T>, {0x200, 12, 0, 0})
	SMember(FLinearColor)                              FogInscatteringColor                                        OFFSET(getStruct<T>, {0x20C, 16, 0, 0})
	CMember(class UTextureCube*)                       InscatteringColorCubemap                                    OFFSET(get<T>, {0x220, 8, 0, 0})
	DMember(float)                                     InscatteringColorCubemapAngle                               OFFSET(get<float>, {0x228, 4, 0, 0})
	SMember(FLinearColor)                              InscatteringTextureTint                                     OFFSET(getStruct<T>, {0x22C, 16, 0, 0})
	DMember(float)                                     FullyDirectionalInscatteringColorDistance                   OFFSET(get<float>, {0x23C, 4, 0, 0})
	DMember(float)                                     NonDirectionalInscatteringColorDistance                     OFFSET(get<float>, {0x240, 4, 0, 0})
	DMember(float)                                     DirectionalInscatteringExponent                             OFFSET(get<float>, {0x244, 4, 0, 0})
	DMember(float)                                     DirectionalInscatteringStartDistance                        OFFSET(get<float>, {0x248, 4, 0, 0})
	SMember(FLinearColor)                              DirectionalInscatteringColor                                OFFSET(getStruct<T>, {0x24C, 16, 0, 0})
	DMember(float)                                     FogMaxOpacity                                               OFFSET(get<float>, {0x25C, 4, 0, 0})
	DMember(float)                                     StartDistance                                               OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(float)                                     FogCutoffDistance                                           OFFSET(get<float>, {0x264, 4, 0, 0})
	DMember(bool)                                      bEnableVolumetricFog                                        OFFSET(get<bool>, {0x268, 1, 0, 0})
	DMember(float)                                     VolumetricFogScatteringDistribution                         OFFSET(get<float>, {0x26C, 4, 0, 0})
	SMember(FColor)                                    VolumetricFogAlbedo                                         OFFSET(getStruct<T>, {0x270, 4, 0, 0})
	SMember(FLinearColor)                              VolumetricFogEmissive                                       OFFSET(getStruct<T>, {0x274, 16, 0, 0})
	DMember(float)                                     VolumetricFogExtinctionScale                                OFFSET(get<float>, {0x284, 4, 0, 0})
	DMember(float)                                     VolumetricFogDistance                                       OFFSET(get<float>, {0x288, 4, 0, 0})
	DMember(float)                                     VolumetricFogStaticLightingScatteringIntensity              OFFSET(get<float>, {0x28C, 4, 0, 0})
	DMember(bool)                                      bOverrideLightColorsWithFogInscatteringColors               OFFSET(get<bool>, {0x290, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution
	// void SetVolumetricFogScatteringDistribution(float NewValue);                                                             // [0x32fce60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale
	// void SetVolumetricFogExtinctionScale(float NewValue);                                                                    // [0x32fcde0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive
	// void SetVolumetricFogEmissive(FLinearColor NewValue);                                                                    // [0x32fcd50] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance
	// void SetVolumetricFogDistance(float NewValue);                                                                           // [0x32fccd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo
	// void SetVolumetricFogAlbedo(FColor NewValue);                                                                            // [0x32fcc50] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFog
	// void SetVolumetricFog(bool bNewValue);                                                                                   // [0x32fcbc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetStartDistance
	// void SetStartDistance(float Value);                                                                                      // [0x32fcb40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance
	// void SetNonDirectionalInscatteringColorDistance(float Value);                                                            // [0x32fcac0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint
	// void SetInscatteringTextureTint(FLinearColor Value);                                                                     // [0x32fc9b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle
	// void SetInscatteringColorCubemapAngle(float Value);                                                                      // [0x32fc930] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap
	// void SetInscatteringColorCubemap(class UTextureCube* Value);                                                             // [0x32fc8a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance
	// void SetFullyDirectionalInscatteringColorDistance(float Value);                                                          // [0x32fc820] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogMaxOpacity
	// void SetFogMaxOpacity(float Value);                                                                                      // [0x32fc710] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogInscatteringColor
	// void SetFogInscatteringColor(FLinearColor Value);                                                                        // [0x32fc680] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogHeightFalloff
	// void SetFogHeightFalloff(float Value);                                                                                   // [0x32bdfa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogDensity
	// void SetFogDensity(float Value);                                                                                         // [0x32be7b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogCutoffDistance
	// void SetFogCutoffDistance(float Value);                                                                                  // [0x32fc600] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance
	// void SetDirectionalInscatteringStartDistance(float Value);                                                               // [0x32fc580] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent
	// void SetDirectionalInscatteringExponent(float Value);                                                                    // [0x32fc500] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor
	// void SetDirectionalInscatteringColor(FLinearColor Value);                                                                // [0x32fc470] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.Exporter
/// Size: 0x0050 (0x000028 - 0x000078)
class UExporter : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(class UClass*)                             SupportedClass                                              OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UObject*)                            ExportRootScope                                             OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<FString>)                           FormatExtension                                             OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FString>)                           FormatDescription                                           OFFSET(get<T>, {0x48, 16, 0, 0})
	DMember(int32_t)                                   PreferredFormatIndex                                        OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	DMember(int32_t)                                   TextIndent                                                  OFFSET(get<int32_t>, {0x5C, 4, 0, 0})
	DMember(bool)                                      bText                                                       OFFSET(get<bool>, {0x60, 1, 1, 0})
	DMember(bool)                                      bSelectedOnly                                               OFFSET(get<bool>, {0x60, 1, 1, 1})
	DMember(bool)                                      bForceFileOperations                                        OFFSET(get<bool>, {0x60, 1, 1, 2})
	CMember(class UAssetExportTask*)                   ExportTask                                                  OFFSET(get<T>, {0x68, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.Exporter.ScriptRunAssetExportTask
	// bool ScriptRunAssetExportTask(class UAssetExportTask* Task);                                                             // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Exporter.RunAssetExportTasks
	// bool RunAssetExportTasks(TArray<UAssetExportTask*>& ExportTasks);                                                        // [0x32fc3c0] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.Exporter.RunAssetExportTask
	// bool RunAssetExportTask(class UAssetExportTask* Task);                                                                   // [0x32fc330] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.FloatingPawnMovement
/// Size: 0x0018 (0x000138 - 0x000150)
class UFloatingPawnMovement : public UPawnMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	DMember(float)                                     MaxSpeed                                                    OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(float)                                     Acceleration                                                OFFSET(get<float>, {0x13C, 4, 0, 0})
	DMember(float)                                     Deceleration                                                OFFSET(get<float>, {0x140, 4, 0, 0})
	DMember(float)                                     TurningBoost                                                OFFSET(get<float>, {0x144, 4, 0, 0})
	DMember(bool)                                      bPositionCorrected                                          OFFSET(get<bool>, {0x148, 1, 1, 0})
};

/// Struct /Script/Engine.FontCharacter
/// Size: 0x0018 (0x000000 - 0x000018)
class FFontCharacter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   StartU                                                      OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   StartV                                                      OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   USize                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   VSize                                                       OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(char)                                      TextureIndex                                                OFFSET(get<char>, {0x10, 1, 0, 0})
	DMember(int32_t)                                   VerticalOffset                                              OFFSET(get<int32_t>, {0x14, 4, 0, 0})
};

/// Struct /Script/Engine.FontImportOptionsData
/// Size: 0x00B0 (0x000000 - 0x0000B0)
class FFontImportOptionsData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FString)                                   FontName                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(float)                                     Height                                                      OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(bool)                                      bEnableAntialiasing                                         OFFSET(get<bool>, {0x14, 1, 1, 0})
	DMember(bool)                                      bEnableBold                                                 OFFSET(get<bool>, {0x14, 1, 1, 1})
	DMember(bool)                                      bEnableItalic                                               OFFSET(get<bool>, {0x14, 1, 1, 2})
	DMember(bool)                                      bEnableUnderline                                            OFFSET(get<bool>, {0x14, 1, 1, 3})
	DMember(bool)                                      bAlphaOnly                                                  OFFSET(get<bool>, {0x14, 1, 1, 4})
	CMember(TEnumAsByte<EFontImportCharacterSet>)      CharacterSet                                                OFFSET(get<T>, {0x18, 1, 0, 0})
	SMember(FString)                                   Chars                                                       OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FString)                                   UnicodeRange                                                OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   CharsFilePath                                               OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FString)                                   CharsFileWildcard                                           OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	DMember(bool)                                      bCreatePrintableOnly                                        OFFSET(get<bool>, {0x60, 1, 1, 0})
	DMember(bool)                                      bIncludeASCIIRange                                          OFFSET(get<bool>, {0x60, 1, 1, 1})
	SMember(FLinearColor)                              ForegroundColor                                             OFFSET(getStruct<T>, {0x64, 16, 0, 0})
	DMember(bool)                                      bEnableDropShadow                                           OFFSET(get<bool>, {0x74, 1, 1, 0})
	DMember(int32_t)                                   TexturePageWidth                                            OFFSET(get<int32_t>, {0x78, 4, 0, 0})
	DMember(int32_t)                                   TexturePageMaxHeight                                        OFFSET(get<int32_t>, {0x7C, 4, 0, 0})
	DMember(int32_t)                                   XPadding                                                    OFFSET(get<int32_t>, {0x80, 4, 0, 0})
	DMember(int32_t)                                   YPadding                                                    OFFSET(get<int32_t>, {0x84, 4, 0, 0})
	DMember(int32_t)                                   ExtendBoxTop                                                OFFSET(get<int32_t>, {0x88, 4, 0, 0})
	DMember(int32_t)                                   ExtendBoxBottom                                             OFFSET(get<int32_t>, {0x8C, 4, 0, 0})
	DMember(int32_t)                                   ExtendBoxRight                                              OFFSET(get<int32_t>, {0x90, 4, 0, 0})
	DMember(int32_t)                                   ExtendBoxLeft                                               OFFSET(get<int32_t>, {0x94, 4, 0, 0})
	DMember(bool)                                      bEnableLegacyMode                                           OFFSET(get<bool>, {0x98, 1, 1, 0})
	DMember(int32_t)                                   Kerning                                                     OFFSET(get<int32_t>, {0x9C, 4, 0, 0})
	DMember(bool)                                      bUseDistanceFieldAlpha                                      OFFSET(get<bool>, {0xA0, 1, 1, 0})
	DMember(int32_t)                                   DistanceFieldScaleFactor                                    OFFSET(get<int32_t>, {0xA4, 4, 0, 0})
	DMember(float)                                     DistanceFieldScanRadiusScale                                OFFSET(get<float>, {0xA8, 4, 0, 0})
};

/// Class /Script/Engine.Font
/// Size: 0x01A8 (0x000028 - 0x0001D0)
class UFont : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	CMember(EFontCacheType)                            FontCacheType                                               OFFSET(get<T>, {0x30, 1, 0, 0})
	CMember(TArray<FFontCharacter>)                    Characters                                                  OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<class UTexture2D*>)                 Textures                                                    OFFSET(get<T>, {0x48, 16, 0, 0})
	DMember(int32_t)                                   IsRemapped                                                  OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	DMember(float)                                     EmScale                                                     OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     Ascent                                                      OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     Descent                                                     OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     Leading                                                     OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(int32_t)                                   Kerning                                                     OFFSET(get<int32_t>, {0x6C, 4, 0, 0})
	SMember(FFontImportOptionsData)                    ImportOptions                                               OFFSET(getStruct<T>, {0x70, 176, 0, 0})
	DMember(int32_t)                                   NumCharacters                                               OFFSET(get<int32_t>, {0x120, 4, 0, 0})
	CMember(TArray<int32_t>)                           MaxCharHeight                                               OFFSET(get<T>, {0x128, 16, 0, 0})
	DMember(float)                                     ScalingFactor                                               OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(int32_t)                                   LegacyFontSize                                              OFFSET(get<int32_t>, {0x13C, 4, 0, 0})
	SMember(FName)                                     LegacyFontName                                              OFFSET(getStruct<T>, {0x140, 8, 0, 0})
	SMember(FCompositeFont)                            CompositeFont                                               OFFSET(getStruct<T>, {0x148, 56, 0, 0})
};

/// Class /Script/Engine.FontFace
/// Size: 0x0030 (0x000028 - 0x000058)
class UFontFace : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FString)                                   SourceFilename                                              OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	CMember(EFontHinting)                              Hinting                                                     OFFSET(get<T>, {0x40, 1, 0, 0})
	CMember(EFontLoadingPolicy)                        LoadingPolicy                                               OFFSET(get<T>, {0x41, 1, 0, 0})
	CMember(EFontLayoutMethod)                         LayoutMethod                                                OFFSET(get<T>, {0x42, 1, 0, 0})
};

/// Class /Script/Engine.FontImportOptions
/// Size: 0x00B0 (0x000028 - 0x0000D8)
class UFontImportOptions : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FFontImportOptionsData)                    Data                                                        OFFSET(getStruct<T>, {0x28, 176, 0, 0})
};

/// Struct /Script/Engine.ForceFeedbackAttenuationSettings
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class FForceFeedbackAttenuationSettings : public FBaseAttenuationSettings
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/Engine.ForceFeedbackAttenuation
/// Size: 0x00B0 (0x000028 - 0x0000D8)
class UForceFeedbackAttenuation : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FForceFeedbackAttenuationSettings)         Attenuation                                                 OFFSET(getStruct<T>, {0x28, 176, 0, 0})
};

/// Class /Script/Engine.ForceFeedbackComponent
/// Size: 0x00E8 (0x0001F8 - 0x0002E0)
class UForceFeedbackComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	CMember(class UForceFeedbackEffect*)               ForceFeedbackEffect                                         OFFSET(get<T>, {0x1F8, 8, 0, 0})
	DMember(bool)                                      bAutoDestroy                                                OFFSET(get<bool>, {0x200, 1, 1, 0})
	DMember(bool)                                      bStopWhenOwnerDestroyed                                     OFFSET(get<bool>, {0x200, 1, 1, 1})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x200, 1, 1, 2})
	DMember(bool)                                      bIgnoreTimeDilation                                         OFFSET(get<bool>, {0x200, 1, 1, 3})
	DMember(bool)                                      bOverrideAttenuation                                        OFFSET(get<bool>, {0x200, 1, 1, 4})
	DMember(float)                                     IntensityMultiplier                                         OFFSET(get<float>, {0x204, 4, 0, 0})
	CMember(class UForceFeedbackAttenuation*)          AttenuationSettings                                         OFFSET(get<T>, {0x208, 8, 0, 0})
	SMember(FForceFeedbackAttenuationSettings)         AttenuationOverrides                                        OFFSET(getStruct<T>, {0x210, 176, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnForceFeedbackFinished                                     OFFSET(getStruct<T>, {0x2C0, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.ForceFeedbackComponent.Stop
	// void Stop();                                                                                                             // [0x32fcee0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ForceFeedbackComponent.SetIntensityMultiplier
	// void SetIntensityMultiplier(float NewIntensityMultiplier);                                                               // [0x32fca40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ForceFeedbackComponent.SetForceFeedbackEffect
	// void SetForceFeedbackEffect(class UForceFeedbackEffect* NewForceFeedbackEffect);                                         // [0x32fc790] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ForceFeedbackComponent.Play
	// void Play(float StartTime);                                                                                              // [0x2a75780] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply
	// bool BP_GetAttenuationSettingsToApply(FForceFeedbackAttenuationSettings& OutAttenuationSettings);                        // [0x32fc0e0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ForceFeedbackComponent.AdjustAttenuation
	// void AdjustAttenuation(FForceFeedbackAttenuationSettings& InAttenuationSettings);                                        // [0x32fbfb0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Struct /Script/Engine.ForceFeedbackChannelDetails
/// Size: 0x0090 (0x000000 - 0x000090)
class FForceFeedbackChannelDetails : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	DMember(bool)                                      bAffectsLeftLarge                                           OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bAffectsLeftSmall                                           OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bAffectsRightLarge                                          OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bAffectsRightSmall                                          OFFSET(get<bool>, {0x0, 1, 1, 3})
	SMember(FRuntimeFloatCurve)                        Curve                                                       OFFSET(getStruct<T>, {0x8, 136, 0, 0})
};

/// Class /Script/Engine.ForceFeedbackEffect
/// Size: 0x0018 (0x000028 - 0x000040)
class UForceFeedbackEffect : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FForceFeedbackChannelDetails>)      ChannelDetails                                              OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/Engine.GameEngine
/// Size: 0x0050 (0x000DE0 - 0x000E30)
class UGameEngine : public UEngine
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3632;

public:
	DMember(float)                                     MaxDeltaTime                                                OFFSET(get<float>, {0xDE0, 4, 0, 0})
	DMember(float)                                     ServerFlushLogInterval                                      OFFSET(get<float>, {0xDE4, 4, 0, 0})
	CMember(class UGameInstance*)                      GameInstance                                                OFFSET(get<T>, {0xDE8, 8, 0, 0})
};

/// Class /Script/Engine.GameInstanceSubsystem
/// Size: 0x0000 (0x000030 - 0x000030)
class UGameInstanceSubsystem : public USubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.GameNetworkManager
/// Size: 0x00B0 (0x000220 - 0x0002D0)
class AGameNetworkManager : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	DMember(float)                                     BadPacketLossThreshold                                      OFFSET(get<float>, {0x220, 4, 0, 0})
	DMember(float)                                     SeverePacketLossThreshold                                   OFFSET(get<float>, {0x224, 4, 0, 0})
	DMember(int32_t)                                   BadPingThreshold                                            OFFSET(get<int32_t>, {0x228, 4, 0, 0})
	DMember(int32_t)                                   SeverePingThreshold                                         OFFSET(get<int32_t>, {0x22C, 4, 0, 0})
	DMember(int32_t)                                   AdjustedNetSpeed                                            OFFSET(get<int32_t>, {0x230, 4, 0, 0})
	DMember(float)                                     LastNetSpeedUpdateTime                                      OFFSET(get<float>, {0x234, 4, 0, 0})
	DMember(int32_t)                                   TotalNetBandwidth                                           OFFSET(get<int32_t>, {0x238, 4, 0, 0})
	DMember(int32_t)                                   MinDynamicBandwidth                                         OFFSET(get<int32_t>, {0x23C, 4, 0, 0})
	DMember(int32_t)                                   MaxDynamicBandwidth                                         OFFSET(get<int32_t>, {0x240, 4, 0, 0})
	DMember(bool)                                      bIsStandbyCheckingEnabled                                   OFFSET(get<bool>, {0x244, 1, 1, 0})
	DMember(bool)                                      bHasStandbyCheatTriggered                                   OFFSET(get<bool>, {0x244, 1, 1, 1})
	DMember(float)                                     StandbyRxCheatTime                                          OFFSET(get<float>, {0x248, 4, 0, 0})
	DMember(float)                                     StandbyTxCheatTime                                          OFFSET(get<float>, {0x24C, 4, 0, 0})
	DMember(float)                                     PercentMissingForRxStandby                                  OFFSET(get<float>, {0x250, 4, 0, 0})
	DMember(float)                                     PercentMissingForTxStandby                                  OFFSET(get<float>, {0x254, 4, 0, 0})
	DMember(float)                                     PercentForBadPing                                           OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(float)                                     JoinInProgressStandbyWaitTime                               OFFSET(get<float>, {0x25C, 4, 0, 0})
	DMember(float)                                     MoveRepSize                                                 OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(float)                                     MAXPOSITIONERRORSQUARED                                     OFFSET(get<float>, {0x264, 4, 0, 0})
	DMember(float)                                     MAXNEARZEROVELOCITYSQUARED                                  OFFSET(get<float>, {0x268, 4, 0, 0})
	DMember(float)                                     CLIENTADJUSTUPDATECOST                                      OFFSET(get<float>, {0x26C, 4, 0, 0})
	DMember(float)                                     MAXCLIENTUPDATEINTERVAL                                     OFFSET(get<float>, {0x270, 4, 0, 0})
	DMember(float)                                     MaxClientForcedUpdateDuration                               OFFSET(get<float>, {0x274, 4, 0, 0})
	DMember(float)                                     ServerForcedUpdateHitchThreshold                            OFFSET(get<float>, {0x278, 4, 0, 0})
	DMember(float)                                     ServerForcedUpdateHitchCooldown                             OFFSET(get<float>, {0x27C, 4, 0, 0})
	DMember(float)                                     MaxMoveDeltaTime                                            OFFSET(get<float>, {0x280, 4, 0, 0})
	DMember(float)                                     MaxClientSmoothingDeltaTime                                 OFFSET(get<float>, {0x284, 4, 0, 0})
	DMember(float)                                     ClientNetSendMoveDeltaTime                                  OFFSET(get<float>, {0x288, 4, 0, 0})
	DMember(float)                                     ClientNetSendMoveDeltaTimeThrottled                         OFFSET(get<float>, {0x28C, 4, 0, 0})
	DMember(float)                                     ClientNetSendMoveDeltaTimeStationary                        OFFSET(get<float>, {0x290, 4, 0, 0})
	DMember(int32_t)                                   ClientNetSendMoveThrottleAtNetSpeed                         OFFSET(get<int32_t>, {0x294, 4, 0, 0})
	DMember(int32_t)                                   ClientNetSendMoveThrottleOverPlayerCount                    OFFSET(get<int32_t>, {0x298, 4, 0, 0})
	DMember(bool)                                      ClientAuthorativePosition                                   OFFSET(get<bool>, {0x29C, 1, 0, 0})
	DMember(float)                                     ClientErrorUpdateRateLimit                                  OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(float)                                     ClientNetCamUpdateDeltaTime                                 OFFSET(get<float>, {0x2A4, 4, 0, 0})
	DMember(float)                                     ClientNetCamUpdatePositionLimit                             OFFSET(get<float>, {0x2A8, 4, 0, 0})
	DMember(bool)                                      bMovementTimeDiscrepancyDetection                           OFFSET(get<bool>, {0x2AC, 1, 0, 0})
	DMember(bool)                                      bMovementTimeDiscrepancyResolution                          OFFSET(get<bool>, {0x2AD, 1, 0, 0})
	DMember(float)                                     MovementTimeDiscrepancyMaxTimeMargin                        OFFSET(get<float>, {0x2B0, 4, 0, 0})
	DMember(float)                                     MovementTimeDiscrepancyMinTimeMargin                        OFFSET(get<float>, {0x2B4, 4, 0, 0})
	DMember(float)                                     MovementTimeDiscrepancyResolutionRate                       OFFSET(get<float>, {0x2B8, 4, 0, 0})
	DMember(float)                                     MovementTimeDiscrepancyDriftAllowance                       OFFSET(get<float>, {0x2BC, 4, 0, 0})
	DMember(bool)                                      bMovementTimeDiscrepancyForceCorrectionsDuringResolution    OFFSET(get<bool>, {0x2C0, 1, 0, 0})
	DMember(bool)                                      bUseDistanceBasedRelevancy                                  OFFSET(get<bool>, {0x2C1, 1, 0, 0})
};

/// Class /Script/Engine.GameplayStatics
/// Size: 0x0000 (0x000028 - 0x000028)
class UGameplayStatics : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.GameplayStatics.UnloadStreamLevelBySoftObjectPtr
	// void UnloadStreamLevelBySoftObjectPtr(class UObject* WorldContextObject, TWeakObjectPtr<UWorld*> Level, FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload); // [0x330c1f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.UnloadStreamLevel
	// void UnloadStreamLevel(class UObject* WorldContextObject, FName LevelName, FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload); // [0x330c080] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SuggestProjectileVelocity_CustomArc
	// bool SuggestProjectileVelocity_CustomArc(class UObject* WorldContextObject, FVector& OutLaunchVelocity, FVector StartPos, FVector EndPos, float OverrideGravityZ, float ArcParam); // [0x330be90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnSoundAttached
	// class UAudioComponent* SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // [0x330ba80] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnSoundAtLocation
	// class UAudioComponent* SpawnSoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // [0x330b770] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnSound2D
	// class UAudioComponent* SpawnSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // [0x330b510] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnObject
	// class UObject* SpawnObject(class UClass* ObjectClass, class UObject* Outer);                                             // [0x330b440] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnForceFeedbackAttached
	// class UForceFeedbackComponent* SpawnForceFeedbackAttached(class UForceFeedbackEffect* ForceFeedbackEffect, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // [0x330b0a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnForceFeedbackAtLocation
	// class UForceFeedbackComponent* SpawnForceFeedbackAtLocation(class UObject* WorldContextObject, class UForceFeedbackEffect* ForceFeedbackEffect, FVector Location, FRotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // [0x330ade0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnEmitterAttached
	// class UParticleSystemComponent* SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, FVector Scale, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivate); // [0x330aad0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnEmitterAtLocation
	// class UParticleSystemComponent* SpawnEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, FVector Location, FRotator Rotation, FVector Scale, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem); // [0x330a850] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnDialogueAttached
	// class UAudioComponent* SpawnDialogueAttached(class UDialogueWave* Dialogue, FDialogueContext& Context, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // [0x330a450] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnDialogueAtLocation
	// class UAudioComponent* SpawnDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, FDialogueContext& Context, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // [0x330a130] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnDialogue2D
	// class UAudioComponent* SpawnDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy); // [0x3309f00] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnDecalAttached
	// class UDecalComponent* SpawnDecalAttached(class UMaterialInterface* DecalMaterial, FVector DecalSize, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, float LifeSpan); // [0x3309a80] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnDecalAtLocation
	// class UDecalComponent* SpawnDecalAtLocation(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, FVector DecalSize, FVector Location, FRotator Rotation, float LifeSpan); // [0x3309880] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetWorldOriginLocation
	// void SetWorldOriginLocation(class UObject* WorldContextObject, FIntVector NewLocation);                                  // [0x3309710] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetViewportMouseCaptureMode
	// void SetViewportMouseCaptureMode(class UObject* WorldContextObject, EMouseCaptureMode MouseCaptureMode);                 // [0x3309650] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetSubtitlesEnabled
	// void SetSubtitlesEnabled(bool bEnabled);                                                                                 // [0x33095d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetSoundMixClassOverride
	// void SetSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren); // [0x33093b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetSoundClassDistanceScale
	// void SetSoundClassDistanceScale(class UObject* WorldContextObject, class USoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec); // [0x3309260] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetPlayerControllerID
	// void SetPlayerControllerID(class APlayerController* Player, int32_t ControllerId);                                       // [0x33091a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetMaxAudioChannelsScaled
	// void SetMaxAudioChannelsScaled(class UObject* WorldContextObject, float MaxChannelCountScale);                           // [0x33090e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetGlobalTimeDilation
	// void SetGlobalTimeDilation(class UObject* WorldContextObject, float TimeDilation);                                       // [0x3309020] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetGlobalPitchModulation
	// void SetGlobalPitchModulation(class UObject* WorldContextObject, float PitchModulation, float TimeSec);                  // [0x3308f20] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetGlobalListenerFocusParameters
	// void SetGlobalListenerFocusParameters(class UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale); // [0x3308c80] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetGamePaused
	// bool SetGamePaused(class UObject* WorldContextObject, bool bPaused);                                                     // [0x3308bb0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetForceDisableSplitscreen
	// void SetForceDisableSplitscreen(class UObject* WorldContextObject, bool bDisable);                                       // [0x3308af0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetEnableWorldRendering
	// void SetEnableWorldRendering(class UObject* WorldContextObject, bool bEnable);                                           // [0x3308a30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetBaseSoundMix
	// void SetBaseSoundMix(class UObject* WorldContextObject, class USoundMix* InSoundMix);                                    // [0x3308970] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SaveGameToSlot
	// bool SaveGameToSlot(class USaveGame* SaveGameObject, FString SlotName, int32_t UserIndex);                               // [0x3308720] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.RemovePlayer
	// void RemovePlayer(class APlayerController* Player, bool bDestroyPawn);                                                   // [0x3308380] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.RebaseZeroOriginOntoLocal
	// FVector RebaseZeroOriginOntoLocal(class UObject* WorldContextObject, FVector WorldLocation);                             // [0x3308290] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.RebaseLocalOriginOntoZero
	// FVector RebaseLocalOriginOntoZero(class UObject* WorldContextObject, FVector WorldLocation);                             // [0x33081a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.PushSoundMixModifier
	// void PushSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);                       // [0x33080b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ProjectWorldToScreen
	// bool ProjectWorldToScreen(class APlayerController* Player, FVector& WorldPosition, FVector2D& ScreenPosition, bool bPlayerViewportRelative); // [0x3307f50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.PrimeSound
	// void PrimeSound(class USoundBase* InSound);                                                                              // [0x3307ed0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PopSoundMixModifier
	// void PopSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);                        // [0x3307e10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PlayWorldCameraShake
	// void PlayWorldCameraShake(class UObject* WorldContextObject, class UClass* Shake, FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter); // [0x3307b40] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PlaySoundAtLocation
	// void PlaySoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor); // [0x3307830] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PlaySound2D
	// void PlaySound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor, bool bIsUISound); // [0x33075d0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PlayDialogueAtLocation
	// void PlayDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, FDialogueContext& Context, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings); // [0x33072f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PlayDialogue2D
	// void PlayDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime); // [0x3307100] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ParseOption
	// FString ParseOption(FString options, FString Key);                                                                       // [0x3306f80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.OpenLevelBySoftObjectPtr
	// void OpenLevelBySoftObjectPtr(class UObject* WorldContextObject, TWeakObjectPtr<UWorld*> Level, bool bAbsolute, FString options); // [0x3306d60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.OpenLevel
	// void OpenLevel(class UObject* WorldContextObject, FName LevelName, bool bAbsolute, FString options);                     // [0x3306bc0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.MakeHitResult
	// FHitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, FVector Location, FVector ImpactPoint, FVector Normal, FVector ImpactNormal, class UPhysicalMaterial* PhysMat, class AActor* HitActor, class UPrimitiveComponent* HitComponent, FName HitBoneName, int32_t HitItem, int32_t FaceIndex, FVector TraceStart, FVector TraceEnd); // [0x33065b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.LoadStreamLevelBySoftObjectPtr
	// void LoadStreamLevelBySoftObjectPtr(class UObject* WorldContextObject, TWeakObjectPtr<UWorld*> Level, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, FLatentActionInfo LatentInfo); // [0x3306370] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.LoadStreamLevel
	// void LoadStreamLevel(class UObject* WorldContextObject, FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, FLatentActionInfo LatentInfo); // [0x33061b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.LoadGameFromSlot
	// class USaveGame* LoadGameFromSlot(FString SlotName, int32_t UserIndex);                                                  // [0x33060d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.IsSplitscreenForceDisabled
	// bool IsSplitscreenForceDisabled(class UObject* WorldContextObject);                                                      // [0x3305f50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.IsGamePaused
	// bool IsGamePaused(class UObject* WorldContextObject);                                                                    // [0x3305e90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.HasOption
	// bool HasOption(FString options, FString InKey);                                                                          // [0x3305c80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.HasLaunchOption
	// bool HasLaunchOption(FString OptionToCheck);                                                                             // [0x3305bb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GrassOverlappingSphereCount
	// int32_t GrassOverlappingSphereCount(class UObject* WorldContextObject, class UStaticMesh* StaticMesh, FVector CenterPosition, float Radius); // [0x33059c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetWorldOriginLocation
	// FIntVector GetWorldOriginLocation(class UObject* WorldContextObject);                                                    // [0x3305920] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetWorldDeltaSeconds
	// float GetWorldDeltaSeconds(class UObject* WorldContextObject);                                                           // [0x3305890] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetViewProjectionMatrix
	// void GetViewProjectionMatrix(FMinimalViewInfo DesiredView, FMatrix& ViewMatrix, FMatrix& ProjectionMatrix, FMatrix& ViewProjectionMatrix); // [0x33054f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetViewportMouseCaptureMode
	// EMouseCaptureMode GetViewportMouseCaptureMode(class UObject* WorldContextObject);                                        // [0x3305800] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetUnpausedTimeSeconds
	// float GetUnpausedTimeSeconds(class UObject* WorldContextObject);                                                         // [0x3305460] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetTimeSeconds
	// float GetTimeSeconds(class UObject* WorldContextObject);                                                                 // [0x33053d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetSurfaceType
	// TEnumAsByte<EPhysicalSurface> GetSurfaceType(FHitResult& Hit);                                                           // [0x33052f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetStreamingLevel
	// class ULevelStreaming* GetStreamingLevel(class UObject* WorldContextObject, FName PackageName);                          // [0x3305220] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetRealTimeSeconds
	// float GetRealTimeSeconds(class UObject* WorldContextObject);                                                             // [0x3305190] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlayerPawn
	// class APawn* GetPlayerPawn(class UObject* WorldContextObject, int32_t PlayerIndex);                                      // [0x33050c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlayerControllerID
	// int32_t GetPlayerControllerID(class APlayerController* Player);                                                          // [0x3305030] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlayerControllerFromID
	// class APlayerController* GetPlayerControllerFromID(class UObject* WorldContextObject, int32_t ControllerId);             // [0x3304f60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlayerController
	// class APlayerController* GetPlayerController(class UObject* WorldContextObject, int32_t PlayerIndex);                    // [0x3304e90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlayerCharacter
	// class ACharacter* GetPlayerCharacter(class UObject* WorldContextObject, int32_t PlayerIndex);                            // [0x3304dc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlayerCameraManager
	// class APlayerCameraManager* GetPlayerCameraManager(class UObject* WorldContextObject, int32_t PlayerIndex);              // [0x3304cf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlatformName
	// FString GetPlatformName();                                                                                               // [0x3304c70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetObjectClass
	// class UClass* GetObjectClass(class UObject* Object);                                                                     // [0x3304be0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetMaxAudioChannelCount
	// int32_t GetMaxAudioChannelCount(class UObject* WorldContextObject);                                                      // [0x3304af0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetKeyValue
	// void GetKeyValue(FString Pair, FString& Key, FString& Value);                                                            // [0x3304970] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetIntOption
	// int32_t GetIntOption(FString options, FString Key, int32_t DefaultValue);                                                // [0x3304830] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetGlobalTimeDilation
	// float GetGlobalTimeDilation(class UObject* WorldContextObject);                                                          // [0x33047a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetGameState
	// class AGameStateBase* GetGameState(class UObject* WorldContextObject);                                                   // [0x3304710] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetGameMode
	// class AGameModeBase* GetGameMode(class UObject* WorldContextObject);                                                     // [0x3304680] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetGameInstance
	// class UGameInstance* GetGameInstance(class UObject* WorldContextObject);                                                 // [0x33045f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetEnableWorldRendering
	// bool GetEnableWorldRendering(class UObject* WorldContextObject);                                                         // [0x3304560] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetCurrentReverbEffect
	// class UReverbEffect* GetCurrentReverbEffect(class UObject* WorldContextObject);                                          // [0x3304430] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetCurrentLevelName
	// FString GetCurrentLevelName(class UObject* WorldContextObject, bool bRemovePrefixString);                                // [0x3304320] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetClosestListenerLocation
	// bool GetClosestListenerLocation(class UObject* WorldContextObject, FVector& Location, float MaximumRange, bool bAllowAttenuationOverride, FVector& ListenerPosition); // [0x3304150] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetAudioTimeSeconds
	// float GetAudioTimeSeconds(class UObject* WorldContextObject);                                                            // [0x33040c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetAllActorsWithTag
	// void GetAllActorsWithTag(class UObject* WorldContextObject, FName Tag, TArray<AActor*>& OutActors);                      // [0x3303fa0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetAllActorsWithInterface
	// void GetAllActorsWithInterface(class UObject* WorldContextObject, class UClass* Interface, TArray<AActor*>& OutActors);  // [0x3303e80] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetAllActorsOfClassWithTag
	// void GetAllActorsOfClassWithTag(class UObject* WorldContextObject, class UClass* ActorClass, FName Tag, TArray<AActor*>& OutActors); // [0x3303d20] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetAllActorsOfClass
	// void GetAllActorsOfClass(class UObject* WorldContextObject, class UClass* ActorClass, TArray<AActor*>& OutActors);       // [0x3303c00] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetActorOfClass
	// class AActor* GetActorOfClass(class UObject* WorldContextObject, class UClass* ActorClass);                              // [0x3303b30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetActorArrayBounds
	// void GetActorArrayBounds(TArray<AActor*>& Actors, bool bOnlyCollidingComponents, FVector& Center, FVector& BoxExtent);   // [0x33039a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetActorArrayAverageLocation
	// FVector GetActorArrayAverageLocation(TArray<AActor*>& Actors);                                                           // [0x33038e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetAccurateRealTime
	// void GetAccurateRealTime(class UObject* WorldContextObject, int32_t& Seconds, float& PartialSeconds);                    // [0x33037b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.FlushLevelStreaming
	// void FlushLevelStreaming(class UObject* WorldContextObject);                                                             // [0x3303730] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.FinishSpawningActor
	// class AActor* FinishSpawningActor(class AActor* Actor, FTransform& SpawnTransform);                                      // [0x3303610] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.FindCollisionUV
	// bool FindCollisionUV(FHitResult& Hit, int32_t UVChannel, FVector2D& UV);                                                 // [0x3303390] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.EnableLiveStreaming
	// void EnableLiveStreaming(bool enable);                                                                                   // [0x33032f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.DoesSaveGameExist
	// bool DoesSaveGameExist(FString SlotName, int32_t UserIndex);                                                             // [0x3303210] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.DeprojectScreenToWorld
	// bool DeprojectScreenToWorld(class APlayerController* Player, FVector2D& ScreenPosition, FVector& WorldPosition, FVector& WorldDirection); // [0x33030a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.DeleteGameInSlot
	// bool DeleteGameInSlot(FString SlotName, int32_t UserIndex);                                                              // [0x3302fc0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.DeactivateReverbEffect
	// void DeactivateReverbEffect(class UObject* WorldContextObject, FName TagName);                                           // [0x3302f00] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.CreateSound2D
	// class UAudioComponent* CreateSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // [0x3302ca0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.CreateSaveGameObject
	// class USaveGame* CreateSaveGameObject(class UClass* SaveGameClass);                                                      // [0x3302c10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.CreatePlayer
	// class APlayerController* CreatePlayer(class UObject* WorldContextObject, int32_t ControllerId, bool bSpawnPlayerController); // [0x3302b10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ClearSoundMixModifiers
	// void ClearSoundMixModifiers(class UObject* WorldContextObject);                                                          // [0x3302a90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ClearSoundMixClassOverride
	// void ClearSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float FadeOutTime); // [0x3302940] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.CancelAsyncLoading
	// void CancelAsyncLoading();                                                                                               // [0x3302750] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.BreakHitResult
	// void BreakHitResult(FHitResult& Hit, bool& bBlockingHit, bool& bInitialOverlap, float& Time, float& Distance, FVector& Location, FVector& ImpactPoint, FVector& Normal, FVector& ImpactNormal, class UPhysicalMaterial*& PhysMat, class AActor*& HitActor, class UPrimitiveComponent*& HitComponent, FName& HitBoneName, int32_t& HitItem, int32_t& FaceIndex, FVector& TraceStart, FVector& TraceEnd); // [0x3302050] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.BlueprintSuggestProjectileVelocity
	// bool BlueprintSuggestProjectileVelocity(class UObject* WorldContextObject, FVector& TossVelocity, FVector StartLocation, FVector EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte<ESuggestProjVelocityTraceOption> TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug); // [0x3301000] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByTraceChannel
	// bool Blueprint_PredictProjectilePath_ByTraceChannel(class UObject* WorldContextObject, FHitResult& OutHit, TArray<FVector>& OutPathPositions, FVector& OutLastTraceDestination, FVector StartPos, FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // [0x3301ae0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByObjectType
	// bool Blueprint_PredictProjectilePath_ByObjectType(class UObject* WorldContextObject, FHitResult& OutHit, TArray<FVector>& OutPathPositions, FVector& OutLastTraceDestination, FVector StartPos, FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // [0x3301550] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.Blueprint_PredictProjectilePath_Advanced
	// bool Blueprint_PredictProjectilePath_Advanced(class UObject* WorldContextObject, FPredictProjectilePathParams& PredictParams, FPredictProjectilePathResult& PredictResult); // [0x3301320] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.BeginSpawningActorFromClass
	// class AActor* BeginSpawningActorFromClass(class UObject* WorldContextObject, class UClass* ActorClass, FTransform& SpawnTransform, bool bNoCollisionFail, class AActor* Owner); // [0x3300df0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.BeginSpawningActorFromBlueprint
	// class AActor* BeginSpawningActorFromBlueprint(class UObject* WorldContextObject, class UBlueprint* Blueprint, FTransform& SpawnTransform, bool bNoCollisionFail); // [0x3300c40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.BeginDeferredActorSpawnFromClass
	// class AActor* BeginDeferredActorSpawnFromClass(class UObject* WorldContextObject, class UClass* ActorClass, FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner); // [0x3300a40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.AreSubtitlesEnabled
	// bool AreSubtitlesEnabled();                                                                                              // [0x3300a10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.AreAnyListenersWithinRange
	// bool AreAnyListenersWithinRange(class UObject* WorldContextObject, FVector& Location, float MaximumRange);               // [0x33008f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ApplyRadialDamageWithFalloff
	// bool ApplyRadialDamageWithFalloff(class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class UClass* DamageTypeClass, TArray<AActor*>& IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, TEnumAsByte<ECollisionChannel> DamagePreventionChannel); // [0x3300550] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ApplyRadialDamage
	// bool ApplyRadialDamage(class UObject* WorldContextObject, float BaseDamage, FVector& Origin, float DamageRadius, class UClass* DamageTypeClass, TArray<AActor*>& IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, TEnumAsByte<ECollisionChannel> DamagePreventionChannel); // [0x3300240] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ApplyPointDamage
	// float ApplyPointDamage(class AActor* DamagedActor, float BaseDamage, FVector& HitFromDirection, FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass); // [0x32fffc0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ApplyDamage
	// float ApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass); // [0x32ffe20] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.AnnounceAccessibleString
	// void AnnounceAccessibleString(FString AnnouncementString);                                                               // [0x32ffd90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ActivateReverbEffect
	// void ActivateReverbEffect(class UObject* WorldContextObject, class UReverbEffect* ReverbEffect, FName TagName, float Priority, float Volume, float FadeTime); // [0x32ffbc0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.GameSession
/// Size: 0x0018 (0x000220 - 0x000238)
class AGameSession : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	DMember(int32_t)                                   MaxSpectators                                               OFFSET(get<int32_t>, {0x220, 4, 0, 0})
	DMember(int32_t)                                   MaxPlayers                                                  OFFSET(get<int32_t>, {0x224, 4, 0, 0})
	DMember(int32_t)                                   MaxPartySize                                                OFFSET(get<int32_t>, {0x228, 4, 0, 0})
	DMember(char)                                      MaxSplitscreensPerConnection                                OFFSET(get<char>, {0x22C, 1, 0, 0})
	DMember(bool)                                      bRequiresPushToTalk                                         OFFSET(get<bool>, {0x22D, 1, 0, 0})
	SMember(FName)                                     SessionName                                                 OFFSET(getStruct<T>, {0x230, 8, 0, 0})
};

/// Class /Script/Engine.SpotLight
/// Size: 0x0008 (0x000230 - 0x000238)
class ASpotLight : public ALight
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(class USpotLightComponent*)                SpotLightComponent                                          OFFSET(get<T>, {0x230, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.SpotLight.SetOuterConeAngle
	// void SetOuterConeAngle(float NewOuterConeAngle);                                                                         // [0x3407620] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SpotLight.SetInnerConeAngle
	// void SetInnerConeAngle(float NewInnerConeAngle);                                                                         // [0x3407520] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.GeneratedMeshAreaLight
/// Size: 0x0000 (0x000238 - 0x000238)
class AGeneratedMeshAreaLight : public ASpotLight
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
};

/// Class /Script/Engine.HapticFeedbackEffect_Base
/// Size: 0x0000 (0x000028 - 0x000028)
class UHapticFeedbackEffect_Base : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.HapticFeedbackEffect_Buffer
/// Size: 0x0040 (0x000028 - 0x000068)
class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<char>)                              Amplitudes                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(int32_t)                                   SampleRate                                                  OFFSET(get<int32_t>, {0x38, 4, 0, 0})
};

/// Struct /Script/Engine.HapticFeedbackDetails_Curve
/// Size: 0x0110 (0x000000 - 0x000110)
class FHapticFeedbackDetails_Curve : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FRuntimeFloatCurve)                        Frequency                                                   OFFSET(getStruct<T>, {0x0, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        Amplitude                                                   OFFSET(getStruct<T>, {0x88, 136, 0, 0})
};

/// Class /Script/Engine.HapticFeedbackEffect_Curve
/// Size: 0x0110 (0x000028 - 0x000138)
class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	SMember(FHapticFeedbackDetails_Curve)              HapticDetails                                               OFFSET(getStruct<T>, {0x28, 272, 0, 0})
};

/// Class /Script/Engine.HapticFeedbackEffect_SoundWave
/// Size: 0x0038 (0x000028 - 0x000060)
class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class USoundWave*)                         SoundWave                                                   OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/Engine.HealthSnapshotBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.HealthSnapshotBlueprintLibrary.StopPerformanceSnapshots
	// void StopPerformanceSnapshots();                                                                                         // [0x33154e0] Final|Exec|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.HealthSnapshotBlueprintLibrary.StartPerformanceSnapshots
	// void StartPerformanceSnapshots();                                                                                        // [0x33154c0] Final|Exec|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.HealthSnapshotBlueprintLibrary.LogPerformanceSnapshot
	// void LogPerformanceSnapshot(FString SnapshotTitle, bool bResetStats);                                                    // [0x33145c0] Final|Exec|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.HLODEngineSubsystem
/// Size: 0x0000 (0x000030 - 0x000030)
class UHLODEngineSubsystem : public UEngineSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.HLODProxyMesh
/// Size: 0x0030 (0x000000 - 0x000030)
class FHLODProxyMesh : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TLazyObjectPtr<class ALODActor*>)          LODActor                                                    OFFSET(get<T>, {0x0, 28, 0, 0})
	CMember(class UStaticMesh*)                        StaticMesh                                                  OFFSET(get<T>, {0x20, 8, 0, 0})
	SMember(FName)                                     Key                                                         OFFSET(getStruct<T>, {0x28, 8, 0, 0})
};

/// Class /Script/Engine.HLODProxy
/// Size: 0x0060 (0x000028 - 0x000088)
class UHLODProxy : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<FHLODProxyMesh>)                    ProxyMeshes                                                 OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TMap<class UHLODProxyDesc*, FHLODProxyMesh>) HLODActors                                                OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Class /Script/Engine.HLODProxyDesc
/// Size: 0x0000 (0x000028 - 0x000028)
class UHLODProxyDesc : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ImportanceSamplingLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.ImportanceSamplingLibrary.RandomSobolFloat
	// float RandomSobolFloat(int32_t Index, int32_t Dimension, float Seed);                                                    // [0x3314fd0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.RandomSobolCell3D
	// FVector RandomSobolCell3D(int32_t Index, int32_t NumCells, FVector Cell, FVector Seed);                                  // [0x3314e20] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.RandomSobolCell2D
	// FVector2D RandomSobolCell2D(int32_t Index, int32_t NumCells, FVector2D Cell, FVector2D Seed);                            // [0x3314cd0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.NextSobolFloat
	// float NextSobolFloat(int32_t Index, int32_t Dimension, float PreviousValue);                                             // [0x3314b00] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.NextSobolCell3D
	// FVector NextSobolCell3D(int32_t Index, int32_t NumCells, FVector PreviousValue);                                         // [0x33149d0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.NextSobolCell2D
	// FVector2D NextSobolCell2D(int32_t Index, int32_t NumCells, FVector2D PreviousValue);                                     // [0x33148d0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.MakeImportanceTexture
	// FImportanceTexture MakeImportanceTexture(class UTexture2D* Texture, TEnumAsByte<EImportanceWeight> WeightingFunc);       // [0x33146f0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.ImportanceSample
	// void ImportanceSample(FImportanceTexture& Texture, FVector2D& Rand, int32_t Samples, float Intensity, FVector2D& SamplePosition, FLinearColor& SampleColor, float& SampleIntensity, float& SampleSize); // [0x33142d0] Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.BreakImportanceTexture
	// void BreakImportanceTexture(FImportanceTexture& ImportanceTexture, class UTexture2D*& Texture, TEnumAsByte<EImportanceWeight>& WeightingFunc); // [0x33126a0] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.ImportantToggleSettingInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UImportantToggleSettingInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.InGameAdManager
/// Size: 0x0028 (0x000038 - 0x000060)
class UInGameAdManager : public UPlatformInterfaceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      bShouldPauseWhileAdOpen                                     OFFSET(get<bool>, {0x38, 1, 1, 0})
	CMember(TArray<FDelegateProperty>)                 ClickedBannerDelegates                                      OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FDelegateProperty>)                 ClosedAdDelegates                                           OFFSET(get<T>, {0x50, 16, 0, 0})
};

/// Struct /Script/Engine.ComponentKey
/// Size: 0x0020 (0x000000 - 0x000020)
class FComponentKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UClass*)                             OwnerClass                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     SCSVariableName                                             OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FGuid)                                     AssociatedGuid                                              OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.ComponentOverrideRecord
/// Size: 0x0078 (0x000000 - 0x000078)
class FComponentOverrideRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(class UClass*)                             ComponentClass                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UActorComponent*)                    ComponentTemplate                                           OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FComponentKey)                             ComponentKey                                                OFFSET(getStruct<T>, {0x10, 32, 0, 0})
	SMember(FBlueprintCookedComponentInstancingData)   CookedComponentInstancingData                               OFFSET(getStruct<T>, {0x30, 72, 0, 0})
};

/// Class /Script/Engine.InheritableComponentHandler
/// Size: 0x0020 (0x000028 - 0x000048)
class UInheritableComponentHandler : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FComponentOverrideRecord>)          Records                                                     OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<class UActorComponent*>)            UnnecessaryComponents                                       OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Engine.InputDelegateBinding
/// Size: 0x0000 (0x000028 - 0x000028)
class UInputDelegateBinding : public UDynamicBlueprintBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Engine.BlueprintInputDelegateBinding
/// Size: 0x0004 (0x000000 - 0x000004)
class FBlueprintInputDelegateBinding : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bConsumeInput                                               OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bExecuteWhenPaused                                          OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bOverrideParentBinding                                      OFFSET(get<bool>, {0x0, 1, 1, 2})
};

/// Struct /Script/Engine.BlueprintInputActionDelegateBinding
/// Size: 0x0014 (0x000004 - 0x000018)
class FBlueprintInputActionDelegateBinding : public FBlueprintInputDelegateBinding
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     InputActionName                                             OFFSET(getStruct<T>, {0x4, 8, 0, 0})
	CMember(TEnumAsByte<EInputEvent>)                  InputKeyEvent                                               OFFSET(get<T>, {0xC, 1, 0, 0})
	SMember(FName)                                     FunctionNameToBind                                          OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Class /Script/Engine.InputActionDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UInputActionDelegateBinding : public UInputDelegateBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FBlueprintInputActionDelegateBinding>) InputActionDelegateBindings                              OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/Engine.BlueprintInputAxisDelegateBinding
/// Size: 0x0010 (0x000004 - 0x000014)
class FBlueprintInputAxisDelegateBinding : public FBlueprintInputDelegateBinding
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FName)                                     InputAxisName                                               OFFSET(getStruct<T>, {0x4, 8, 0, 0})
	SMember(FName)                                     FunctionNameToBind                                          OFFSET(getStruct<T>, {0xC, 8, 0, 0})
};

/// Class /Script/Engine.InputAxisDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UInputAxisDelegateBinding : public UInputDelegateBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FBlueprintInputAxisDelegateBinding>) InputAxisDelegateBindings                                  OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/Engine.BlueprintInputAxisKeyDelegateBinding
/// Size: 0x0024 (0x000004 - 0x000028)
class FBlueprintInputAxisKeyDelegateBinding : public FBlueprintInputDelegateBinding
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FKey)                                      AxisKey                                                     OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	SMember(FName)                                     FunctionNameToBind                                          OFFSET(getStruct<T>, {0x20, 8, 0, 0})
};

/// Class /Script/Engine.InputAxisKeyDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FBlueprintInputAxisKeyDelegateBinding>) InputAxisKeyDelegateBindings                            OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/Engine.CachedKeyToActionInfo
/// Size: 0x0070 (0x000000 - 0x000070)
class FCachedKeyToActionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(class UPlayerInput*)                       PlayerInput                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/Engine.InputComponent
/// Size: 0x0088 (0x0000B0 - 0x000138)
class UInputComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	CMember(TArray<FCachedKeyToActionInfo>)            CachedKeyToActionInfo                                       OFFSET(get<T>, {0x120, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.InputComponent.WasControllerKeyJustReleased
	// bool WasControllerKeyJustReleased(FKey Key);                                                                             // [0x331a5b0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.WasControllerKeyJustPressed
	// bool WasControllerKeyJustPressed(FKey Key);                                                                              // [0x331a5b0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.IsControllerKeyDown
	// bool IsControllerKeyDown(FKey Key);                                                                                      // [0x331a5b0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetTouchState
	// void GetTouchState(int32_t FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed);                  // [0x331a430] Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerVectorKeyState
	// FVector GetControllerVectorKeyState(FKey Key);                                                                           // [0x3319eb0] Final|Native|Private|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerMouseDelta
	// void GetControllerMouseDelta(float& DeltaX, float& DeltaY);                                                              // [0x3319dd0] Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerKeyTimeDown
	// float GetControllerKeyTimeDown(FKey Key);                                                                                // [0x3319ba0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerAnalogStickState
	// void GetControllerAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float& StickX, float& StickY);        // [0x3319ca0] Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerAnalogKeyState
	// float GetControllerAnalogKeyState(FKey Key);                                                                             // [0x3319ba0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.BlueprintInputKeyDelegateBinding
/// Size: 0x0034 (0x000004 - 0x000038)
class FBlueprintInputKeyDelegateBinding : public FBlueprintInputDelegateBinding
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FInputChord)                               InputChord                                                  OFFSET(getStruct<T>, {0x8, 32, 0, 0})
	CMember(TEnumAsByte<EInputEvent>)                  InputKeyEvent                                               OFFSET(get<T>, {0x28, 1, 0, 0})
	SMember(FName)                                     FunctionNameToBind                                          OFFSET(getStruct<T>, {0x2C, 8, 0, 0})
};

/// Class /Script/Engine.InputKeyDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UInputKeyDelegateBinding : public UInputDelegateBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FBlueprintInputKeyDelegateBinding>) InputKeyDelegateBindings                                    OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/Engine.InputAxisProperties
/// Size: 0x0010 (0x000000 - 0x000010)
class FInputAxisProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     DeadZone                                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Sensitivity                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Exponent                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      bInvert                                                     OFFSET(get<bool>, {0xC, 1, 1, 0})
};

/// Struct /Script/Engine.InputAxisConfigEntry
/// Size: 0x0018 (0x000000 - 0x000018)
class FInputAxisConfigEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     AxisKeyName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FInputAxisProperties)                      AxisProperties                                              OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.InputActionKeyMapping
/// Size: 0x0028 (0x000000 - 0x000028)
class FInputActionKeyMapping : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     ActionName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bShift                                                      OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      bCtrl                                                       OFFSET(get<bool>, {0x8, 1, 1, 1})
	DMember(bool)                                      bAlt                                                        OFFSET(get<bool>, {0x8, 1, 1, 2})
	DMember(bool)                                      bCmd                                                        OFFSET(get<bool>, {0x8, 1, 1, 3})
	SMember(FKey)                                      Key                                                         OFFSET(getStruct<T>, {0x10, 24, 0, 0})
};

/// Struct /Script/Engine.InputAxisKeyMapping
/// Size: 0x0028 (0x000000 - 0x000028)
class FInputAxisKeyMapping : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     AxisName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FKey)                                      Key                                                         OFFSET(getStruct<T>, {0x10, 24, 0, 0})
};

/// Struct /Script/Engine.InputActionSpeechMapping
/// Size: 0x0010 (0x000000 - 0x000010)
class FInputActionSpeechMapping : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     ActionName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     SpeechKeyword                                               OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Class /Script/Engine.InputSettings
/// Size: 0x0118 (0x000028 - 0x000140)
class UInputSettings : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	CMember(TArray<FInputAxisConfigEntry>)             AxisConfig                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(bool)                                      bAltEnterTogglesFullscreen                                  OFFSET(get<bool>, {0x38, 1, 1, 0})
	DMember(bool)                                      bF11TogglesFullscreen                                       OFFSET(get<bool>, {0x38, 1, 1, 1})
	DMember(bool)                                      bUseMouseForTouch                                           OFFSET(get<bool>, {0x38, 1, 1, 2})
	DMember(bool)                                      bEnableMouseSmoothing                                       OFFSET(get<bool>, {0x38, 1, 1, 3})
	DMember(bool)                                      bEnableFOVScaling                                           OFFSET(get<bool>, {0x38, 1, 1, 4})
	DMember(bool)                                      bCaptureMouseOnLaunch                                       OFFSET(get<bool>, {0x38, 1, 1, 5})
	DMember(bool)                                      bDefaultViewportMouseLock                                   OFFSET(get<bool>, {0x38, 1, 1, 6})
	DMember(bool)                                      bAlwaysShowTouchInterface                                   OFFSET(get<bool>, {0x38, 1, 1, 7})
	DMember(bool)                                      bShowConsoleOnFourFingerTap                                 OFFSET(get<bool>, {0x39, 1, 1, 0})
	DMember(bool)                                      bEnableGestureRecognizer                                    OFFSET(get<bool>, {0x39, 1, 1, 1})
	DMember(bool)                                      bUseAutocorrect                                             OFFSET(get<bool>, {0x3A, 1, 0, 0})
	CMember(TArray<FString>)                           ExcludedAutocorrectOS                                       OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FString>)                           ExcludedAutocorrectCultures                                 OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FString>)                           ExcludedAutocorrectDeviceModels                             OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(EMouseCaptureMode)                         DefaultViewportMouseCaptureMode                             OFFSET(get<T>, {0x70, 1, 0, 0})
	CMember(EMouseLockMode)                            DefaultViewportMouseLockMode                                OFFSET(get<T>, {0x71, 1, 0, 0})
	DMember(float)                                     FOVScale                                                    OFFSET(get<float>, {0x74, 4, 0, 0})
	DMember(float)                                     DoubleClickTime                                             OFFSET(get<float>, {0x78, 4, 0, 0})
	CMember(TArray<FInputActionKeyMapping>)            ActionMappings                                              OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<FInputAxisKeyMapping>)              AxisMappings                                                OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<FInputActionSpeechMapping>)         SpeechMappings                                              OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             DefaultPlayerInputClass                                     OFFSET(get<T>, {0xB0, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             DefaultInputComponentClass                                  OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FSoftObjectPath)                           DefaultTouchInterface                                       OFFSET(getStruct<T>, {0x100, 24, 0, 0})
	SMember(FKey)                                      ConsoleKey                                                  OFFSET(getStruct<T>, {0x118, 24, 0, 0})
	CMember(TArray<FKey>)                              ConsoleKeys                                                 OFFSET(get<T>, {0x130, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.InputSettings.SaveKeyMappings
	// void SaveKeyMappings();                                                                                                  // [0x331aa40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InputSettings.RemoveAxisMapping
	// void RemoveAxisMapping(FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                     // [0x331a810] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InputSettings.RemoveActionMapping
	// void RemoveActionMapping(FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                 // [0x331a6a0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InputSettings.GetInputSettings
	// class UInputSettings* GetInputSettings();                                                                                // [0x3319fc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.InputSettings.GetAxisNames
	// void GetAxisNames(TArray<FName>& AxisNames);                                                                             // [0x3319af0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputSettings.GetAxisMappingByName
	// void GetAxisMappingByName(FName InAxisName, TArray<FInputAxisKeyMapping>& OutMappings);                                  // [0x33199b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputSettings.GetActionNames
	// void GetActionNames(TArray<FName>& ActionNames);                                                                         // [0x3319900] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputSettings.GetActionMappingByName
	// void GetActionMappingByName(FName InActionName, TArray<FInputActionKeyMapping>& OutMappings);                            // [0x33197c0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputSettings.ForceRebuildKeymaps
	// void ForceRebuildKeymaps();                                                                                              // [0x33197a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InputSettings.AddAxisMapping
	// void AddAxisMapping(FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                        // [0x3318ea0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InputSettings.AddActionMapping
	// void AddActionMapping(FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                    // [0x3318d30] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Struct /Script/Engine.BlueprintInputTouchDelegateBinding
/// Size: 0x000C (0x000004 - 0x000010)
class FBlueprintInputTouchDelegateBinding : public FBlueprintInputDelegateBinding
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TEnumAsByte<EInputEvent>)                  InputKeyEvent                                               OFFSET(get<T>, {0x4, 1, 0, 0})
	SMember(FName)                                     FunctionNameToBind                                          OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Class /Script/Engine.InputTouchDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UInputTouchDelegateBinding : public UInputDelegateBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FBlueprintInputTouchDelegateBinding>) InputTouchDelegateBindings                                OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.InputVectorAxisDelegateBinding
/// Size: 0x0000 (0x000038 - 0x000038)
class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.Interface_AssetUserData
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterface_AssetUserData : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.BoneReferenceSkeletonProvider
/// Size: 0x0000 (0x000028 - 0x000028)
class UBoneReferenceSkeletonProvider : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Interface_CollisionDataProvider
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterface_CollisionDataProvider : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Interface_PostProcessVolume
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterface_PostProcessVolume : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Interface_PreviewMeshProvider
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterface_PreviewMeshProvider : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Engine.CurveEdEntry
/// Size: 0x0038 (0x000000 - 0x000038)
class FCurveEdEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UObject*)                            CurveObject                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FColor)                                    CurveColor                                                  OFFSET(getStruct<T>, {0x8, 4, 0, 0})
	SMember(FString)                                   CurveName                                                   OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	DMember(int32_t)                                   bHideCurve                                                  OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   bColorCurve                                                 OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   bFloatingPointColorCurve                                    OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   bClamp                                                      OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(float)                                     ClampLow                                                    OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     ClampHigh                                                   OFFSET(get<float>, {0x34, 4, 0, 0})
};

/// Struct /Script/Engine.CurveEdTab
/// Size: 0x0030 (0x000000 - 0x000030)
class FCurveEdTab : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FString)                                   TabName                                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<FCurveEdEntry>)                     Curves                                                      OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(float)                                     ViewStartInput                                              OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     ViewEndInput                                                OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     ViewStartOutput                                             OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     ViewEndOutput                                               OFFSET(get<float>, {0x2C, 4, 0, 0})
};

/// Class /Script/Engine.InterpCurveEdSetup
/// Size: 0x0018 (0x000028 - 0x000040)
class UInterpCurveEdSetup : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FCurveEdTab>)                       Tabs                                                        OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(int32_t)                                   ActiveTab                                                   OFFSET(get<int32_t>, {0x38, 4, 0, 0})
};

/// Class /Script/Engine.InterpData
/// Size: 0x0048 (0x000028 - 0x000070)
class UInterpData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(float)                                     InterpLength                                                OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     PathBuildTime                                               OFFSET(get<float>, {0x2C, 4, 0, 0})
	CMember(TArray<class UInterpGroup*>)               InterpGroups                                                OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(class UInterpCurveEdSetup*)                CurveEdSetup                                                OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(float)                                     EdSectionStart                                              OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     EdSectionEnd                                                OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(bool)                                      bShouldBakeAndPrune                                         OFFSET(get<bool>, {0x50, 1, 1, 0})
	CMember(class UInterpGroupDirector*)               CachedDirectorGroup                                         OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(TArray<FName>)                             AllEventNames                                               OFFSET(get<T>, {0x60, 16, 0, 0})
};

/// Class /Script/Engine.InterpFilter
/// Size: 0x0010 (0x000028 - 0x000038)
class UInterpFilter : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FString)                                   Caption                                                     OFFSET(getStruct<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.InterpFilter_Classes
/// Size: 0x0000 (0x000038 - 0x000038)
class UInterpFilter_Classes : public UInterpFilter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.InterpFilter_Custom
/// Size: 0x0000 (0x000038 - 0x000038)
class UInterpFilter_Custom : public UInterpFilter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.InterpGroup
/// Size: 0x0028 (0x000028 - 0x000050)
class UInterpGroup : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<class UInterpTrack*>)               InterpTracks                                                OFFSET(get<T>, {0x30, 16, 0, 0})
	SMember(FName)                                     GroupName                                                   OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FColor)                                    GroupColor                                                  OFFSET(getStruct<T>, {0x48, 4, 0, 0})
	DMember(bool)                                      bCollapsed                                                  OFFSET(get<bool>, {0x4C, 1, 1, 0})
	DMember(bool)                                      bVisible                                                    OFFSET(get<bool>, {0x4C, 1, 1, 1})
	DMember(bool)                                      bIsFolder                                                   OFFSET(get<bool>, {0x4C, 1, 1, 2})
	DMember(bool)                                      bIsParented                                                 OFFSET(get<bool>, {0x4C, 1, 1, 3})
	DMember(bool)                                      bIsSelected                                                 OFFSET(get<bool>, {0x4C, 1, 1, 4})
};

/// Class /Script/Engine.InterpGroupCamera
/// Size: 0x0010 (0x000050 - 0x000060)
class UInterpGroupCamera : public UInterpGroup
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UCameraAnim*)                        CameraAnimInst                                              OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(float)                                     CompressTolerance                                           OFFSET(get<float>, {0x58, 4, 0, 0})
};

/// Class /Script/Engine.InterpGroupDirector
/// Size: 0x0000 (0x000050 - 0x000050)
class UInterpGroupDirector : public UInterpGroup
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Engine.InterpGroupInst
/// Size: 0x0020 (0x000028 - 0x000048)
class UInterpGroupInst : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UInterpGroup*)                       Group                                                       OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class AActor*)                             GroupActor                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<class UInterpTrackInst*>)           TrackInst                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Engine.InterpGroupInstCamera
/// Size: 0x0000 (0x000048 - 0x000048)
class UInterpGroupInstCamera : public UInterpGroupInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/Engine.InterpGroupInstDirector
/// Size: 0x0000 (0x000048 - 0x000048)
class UInterpGroupInstDirector : public UInterpGroupInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Struct /Script/Engine.InterpControlPoint
/// Size: 0x001C (0x000000 - 0x00001C)
class FInterpControlPoint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FVector)                                   PositionControlPoint                                        OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(bool)                                      bPositionIsRelative                                         OFFSET(get<bool>, {0xC, 1, 0, 0})
};

/// Class /Script/Engine.InterpToMovementComponent
/// Size: 0x00A0 (0x0000F0 - 0x000190)
class UInterpToMovementComponent : public UMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(bool)                                      bPauseOnImpact                                              OFFSET(get<bool>, {0xF4, 1, 1, 0})
	DMember(bool)                                      bSweep                                                      OFFSET(get<bool>, {0xF8, 1, 0, 0})
	CMember(ETeleportType)                             TeleportType                                                OFFSET(get<T>, {0xF9, 1, 0, 0})
	CMember(EInterpToBehaviourType)                    BehaviourType                                               OFFSET(get<T>, {0xFA, 1, 0, 0})
	DMember(bool)                                      bCheckIfStillInWorld                                        OFFSET(get<bool>, {0xFB, 1, 0, 0})
	DMember(bool)                                      bForceSubStepping                                           OFFSET(get<bool>, {0xFC, 1, 1, 0})
	SMember(FMulticastInlineDelegate)                  OnInterpToReverse                                           OFFSET(getStruct<T>, {0x100, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnInterpToStop                                              OFFSET(getStruct<T>, {0x110, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnWaitBeginDelegate                                         OFFSET(getStruct<T>, {0x120, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnWaitEndDelegate                                           OFFSET(getStruct<T>, {0x130, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnResetDelegate                                             OFFSET(getStruct<T>, {0x140, 16, 0, 0})
	DMember(float)                                     MaxSimulationTimeStep                                       OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(int32_t)                                   MaxSimulationIterations                                     OFFSET(get<int32_t>, {0x154, 4, 0, 0})
	CMember(TArray<FInterpControlPoint>)               ControlPoints                                               OFFSET(get<T>, {0x158, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.InterpToMovementComponent.StopSimulating
	// void StopSimulating(FHitResult& HitResult);                                                                              // [0x331e260] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InterpToMovementComponent.RestartMovement
	// void RestartMovement(float InitialDirection);                                                                            // [0x331e1e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature
	// void OnInterpToWaitEndDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                                 // [0x198a600] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature
	// void OnInterpToWaitBeginDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                               // [0x198a600] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature
	// void OnInterpToStopDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                                    // [0x198a600] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature
	// void OnInterpToReverseDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                                 // [0x198a600] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature
	// void OnInterpToResetDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                                   // [0x198a600] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.FinaliseControlPoints
	// void FinaliseControlPoints();                                                                                            // [0x331e1c0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.InterpTrack
/// Size: 0x0048 (0x000028 - 0x000070)
class UInterpTrack : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TArray<class UInterpTrack*>)               SubTracks                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(class UClass*)                             TrackInstClass                                              OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TEnumAsByte<ETrackActiveCondition>)        ActiveCondition                                             OFFSET(get<T>, {0x50, 1, 0, 0})
	SMember(FString)                                   TrackTitle                                                  OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	DMember(bool)                                      bOnePerGroup                                                OFFSET(get<bool>, {0x68, 1, 1, 0})
	DMember(bool)                                      bDirGroupOnly                                               OFFSET(get<bool>, {0x68, 1, 1, 1})
	DMember(bool)                                      bDisableTrack                                               OFFSET(get<bool>, {0x68, 1, 1, 2})
	DMember(bool)                                      bIsSelected                                                 OFFSET(get<bool>, {0x68, 1, 1, 3})
	DMember(bool)                                      bIsAnimControlTrack                                         OFFSET(get<bool>, {0x68, 1, 1, 4})
	DMember(bool)                                      bSubTrackOnly                                               OFFSET(get<bool>, {0x68, 1, 1, 5})
	DMember(bool)                                      bVisible                                                    OFFSET(get<bool>, {0x68, 1, 1, 6})
	DMember(bool)                                      bIsRecording                                                OFFSET(get<bool>, {0x68, 1, 1, 7})
};

/// Class /Script/Engine.InterpTrackFloatBase
/// Size: 0x0020 (0x000070 - 0x000090)
class UInterpTrackFloatBase : public UInterpTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FInterpCurveFloat)                         FloatTrack                                                  OFFSET(getStruct<T>, {0x70, 24, 0, 0})
	DMember(float)                                     CurveTension                                                OFFSET(get<float>, {0x88, 4, 0, 0})
};

/// Struct /Script/Engine.AnimControlTrackKey
/// Size: 0x0020 (0x000000 - 0x000020)
class FAnimControlTrackKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(float)                                     StartTime                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(class UAnimSequence*)                      AnimSeq                                                     OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(float)                                     AnimStartOffset                                             OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     AnimEndOffset                                               OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     AnimPlayRate                                                OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x1C, 1, 1, 0})
	DMember(bool)                                      bReverse                                                    OFFSET(get<bool>, {0x1C, 1, 1, 1})
};

/// Class /Script/Engine.InterpTrackAnimControl
/// Size: 0x0020 (0x000090 - 0x0000B0)
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FName)                                     SlotName                                                    OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	CMember(TArray<FAnimControlTrackKey>)              AnimSeqs                                                    OFFSET(get<T>, {0x98, 16, 0, 0})
	DMember(bool)                                      bSkipAnimNotifiers                                          OFFSET(get<bool>, {0xA8, 1, 1, 0})
};

/// Class /Script/Engine.InterpTrackVectorBase
/// Size: 0x0020 (0x000070 - 0x000090)
class UInterpTrackVectorBase : public UInterpTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FInterpCurveVector)                        VectorTrack                                                 OFFSET(getStruct<T>, {0x70, 24, 0, 0})
	DMember(float)                                     CurveTension                                                OFFSET(get<float>, {0x88, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackAudioMaster
/// Size: 0x0000 (0x000090 - 0x000090)
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Struct /Script/Engine.BoolTrackKey
/// Size: 0x0008 (0x000000 - 0x000008)
class FBoolTrackKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(bool)                                      Value                                                       OFFSET(get<bool>, {0x4, 1, 1, 0})
};

/// Class /Script/Engine.InterpTrackBoolProp
/// Size: 0x0018 (0x000070 - 0x000088)
class UInterpTrackBoolProp : public UInterpTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<FBoolTrackKey>)                     BoolTrack                                                   OFFSET(get<T>, {0x70, 16, 0, 0})
	SMember(FName)                                     PropertyName                                                OFFSET(getStruct<T>, {0x80, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackColorProp
/// Size: 0x0008 (0x000090 - 0x000098)
class UInterpTrackColorProp : public UInterpTrackVectorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FName)                                     PropertyName                                                OFFSET(getStruct<T>, {0x90, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackColorScale
/// Size: 0x0000 (0x000090 - 0x000090)
class UInterpTrackColorScale : public UInterpTrackVectorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Struct /Script/Engine.DirectorTrackCut
/// Size: 0x0014 (0x000000 - 0x000014)
class FDirectorTrackCut : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     TransitionTime                                              OFFSET(get<float>, {0x4, 4, 0, 0})
	SMember(FName)                                     TargetCamGroup                                              OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   ShotNumber                                                  OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackDirector
/// Size: 0x0018 (0x000070 - 0x000088)
class UInterpTrackDirector : public UInterpTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<FDirectorTrackCut>)                 CutTrack                                                    OFFSET(get<T>, {0x70, 16, 0, 0})
	DMember(bool)                                      bSimulateCameraCutsOnClients                                OFFSET(get<bool>, {0x80, 1, 1, 0})
};

/// Struct /Script/Engine.EventTrackKey
/// Size: 0x000C (0x000000 - 0x00000C)
class FEventTrackKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FName)                                     EventName                                                   OFFSET(getStruct<T>, {0x4, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackEvent
/// Size: 0x0018 (0x000070 - 0x000088)
class UInterpTrackEvent : public UInterpTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<FEventTrackKey>)                    EventTrack                                                  OFFSET(get<T>, {0x70, 16, 0, 0})
	DMember(bool)                                      bFireEventsWhenForwards                                     OFFSET(get<bool>, {0x80, 1, 1, 0})
	DMember(bool)                                      bFireEventsWhenBackwards                                    OFFSET(get<bool>, {0x80, 1, 1, 1})
	DMember(bool)                                      bFireEventsWhenJumpingForwards                              OFFSET(get<bool>, {0x80, 1, 1, 2})
	DMember(bool)                                      bUseCustomEventName                                         OFFSET(get<bool>, {0x80, 1, 1, 3})
};

/// Class /Script/Engine.InterpTrackFade
/// Size: 0x0018 (0x000090 - 0x0000A8)
class UInterpTrackFade : public UInterpTrackFloatBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	DMember(bool)                                      bPersistFade                                                OFFSET(get<bool>, {0x90, 1, 1, 0})
	DMember(bool)                                      bFadeAudio                                                  OFFSET(get<bool>, {0x90, 1, 1, 1})
	SMember(FLinearColor)                              FadeColor                                                   OFFSET(getStruct<T>, {0x94, 16, 0, 0})
};

/// Class /Script/Engine.InterpTrackFloatAnimBPParam
/// Size: 0x0020 (0x000090 - 0x0000B0)
class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(class UAnimBlueprintGeneratedClass*)       AnimBlueprintClass                                          OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(class UClass*)                             AnimClass                                                   OFFSET(get<T>, {0x98, 8, 0, 0})
	SMember(FName)                                     ParamName                                                   OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackFloatMaterialParam
/// Size: 0x0018 (0x000090 - 0x0000A8)
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TArray<class UMaterialInterface*>)         TargetMaterials                                             OFFSET(get<T>, {0x90, 16, 0, 0})
	SMember(FName)                                     ParamName                                                   OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackFloatParticleParam
/// Size: 0x0008 (0x000090 - 0x000098)
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FName)                                     ParamName                                                   OFFSET(getStruct<T>, {0x90, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackFloatProp
/// Size: 0x0008 (0x000090 - 0x000098)
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FName)                                     PropertyName                                                OFFSET(getStruct<T>, {0x90, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackInst
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterpTrackInst : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.InterpTrackInstAnimControl
/// Size: 0x0008 (0x000028 - 0x000030)
class UInterpTrackInstAnimControl : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     LastUpdatePosition                                          OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstAudioMaster
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.InterpTrackInstProperty
/// Size: 0x0028 (0x000028 - 0x000050)
class UInterpTrackInstProperty : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UObject*)                            PropertyOuterObjectInst                                     OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstBoolProp
/// Size: 0x0018 (0x000050 - 0x000068)
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	DMember(bool)                                      ResetBool                                                   OFFSET(get<bool>, {0x60, 1, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstColorProp
/// Size: 0x0010 (0x000050 - 0x000060)
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FColor)                                    ResetColor                                                  OFFSET(getStruct<T>, {0x58, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstColorScale
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterpTrackInstColorScale : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.InterpTrackInstDirector
/// Size: 0x0008 (0x000028 - 0x000030)
class UInterpTrackInstDirector : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class AActor*)                             OldViewTarget                                               OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstEvent
/// Size: 0x0008 (0x000028 - 0x000030)
class UInterpTrackInstEvent : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     LastUpdatePosition                                          OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstFade
/// Size: 0x0000 (0x000028 - 0x000028)
class UInterpTrackInstFade : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.InterpTrackInstFloatAnimBPParam
/// Size: 0x0018 (0x000028 - 0x000040)
class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UAnimInstance*)                      AnimScriptInstance                                          OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(float)                                     ResetFloat                                                  OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Struct /Script/Engine.PrimitiveMaterialRef
/// Size: 0x0018 (0x000000 - 0x000018)
class FPrimitiveMaterialRef : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UPrimitiveComponent*)                Primitive                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UDecalComponent*)                    Decal                                                       OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   ElementIndex                                                OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstFloatMaterialParam
/// Size: 0x0038 (0x000028 - 0x000060)
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TArray<class UMaterialInstanceDynamic*>)   MaterialInstances                                           OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<float>)                             ResetFloats                                                 OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FPrimitiveMaterialRef>)             PrimitiveMaterialRefs                                       OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(class UInterpTrackFloatMaterialParam*)     InstancedTrack                                              OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstFloatParticleParam
/// Size: 0x0008 (0x000028 - 0x000030)
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     ResetFloat                                                  OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstFloatProp
/// Size: 0x0010 (0x000050 - 0x000060)
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(float)                                     ResetFloat                                                  OFFSET(get<float>, {0x58, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstLinearColorProp
/// Size: 0x0018 (0x000050 - 0x000068)
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FLinearColor)                              ResetColor                                                  OFFSET(getStruct<T>, {0x58, 16, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstMove
/// Size: 0x0018 (0x000028 - 0x000040)
class UInterpTrackInstMove : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FVector)                                   ResetLocation                                               OFFSET(getStruct<T>, {0x28, 12, 0, 0})
	SMember(FRotator)                                  ResetRotation                                               OFFSET(getStruct<T>, {0x34, 12, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstParticleReplay
/// Size: 0x0008 (0x000028 - 0x000030)
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     LastUpdatePosition                                          OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstSlomo
/// Size: 0x0008 (0x000028 - 0x000030)
class UInterpTrackInstSlomo : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     OldTimeDilation                                             OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstSound
/// Size: 0x0010 (0x000028 - 0x000038)
class UInterpTrackInstSound : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     LastUpdatePosition                                          OFFSET(get<float>, {0x28, 4, 0, 0})
	CMember(class UAudioComponent*)                    PlayAudioComp                                               OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstToggle
/// Size: 0x0010 (0x000028 - 0x000038)
class UInterpTrackInstToggle : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TEnumAsByte<ETrackToggleAction>)           Action                                                      OFFSET(get<T>, {0x28, 1, 0, 0})
	DMember(float)                                     LastUpdatePosition                                          OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(bool)                                      bSavedActiveState                                           OFFSET(get<bool>, {0x30, 1, 1, 0})
};

/// Class /Script/Engine.InterpTrackInstVectorMaterialParam
/// Size: 0x0038 (0x000028 - 0x000060)
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TArray<class UMaterialInstanceDynamic*>)   MaterialInstances                                           OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<FVector>)                           ResetVectors                                                OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FPrimitiveMaterialRef>)             PrimitiveMaterialRefs                                       OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(class UInterpTrackVectorMaterialParam*)    InstancedTrack                                              OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstVectorProp
/// Size: 0x0018 (0x000050 - 0x000068)
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FVector)                                   ResetVector                                                 OFFSET(getStruct<T>, {0x58, 12, 0, 0})
};

/// Class /Script/Engine.InterpTrackInstVisibility
/// Size: 0x0008 (0x000028 - 0x000030)
class UInterpTrackInstVisibility : public UInterpTrackInst
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TEnumAsByte<EVisibilityTrackAction>)       Action                                                      OFFSET(get<T>, {0x28, 1, 0, 0})
	DMember(float)                                     LastUpdatePosition                                          OFFSET(get<float>, {0x2C, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackLinearColorBase
/// Size: 0x0020 (0x000070 - 0x000090)
class UInterpTrackLinearColorBase : public UInterpTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FInterpCurveLinearColor)                   LinearColorTrack                                            OFFSET(getStruct<T>, {0x70, 24, 0, 0})
	DMember(float)                                     CurveTension                                                OFFSET(get<float>, {0x88, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackLinearColorProp
/// Size: 0x0008 (0x000090 - 0x000098)
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FName)                                     PropertyName                                                OFFSET(getStruct<T>, {0x90, 8, 0, 0})
};

/// Struct /Script/Engine.InterpLookupPoint
/// Size: 0x000C (0x000000 - 0x00000C)
class FInterpLookupPoint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     GroupName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.InterpLookupTrack
/// Size: 0x0010 (0x000000 - 0x000010)
class FInterpLookupTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FInterpLookupPoint>)                Points                                                      OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/Engine.InterpTrackMove
/// Size: 0x0058 (0x000070 - 0x0000C8)
class UInterpTrackMove : public UInterpTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FInterpCurveVector)                        PosTrack                                                    OFFSET(getStruct<T>, {0x70, 24, 0, 0})
	SMember(FInterpCurveVector)                        EulerTrack                                                  OFFSET(getStruct<T>, {0x88, 24, 0, 0})
	SMember(FInterpLookupTrack)                        LookupTrack                                                 OFFSET(getStruct<T>, {0xA0, 16, 0, 0})
	SMember(FName)                                     LookAtGroupName                                             OFFSET(getStruct<T>, {0xB0, 8, 0, 0})
	DMember(float)                                     LinCurveTension                                             OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(float)                                     AngCurveTension                                             OFFSET(get<float>, {0xBC, 4, 0, 0})
	DMember(bool)                                      bUseQuatInterpolation                                       OFFSET(get<bool>, {0xC0, 1, 1, 0})
	DMember(bool)                                      bShowArrowAtKeys                                            OFFSET(get<bool>, {0xC0, 1, 1, 1})
	DMember(bool)                                      bDisableMovement                                            OFFSET(get<bool>, {0xC0, 1, 1, 2})
	DMember(bool)                                      bShowTranslationOnCurveEd                                   OFFSET(get<bool>, {0xC0, 1, 1, 3})
	DMember(bool)                                      bShowRotationOnCurveEd                                      OFFSET(get<bool>, {0xC0, 1, 1, 4})
	DMember(bool)                                      bHide3DTrack                                                OFFSET(get<bool>, {0xC0, 1, 1, 5})
	CMember(TEnumAsByte<EInterpTrackMoveRotMode>)      RotMode                                                     OFFSET(get<T>, {0xC4, 1, 0, 0})
};

/// Class /Script/Engine.InterpTrackMoveAxis
/// Size: 0x0018 (0x000090 - 0x0000A8)
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TEnumAsByte<EInterpMoveAxis>)              MoveAxis                                                    OFFSET(get<T>, {0x90, 1, 0, 0})
	SMember(FInterpLookupTrack)                        LookupTrack                                                 OFFSET(getStruct<T>, {0x98, 16, 0, 0})
};

/// Struct /Script/Engine.ParticleReplayTrackKey
/// Size: 0x000C (0x000000 - 0x00000C)
class FParticleReplayTrackKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   ClipIDNumber                                                OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Class /Script/Engine.InterpTrackParticleReplay
/// Size: 0x0010 (0x000070 - 0x000080)
class UInterpTrackParticleReplay : public UInterpTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TArray<FParticleReplayTrackKey>)           TrackKeys                                                   OFFSET(get<T>, {0x70, 16, 0, 0})
};

/// Class /Script/Engine.InterpTrackSlomo
/// Size: 0x0000 (0x000090 - 0x000090)
class UInterpTrackSlomo : public UInterpTrackFloatBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Struct /Script/Engine.SoundTrackKey
/// Size: 0x0018 (0x000000 - 0x000018)
class FSoundTrackKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Volume                                                      OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Pitch                                                       OFFSET(get<float>, {0x8, 4, 0, 0})
	CMember(class USoundBase*)                         Sound                                                       OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackSound
/// Size: 0x0018 (0x000090 - 0x0000A8)
class UInterpTrackSound : public UInterpTrackVectorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TArray<FSoundTrackKey>)                    Sounds                                                      OFFSET(get<T>, {0x90, 16, 0, 0})
	DMember(bool)                                      bPlayOnReverse                                              OFFSET(get<bool>, {0xA0, 1, 1, 0})
	DMember(bool)                                      bContinueSoundOnMatineeEnd                                  OFFSET(get<bool>, {0xA0, 1, 1, 1})
	DMember(bool)                                      bSuppressSubtitles                                          OFFSET(get<bool>, {0xA0, 1, 1, 2})
	DMember(bool)                                      bTreatAsDialogue                                            OFFSET(get<bool>, {0xA0, 1, 1, 3})
	DMember(bool)                                      bAttach                                                     OFFSET(get<bool>, {0xA0, 1, 1, 4})
};

/// Struct /Script/Engine.ToggleTrackKey
/// Size: 0x0008 (0x000000 - 0x000008)
class FToggleTrackKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<ETrackToggleAction>)           ToggleAction                                                OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Class /Script/Engine.InterpTrackToggle
/// Size: 0x0018 (0x000070 - 0x000088)
class UInterpTrackToggle : public UInterpTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<FToggleTrackKey>)                   ToggleTrack                                                 OFFSET(get<T>, {0x70, 16, 0, 0})
	DMember(bool)                                      bActivateSystemEachUpdate                                   OFFSET(get<bool>, {0x80, 1, 1, 0})
	DMember(bool)                                      bActivateWithJustAttachedFlag                               OFFSET(get<bool>, {0x80, 1, 1, 1})
	DMember(bool)                                      bFireEventsWhenForwards                                     OFFSET(get<bool>, {0x80, 1, 1, 2})
	DMember(bool)                                      bFireEventsWhenBackwards                                    OFFSET(get<bool>, {0x80, 1, 1, 3})
	DMember(bool)                                      bFireEventsWhenJumpingForwards                              OFFSET(get<bool>, {0x80, 1, 1, 4})
};

/// Class /Script/Engine.InterpTrackVectorMaterialParam
/// Size: 0x0018 (0x000090 - 0x0000A8)
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TArray<class UMaterialInterface*>)         TargetMaterials                                             OFFSET(get<T>, {0x90, 16, 0, 0})
	SMember(FName)                                     ParamName                                                   OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
};

/// Class /Script/Engine.InterpTrackVectorProp
/// Size: 0x0008 (0x000090 - 0x000098)
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FName)                                     PropertyName                                                OFFSET(getStruct<T>, {0x90, 8, 0, 0})
};

/// Struct /Script/Engine.VisibilityTrackKey
/// Size: 0x0008 (0x000000 - 0x000008)
class FVisibilityTrackKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<EVisibilityTrackAction>)       Action                                                      OFFSET(get<T>, {0x4, 1, 0, 0})
	CMember(TEnumAsByte<EVisibilityTrackCondition>)    ActiveCondition                                             OFFSET(get<T>, {0x5, 1, 0, 0})
};

/// Class /Script/Engine.InterpTrackVisibility
/// Size: 0x0018 (0x000070 - 0x000088)
class UInterpTrackVisibility : public UInterpTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<FVisibilityTrackKey>)               VisibilityTrack                                             OFFSET(get<T>, {0x70, 16, 0, 0})
	DMember(bool)                                      bFireEventsWhenForwards                                     OFFSET(get<bool>, {0x80, 1, 1, 0})
	DMember(bool)                                      bFireEventsWhenBackwards                                    OFFSET(get<bool>, {0x80, 1, 1, 1})
	DMember(bool)                                      bFireEventsWhenJumpingForwards                              OFFSET(get<bool>, {0x80, 1, 1, 2})
};

/// Class /Script/Engine.IntSerialization
/// Size: 0x0028 (0x000028 - 0x000050)
class UIntSerialization : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(uint16_t)                                  UnsignedInt16Variable                                       OFFSET(get<uint16_t>, {0x28, 2, 0, 0})
	DMember(uint32_t)                                  UnsignedInt32Variable                                       OFFSET(get<uint32_t>, {0x2C, 4, 0, 0})
	DMember(uint64_t)                                  UnsignedInt64Variable                                       OFFSET(get<uint64_t>, {0x30, 8, 0, 0})
	DMember(int8_t)                                    SignedInt8Variable                                          OFFSET(get<int8_t>, {0x38, 1, 0, 0})
	DMember(int16_t)                                   SignedInt16Variable                                         OFFSET(get<int16_t>, {0x3A, 2, 0, 0})
	DMember(int64_t)                                   SignedInt64Variable                                         OFFSET(get<int64_t>, {0x40, 8, 0, 0})
	DMember(char)                                      UnsignedInt8Variable                                        OFFSET(get<char>, {0x48, 1, 0, 0})
	DMember(int32_t)                                   SignedInt32Variable                                         OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
};

/// Class /Script/Engine.KillZVolume
/// Size: 0x0000 (0x000268 - 0x000268)
class AKillZVolume : public APhysicsVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
};

/// Class /Script/Engine.KismetArrayLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetArrayLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetArrayLibrary.SetArrayPropertyByName
	// void SetArrayPropertyByName(class UObject* Object, FName PropertyName, TArray<int32_t>& Value);                          // [0x3323cb0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.FilterArray
	// void FilterArray(TArray<AActor*>& TargetArray, class UClass* FilterClass, TArray<AActor*>& FilteredArray);               // [0x3323b60] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Swap
	// void Array_Swap(TArray<int32_t>& TargetArray, int32_t FirstIndex, int32_t SecondIndex);                                  // [0x3323a20] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Shuffle
	// void Array_Shuffle(TArray<int32_t>& TargetArray);                                                                        // [0x3323980] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Set
	// void Array_Set(TArray<int32_t>& TargetArray, int32_t Index, int32_t& Item, bool bSizeToFit);                             // [0x3323750] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Reverse
	// void Array_Reverse(TArray<int32_t>& TargetArray);                                                                        // [0x33236b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Resize
	// void Array_Resize(TArray<int32_t>& TargetArray, int32_t Size);                                                           // [0x33235c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_RemoveItem
	// bool Array_RemoveItem(TArray<int32_t>& TargetArray, int32_t& Item);                                                      // [0x3323400] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Remove
	// void Array_Remove(TArray<int32_t>& TargetArray, int32_t IndexToRemove);                                                  // [0x3323310] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_RandomFromStream
	// void Array_RandomFromStream(TArray<int32_t>& TargetArray, FRandomStream& RandomStream, int32_t& OutItem, int32_t& OutIndex); // [0x3323180] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Random
	// void Array_Random(TArray<int32_t>& TargetArray, int32_t& OutItem, int32_t& OutIndex);                                    // [0x3323040] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Length
	// int32_t Array_Length(TArray<int32_t>& TargetArray);                                                                      // [0x3322f90] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_LastIndex
	// int32_t Array_LastIndex(TArray<int32_t>& TargetArray);                                                                   // [0x3322ee0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_IsValidIndex
	// bool Array_IsValidIndex(TArray<int32_t>& TargetArray, int32_t IndexToTest);                                              // [0x3322df0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Insert
	// void Array_Insert(TArray<int32_t>& TargetArray, int32_t& NewItem, int32_t Index);                                        // [0x3322c00] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Identical
	// bool Array_Identical(TArray<int32_t>& ArrayA, TArray<int32_t>& ArrayB);                                                  // [0x3322ae0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Get
	// void Array_Get(TArray<int32_t>& TargetArray, int32_t Index, int32_t& Item);                                              // [0x33228e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Find
	// int32_t Array_Find(TArray<int32_t>& TargetArray, int32_t& ItemToFind);                                                   // [0x3322720] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Contains
	// bool Array_Contains(TArray<int32_t>& TargetArray, int32_t& ItemToFind);                                                  // [0x3322560] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Clear
	// void Array_Clear(TArray<int32_t>& TargetArray);                                                                          // [0x33224c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Append
	// void Array_Append(TArray<int32_t>& TargetArray, TArray<int32_t>& SourceArray);                                           // [0x33223b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_AddUnique
	// int32_t Array_AddUnique(TArray<int32_t>& TargetArray, int32_t& NewItem);                                                 // [0x3322200] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Add
	// int32_t Array_Add(TArray<int32_t>& TargetArray, int32_t& NewItem);                                                       // [0x3322050] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.KismetGuidLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetGuidLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetGuidLibrary.Parse_StringToGuid
	// void Parse_StringToGuid(FString GuidString, FGuid& OutGuid, bool& Success);                                              // [0x3327cd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetGuidLibrary.NotEqual_GuidGuid
	// bool NotEqual_GuidGuid(FGuid& A, FGuid& B);                                                                              // [0x3327bd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetGuidLibrary.NewGuid
	// FGuid NewGuid();                                                                                                         // [0x3327b90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetGuidLibrary.IsValid_Guid
	// bool IsValid_Guid(FGuid& InGuid);                                                                                        // [0x3326c30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetGuidLibrary.Invalidate_Guid
	// void Invalidate_Guid(FGuid& InGuid);                                                                                     // [0x3326ba0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetGuidLibrary.EqualEqual_GuidGuid
	// bool EqualEqual_GuidGuid(FGuid& A, FGuid& B);                                                                            // [0x33250f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetGuidLibrary.Conv_GuidToString
	// FString Conv_GuidToString(FGuid& InGuid);                                                                                // [0x3325010] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.KismetInputLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetInputLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_IsTouchEvent
	// bool PointerEvent_IsTouchEvent(FPointerEvent& Input);                                                                    // [0x3328c40] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown
	// bool PointerEvent_IsMouseButtonDown(FPointerEvent& Input, FKey MouseButton);                                             // [0x3328a70] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetWheelDelta
	// float PointerEvent_GetWheelDelta(FPointerEvent& Input);                                                                  // [0x3328940] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetUserIndex
	// int32_t PointerEvent_GetUserIndex(FPointerEvent& Input);                                                                 // [0x3328810] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex
	// int32_t PointerEvent_GetTouchpadIndex(FPointerEvent& Input);                                                             // [0x33286e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition
	// FVector2D PointerEvent_GetScreenSpacePosition(FPointerEvent& Input);                                                     // [0x33285a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetPointerIndex
	// int32_t PointerEvent_GetPointerIndex(FPointerEvent& Input);                                                              // [0x3328470] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition
	// FVector2D PointerEvent_GetLastScreenSpacePosition(FPointerEvent& Input);                                                 // [0x3328330] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetGestureType
	// ESlateGesture PointerEvent_GetGestureType(FPointerEvent& Input);                                                         // [0x3328200] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetGestureDelta
	// FVector2D PointerEvent_GetGestureDelta(FPointerEvent& Input);                                                            // [0x33280c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetEffectingButton
	// FKey PointerEvent_GetEffectingButton(FPointerEvent& Input);                                                              // [0x3327f50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetCursorDelta
	// FVector2D PointerEvent_GetCursorDelta(FPointerEvent& Input);                                                             // [0x3327e10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsVectorAxis
	// bool Key_IsVectorAxis(FKey& Key);                                                                                        // [0x3327ac0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsValid
	// bool Key_IsValid(FKey& Key);                                                                                             // [0x33279f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsMouseButton
	// bool Key_IsMouseButton(FKey& Key);                                                                                       // [0x3327920] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsModifierKey
	// bool Key_IsModifierKey(FKey& Key);                                                                                       // [0x3327850] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsKeyboardKey
	// bool Key_IsKeyboardKey(FKey& Key);                                                                                       // [0x3327780] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsGamepadKey
	// bool Key_IsGamepadKey(FKey& Key);                                                                                        // [0x33276b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsDigital
	// bool Key_IsDigital(FKey& Key);                                                                                           // [0x33275e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsButtonAxis
	// bool Key_IsButtonAxis(FKey& Key);                                                                                        // [0x3327510] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsAxis3D
	// bool Key_IsAxis3D(FKey& Key);                                                                                            // [0x3327440] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsAxis2D
	// bool Key_IsAxis2D(FKey& Key);                                                                                            // [0x3327370] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsAxis1D
	// bool Key_IsAxis1D(FKey& Key);                                                                                            // [0x33272a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsAnalog
	// bool Key_IsAnalog(FKey& Key);                                                                                            // [0x33271d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_GetNavigationDirectionFromKey
	// EUINavigation Key_GetNavigationDirectionFromKey(FKeyEvent& InKeyEvent);                                                  // [0x33270d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_GetNavigationDirectionFromAnalog
	// EUINavigation Key_GetNavigationDirectionFromAnalog(FAnalogInputEvent& InAnalogEvent);                                    // [0x3326fc0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_GetNavigationActionFromKey
	// EUINavigationAction Key_GetNavigationActionFromKey(FKeyEvent& InKeyEvent);                                               // [0x3326ec0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_GetNavigationAction
	// EUINavigationAction Key_GetNavigationAction(FKey& InKey);                                                                // [0x3326df0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_GetDisplayName
	// FText Key_GetDisplayName(FKey& Key);                                                                                     // [0x3326cd0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsShiftDown
	// bool InputEvent_IsShiftDown(FInputEvent& Input);                                                                         // [0x3326af0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRightShiftDown
	// bool InputEvent_IsRightShiftDown(FInputEvent& Input);                                                                    // [0x3326a40] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRightControlDown
	// bool InputEvent_IsRightControlDown(FInputEvent& Input);                                                                  // [0x3326990] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRightCommandDown
	// bool InputEvent_IsRightCommandDown(FInputEvent& Input);                                                                  // [0x33268e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRightAltDown
	// bool InputEvent_IsRightAltDown(FInputEvent& Input);                                                                      // [0x3326830] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRepeat
	// bool InputEvent_IsRepeat(FInputEvent& Input);                                                                            // [0x3326780] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown
	// bool InputEvent_IsLeftShiftDown(FInputEvent& Input);                                                                     // [0x33266d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsLeftControlDown
	// bool InputEvent_IsLeftControlDown(FInputEvent& Input);                                                                   // [0x3326620] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown
	// bool InputEvent_IsLeftCommandDown(FInputEvent& Input);                                                                   // [0x3326570] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsLeftAltDown
	// bool InputEvent_IsLeftAltDown(FInputEvent& Input);                                                                       // [0x33264c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsControlDown
	// bool InputEvent_IsControlDown(FInputEvent& Input);                                                                       // [0x3326410] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsCommandDown
	// bool InputEvent_IsCommandDown(FInputEvent& Input);                                                                       // [0x3326360] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsAltDown
	// bool InputEvent_IsAltDown(FInputEvent& Input);                                                                           // [0x33262b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputChord_GetDisplayName
	// FText InputChord_GetDisplayName(FInputChord& Key);                                                                       // [0x3326160] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.GetUserIndex
	// int32_t GetUserIndex(FKeyEvent& Input);                                                                                  // [0x3326060] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.GetKey
	// FKey GetKey(FKeyEvent& Input);                                                                                           // [0x3325a60] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.GetAnalogValue
	// float GetAnalogValue(FAnalogInputEvent& Input);                                                                          // [0x3325550] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.EqualEqual_KeyKey
	// bool EqualEqual_KeyKey(FKey A, FKey B);                                                                                  // [0x33253d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.EqualEqual_InputChordInputChord
	// bool EqualEqual_InputChordInputChord(FInputChord A, FInputChord B);                                                      // [0x33251f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.CalibrateTilt
	// void CalibrateTilt();                                                                                                    // [0x3324f30] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.KismetInternationalizationLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentLocale
	// bool SetCurrentLocale(FString Culture, bool SaveToConfig);                                                               // [0x33291c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentLanguageAndLocale
	// bool SetCurrentLanguageAndLocale(FString Culture, bool SaveToConfig);                                                    // [0x33290e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentLanguage
	// bool SetCurrentLanguage(FString Culture, bool SaveToConfig);                                                             // [0x3329000] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentCulture
	// bool SetCurrentCulture(FString Culture, bool SaveToConfig, bool bResetAssetGroup);                                       // [0x3328ed0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentAssetGroupCulture
	// bool SetCurrentAssetGroupCulture(FName AssetGroup, FString Culture, bool SaveToConfig);                                  // [0x3328da0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetInternationalizationLibrary.RefreshCurrentCulture
	// bool RefreshCurrentCulture();                                                                                            // [0x3328d70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetSuitableCulture
	// FString GetSuitableCulture(TArray<FString>& AvailableCultures, FString CultureToMatch, FString FallbackCulture);         // [0x3325e90] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetNativeCulture
	// FString GetNativeCulture(ELocalizedTextSourceCategory TextCategory);                                                     // [0x3325dc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetLocalizedCultures
	// TArray<FString> GetLocalizedCultures(bool IncludeGame, bool IncludeEngine, bool IncludeEditor, bool IncludeAdditional);  // [0x3325b90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCurrentLocale
	// FString GetCurrentLocale();                                                                                              // [0x33259e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCurrentLanguage
	// FString GetCurrentLanguage();                                                                                            // [0x3325960] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCurrentCulture
	// FString GetCurrentCulture();                                                                                             // [0x3325960] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCurrentAssetGroupCulture2
	// FString GetCurrentAssetGroupCulture2(FName AssetGroup, bool Flush);                                                      // [0x3325780] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCurrentAssetGroupCulture
	// FString GetCurrentAssetGroupCulture(FName AssetGroup);                                                                   // [0x3325890] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCultureDisplayName
	// FString GetCultureDisplayName(FString Culture, bool Localized);                                                          // [0x3325660] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.ClearCurrentAssetGroupCulture
	// void ClearCurrentAssetGroupCulture(FName AssetGroup, bool SaveToConfig);                                                 // [0x3324f50] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.KismetMaterialLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetMaterialLibrary.SetVectorParameterValue
	// void SetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, FName ParameterName, FLinearColor& ParameterValue); // [0x3352120] Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMaterialLibrary.SetScalarParameterValue
	// void SetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, FName ParameterName, float ParameterValue); // [0x3351fd0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetMaterialLibrary.GetVectorParameterValue
	// FLinearColor GetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, FName ParameterName); // [0x333eb50] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMaterialLibrary.GetScalarParameterValue
	// float GetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, FName ParameterName); // [0x333e2e0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance
	// class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(class UObject* WorldContextObject, class UMaterialInterface* Parent, FName OptionalName, EMIDCreationFlags CreationFlags); // [0x3337580] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.KismetMathLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetMathLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetMathLibrary.Xor_IntInt
	// int32_t Xor_IntInt(int32_t A, int32_t B);                                                                                // [0x3359db0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Xor_Int64Int64
	// int64_t Xor_Int64Int64(int64_t A, int64_t B);                                                                            // [0x3359ce0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Wrap
	// int32_t Wrap(int32_t Value, int32_t Min, int32_t Max);                                                                   // [0x3359bd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.WeightedMovingAverage_FVector
	// FVector WeightedMovingAverage_FVector(FVector CurrentSample, FVector PreviousSample, float Weight);                      // [0x3359960] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.WeightedMovingAverage_FRotator
	// FRotator WeightedMovingAverage_FRotator(FRotator CurrentSample, FRotator PreviousSample, float Weight);                  // [0x3359810] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.WeightedMovingAverage_Float
	// float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight);                              // [0x3359ab0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSizeXYSquared
	// float VSizeXYSquared(FVector A);                                                                                         // [0x33551d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSizeXY
	// float VSizeXY(FVector A);                                                                                                // [0x3355140] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSizeSquared
	// float VSizeSquared(FVector A);                                                                                           // [0x33550a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSize2DSquared
	// float VSize2DSquared(FVector2D A);                                                                                       // [0x3354f70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSize2D
	// float VSize2D(FVector2D A);                                                                                              // [0x3354ee0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSize
	// float VSize(FVector A);                                                                                                  // [0x3355000] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VLerp
	// FVector VLerp(FVector A, FVector B, float Alpha);                                                                        // [0x3354da0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VInterpTo_Constant
	// FVector VInterpTo_Constant(FVector Current, FVector Target, float DeltaTime, float InterpSpeed);                         // [0x3354c10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VInterpTo
	// FVector VInterpTo(FVector Current, FVector Target, float DeltaTime, float InterpSpeed);                                  // [0x3354a80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VectorSpringInterp
	// FVector VectorSpringInterp(FVector Current, FVector Target, FVectorSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass); // [0x3356b30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector_Zero
	// FVector Vector_Zero();                                                                                                   // [0x33597e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Up
	// FVector Vector_Up();                                                                                                     // [0x33597b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_UnwindEuler
	// void Vector_UnwindEuler(FVector& A);                                                                                     // [0x3359730] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector_UnitCartesianToSpherical
	// FVector2D Vector_UnitCartesianToSpherical(FVector A);                                                                    // [0x3359640] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ToRadians
	// FVector Vector_ToRadians(FVector A);                                                                                     // [0x33595a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ToDegrees
	// FVector Vector_ToDegrees(FVector A);                                                                                     // [0x3359500] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_SnappedToGrid
	// FVector Vector_SnappedToGrid(FVector InVect, float InGridSize);                                                          // [0x3359340] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Set
	// void Vector_Set(FVector& A, float X, float Y, float Z);                                                                  // [0x33591e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector_Right
	// FVector Vector_Right();                                                                                                  // [0x33591b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Reciprocal
	// FVector Vector_Reciprocal(FVector& A);                                                                                   // [0x33590c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ProjectOnToNormal
	// FVector Vector_ProjectOnToNormal(FVector V, FVector InNormal);                                                           // [0x3358fc0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_One
	// FVector Vector_One();                                                                                                    // [0x3358f90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_NormalUnsafe
	// FVector Vector_NormalUnsafe(FVector& A);                                                                                 // [0x3358cc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Normalize
	// void Vector_Normalize(FVector& A, float Tolerance);                                                                      // [0x3358e00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector_Normal2D
	// FVector Vector_Normal2D(FVector A, float Tolerance);                                                                     // [0x3358af0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_MirrorByPlane
	// FVector Vector_MirrorByPlane(FVector A, FPlane& InPlane);                                                                // [0x33589a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Left
	// FVector Vector_Left();                                                                                                   // [0x3358970] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsZero
	// bool Vector_IsZero(FVector& A);                                                                                          // [0x33588c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsUnit
	// bool Vector_IsUnit(FVector& A, float SquaredLenthTolerance);                                                             // [0x33587a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsUniform
	// bool Vector_IsUniform(FVector& A, float Tolerance);                                                                      // [0x3358680] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsNormal
	// bool Vector_IsNormal(FVector& A);                                                                                        // [0x33585b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsNearlyZero
	// bool Vector_IsNearlyZero(FVector& A, float Tolerance);                                                                   // [0x33584a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsNAN
	// bool Vector_IsNAN(FVector& A);                                                                                           // [0x33583d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_HeadingAngle
	// float Vector_HeadingAngle(FVector A);                                                                                    // [0x3358280] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_GetSignVector
	// FVector Vector_GetSignVector(FVector A);                                                                                 // [0x33581c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_GetProjection
	// FVector Vector_GetProjection(FVector A);                                                                                 // [0x3358120] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_GetAbsMin
	// float Vector_GetAbsMin(FVector A);                                                                                       // [0x3358080] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_GetAbsMax
	// float Vector_GetAbsMax(FVector A);                                                                                       // [0x3357fe0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_GetAbs
	// FVector Vector_GetAbs(FVector A);                                                                                        // [0x3357f40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Forward
	// FVector Vector_Forward();                                                                                                // [0x3357f10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Down
	// FVector Vector_Down();                                                                                                   // [0x3357ee0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_DistanceSquared
	// float Vector_DistanceSquared(FVector v1, FVector v2);                                                                    // [0x3357e00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Distance2DSquared
	// float Vector_Distance2DSquared(FVector v1, FVector v2);                                                                  // [0x3357c40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Distance2D
	// float Vector_Distance2D(FVector v1, FVector v2);                                                                         // [0x3357b70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Distance
	// float Vector_Distance(FVector v1, FVector v2);                                                                           // [0x3357d10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_CosineAngle2D
	// float Vector_CosineAngle2D(FVector A, FVector B);                                                                        // [0x3357970] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ComponentMin
	// FVector Vector_ComponentMin(FVector A, FVector B);                                                                       // [0x3357890] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ComponentMax
	// FVector Vector_ComponentMax(FVector A, FVector B);                                                                       // [0x33577b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ClampSizeMax2D
	// FVector Vector_ClampSizeMax2D(FVector A, float Max);                                                                     // [0x3357420] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ClampSizeMax
	// FVector Vector_ClampSizeMax(FVector A, float Max);                                                                       // [0x33575b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ClampSize2D
	// FVector Vector_ClampSize2D(FVector A, float Min, float Max);                                                             // [0x3357270] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_BoundedToCube
	// FVector Vector_BoundedToCube(FVector InVect, float InRadius);                                                            // [0x3357160] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_BoundedToBox
	// FVector Vector_BoundedToBox(FVector InVect, FVector InBoxMin, FVector InBoxMax);                                         // [0x3357020] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Backward
	// FVector Vector_Backward();                                                                                               // [0x3356ff0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Assign
	// void Vector_Assign(FVector& A, FVector& InVector);                                                                       // [0x3356f10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector_AddBounded
	// void Vector_AddBounded(FVector& A, FVector InAddVect, float InRadius);                                                   // [0x3356da0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Zero
	// FVector4 Vector4_Zero();                                                                                                 // [0x3356b10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_SizeSquared3
	// float Vector4_SizeSquared3(FVector4& A);                                                                                 // [0x3356980] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_SizeSquared
	// float Vector4_SizeSquared(FVector4& A);                                                                                  // [0x3356a40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Size3
	// float Vector4_Size3(FVector4& A);                                                                                        // [0x33567f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Size
	// float Vector4_Size(FVector4& A);                                                                                         // [0x33568b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Set
	// void Vector4_Set(FVector4& A, float X, float Y, float Z, float W);                                                       // [0x3356640] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector4_NormalUnsafe3
	// FVector4 Vector4_NormalUnsafe3(FVector4& A);                                                                             // [0x3356340] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Normalize3
	// void Vector4_Normalize3(FVector4& A, float Tolerance);                                                                   // [0x3356490] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Normal3
	// FVector4 Vector4_Normal3(FVector4& A, float Tolerance);                                                                  // [0x3356190] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Negated
	// FVector4 Vector4_Negated(FVector4& A);                                                                                   // [0x33560f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_MirrorByVector3
	// FVector4 Vector4_MirrorByVector3(FVector4& Direction, FVector4& SurfaceNormal);                                          // [0x3355f60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_IsZero
	// bool Vector4_IsZero(FVector4& A);                                                                                        // [0x3355ea0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_IsUnit3
	// bool Vector4_IsUnit3(FVector4& A, float SquaredLenthTolerance);                                                          // [0x3355d70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_IsNormal3
	// bool Vector4_IsNormal3(FVector4& A);                                                                                     // [0x3355ca0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_IsNearlyZero3
	// bool Vector4_IsNearlyZero3(FVector4& A, float Tolerance);                                                                // [0x3355b80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_IsNAN
	// bool Vector4_IsNAN(FVector4& A);                                                                                         // [0x3355a90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_DotProduct3
	// float Vector4_DotProduct3(FVector4& A, FVector4& B);                                                                     // [0x3355840] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_DotProduct
	// float Vector4_DotProduct(FVector4& A, FVector4& B);                                                                      // [0x3355960] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_CrossProduct3
	// FVector4 Vector4_CrossProduct3(FVector4& A, FVector4& B);                                                                // [0x33556e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Assign
	// void Vector4_Assign(FVector4& A, FVector4& InVector);                                                                    // [0x33555f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector2DInterpTo_Constant
	// FVector2D Vector2DInterpTo_Constant(FVector2D Current, FVector2D Target, float DeltaTime, float InterpSpeed);            // [0x33553e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector2DInterpTo
	// FVector2D Vector2DInterpTo(FVector2D Current, FVector2D Target, float DeltaTime, float InterpSpeed);                     // [0x3355260] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector2D_Zero
	// FVector2D Vector2D_Zero();                                                                                               // [0x33555c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector2D_Unit45Deg
	// FVector2D Vector2D_Unit45Deg();                                                                                          // [0x3355590] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector2D_One
	// FVector2D Vector2D_One();                                                                                                // [0x3355560] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VEase
	// FVector VEase(FVector A, FVector B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps);    // [0x3354870] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.UtcNow
	// FDateTime UtcNow();                                                                                                      // [0x3354830] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TransformVector4
	// FVector4 TransformVector4(FMatrix& Matrix, FVector4& Vec4);                                                              // [0x3354630] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TransformRotation
	// FRotator TransformRotation(FTransform& T, FRotator Rotation);                                                            // [0x33544e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TransformLocation
	// FVector TransformLocation(FTransform& T, FVector Location);                                                              // [0x3354340] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TransformDirection
	// FVector TransformDirection(FTransform& T, FVector Direction);                                                            // [0x33541a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Transform_Determinant
	// float Transform_Determinant(FTransform& Transform);                                                                      // [0x3354750] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ToSign2D
	// FVector2D ToSign2D(FVector2D A);                                                                                         // [0x33540a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ToRounded2D
	// FVector2D ToRounded2D(FVector2D A);                                                                                      // [0x3353f90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ToDirectionAndLength2D
	// void ToDirectionAndLength2D(FVector2D A, FVector2D& OutDir, float& OutLength);                                           // [0x3353e00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Today
	// FDateTime Today();                                                                                                       // [0x3354150] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TLerp
	// FTransform TLerp(FTransform& A, FTransform& B, float Alpha, TEnumAsByte<ELerpInterpolationMode> InterpMode);             // [0x33538c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TInterpTo
	// FTransform TInterpTo(FTransform& Current, FTransform& Target, float DeltaTime, float InterpSpeed);                       // [0x33536a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TimespanZeroValue
	// FTimespan TimespanZeroValue();                                                                                           // [0x3337cb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TimespanRatio
	// float TimespanRatio(FTimespan A, FTimespan B);                                                                           // [0x3353d20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TimespanMinValue
	// FTimespan TimespanMinValue();                                                                                            // [0x3353cf0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TimespanMaxValue
	// FTimespan TimespanMaxValue();                                                                                            // [0x3353cc0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TimespanFromString
	// bool TimespanFromString(FString TimespanString, FTimespan& Result);                                                      // [0x3353b80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TEase
	// FTransform TEase(FTransform& A, FTransform& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps); // [0x3353410] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Tan
	// float Tan(float A);                                                                                                      // [0x3353af0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_VectorVector
	// FVector Subtract_VectorVector(FVector A, FVector B);                                                                     // [0x3353330] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_VectorInt
	// FVector Subtract_VectorInt(FVector A, int32_t B);                                                                        // [0x3353240] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_VectorFloat
	// FVector Subtract_VectorFloat(FVector A, float B);                                                                        // [0x3353160] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_Vector4Vector4
	// FVector4 Subtract_Vector4Vector4(FVector4& A, FVector4& B);                                                              // [0x3353030] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_Vector2DVector2D
	// FVector2D Subtract_Vector2DVector2D(FVector2D A, FVector2D B);                                                           // [0x3352f60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_Vector2DFloat
	// FVector2D Subtract_Vector2DFloat(FVector2D A, float B);                                                                  // [0x3352e90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_TimespanTimespan
	// FTimespan Subtract_TimespanTimespan(FTimespan A, FTimespan B);                                                           // [0x33527f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_QuatQuat
	// FQuat Subtract_QuatQuat(FQuat& A, FQuat& B);                                                                             // [0x3352db0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_LinearColorLinearColor
	// FLinearColor Subtract_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                            // [0x3352cc0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_IntPointIntPoint
	// FIntPoint Subtract_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                           // [0x3352bf0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_IntPointInt
	// FIntPoint Subtract_IntPointInt(FIntPoint A, int32_t B);                                                                  // [0x3352b10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_IntInt
	// int32_t Subtract_IntInt(int32_t A, int32_t B);                                                                           // [0x3352a50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_Int64Int64
	// int64_t Subtract_Int64Int64(int64_t A, int64_t B);                                                                       // [0x3352980] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_FloatFloat
	// float Subtract_FloatFloat(float A, float B);                                                                             // [0x33528b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_DateTimeTimespan
	// FDateTime Subtract_DateTimeTimespan(FDateTime A, FTimespan B);                                                           // [0x33527f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_DateTimeDateTime
	// FTimespan Subtract_DateTimeDateTime(FDateTime A, FDateTime B);                                                           // [0x33527f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_ByteByte
	// char Subtract_ByteByte(char A, char B);                                                                                  // [0x3352730] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Square
	// float Square(float A);                                                                                                   // [0x33526b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Sqrt
	// float Sqrt(float A);                                                                                                     // [0x3352600] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Spherical2DToUnitCartesian
	// FVector Spherical2DToUnitCartesian(FVector2D A);                                                                         // [0x3352520] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Sin
	// float Sin(float A);                                                                                                      // [0x3352490] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SignOfInteger64
	// int64_t SignOfInteger64(int64_t A);                                                                                      // [0x3352340] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SignOfInteger
	// int32_t SignOfInteger(int32_t A);                                                                                        // [0x33523f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SignOfFloat
	// float SignOfFloat(float A);                                                                                              // [0x3352270] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SetRandomStreamSeed
	// void SetRandomStreamSeed(FRandomStream& Stream, int32_t NewSeed);                                                        // [0x3351f00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Set2D
	// void Set2D(FVector2D& A, float X, float Y);                                                                              // [0x3351df0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.SelectVector
	// FVector SelectVector(FVector A, FVector B, bool bPickA);                                                                 // [0x3351940] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectTransform
	// FTransform SelectTransform(FTransform& A, FTransform& B, bool bPickA);                                                   // [0x3351c20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectString
	// FString SelectString(FString A, FString B, bool bPickA);                                                                 // [0x3351a80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectRotator
	// FRotator SelectRotator(FRotator A, FRotator B, bool bPickA);                                                             // [0x3351940] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectObject
	// class UObject* SelectObject(class UObject* A, class UObject* B, bool bSelectA);                                          // [0x3351500] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectInt
	// int32_t SelectInt(int32_t A, int32_t B, bool bPickA);                                                                    // [0x3351840] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectFloat
	// float SelectFloat(float A, float B, bool bPickA);                                                                        // [0x3351720] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectColor
	// FLinearColor SelectColor(FLinearColor A, FLinearColor B, bool bPickA);                                                   // [0x3351600] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectClass
	// class UClass* SelectClass(class UClass* A, class UClass* B, bool bSelectA);                                              // [0x3351500] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SeedRandomStream
	// void SeedRandomStream(FRandomStream& Stream);                                                                            // [0x3351480] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.SafeDivide
	// float SafeDivide(float A, float B);                                                                                      // [0x33513b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Round64
	// int64_t Round64(float A);                                                                                                // [0x3351250] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Round
	// int32_t Round(float A);                                                                                                  // [0x3351320] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RotatorFromAxisAndAngle
	// FRotator RotatorFromAxisAndAngle(FVector Axis, float Angle);                                                             // [0x3351160] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RotateAngleAxis
	// FVector RotateAngleAxis(FVector InVect, float AngleDeg, FVector Axis);                                                   // [0x3351010] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RLerp
	// FRotator RLerp(FRotator A, FRotator B, float Alpha, bool bShortestPath);                                                 // [0x334f3a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RInterpTo_Constant
	// FRotator RInterpTo_Constant(FRotator Current, FRotator Target, float DeltaTime, float InterpSpeed);                      // [0x334f210] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RInterpTo
	// FRotator RInterpTo(FRotator Current, FRotator Target, float DeltaTime, float InterpSpeed);                               // [0x334f080] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RGBToHSV_Vector
	// void RGBToHSV_Vector(FLinearColor RGB, FLinearColor& HSV);                                                               // [0x334efa0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RGBToHSV
	// void RGBToHSV(FLinearColor InColor, float& H, float& S, float& V, float& A);                                             // [0x334edb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RGBLinearToHSV
	// FLinearColor RGBLinearToHSV(FLinearColor RGB);                                                                           // [0x334ed20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ResetVectorSpringState
	// void ResetVectorSpringState(FVectorSpringState& SpringState);                                                            // [0x3350f70] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.ResetRandomStream
	// void ResetRandomStream(FRandomStream& Stream);                                                                           // [0x3350ef0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.ResetFloatSpringState
	// void ResetFloatSpringState(FFloatSpringState& SpringState);                                                              // [0x3350e60] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.REase
	// FRotator REase(FRotator A, FRotator B, float Alpha, bool bShortestPath, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps); // [0x334ead0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadiansFromStream
	// FVector RandomUnitVectorInEllipticalConeInRadiansFromStream(FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, FRandomStream& Stream); // [0x3350cd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadians
	// FVector RandomUnitVectorInEllipticalConeInRadians(FVector ConeDir, float MaxYawInRadians, float MaxPitchInRadians);      // [0x3350ba0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegreesFromStream
	// FVector RandomUnitVectorInEllipticalConeInDegreesFromStream(FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, FRandomStream& Stream); // [0x3350a00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegrees
	// FVector RandomUnitVectorInEllipticalConeInDegrees(FVector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);      // [0x33508c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInRadiansFromStream
	// FVector RandomUnitVectorInConeInRadiansFromStream(FVector& ConeDir, float ConeHalfAngleInRadians, FRandomStream& Stream); // [0x3350790] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInRadians
	// FVector RandomUnitVectorInConeInRadians(FVector ConeDir, float ConeHalfAngleInRadians);                                  // [0x33506a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInDegreesFromStream
	// FVector RandomUnitVectorInConeInDegreesFromStream(FVector& ConeDir, float ConeHalfAngleInDegrees, FRandomStream& Stream); // [0x3350560] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInDegrees
	// FVector RandomUnitVectorInConeInDegrees(FVector ConeDir, float ConeHalfAngleInDegrees);                                  // [0x3350470] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorFromStream
	// FVector RandomUnitVectorFromStream(FRandomStream& Stream);                                                               // [0x33503d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVector
	// FVector RandomUnitVector();                                                                                              // [0x3350390] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomRotatorFromStream
	// FRotator RandomRotatorFromStream(bool bRoll, FRandomStream& Stream);                                                     // [0x33502a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomRotator
	// FRotator RandomRotator(bool bRoll);                                                                                      // [0x3350200] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomPointInBoundingBox
	// FVector RandomPointInBoundingBox(FVector Origin, FVector BoxExtent);                                                     // [0x33500c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomIntegerInRangeFromStream
	// int32_t RandomIntegerInRangeFromStream(int32_t Min, int32_t Max, FRandomStream& Stream);                                 // [0x334ffb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomIntegerInRange
	// int32_t RandomIntegerInRange(int32_t Min, int32_t Max);                                                                  // [0x334fea0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomIntegerFromStream
	// int32_t RandomIntegerFromStream(int32_t Max, FRandomStream& Stream);                                                     // [0x334fdd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomInteger64InRange
	// int64_t RandomInteger64InRange(int64_t Min, int64_t Max);                                                                // [0x334fbf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomInteger64
	// int64_t RandomInteger64(int64_t Max);                                                                                    // [0x334fb20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomInteger
	// int32_t RandomInteger(int32_t Max);                                                                                      // [0x334fd10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomFloatInRangeFromStream
	// float RandomFloatInRangeFromStream(float Min, float Max, FRandomStream& Stream);                                         // [0x334fa00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomFloatInRange
	// float RandomFloatInRange(float Min, float Max);                                                                          // [0x334f900] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomFloatFromStream
	// float RandomFloatFromStream(FRandomStream& Stream);                                                                      // [0x334f870] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomFloat
	// float RandomFloat();                                                                                                     // [0x334f830] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomBoolWithWeightFromStream
	// bool RandomBoolWithWeightFromStream(float Weight, FRandomStream& RandomStream);                                          // [0x334f750] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomBoolWithWeight
	// bool RandomBoolWithWeight(float Weight);                                                                                 // [0x334f6d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomBoolFromStream
	// bool RandomBoolFromStream(FRandomStream& Stream);                                                                        // [0x334f640] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomBool
	// bool RandomBool();                                                                                                       // [0x334f5e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RadiansToDegrees
	// float RadiansToDegrees(float A);                                                                                         // [0x334f550] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_VectorUp
	// FVector Quat_VectorUp(FQuat& Q);                                                                                         // [0x334d770] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_VectorRight
	// FVector Quat_VectorRight(FQuat& Q);                                                                                      // [0x334d680] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_VectorForward
	// FVector Quat_VectorForward(FQuat& Q);                                                                                    // [0x334d580] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_UnrotateVector
	// FVector Quat_UnrotateVector(FQuat& Q, FVector& V);                                                                       // [0x334e8b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_SizeSquared
	// float Quat_SizeSquared(FQuat& Q);                                                                                        // [0x334e7f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Size
	// float Quat_Size(FQuat& Q);                                                                                               // [0x334e730] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_SetFromEuler
	// void Quat_SetFromEuler(FQuat& Q, FVector& Euler);                                                                        // [0x334e650] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Quat_SetComponents
	// void Quat_SetComponents(FQuat& Q, float X, float Y, float Z, float W);                                                   // [0x334e4a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Quat_Rotator
	// FRotator Quat_Rotator(FQuat& Q);                                                                                         // [0x334e400] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_RotateVector
	// FVector Quat_RotateVector(FQuat& Q, FVector& V);                                                                         // [0x334e200] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Normalized
	// FQuat Quat_Normalized(FQuat& Q, float Tolerance);                                                                        // [0x334e0a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Normalize
	// void Quat_Normalize(FQuat& Q, float Tolerance);                                                                          // [0x334df50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Quat_MakeFromEuler
	// FQuat Quat_MakeFromEuler(FVector& Euler);                                                                                // [0x334deb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Log
	// FQuat Quat_Log(FQuat& Q);                                                                                                // [0x334de10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_IsNormalized
	// bool Quat_IsNormalized(FQuat& Q);                                                                                        // [0x334dd40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_IsNonFinite
	// bool Quat_IsNonFinite(FQuat& Q);                                                                                         // [0x334dc60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_IsIdentity
	// bool Quat_IsIdentity(FQuat& Q, float Tolerance);                                                                         // [0x334db40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_IsFinite
	// bool Quat_IsFinite(FQuat& Q);                                                                                            // [0x334da60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Inversed
	// FQuat Quat_Inversed(FQuat& Q);                                                                                           // [0x334d9d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Identity
	// FQuat Quat_Identity();                                                                                                   // [0x334d9b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_GetRotationAxis
	// FVector Quat_GetRotationAxis(FQuat& Q);                                                                                  // [0x334d880] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_GetAxisZ
	// FVector Quat_GetAxisZ(FQuat& Q);                                                                                         // [0x334d770] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_GetAxisY
	// FVector Quat_GetAxisY(FQuat& Q);                                                                                         // [0x334d680] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_GetAxisX
	// FVector Quat_GetAxisX(FQuat& Q);                                                                                         // [0x334d580] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_GetAngle
	// float Quat_GetAngle(FQuat& Q);                                                                                           // [0x334d4d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Exp
	// FQuat Quat_Exp(FQuat& Q);                                                                                                // [0x334d430] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Euler
	// FVector Quat_Euler(FQuat& Q);                                                                                            // [0x334d390] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_EnforceShortestArcWith
	// void Quat_EnforceShortestArcWith(FQuat& A, FQuat& B);                                                                    // [0x334d260] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Quat_AngularDistance
	// float Quat_AngularDistance(FQuat& A, FQuat& B);                                                                          // [0x334d120] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ProjectVectorOnToVector
	// FVector ProjectVectorOnToVector(FVector V, FVector Target);                                                              // [0x334cfb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ProjectVectorOnToPlane
	// FVector ProjectVectorOnToPlane(FVector V, FVector PlaneNormal);                                                          // [0x334ce90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ProjectPointOnToPlane
	// FVector ProjectPointOnToPlane(FVector Point, FVector PlaneBase, FVector PlaneNormal);                                    // [0x334cd20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.PointsAreCoplanar
	// bool PointsAreCoplanar(TArray<FVector>& Points, float Tolerance);                                                        // [0x334cc20] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.PerlinNoise1D
	// float PerlinNoise1D(float Value);                                                                                        // [0x334cb90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Percent_IntInt
	// int32_t Percent_IntInt(int32_t A, int32_t B);                                                                            // [0x334cab0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Percent_FloatFloat
	// float Percent_FloatFloat(float A, float B);                                                                              // [0x334c930] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Percent_ByteByte
	// char Percent_ByteByte(char A, char B);                                                                                   // [0x334c850] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Or_IntInt
	// int32_t Or_IntInt(int32_t A, int32_t B);                                                                                 // [0x334c790] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Or_Int64Int64
	// int64_t Or_Int64Int64(int64_t A, int64_t B);                                                                             // [0x334c6c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Now
	// FDateTime Now();                                                                                                         // [0x334c680] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqualExactly_VectorVector
	// bool NotEqualExactly_VectorVector(FVector A, FVector B);                                                                 // [0x334b2d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqualExactly_Vector4Vector4
	// bool NotEqualExactly_Vector4Vector4(FVector4& A, FVector4& B);                                                           // [0x334b1a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqualExactly_Vector2DVector2D
	// bool NotEqualExactly_Vector2DVector2D(FVector2D A, FVector2D B);                                                         // [0x334b0d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_VectorVector
	// bool NotEqual_VectorVector(FVector A, FVector B, float ErrorTolerance);                                                  // [0x334c390] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_Vector4Vector4
	// bool NotEqual_Vector4Vector4(FVector4& A, FVector4& B, float ErrorTolerance);                                            // [0x334c200] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_Vector2DVector2D
	// bool NotEqual_Vector2DVector2D(FVector2D A, FVector2D B, float ErrorTolerance);                                          // [0x334c0d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_TimespanTimespan
	// bool NotEqual_TimespanTimespan(FTimespan A, FTimespan B);                                                                // [0x334b620] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_RotatorRotator
	// bool NotEqual_RotatorRotator(FRotator A, FRotator B, float ErrorTolerance);                                              // [0x334bee0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_QuatQuat
	// bool NotEqual_QuatQuat(FQuat& A, FQuat& B, float ErrorTolerance);                                                        // [0x334bd80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_ObjectObject
	// bool NotEqual_ObjectObject(class UObject* A, class UObject* B);                                                          // [0x334b550] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_NameName
	// bool NotEqual_NameName(FName A, FName B);                                                                                // [0x334bcb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_MatrixMatrix
	// bool NotEqual_MatrixMatrix(FMatrix& A, FMatrix& B, float Tolerance);                                                     // [0x334bb20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_LinearColorLinearColor
	// bool NotEqual_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                                    // [0x334ba30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_IntPointIntPoint
	// bool NotEqual_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                                // [0x334b960] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_IntInt
	// bool NotEqual_IntInt(int32_t A, int32_t B);                                                                              // [0x334b890] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_Int64Int64
	// bool NotEqual_Int64Int64(int64_t A, int64_t B);                                                                          // [0x334b7c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_FloatFloat
	// bool NotEqual_FloatFloat(float A, float B);                                                                              // [0x334b6e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_DateTimeDateTime
	// bool NotEqual_DateTimeDateTime(FDateTime A, FDateTime B);                                                                // [0x334b620] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_ClassClass
	// bool NotEqual_ClassClass(class UClass* A, class UClass* B);                                                              // [0x334b550] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_ByteByte
	// bool NotEqual_ByteByte(char A, char B);                                                                                  // [0x334b490] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_BoolBool
	// bool NotEqual_BoolBool(bool A, bool B);                                                                                  // [0x334b3b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Not_PreBool
	// bool Not_PreBool(bool A);                                                                                                // [0x334c5f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Not_Int64
	// int64_t Not_Int64(int64_t A);                                                                                            // [0x334c4e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Not_Int
	// int32_t Not_Int(int32_t A);                                                                                              // [0x334c570] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NormalSafe2D
	// FVector2D NormalSafe2D(FVector2D A, float Tolerance);                                                                    // [0x334ab30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NormalizeToRange
	// float NormalizeToRange(float Value, float RangeMin, float RangeMax);                                                     // [0x334aeb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NormalizedDeltaRotator
	// FRotator NormalizedDeltaRotator(FRotator A, FRotator B);                                                                 // [0x334afd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NormalizeAxis
	// float NormalizeAxis(float Angle);                                                                                        // [0x334ae20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Normalize2D
	// void Normalize2D(FVector2D& A, float Tolerance);                                                                         // [0x334aca0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Normal2D
	// FVector2D Normal2D(FVector2D A);                                                                                         // [0x334a850] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Normal
	// FVector Normal(FVector A, float Tolerance);                                                                              // [0x334a970] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NegateVector
	// FVector NegateVector(FVector A);                                                                                         // [0x334a710] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NegateRotator
	// FRotator NegateRotator(FRotator A);                                                                                      // [0x334a670] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Negated2D
	// FVector2D Negated2D(FVector2D& A);                                                                                       // [0x334a7b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NearlyEqual_TransformTransform
	// bool NearlyEqual_TransformTransform(FTransform& A, FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance); // [0x334a440] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NearlyEqual_FloatFloat
	// bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);                                                     // [0x334a320] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat
	// float MultiplyMultiply_FloatFloat(float Base, float Exp);                                                                // [0x3348fd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MultiplyByPi
	// float MultiplyByPi(float Value);                                                                                         // [0x3348f40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_VectorVector
	// FVector Multiply_VectorVector(FVector A, FVector B);                                                                     // [0x334a240] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_VectorInt
	// FVector Multiply_VectorInt(FVector A, int32_t B);                                                                        // [0x3349db0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_VectorFloat
	// FVector Multiply_VectorFloat(FVector A, float B);                                                                        // [0x3349cd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_Vector4Vector4
	// FVector4 Multiply_Vector4Vector4(FVector4& A, FVector4& B);                                                              // [0x334a110] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_Vector2DVector2D
	// FVector2D Multiply_Vector2DVector2D(FVector2D A, FVector2D B);                                                           // [0x334a040] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_Vector2DFloat
	// FVector2D Multiply_Vector2DFloat(FVector2D A, float B);                                                                  // [0x3349f70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_TimespanFloat
	// FTimespan Multiply_TimespanFloat(FTimespan A, float Scalar);                                                             // [0x3349ea0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_RotatorInt
	// FRotator Multiply_RotatorInt(FRotator A, int32_t B);                                                                     // [0x3349db0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_RotatorFloat
	// FRotator Multiply_RotatorFloat(FRotator A, float B);                                                                     // [0x3349cd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_QuatQuat
	// FQuat Multiply_QuatQuat(FQuat& A, FQuat& B);                                                                             // [0x3349b90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_MatrixMatrix
	// FMatrix Multiply_MatrixMatrix(FMatrix& A, FMatrix& B);                                                                   // [0x3349980] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_MatrixFloat
	// FMatrix Multiply_MatrixFloat(FMatrix& A, float B);                                                                       // [0x3349810] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_LinearColorLinearColor
	// FLinearColor Multiply_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                            // [0x3349720] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_LinearColorFloat
	// FLinearColor Multiply_LinearColorFloat(FLinearColor A, float B);                                                         // [0x3349650] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_IntPointIntPoint
	// FIntPoint Multiply_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                           // [0x3349570] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_IntPointInt
	// FIntPoint Multiply_IntPointInt(FIntPoint A, int32_t B);                                                                  // [0x3349490] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_IntInt
	// int32_t Multiply_IntInt(int32_t A, int32_t B);                                                                           // [0x33493d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_IntFloat
	// float Multiply_IntFloat(int32_t A, float B);                                                                             // [0x3349300] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_Int64Int64
	// int64_t Multiply_Int64Int64(int64_t A, int64_t B);                                                                       // [0x3349230] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_FloatFloat
	// float Multiply_FloatFloat(float A, float B);                                                                             // [0x3349160] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_ByteByte
	// char Multiply_ByteByte(char A, char B);                                                                                  // [0x33490a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MirrorVectorByNormal
	// FVector MirrorVectorByNormal(FVector InVect, FVector InNormal);                                                          // [0x333df20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MinOfIntArray
	// void MinOfIntArray(TArray<int32_t>& IntArray, int32_t& IndexOfMinValue, int32_t& MinValue);                              // [0x3348b40] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MinOfFloatArray
	// void MinOfFloatArray(TArray<float>& FloatArray, int32_t& IndexOfMinValue, float& MinValue);                              // [0x3348a00] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MinOfByteArray
	// void MinOfByteArray(TArray<char>& ByteArray, int32_t& IndexOfMinValue, char& MinValue);                                  // [0x33488c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MinInt64
	// int64_t MinInt64(int64_t A, int64_t B);                                                                                  // [0x33487f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MinimumAreaRectangle
	// void MinimumAreaRectangle(class UObject* WorldContextObject, TArray<FVector>& InVerts, FVector& SampleSurfaceNormal, FVector& OutRectCenter, FRotator& OutRectRotation, float& OutSideLengthX, float& OutSideLengthY, bool bDebugDraw); // [0x3348c80] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Min
	// int32_t Min(int32_t A, int32_t B);                                                                                       // [0x3348720] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MaxOfIntArray
	// void MaxOfIntArray(TArray<int32_t>& IntArray, int32_t& IndexOfMaxValue, int32_t& MaxValue);                              // [0x33485e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MaxOfFloatArray
	// void MaxOfFloatArray(TArray<float>& FloatArray, int32_t& IndexOfMaxValue, float& MaxValue);                              // [0x33484a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MaxOfByteArray
	// void MaxOfByteArray(TArray<char>& ByteArray, int32_t& IndexOfMaxValue, char& MaxValue);                                  // [0x3348360] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MaxInt64
	// int64_t MaxInt64(int64_t A, int64_t B);                                                                                  // [0x3348290] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Max
	// int32_t Max(int32_t A, int32_t B);                                                                                       // [0x33481c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_TransformVector4
	// FVector4 Matrix_TransformVector4(FMatrix& M, FVector4 V);                                                                // [0x3347f60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_TransformVector
	// FVector4 Matrix_TransformVector(FMatrix& M, FVector V);                                                                  // [0x3348080] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_TransformPosition
	// FVector4 Matrix_TransformPosition(FMatrix& M, FVector V);                                                                // [0x3347e20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_ToQuat
	// FQuat Matrix_ToQuat(FMatrix& M);                                                                                         // [0x3347d80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_SetOrigin
	// void Matrix_SetOrigin(FMatrix& M, FVector NewOrigin);                                                                    // [0x3347ca0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Matrix_SetColumn
	// void Matrix_SetColumn(FMatrix& M, TEnumAsByte<EMatrixColumns> Column, FVector Value);                                    // [0x3347b70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Matrix_SetAxis
	// void Matrix_SetAxis(FMatrix& M, TEnumAsByte<EAxis> Axis, FVector AxisVector);                                            // [0x3347a30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Matrix_ScaleTranslation
	// FMatrix Matrix_ScaleTranslation(FMatrix& M, FVector Scale3D);                                                            // [0x33478f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_RemoveTranslation
	// FMatrix Matrix_RemoveTranslation(FMatrix& M);                                                                            // [0x3347830] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_RemoveScaling
	// void Matrix_RemoveScaling(FMatrix& M, float Tolerance);                                                                  // [0x3347750] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Matrix_Mirror
	// FMatrix Matrix_Mirror(FMatrix& M, TEnumAsByte<EAxis> MirrorAxis, TEnumAsByte<EAxis> FlipAxis);                           // [0x33475d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_InverseTransformVector
	// FVector Matrix_InverseTransformVector(FMatrix& M, FVector V);                                                            // [0x3347460] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_InverseTransformPosition
	// FVector Matrix_InverseTransformPosition(FMatrix& M, FVector V);                                                          // [0x33472e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_Identity
	// FMatrix Matrix_Identity();                                                                                               // [0x3347290] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetUnitAxis
	// FVector Matrix_GetUnitAxis(FMatrix& M, TEnumAsByte<EAxis> Axis);                                                         // [0x3347190] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetUnitAxes
	// void Matrix_GetUnitAxes(FMatrix& M, FVector& X, FVector& Y, FVector& Z);                                                 // [0x3347000] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetTransposed
	// FMatrix Matrix_GetTransposed(FMatrix& M);                                                                                // [0x3346e10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetTransposeAdjoint
	// FMatrix Matrix_GetTransposeAdjoint(FMatrix& M);                                                                          // [0x3346d50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetScaleVector
	// FVector Matrix_GetScaleVector(FMatrix& M, float Tolerance);                                                              // [0x3346920] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetScaledAxis
	// FVector Matrix_GetScaledAxis(FMatrix& M, TEnumAsByte<EAxis> Axis);                                                       // [0x3346be0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetScaledAxes
	// void Matrix_GetScaledAxes(FMatrix& M, FVector& X, FVector& Y, FVector& Z);                                               // [0x3346a30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetRotDeterminant
	// float Matrix_GetRotDeterminant(FMatrix& M);                                                                              // [0x3346810] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetRotator
	// FRotator Matrix_GetRotator(FMatrix& M);                                                                                  // [0x3336920] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetOrigin
	// FVector Matrix_GetOrigin(FMatrix& InMatrix);                                                                             // [0x3346770] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetMaximumAxisScale
	// float Matrix_GetMaximumAxisScale(FMatrix& M);                                                                            // [0x33466e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetMatrixWithoutScale
	// FMatrix Matrix_GetMatrixWithoutScale(FMatrix& M, float Tolerance);                                                       // [0x33465a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetInverse
	// FMatrix Matrix_GetInverse(FMatrix& M);                                                                                   // [0x33464e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumTopPlane
	// bool Matrix_GetFrustumTopPlane(FMatrix& M, FPlane& OutPlane);                                                            // [0x33462f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumRightPlane
	// bool Matrix_GetFrustumRightPlane(FMatrix& M, FPlane& OutPlane);                                                          // [0x3346100] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumNearPlane
	// bool Matrix_GetFrustumNearPlane(FMatrix& M, FPlane& OutPlane);                                                           // [0x3345f50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumLeftPlane
	// bool Matrix_GetFrustumLeftPlane(FMatrix& M, FPlane& OutPlane);                                                           // [0x3345d60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumFarPlane
	// bool Matrix_GetFrustumFarPlane(FMatrix& M, FPlane& OutPlane);                                                            // [0x3345b70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumBottomPlane
	// bool Matrix_GetFrustumBottomPlane(FMatrix& M, FPlane& OutPlane);                                                         // [0x3345980] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetDeterminant
	// float Matrix_GetDeterminant(FMatrix& M);                                                                                 // [0x33458f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetColumn
	// FVector Matrix_GetColumn(FMatrix& M, TEnumAsByte<EMatrixColumns> Column);                                                // [0x33457f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_ContainsNaN
	// bool Matrix_ContainsNaN(FMatrix& M);                                                                                     // [0x3345760] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_ConcatenateTranslation
	// FMatrix Matrix_ConcatenateTranslation(FMatrix& M, FVector Translation);                                                  // [0x33455f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_ApplyScale
	// FMatrix Matrix_ApplyScale(FMatrix& M, float Scale);                                                                      // [0x3345380] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MapRangeUnclamped
	// float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);                  // [0x33451d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MapRangeClamped
	// float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);                    // [0x3345020] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeVector4
	// FVector4 MakeVector4(float X, float Y, float Z, float W);                                                                // [0x3344d80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeVector2D
	// FVector2D MakeVector2D(float X, float Y);                                                                                // [0x3344cb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeVector
	// FVector MakeVector(float X, float Y, float Z);                                                                           // [0x3344f00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeTransform
	// FTransform MakeTransform(FVector Location, FRotator Rotation, FVector Scale);                                            // [0x3344b10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeTimespan2
	// FTimespan MakeTimespan2(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t FractionNano);            // [0x33447f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeTimespan
	// FTimespan MakeTimespan(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t Milliseconds);             // [0x3344980] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromZY
	// FRotator MakeRotFromZY(FVector& Z, FVector& Y);                                                                          // [0x3344470] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromZX
	// FRotator MakeRotFromZX(FVector& Z, FVector& X);                                                                          // [0x3344360] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromZ
	// FRotator MakeRotFromZ(FVector& Z);                                                                                       // [0x33442a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromYZ
	// FRotator MakeRotFromYZ(FVector& Y, FVector& Z);                                                                          // [0x3344190] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromYX
	// FRotator MakeRotFromYX(FVector& Y, FVector& X);                                                                          // [0x3344080] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromY
	// FRotator MakeRotFromY(FVector& Y);                                                                                       // [0x3343fc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromXZ
	// FRotator MakeRotFromXZ(FVector& X, FVector& Z);                                                                          // [0x3343eb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromXY
	// FRotator MakeRotFromXY(FVector& X, FVector& Y);                                                                          // [0x3343da0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromX
	// FRotator MakeRotFromX(FVector& X);                                                                                       // [0x3343ce0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotator
	// FRotator MakeRotator(float Roll, float Pitch, float Yaw);                                                                // [0x33446d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotationFromAxes
	// FRotator MakeRotationFromAxes(FVector Forward, FVector Right, FVector Up);                                               // [0x3344580] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRelativeTransform
	// FTransform MakeRelativeTransform(FTransform& A, FTransform& RelativeTo);                                                 // [0x3343b50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRandomStream
	// FRandomStream MakeRandomStream(int32_t InitialSeed);                                                                     // [0x3343ac0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeQualifiedFrameTime
	// FQualifiedFrameTime MakeQualifiedFrameTime(FFrameNumber Frame, FFrameRate FrameRate, float SubFrame);                    // [0x33439a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakePulsatingValue
	// float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);                                   // [0x3343880] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakePlaneFromPointAndNormal
	// FPlane MakePlaneFromPointAndNormal(FVector Point, FVector Normal);                                                       // [0x3343790] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeFrameRate
	// FFrameRate MakeFrameRate(int32_t Numerator, int32_t Denominator);                                                        // [0x33436d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeDateTime
	// FDateTime MakeDateTime(int32_t Year, int32_t Month, int32_t Day, int32_t Hour, int32_t Minute, int32_t Second, int32_t Millisecond); // [0x33434c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeColor
	// FLinearColor MakeColor(float R, float G, float B, float A);                                                              // [0x3343340] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeBox2D
	// FBox2D MakeBox2D(FVector2D Min, FVector2D Max);                                                                          // [0x3343170] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeBox
	// FBox MakeBox(FVector Min, FVector Max);                                                                                  // [0x3343250] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Loge
	// float Loge(float A);                                                                                                     // [0x33430e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Log
	// float Log(float A, float Base);                                                                                          // [0x3343010] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal
	// bool LinePlaneIntersection_OriginNormal(FVector& LineStart, FVector& LineEnd, FVector PlaneOrigin, FVector PlaneNormal, float& T, FVector& Intersection); // [0x3341b50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinePlaneIntersection
	// bool LinePlaneIntersection(FVector& LineStart, FVector& LineEnd, FPlane& APlane, float& T, FVector& Intersection);       // [0x3341960] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColorLerpUsingHSV
	// FLinearColor LinearColorLerpUsingHSV(FLinearColor A, FLinearColor B, float Alpha);                                       // [0x3341ee0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColorLerp
	// FLinearColor LinearColorLerp(FLinearColor A, FLinearColor B, float Alpha);                                               // [0x3341d80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Yellow
	// FLinearColor LinearColor_Yellow();                                                                                       // [0x3342ff0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_White
	// FLinearColor LinearColor_White();                                                                                        // [0x3342fd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Transparent
	// FLinearColor LinearColor_Transparent();                                                                                  // [0x3342fb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_ToRGBE
	// FColor LinearColor_ToRGBE(FLinearColor InLinearColor);                                                                   // [0x3342f20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_ToNewOpacity
	// FLinearColor LinearColor_ToNewOpacity(FLinearColor InColor, float InOpacity);                                            // [0x3342e30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetTemperature
	// void LinearColor_SetTemperature(FLinearColor& InOutColor, float InTemperature);                                          // [0x3342d50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetRGBA
	// void LinearColor_SetRGBA(FLinearColor& InOutColor, float R, float G, float B, float A);                                  // [0x3342b10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetRandomHue
	// void LinearColor_SetRandomHue(FLinearColor& InOutColor);                                                                 // [0x3342cc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetFromSRGB
	// void LinearColor_SetFromSRGB(FLinearColor& InOutColor, FColor& InSRGB);                                                  // [0x3342a30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetFromPow22
	// void LinearColor_SetFromPow22(FLinearColor& InOutColor, FColor& InColor);                                                // [0x3342950] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetFromHSV
	// void LinearColor_SetFromHSV(FLinearColor& InOutColor, float H, float S, float V, float A);                               // [0x33427a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Set
	// void LinearColor_Set(FLinearColor& InOutColor, FLinearColor InColor);                                                    // [0x33426d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Red
	// FLinearColor LinearColor_Red();                                                                                          // [0x33426b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_QuantizeRound
	// FColor LinearColor_QuantizeRound(FLinearColor InColor);                                                                  // [0x3342620] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Quantize
	// FColor LinearColor_Quantize(FLinearColor InColor);                                                                       // [0x3342590] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_IsNearEqual
	// bool LinearColor_IsNearEqual(FLinearColor A, FLinearColor B, float Tolerance);                                           // [0x3342430] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Green
	// FLinearColor LinearColor_Green();                                                                                        // [0x3342410] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Gray
	// FLinearColor LinearColor_Gray();                                                                                         // [0x33423f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_GetMin
	// float LinearColor_GetMin(FLinearColor InColor);                                                                          // [0x3342360] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_GetMax
	// float LinearColor_GetMax(FLinearColor InColor);                                                                          // [0x33422d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_GetLuminance
	// float LinearColor_GetLuminance(FLinearColor InColor);                                                                    // [0x3342230] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Distance
	// float LinearColor_Distance(FLinearColor C1, FLinearColor C2);                                                            // [0x3342130] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Desaturated
	// FLinearColor LinearColor_Desaturated(FLinearColor InColor, float InDesaturation);                                        // [0x3342050] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Blue
	// FLinearColor LinearColor_Blue();                                                                                         // [0x3342030] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Black
	// FLinearColor LinearColor_Black();                                                                                        // [0x3342010] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessLess_VectorRotator
	// FVector LessLess_VectorRotator(FVector A, FRotator B);                                                                   // [0x3341470] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_TimespanTimespan
	// bool LessEqual_TimespanTimespan(FTimespan A, FTimespan B);                                                               // [0x3341140] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_IntInt
	// bool LessEqual_IntInt(int32_t A, int32_t B);                                                                             // [0x33413a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_Int64Int64
	// bool LessEqual_Int64Int64(int64_t A, int64_t B);                                                                         // [0x33412d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_FloatFloat
	// bool LessEqual_FloatFloat(float A, float B);                                                                             // [0x3341200] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_DateTimeDateTime
	// bool LessEqual_DateTimeDateTime(FDateTime A, FDateTime B);                                                               // [0x3341140] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_ByteByte
	// bool LessEqual_ByteByte(char A, char B);                                                                                 // [0x3341080] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_TimespanTimespan
	// bool Less_TimespanTimespan(FTimespan A, FTimespan B);                                                                    // [0x3341630] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_IntInt
	// bool Less_IntInt(int32_t A, int32_t B);                                                                                  // [0x3341890] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_Int64Int64
	// bool Less_Int64Int64(int64_t A, int64_t B);                                                                              // [0x33417c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_FloatFloat
	// bool Less_FloatFloat(float A, float B);                                                                                  // [0x33416f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_DateTimeDateTime
	// bool Less_DateTimeDateTime(FDateTime A, FDateTime B);                                                                    // [0x3341630] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_ByteByte
	// bool Less_ByteByte(char A, char B);                                                                                      // [0x3341570] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Lerp
	// float Lerp(float A, float B, float Alpha);                                                                               // [0x3340f60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsZero2D
	// bool IsZero2D(FVector2D& A);                                                                                             // [0x3340eb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsPointInBoxWithTransform
	// bool IsPointInBoxWithTransform(FVector Point, FTransform& BoxWorldTransform, FVector BoxExtent);                         // [0x3340d20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsPointInBox
	// bool IsPointInBox(FVector Point, FVector BoxOrigin, FVector BoxExtent);                                                  // [0x3340be0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsNearlyZero2D
	// bool IsNearlyZero2D(FVector2D& A, float Tolerance);                                                                      // [0x3340ae0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsMorning
	// bool IsMorning(FDateTime A);                                                                                             // [0x3340a30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsLeapYear
	// bool IsLeapYear(int32_t Year);                                                                                           // [0x33409a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsAfternoon
	// bool IsAfternoon(FDateTime A);                                                                                           // [0x33408f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InvertTransform
	// FTransform InvertTransform(FTransform& T);                                                                               // [0x33406e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InverseTransformRotation
	// FRotator InverseTransformRotation(FTransform& T, FRotator Rotation);                                                     // [0x3340590] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InverseTransformLocation
	// FVector InverseTransformLocation(FTransform& T, FVector Location);                                                       // [0x3340390] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InverseTransformDirection
	// FVector InverseTransformDirection(FTransform& T, FVector Direction);                                                     // [0x33401f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_Zero
	// FIntPoint IntPoint_Zero();                                                                                               // [0x33401c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_Up
	// FIntPoint IntPoint_Up();                                                                                                 // [0x3340190] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_Right
	// FIntPoint IntPoint_Right();                                                                                              // [0x3340170] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_One
	// FIntPoint IntPoint_One();                                                                                                // [0x3340140] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_Left
	// FIntPoint IntPoint_Left();                                                                                               // [0x3340110] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_Down
	// FIntPoint IntPoint_Down();                                                                                               // [0x33400e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InRange_IntInt
	// bool InRange_IntInt(int32_t Value, int32_t Min, int32_t Max, bool InclusiveMin, bool InclusiveMax);                      // [0x333ff40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InRange_Int64Int64
	// bool InRange_Int64Int64(int64_t Value, int64_t Min, int64_t Max, bool InclusiveMin, bool InclusiveMax);                  // [0x333fda0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InRange_FloatFloat
	// bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);                        // [0x333fbf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Hypotenuse
	// float Hypotenuse(float Width, float Height);                                                                             // [0x333fb20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.HSVToRGBLinear
	// FLinearColor HSVToRGBLinear(FLinearColor HSV);                                                                           // [0x333f9b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.HSVToRGB_Vector
	// void HSVToRGB_Vector(FLinearColor HSV, FLinearColor& RGB);                                                               // [0x333fa40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.HSVToRGB
	// FLinearColor HSVToRGB(float H, float S, float V, float A);                                                               // [0x333f820] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GridSnap_Float
	// float GridSnap_Float(float Location, float GridSize);                                                                    // [0x333f6f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterGreater_VectorRotator
	// FVector GreaterGreater_VectorRotator(FVector A, FRotator B);                                                             // [0x333f200] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan
	// bool GreaterEqual_TimespanTimespan(FTimespan A, FTimespan B);                                                            // [0x333eed0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_IntInt
	// bool GreaterEqual_IntInt(int32_t A, int32_t B);                                                                          // [0x333f130] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_Int64Int64
	// bool GreaterEqual_Int64Int64(int64_t A, int64_t B);                                                                      // [0x333f060] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_FloatFloat
	// bool GreaterEqual_FloatFloat(float A, float B);                                                                          // [0x333ef90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime
	// bool GreaterEqual_DateTimeDateTime(FDateTime A, FDateTime B);                                                            // [0x333eed0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_ByteByte
	// bool GreaterEqual_ByteByte(char A, char B);                                                                              // [0x333ee10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_TimespanTimespan
	// bool Greater_TimespanTimespan(FTimespan A, FTimespan B);                                                                 // [0x333f3c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_IntInt
	// bool Greater_IntInt(int32_t A, int32_t B);                                                                               // [0x333f620] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_Int64Int64
	// bool Greater_Int64Int64(int64_t A, int64_t B);                                                                           // [0x333f550] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_FloatFloat
	// bool Greater_FloatFloat(float A, float B);                                                                               // [0x333f480] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_DateTimeDateTime
	// bool Greater_DateTimeDateTime(FDateTime A, FDateTime B);                                                                 // [0x333f3c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_ByteByte
	// bool Greater_ByteByte(char A, char B);                                                                                   // [0x333f300] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetYear
	// int32_t GetYear(FDateTime A);                                                                                            // [0x333ed90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetYawPitchFromVector
	// void GetYawPitchFromVector(FVector InVec, float& Yaw, float& Pitch);                                                     // [0x333ec60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetVectorArrayAverage
	// FVector GetVectorArrayAverage(TArray<FVector>& Vectors);                                                                 // [0x333ea90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetUpVector
	// FVector GetUpVector(FRotator InRot);                                                                                     // [0x333e9f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTotalSeconds
	// float GetTotalSeconds(FTimespan A);                                                                                      // [0x333e960] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTotalMinutes
	// float GetTotalMinutes(FTimespan A);                                                                                      // [0x333e8d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTotalMilliseconds
	// float GetTotalMilliseconds(FTimespan A);                                                                                 // [0x333e840] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTotalHours
	// float GetTotalHours(FTimespan A);                                                                                        // [0x333e7b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTotalDays
	// float GetTotalDays(FTimespan A);                                                                                         // [0x333e720] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTimeOfDay
	// FTimespan GetTimeOfDay(FDateTime A);                                                                                     // [0x333e6a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTAU
	// float GetTAU();                                                                                                          // [0x333e680] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetSlopeDegreeAngles
	// void GetSlopeDegreeAngles(FVector& MyRightYAxis, FVector& FloorNormal, FVector& UpVector, float& OutSlopePitchDegreeAngle, float& OutSlopeRollDegreeAngle); // [0x333e4a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetSeconds
	// int32_t GetSeconds(FTimespan A);                                                                                         // [0x333e3e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetSecond
	// int32_t GetSecond(FDateTime A);                                                                                          // [0x333e3e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetRotated2D
	// FVector2D GetRotated2D(FVector2D A, float AngleDeg);                                                                     // [0x333e0c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetRightVector
	// FVector GetRightVector(FRotator InRot);                                                                                  // [0x333e020] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetReflectionVector
	// FVector GetReflectionVector(FVector Direction, FVector SurfaceNormal);                                                   // [0x333df20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetPointDistanceToSegment
	// float GetPointDistanceToSegment(FVector Point, FVector SegmentStart, FVector SegmentEnd);                                // [0x333dde0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetPointDistanceToLine
	// float GetPointDistanceToLine(FVector Point, FVector LineOrigin, FVector LineDirection);                                  // [0x333dca0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetPI
	// float GetPI();                                                                                                           // [0x333dc80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMonth
	// int32_t GetMonth(FDateTime A);                                                                                           // [0x333dc00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMinutes
	// int32_t GetMinutes(FTimespan A);                                                                                         // [0x333db50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMinute
	// int32_t GetMinute(FDateTime A);                                                                                          // [0x333db50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMinElement
	// float GetMinElement(FVector A);                                                                                          // [0x333dad0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMin2D
	// float GetMin2D(FVector2D A);                                                                                             // [0x333da50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMilliseconds
	// int32_t GetMilliseconds(FTimespan A);                                                                                    // [0x333d990] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMillisecond
	// int32_t GetMillisecond(FDateTime A);                                                                                     // [0x333d8e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMaxElement
	// float GetMaxElement(FVector A);                                                                                          // [0x333d860] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMax2D
	// float GetMax2D(FVector2D A);                                                                                             // [0x333d7e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetHours
	// int32_t GetHours(FTimespan A);                                                                                           // [0x333d730] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetHour12
	// int32_t GetHour12(FDateTime A);                                                                                          // [0x333d6b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetHour
	// int32_t GetHour(FDateTime A);                                                                                            // [0x333d730] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetForwardVector
	// FVector GetForwardVector(FRotator InRot);                                                                                // [0x333d610] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDuration
	// FTimespan GetDuration(FTimespan A);                                                                                      // [0x333d590] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDirectionUnitVector
	// FVector GetDirectionUnitVector(FVector From, FVector To);                                                                // [0x333d3c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDays
	// int32_t GetDays(FTimespan A);                                                                                            // [0x333d340] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDayOfYear
	// int32_t GetDayOfYear(FDateTime A);                                                                                       // [0x333d2c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDay
	// int32_t GetDay(FDateTime A);                                                                                             // [0x333d240] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDate
	// FDateTime GetDate(FDateTime A);                                                                                          // [0x333d1b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetAzimuthAndElevation
	// void GetAzimuthAndElevation(FVector InDirection, FTransform& ReferenceFrame, float& Azimuth, float& Elevation);          // [0x333cfd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetAxes
	// void GetAxes(FRotator A, FVector& X, FVector& Y, FVector& Z);                                                            // [0x333ce50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetAbsMax2D
	// float GetAbsMax2D(FVector2D A);                                                                                          // [0x333cdc0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetAbs2D
	// FVector2D GetAbs2D(FVector2D A);                                                                                         // [0x333cd30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FWrap
	// float FWrap(float Value, float Min, float Max);                                                                          // [0x333bf30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FTruncVector
	// FIntVector FTruncVector(FVector& InVector);                                                                              // [0x333be90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FTrunc64
	// int64_t FTrunc64(float A);                                                                                               // [0x333bd90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FTrunc
	// int32_t FTrunc(float A);                                                                                                 // [0x333be10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FromSeconds
	// FTimespan FromSeconds(float Seconds);                                                                                    // [0x333cca0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FromMinutes
	// FTimespan FromMinutes(float Minutes);                                                                                    // [0x333cc10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FromMilliseconds
	// FTimespan FromMilliseconds(float Milliseconds);                                                                          // [0x333cb80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FromHours
	// FTimespan FromHours(float Hours);                                                                                        // [0x333caf0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FromDays
	// FTimespan FromDays(float Days);                                                                                          // [0x333ca60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Fraction
	// float Fraction(float A);                                                                                                 // [0x333c9c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FMod
	// int32_t FMod(float Dividend, float Divisor, float& Remainder);                                                           // [0x333bc70] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FMin
	// float FMin(float A, float B);                                                                                            // [0x333bba0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FMax
	// float FMax(float A, float B);                                                                                            // [0x333bad0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FloatSpringInterp
	// float FloatSpringInterp(float Current, float Target, FFloatSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass); // [0x333c790] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.FixedTurn
	// float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);                                                    // [0x333c670] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FInterpTo_Constant
	// float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);                               // [0x333b970] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FInterpTo
	// float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);                                        // [0x333b810] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FInterpEaseInOut
	// float FInterpEaseInOut(float A, float B, float Alpha, float Exponent);                                                   // [0x333b6b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FindNearestPointsOnLineSegments
	// void FindNearestPointsOnLineSegments(FVector Segment1Start, FVector Segment1End, FVector Segment2Start, FVector Segment2End, FVector& Segment1Point, FVector& Segment2Point); // [0x333c450] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FindLookAtRotation
	// FRotator FindLookAtRotation(FVector& Start, FVector& Target);                                                            // [0x333c310] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FindClosestPointOnSegment
	// FVector FindClosestPointOnSegment(FVector Point, FVector SegmentStart, FVector SegmentEnd);                              // [0x333c1c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FindClosestPointOnLine
	// FVector FindClosestPointOnLine(FVector Point, FVector LineOrigin, FVector LineDirection);                                // [0x333c070] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FFloor64
	// int64_t FFloor64(float A);                                                                                               // [0x333b560] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FFloor
	// int32_t FFloor(float A);                                                                                                 // [0x333b620] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FClamp
	// float FClamp(float Value, float Min, float Max);                                                                         // [0x333b440] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FCeil64
	// int64_t FCeil64(float A);                                                                                                // [0x333b2d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FCeil
	// int32_t FCeil(float A);                                                                                                  // [0x333b3a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Exp
	// float Exp(float A);                                                                                                      // [0x333b240] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualExactly_VectorVector
	// bool EqualExactly_VectorVector(FVector A, FVector B);                                                                    // [0x333b090] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualExactly_Vector4Vector4
	// bool EqualExactly_Vector4Vector4(FVector4& A, FVector4& B);                                                              // [0x333af60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualExactly_Vector2DVector2D
	// bool EqualExactly_Vector2DVector2D(FVector2D A, FVector2D B);                                                            // [0x333ae90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_VectorVector
	// bool EqualEqual_VectorVector(FVector A, FVector B, float ErrorTolerance);                                                // [0x333ad40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_Vector4Vector4
	// bool EqualEqual_Vector4Vector4(FVector4& A, FVector4& B, float ErrorTolerance);                                          // [0x333abb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_Vector2DVector2D
	// bool EqualEqual_Vector2DVector2D(FVector2D A, FVector2D B, float ErrorTolerance);                                        // [0x333aa80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_TransformTransform
	// bool EqualEqual_TransformTransform(FTransform& A, FTransform& B);                                                        // [0x333a900] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_TimespanTimespan
	// bool EqualEqual_TimespanTimespan(FTimespan A, FTimespan B);                                                              // [0x3339f20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_RotatorRotator
	// bool EqualEqual_RotatorRotator(FRotator A, FRotator B, float ErrorTolerance);                                            // [0x333a710] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_QuatQuat
	// bool EqualEqual_QuatQuat(FQuat& A, FQuat& B, float Tolerance);                                                           // [0x333a5b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_ObjectObject
	// bool EqualEqual_ObjectObject(class UObject* A, class UObject* B);                                                        // [0x3339e50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_NameName
	// bool EqualEqual_NameName(FName A, FName B);                                                                              // [0x333a4e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_MatrixMatrix
	// bool EqualEqual_MatrixMatrix(FMatrix& A, FMatrix& B, float Tolerance);                                                   // [0x333a350] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_LinearColorLinearColor
	// bool EqualEqual_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                                  // [0x333a260] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_IntInt
	// bool EqualEqual_IntInt(int32_t A, int32_t B);                                                                            // [0x333a190] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_Int64Int64
	// bool EqualEqual_Int64Int64(int64_t A, int64_t B);                                                                        // [0x333a0c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_FloatFloat
	// bool EqualEqual_FloatFloat(float A, float B);                                                                            // [0x3339fe0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime
	// bool EqualEqual_DateTimeDateTime(FDateTime A, FDateTime B);                                                              // [0x3339f20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_ClassClass
	// bool EqualEqual_ClassClass(class UClass* A, class UClass* B);                                                            // [0x3339e50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_ByteByte
	// bool EqualEqual_ByteByte(char A, char B);                                                                                // [0x3339d90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_BoolBool
	// bool EqualEqual_BoolBool(bool A, bool B);                                                                                // [0x3339cb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Equal_IntPointIntPoint
	// bool Equal_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                                   // [0x333b170] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Ease
	// float Ease(float A, float B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps);           // [0x3339ad0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FVector
	// FVector DynamicWeightedMovingAverage_FVector(FVector CurrentSample, FVector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // [0x3339760] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FRotator
	// FRotator DynamicWeightedMovingAverage_FRotator(FRotator CurrentSample, FRotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // [0x33395a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DynamicWeightedMovingAverage_Float
	// float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // [0x3339920] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DotProduct2D
	// float DotProduct2D(FVector2D A, FVector2D B);                                                                            // [0x33393f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Dot_VectorVector
	// float Dot_VectorVector(FVector A, FVector B);                                                                            // [0x33394c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_VectorVector
	// FVector Divide_VectorVector(FVector A, FVector B);                                                                       // [0x33392c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_VectorInt
	// FVector Divide_VectorInt(FVector A, int32_t B);                                                                          // [0x3339180] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_VectorFloat
	// FVector Divide_VectorFloat(FVector A, float B);                                                                          // [0x3339040] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_Vector4Vector4
	// FVector4 Divide_Vector4Vector4(FVector4& A, FVector4& B);                                                                // [0x3338f10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_Vector2DVector2D
	// FVector2D Divide_Vector2DVector2D(FVector2D A, FVector2D B);                                                             // [0x3338e10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_Vector2DFloat
	// FVector2D Divide_Vector2DFloat(FVector2D A, float B);                                                                    // [0x3338cf0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_TimespanFloat
	// FTimespan Divide_TimespanFloat(FTimespan A, float Scalar);                                                               // [0x3338c20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_LinearColorLinearColor
	// FLinearColor Divide_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                              // [0x3338b30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_IntPointIntPoint
	// FIntPoint Divide_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                             // [0x3338a30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_IntPointInt
	// FIntPoint Divide_IntPointInt(FIntPoint A, int32_t B);                                                                    // [0x3338930] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_IntInt
	// int32_t Divide_IntInt(int32_t A, int32_t B);                                                                             // [0x3338850] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_Int64Int64
	// int64_t Divide_Int64Int64(int64_t A, int64_t B);                                                                         // [0x3338760] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_FloatFloat
	// float Divide_FloatFloat(float A, float B);                                                                               // [0x33385e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_ByteByte
	// char Divide_ByteByte(char A, char B);                                                                                    // [0x3338500] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DistanceSquared2D
	// float DistanceSquared2D(FVector2D v1, FVector2D v2);                                                                     // [0x3338430] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Distance2D
	// float Distance2D(FVector2D v1, FVector2D v2);                                                                            // [0x3338360] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegTan
	// float DegTan(float A);                                                                                                   // [0x3338240] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegSin
	// float DegSin(float A);                                                                                                   // [0x33381b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegreesToRadians
	// float DegreesToRadians(float A);                                                                                         // [0x33382d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegCos
	// float DegCos(float A);                                                                                                   // [0x3338120] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegAtan2
	// float DegAtan2(float Y, float X);                                                                                        // [0x3337fb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegAtan
	// float DegAtan(float A);                                                                                                  // [0x3338090] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegAsin
	// float DegAsin(float A);                                                                                                  // [0x3337f00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegAcos
	// float DegAcos(float A);                                                                                                  // [0x3337e50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DaysInYear
	// int32_t DaysInYear(int32_t Year);                                                                                        // [0x3337dc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DaysInMonth
	// int32_t DaysInMonth(int32_t Year, int32_t Month);                                                                        // [0x3337cd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DateTimeMinValue
	// FDateTime DateTimeMinValue();                                                                                            // [0x3337cb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DateTimeMaxValue
	// FDateTime DateTimeMaxValue();                                                                                            // [0x3337c80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DateTimeFromString
	// bool DateTimeFromString(FString DateTimeString, FDateTime& Result);                                                      // [0x3337b40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DateTimeFromIsoString
	// bool DateTimeFromIsoString(FString IsoString, FDateTime& Result);                                                        // [0x33379f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.CrossProduct2D
	// float CrossProduct2D(FVector2D A, FVector2D B);                                                                          // [0x3337800] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Cross_VectorVector
	// FVector Cross_VectorVector(FVector A, FVector B);                                                                        // [0x33378d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.CreateVectorFromYawPitch
	// FVector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);                                                  // [0x33376d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Cos
	// float Cos(float A);                                                                                                      // [0x33374f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ConvertTransformToRelative
	// FTransform ConvertTransformToRelative(FTransform& Transform, FTransform& ParentTransform);                               // [0x3337360] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToVector2D
	// FVector2D Conv_VectorToVector2D(FVector InVector);                                                                       // [0x33372e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToTransform
	// FTransform Conv_VectorToTransform(FVector InLocation);                                                                   // [0x3337240] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToRotator
	// FRotator Conv_VectorToRotator(FVector InVec);                                                                            // [0x33371a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToQuaternion
	// FQuat Conv_VectorToQuaternion(FVector InVec);                                                                            // [0x3337100] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToLinearColor
	// FLinearColor Conv_VectorToLinearColor(FVector InVec);                                                                    // [0x3337060] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_Vector4ToVector
	// FVector Conv_Vector4ToVector(FVector4& InVector4);                                                                       // [0x3336fb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_Vector4ToRotator
	// FRotator Conv_Vector4ToRotator(FVector4& InVec);                                                                         // [0x3336f00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_Vector4ToQuaternion
	// FQuat Conv_Vector4ToQuaternion(FVector4& InVec);                                                                         // [0x3336e60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_Vector2DToVector
	// FVector Conv_Vector2DToVector(FVector2D InVector2D, float Z);                                                            // [0x3336d80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_Vector2DToIntPoint
	// FIntPoint Conv_Vector2DToIntPoint(FVector2D InVector2D);                                                                 // [0x3336cd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_TransformToMatrix
	// FMatrix Conv_TransformToMatrix(FTransform& Transform);                                                                   // [0x3336bc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_RotatorToVector
	// FVector Conv_RotatorToVector(FRotator InRot);                                                                            // [0x3336b20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_RotatorToTransform
	// FTransform Conv_RotatorToTransform(FRotator& InRotator);                                                                 // [0x3336a70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_MatrixToTransform
	// FTransform Conv_MatrixToTransform(FMatrix& InMatrix);                                                                    // [0x33369c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_MatrixToRotator
	// FRotator Conv_MatrixToRotator(FMatrix& InMatrix);                                                                        // [0x3336920] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_LinearColorToVector
	// FVector Conv_LinearColorToVector(FLinearColor InLinearColor);                                                            // [0x3336890] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_LinearColorToColor
	// FColor Conv_LinearColorToColor(FLinearColor InLinearColor, bool InUseSRGB);                                              // [0x33367b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntVectorToVector
	// FVector Conv_IntVectorToVector(FIntVector& InIntVector);                                                                 // [0x33366f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToIntVector
	// FIntVector Conv_IntToIntVector(int32_t inInt);                                                                           // [0x3336660] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToInt64
	// int64_t Conv_IntToInt64(int32_t inInt);                                                                                  // [0x33365e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToFloat
	// float Conv_IntToFloat(int32_t inInt);                                                                                    // [0x3336550] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToByte
	// char Conv_IntToByte(int32_t inInt);                                                                                      // [0x33364d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToBool
	// bool Conv_IntToBool(int32_t inInt);                                                                                      // [0x3336440] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntPointToVector2D
	// FVector2D Conv_IntPointToVector2D(FIntPoint InIntPoint);                                                                 // [0x33363b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_Int64ToInt
	// int32_t Conv_Int64ToInt(int64_t inInt);                                                                                  // [0x3336330] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_Int64ToByte
	// char Conv_Int64ToByte(int64_t inInt);                                                                                    // [0x33362b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_FloatToVector
	// FVector Conv_FloatToVector(float InFloat);                                                                               // [0x3336220] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_FloatToLinearColor
	// FLinearColor Conv_FloatToLinearColor(float InFloat);                                                                     // [0x3336190] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_ColorToLinearColor
	// FLinearColor Conv_ColorToLinearColor(FColor InColor);                                                                    // [0x3336100] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_ByteToInt
	// int32_t Conv_ByteToInt(char InByte);                                                                                     // [0x3336080] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_ByteToFloat
	// float Conv_ByteToFloat(char InByte);                                                                                     // [0x3336000] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_BoolToInt
	// int32_t Conv_BoolToInt(bool InBool);                                                                                     // [0x3335f70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_BoolToFloat
	// float Conv_BoolToFloat(bool InBool);                                                                                     // [0x3335ee0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_BoolToByte
	// char Conv_BoolToByte(bool InBool);                                                                                       // [0x3335e50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ComposeTransforms
	// FTransform ComposeTransforms(FTransform& A, FTransform& B);                                                              // [0x3335cc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ComposeRotators
	// FRotator ComposeRotators(FRotator A, FRotator B);                                                                        // [0x3335bc0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ClassIsChildOf
	// bool ClassIsChildOf(class UClass* TestClass, class UClass* ParentClass);                                                 // [0x3335af0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ClampVectorSize
	// FVector ClampVectorSize(FVector A, float Min, float Max);                                                                // [0x3335920] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ClampInt64
	// int64_t ClampInt64(int64_t Value, int64_t Min, int64_t Max);                                                             // [0x3335810] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ClampAxis
	// float ClampAxis(float Angle);                                                                                            // [0x3335780] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ClampAxes2D
	// FVector2D ClampAxes2D(FVector2D A, float MinAxisVal, float MaxAxisVal);                                                  // [0x3335650] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ClampAngle
	// float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);                                      // [0x3335530] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Clamp
	// int32_t Clamp(int32_t Value, int32_t Min, int32_t Max);                                                                  // [0x3335430] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.CInterpTo
	// FLinearColor CInterpTo(FLinearColor Current, FLinearColor Target, float DeltaTime, float InterpSpeed);                   // [0x33352a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakVector4
	// void BreakVector4(FVector4& InVec, float& X, float& Y, float& Z, float& W);                                              // [0x3334f30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakVector2D
	// void BreakVector2D(FVector2D InVec, float& X, float& Y);                                                                 // [0x3334e00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakVector
	// void BreakVector(FVector InVec, float& X, float& Y, float& Z);                                                           // [0x3335120] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakTransform
	// void BreakTransform(FTransform& InTransform, FVector& Location, FRotator& Rotation, FVector& Scale);                     // [0x3334be0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakTimespan2
	// void BreakTimespan2(FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& FractionNano); // [0x3334780] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakTimespan
	// void BreakTimespan(FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& Milliseconds); // [0x33349b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakRotIntoAxes
	// void BreakRotIntoAxes(FRotator& InRot, FVector& X, FVector& Y, FVector& Z);                                              // [0x3334480] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakRotator
	// void BreakRotator(FRotator InRot, float& Roll, float& Pitch, float& Yaw);                                                // [0x3334600] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakRandomStream
	// void BreakRandomStream(FRandomStream& InRandomStream, int32_t& InitialSeed);                                             // [0x33343a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakQualifiedFrameTime
	// void BreakQualifiedFrameTime(FQualifiedFrameTime& InFrameTime, FFrameNumber& Frame, FFrameRate& FrameRate, float& SubFrame); // [0x3334200] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakFrameRate
	// void BreakFrameRate(FFrameRate& InFrameRate, int32_t& Numerator, int32_t& Denominator);                                  // [0x33340d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakDateTime
	// void BreakDateTime(FDateTime InDateTime, int32_t& Year, int32_t& Month, int32_t& Day, int32_t& Hour, int32_t& Minute, int32_t& Second, int32_t& Millisecond); // [0x3333e20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakColor
	// void BreakColor(FLinearColor InColor, float& R, float& G, float& B, float& A);                                           // [0x3333c40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BooleanXOR
	// bool BooleanXOR(bool A, bool B);                                                                                         // [0x3333b70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BooleanOR
	// bool BooleanOR(bool A, bool B);                                                                                          // [0x3333a90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BooleanNOR
	// bool BooleanNOR(bool A, bool B);                                                                                         // [0x33339b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BooleanNAND
	// bool BooleanNAND(bool A, bool B);                                                                                        // [0x33338d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BooleanAND
	// bool BooleanAND(bool A, bool B);                                                                                         // [0x33337f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BMin
	// char BMin(char A, char B);                                                                                               // [0x3333720] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BMax
	// char BMax(char A, char B);                                                                                               // [0x3333650] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Atan2
	// float Atan2(float Y, float X);                                                                                           // [0x33334f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Atan
	// float Atan(float A);                                                                                                     // [0x33335c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Asin
	// float Asin(float A);                                                                                                     // [0x3333450] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.And_IntInt
	// int32_t And_IntInt(int32_t A, int32_t B);                                                                                // [0x3333390] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.And_Int64Int64
	// int64_t And_Int64Int64(int64_t A, int64_t B);                                                                            // [0x33332c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_VectorVector
	// FVector Add_VectorVector(FVector A, FVector B);                                                                          // [0x33331e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_VectorInt
	// FVector Add_VectorInt(FVector A, int32_t B);                                                                             // [0x33330f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_VectorFloat
	// FVector Add_VectorFloat(FVector A, float B);                                                                             // [0x3333010] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_Vector4Vector4
	// FVector4 Add_Vector4Vector4(FVector4& A, FVector4& B);                                                                   // [0x3332ee0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_Vector2DVector2D
	// FVector2D Add_Vector2DVector2D(FVector2D A, FVector2D B);                                                                // [0x3332e10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_Vector2DFloat
	// FVector2D Add_Vector2DFloat(FVector2D A, float B);                                                                       // [0x3332d40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_TimespanTimespan
	// FTimespan Add_TimespanTimespan(FTimespan A, FTimespan B);                                                                // [0x3332510] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_QuatQuat
	// FQuat Add_QuatQuat(FQuat& A, FQuat& B);                                                                                  // [0x3332c60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_MatrixMatrix
	// FMatrix Add_MatrixMatrix(FMatrix& A, FMatrix& B);                                                                        // [0x3332ad0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_LinearColorLinearColor
	// FLinearColor Add_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                                 // [0x33329e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_IntPointIntPoint
	// FIntPoint Add_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                                // [0x3332910] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_IntPointInt
	// FIntPoint Add_IntPointInt(FIntPoint A, int32_t B);                                                                       // [0x3332830] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_IntInt
	// int32_t Add_IntInt(int32_t A, int32_t B);                                                                                // [0x3332770] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_Int64Int64
	// int64_t Add_Int64Int64(int64_t A, int64_t B);                                                                            // [0x33326a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_FloatFloat
	// float Add_FloatFloat(float A, float B);                                                                                  // [0x33325d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_DateTimeTimespan
	// FDateTime Add_DateTimeTimespan(FDateTime A, FTimespan B);                                                                // [0x3332510] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_DateTimeDateTime
	// FDateTime Add_DateTimeDateTime(FDateTime A, FDateTime B);                                                                // [0x3332510] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_ByteByte
	// char Add_ByteByte(char A, char B);                                                                                       // [0x3332450] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Acos
	// float Acos(float A);                                                                                                     // [0x33323b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Abs_Int64
	// int64_t Abs_Int64(int64_t A);                                                                                            // [0x3332290] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Abs_Int
	// int32_t Abs_Int(int32_t A);                                                                                              // [0x3332320] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Abs
	// float Abs(float A);                                                                                                      // [0x3332200] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.KismetNodeHelperLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetNodeHelperLibrary.MarkBit
	// void MarkBit(int32_t& Data, int32_t Index);                                                                              // [0x3360d90] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.HasUnmarkedBit
	// bool HasUnmarkedBit(int32_t Data, int32_t NumBits);                                                                      // [0x33601c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.HasMarkedBit
	// bool HasMarkedBit(int32_t Data, int32_t NumBits);                                                                        // [0x33600f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetValidValue
	// char GetValidValue(class UEnum* Enum, char EnumeratorValue);                                                             // [0x3360020] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetUnmarkedBit
	// int32_t GetUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits, bool bRandom);                                   // [0x335fee0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit
	// int32_t GetRandomUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits);                                           // [0x335fc80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit
	// int32_t GetFirstUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits);                                            // [0x335fb80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetEnumeratorValueFromIndex
	// char GetEnumeratorValueFromIndex(class UEnum* Enum, char EnumeratorIndex);                                               // [0x335fab0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName
	// FString GetEnumeratorUserFriendlyName(class UEnum* Enum, char EnumeratorValue);                                          // [0x335f9a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetEnumeratorName
	// FName GetEnumeratorName(class UEnum* Enum, char EnumeratorValue);                                                        // [0x335f8d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetNodeHelperLibrary.ClearBit
	// void ClearBit(int32_t& Data, int32_t Index);                                                                             // [0x335ce50] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.ClearAllBits
	// void ClearAllBits(int32_t& Data);                                                                                        // [0x335cdd0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.BitIsMarked
	// bool BitIsMarked(int32_t Data, int32_t Index);                                                                           // [0x335b720] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.KismetRenderingLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetRenderingLibrary.SetCastInsetShadowForAllAttachments
	// void SetCastInsetShadowForAllAttachments(class UPrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup); // [0x3362240] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.RenderTargetCreateStaticTexture2DEditorOnly
	// class UTexture2D* RenderTargetCreateStaticTexture2DEditorOnly(class UTextureRenderTarget2D* RenderTarget, FString Name, TEnumAsByte<TextureCompressionSettings> CompressionSettings, TEnumAsByte<TextureMipGenSettings> MipSettings); // [0x3361900] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ReleaseRenderTarget2D
	// void ReleaseRenderTarget2D(class UTextureRenderTarget2D* TextureRenderTarget);                                           // [0x3361880] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ReadRenderTargetUV
	// FColor ReadRenderTargetUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V); // [0x3361730] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ReadRenderTargetRawUV
	// FLinearColor ReadRenderTargetRawUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V); // [0x33615c0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ReadRenderTargetRawPixel
	// FLinearColor ReadRenderTargetRawPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y); // [0x3361450] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ReadRenderTargetPixel
	// FColor ReadRenderTargetPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y); // [0x3361300] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.MakeSkinWeightInfo
	// FSkelMeshSkinWeightInfo MakeSkinWeightInfo(int32_t Bone0, char Weight0, int32_t Bone1, char Weight1, int32_t Bone2, char Weight2, int32_t Bone3, char Weight3); // [0x3360b10] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetRenderingLibrary.ImportFileAsTexture2D
	// class UTexture2D* ImportFileAsTexture2D(class UObject* WorldContextObject, FString Filename);                            // [0x3360380] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ImportBufferAsTexture2D
	// class UTexture2D* ImportBufferAsTexture2D(class UObject* WorldContextObject, TArray<char>& Buffer);                      // [0x3360290] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ExportTexture2D
	// void ExportTexture2D(class UObject* WorldContextObject, class UTexture2D* Texture, FString FilePath, FString Filename);  // [0x335f3e0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ExportRenderTarget
	// void ExportRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, FString FilePath, FString Filename); // [0x335f270] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.EndDrawCanvasToRenderTarget
	// void EndDrawCanvasToRenderTarget(class UObject* WorldContextObject, FDrawToRenderTargetContext& Context);                // [0x335ee80] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.DrawMaterialToRenderTarget
	// void DrawMaterialToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UMaterialInterface* Material); // [0x335ed80] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.CreateRenderTargetVolume
	// class UTextureRenderTargetVolume* CreateRenderTargetVolume(class UObject* WorldContextObject, int32_t Width, int32_t Height, int32_t Depth, TEnumAsByte<ETextureRenderTargetFormat> Format, FLinearColor ClearColor, bool bAutoGenerateMipMaps); // [0x335ea40] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.CreateRenderTarget2DArray
	// class UTextureRenderTarget2DArray* CreateRenderTarget2DArray(class UObject* WorldContextObject, int32_t Width, int32_t Height, int32_t Slices, TEnumAsByte<ETextureRenderTargetFormat> Format, FLinearColor ClearColor, bool bAutoGenerateMipMaps); // [0x335e830] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.CreateRenderTarget2D
	// class UTextureRenderTarget2D* CreateRenderTarget2D(class UObject* WorldContextObject, int32_t Width, int32_t Height, TEnumAsByte<ETextureRenderTargetFormat> Format, FLinearColor ClearColor, bool bAutoGenerateMipMaps); // [0x335e660] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ConvertRenderTargetToTexture2DEditorOnly
	// void ConvertRenderTargetToTexture2DEditorOnly(class UObject* WorldContextObject, class UTextureRenderTarget2D* RenderTarget, class UTexture2D* Texture); // [0x335e560] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ClearRenderTarget2D
	// void ClearRenderTarget2D(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, FLinearColor ClearColor); // [0x335cf20] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.BreakSkinWeightInfo
	// void BreakSkinWeightInfo(FSkelMeshSkinWeightInfo InWeight, int32_t& Bone0, char& Weight0, int32_t& Bone1, char& Weight1, int32_t& Bone2, char& Weight2, int32_t& Bone3, char& Weight3); // [0x335b7f0] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetRenderingLibrary.BeginDrawCanvasToRenderTarget
	// void BeginDrawCanvasToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UCanvas*& Canvas, FVector2D& Size, FDrawToRenderTargetContext& Context); // [0x335b560] Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.KismetStringLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetStringLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetStringLibrary.TrimTrailing
	// FString TrimTrailing(FString SourceString);                                                                              // [0x3362a40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Trim
	// FString Trim(FString SourceString);                                                                                      // [0x3362960] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.ToUpper
	// FString ToUpper(FString SourceString);                                                                                   // [0x3362880] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.ToLower
	// FString ToLower(FString SourceString);                                                                                   // [0x33627a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.TimeSecondsToString
	// FString TimeSecondsToString(float InSeconds);                                                                            // [0x33626d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.StartsWith
	// bool StartsWith(FString SourceString, FString InPrefix, TEnumAsByte<ESearchCase> SearchCase);                            // [0x3362590] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Split
	// bool Split(FString SourceString, FString InStr, FString& LeftS, FString& RightS, TEnumAsByte<ESearchCase> SearchCase, TEnumAsByte<ESearchDir> SearchDir); // [0x3362350] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.RightPad
	// FString RightPad(FString SourceString, int32_t ChCount);                                                                 // [0x3362120] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.RightChop
	// FString RightChop(FString SourceString, int32_t Count);                                                                  // [0x3362000] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Right
	// FString Right(FString SourceString, int32_t Count);                                                                      // [0x3361ee0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Reverse
	// FString Reverse(FString SourceString);                                                                                   // [0x3361e00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.ReplaceInline
	// int32_t ReplaceInline(FString& SourceString, FString SearchText, FString ReplacementText, TEnumAsByte<ESearchCase> SearchCase); // [0x3361c60] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetStringLibrary.Replace
	// FString Replace(FString SourceString, FString From, FString To, TEnumAsByte<ESearchCase> SearchCase);                    // [0x3361a90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.ParseIntoArray
	// TArray<FString> ParseIntoArray(FString SourceString, FString Delimiter, bool CullEmptyStrings);                          // [0x3361180] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.NotEqual_StrStr
	// bool NotEqual_StrStr(FString A, FString B);                                                                              // [0x3360fa0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.NotEqual_StriStri
	// bool NotEqual_StriStri(FString A, FString B);                                                                            // [0x3361090] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Mid
	// FString Mid(FString SourceString, int32_t Start, int32_t Count);                                                         // [0x335fd80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.MatchesWildcard
	// bool MatchesWildcard(FString SourceString, FString Wildcard, TEnumAsByte<ESearchCase> SearchCase);                       // [0x3360e60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Len
	// int32_t Len(FString S);                                                                                                  // [0x3360a70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.LeftPad
	// FString LeftPad(FString SourceString, int32_t ChCount);                                                                  // [0x3360950] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.LeftChop
	// FString LeftChop(FString SourceString, int32_t Count);                                                                   // [0x3360830] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Left
	// FString Left(FString SourceString, int32_t Count);                                                                       // [0x3360710] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.JoinStringArray
	// FString JoinStringArray(TArray<FString>& SourceArray, FString Separator);                                                // [0x33605a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.IsNumeric
	// bool IsNumeric(FString SourceString);                                                                                    // [0x3360500] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.IsEmpty
	// bool IsEmpty(FString inString);                                                                                          // [0x3360460] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.GetSubstring
	// FString GetSubstring(FString SourceString, int32_t StartIndex, int32_t Length);                                          // [0x335fd80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.GetCharacterAsNumber
	// int32_t GetCharacterAsNumber(FString SourceString, int32_t Index);                                                       // [0x335f7f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.GetCharacterArrayFromString
	// TArray<FString> GetCharacterArrayFromString(FString SourceString);                                                       // [0x335f710] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.FindSubstring
	// int32_t FindSubstring(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd, int32_t StartPosition);   // [0x335f550] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.EqualEqual_StrStr
	// bool EqualEqual_StrStr(FString A, FString B);                                                                            // [0x335f090] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.EqualEqual_StriStri
	// bool EqualEqual_StriStri(FString A, FString B);                                                                          // [0x335f180] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.EndsWith
	// bool EndsWith(FString SourceString, FString InSuffix, TEnumAsByte<ESearchCase> SearchCase);                              // [0x335ef50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.CullArray
	// int32_t CullArray(FString SourceString, TArray<FString>& inArray);                                                       // [0x335ec50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_VectorToString
	// FString Conv_VectorToString(FVector InVec);                                                                              // [0x335e480] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_Vector2dToString
	// FString Conv_Vector2dToString(FVector2D InVec);                                                                          // [0x335e3c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_TransformToString
	// FString Conv_TransformToString(FTransform& InTrans);                                                                     // [0x335e2a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToVector2D
	// void Conv_StringToVector2D(FString inString, FVector2D& OutConvertedVector2D, bool& OutIsValid);                         // [0x335e040] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToVector
	// void Conv_StringToVector(FString inString, FVector& OutConvertedVector, bool& OutIsValid);                               // [0x335e170] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToRotator
	// void Conv_StringToRotator(FString inString, FRotator& OutConvertedRotator, bool& OutIsValid);                            // [0x335df10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToName
	// FName Conv_StringToName(FString inString);                                                                               // [0x335de60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToInt
	// int32_t Conv_StringToInt(FString inString);                                                                              // [0x335ddc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToFloat
	// float Conv_StringToFloat(FString inString);                                                                              // [0x335dd20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToColor
	// void Conv_StringToColor(FString inString, FLinearColor& OutConvertedColor, bool& OutIsValid);                            // [0x335dbf0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_RotatorToString
	// FString Conv_RotatorToString(FRotator InRot);                                                                            // [0x335db10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_ObjectToString
	// FString Conv_ObjectToString(class UObject* InObj);                                                                       // [0x335da40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_NameToString
	// FString Conv_NameToString(FName InName);                                                                                 // [0x335d970] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_MatrixToString
	// FString Conv_MatrixToString(FMatrix& InMatrix);                                                                          // [0x335d8a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_IntVectorToString
	// FString Conv_IntVectorToString(FIntVector InIntVec);                                                                     // [0x335d7c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_IntToString
	// FString Conv_IntToString(int32_t inInt);                                                                                 // [0x335d6f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_IntPointToString
	// FString Conv_IntPointToString(FIntPoint InIntPoint);                                                                     // [0x335d630] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_FloatToString
	// FString Conv_FloatToString(float InFloat);                                                                               // [0x335d560] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_ColorToString
	// FString Conv_ColorToString(FLinearColor InColor);                                                                        // [0x335d490] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_ByteToString
	// FString Conv_ByteToString(char InByte);                                                                                  // [0x335d3c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_BoolToString
	// FString Conv_BoolToString(bool InBool);                                                                                  // [0x335d2f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Contains
	// bool Contains(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd);                                  // [0x335d170] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Concat_StrStr
	// FString Concat_StrStr(FString A, FString B);                                                                             // [0x335d030] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Vector2d
	// FString BuildString_Vector2d(FString AppendTo, FString Prefix, FVector2D InVector2D, FString Suffix);                    // [0x335ca20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Vector
	// FString BuildString_Vector(FString AppendTo, FString Prefix, FVector InVector, FString Suffix);                          // [0x335cbf0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Rotator
	// FString BuildString_Rotator(FString AppendTo, FString Prefix, FRotator InRot, FString Suffix);                           // [0x335c840] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Object
	// FString BuildString_Object(FString AppendTo, FString Prefix, class UObject* InObj, FString Suffix);                      // [0x335c670] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Name
	// FString BuildString_Name(FString AppendTo, FString Prefix, FName InName, FString Suffix);                                // [0x335c4a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_IntVector
	// FString BuildString_IntVector(FString AppendTo, FString Prefix, FIntVector InIntVector, FString Suffix);                 // [0x335c2c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Int
	// FString BuildString_Int(FString AppendTo, FString Prefix, int32_t inInt, FString Suffix);                                // [0x335c0f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Float
	// FString BuildString_Float(FString AppendTo, FString Prefix, float InFloat, FString Suffix);                              // [0x335bf20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Color
	// FString BuildString_Color(FString AppendTo, FString Prefix, FLinearColor InColor, FString Suffix);                       // [0x335bd40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Bool
	// FString BuildString_Bool(FString AppendTo, FString Prefix, bool InBool, FString Suffix);                                 // [0x335bb70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.KismetStringTableLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetStringTableLibrary.IsRegisteredTableId
	// bool IsRegisteredTableId(FName TableId);                                                                                 // [0x3370a10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.IsRegisteredTableEntry
	// bool IsRegisteredTableEntry(FName TableId, FString Key);                                                                 // [0x3370930] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetTableNamespace
	// FString GetTableNamespace(FName TableId);                                                                                // [0x3370630] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetTableEntrySourceString
	// FString GetTableEntrySourceString(FName TableId, FString Key);                                                           // [0x3370510] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetTableEntryMetaData
	// FString GetTableEntryMetaData(FName TableId, FString Key, FName MetaDataId);                                             // [0x33703a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetRegisteredStringTables
	// TArray<FName> GetRegisteredStringTables();                                                                               // [0x336ffa0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetMetaDataIdsFromStringTableEntry
	// TArray<FName> GetMetaDataIdsFromStringTableEntry(FName TableId, FString Key);                                            // [0x336f1d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetKeysFromStringTable
	// TArray<FString> GetKeysFromStringTable(FName TableId);                                                                   // [0x336f100] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.KismetSystemLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetSystemLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetSystemLibrary.UnregisterForRemoteNotifications
	// void UnregisterForRemoteNotifications();                                                                                 // [0x3375f70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.UnloadPrimaryAssetList
	// void UnloadPrimaryAssetList(TArray<FPrimaryAssetId>& PrimaryAssetIdList);                                                // [0x3379b70] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.UnloadPrimaryAsset
	// void UnloadPrimaryAsset(FPrimaryAssetId PrimaryAssetId);                                                                 // [0x3379ae0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.TransactObject
	// void TransactObject(class UObject* Object);                                                                              // [0x336b860] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.StackTrace
	// void StackTrace();                                                                                                       // [0x3379ac0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceSingleForObjects
	// bool SphereTraceSingleForObjects(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x3379610] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceSingleByProfile
	// bool SphereTraceSingleByProfile(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x3379180] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceSingle
	// bool SphereTraceSingle(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x3378cf0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceMultiForObjects
	// bool SphereTraceMultiForObjects(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x3378880] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceMultiByProfile
	// bool SphereTraceMultiByProfile(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x3378430] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceMulti
	// bool SphereTraceMulti(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x3377fe0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereOverlapComponents
	// bool SphereOverlapComponents(class UObject* WorldContextObject, FVector SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // [0x3377d50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereOverlapActors
	// bool SphereOverlapActors(class UObject* WorldContextObject, FVector SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // [0x3377ac0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SnapshotObject
	// void SnapshotObject(class UObject* Object);                                                                              // [0x336b860] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen
	// void ShowPlatformSpecificLeaderboardScreen(FString CategoryName);                                                        // [0x3377a30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen
	// void ShowPlatformSpecificAchievementsScreen(class APlayerController* SpecificPlayer);                                    // [0x33779b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ShowInterstitialAd
	// void ShowInterstitialAd();                                                                                               // [0x3377990] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ShowAdBanner
	// void ShowAdBanner(int32_t AdIdIndex, bool bShowOnBottomOfScreen);                                                        // [0x33778d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetWindowTitle
	// void SetWindowTitle(FText& Title);                                                                                       // [0x3377810] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetVolumeButtonsHandledBySystem
	// void SetVolumeButtonsHandledBySystem(bool bEnabled);                                                                     // [0x336aef0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetVectorPropertyByName
	// void SetVectorPropertyByName(class UObject* Object, FName PropertyName, FVector& Value);                                 // [0x3377700] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetUserActivity
	// void SetUserActivity(FUserActivity& UserActivity);                                                                       // [0x3377660] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetTransformPropertyByName
	// void SetTransformPropertyByName(class UObject* Object, FName PropertyName, FTransform& Value);                           // [0x3377510] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetTextPropertyByName
	// void SetTextPropertyByName(class UObject* Object, FName PropertyName, FText& Value);                                     // [0x33773c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetSuppressViewportTransitionMessage
	// void SetSuppressViewportTransitionMessage(class UObject* WorldContextObject, bool bState);                               // [0x3377300] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetStructurePropertyByName
	// void SetStructurePropertyByName(class UObject* Object, FName PropertyName, FGenericStruct& Value);                       // [0x33763d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetStringPropertyByName
	// void SetStringPropertyByName(class UObject* Object, FName PropertyName, FString Value);                                  // [0x33771e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetSoftObjectPropertyByName
	// void SetSoftObjectPropertyByName(class UObject* Object, FName PropertyName, TWeakObjectPtr<UObject*>& Value);            // [0x33770a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetSoftClassPropertyByName
	// void SetSoftClassPropertyByName(class UObject* Object, FName PropertyName, TSoftObjectPtr<UClass*>& Value);              // [0x3376f60] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetRotatorPropertyByName
	// void SetRotatorPropertyByName(class UObject* Object, FName PropertyName, FRotator& Value);                               // [0x3376e50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetObjectPropertyByName
	// void SetObjectPropertyByName(class UObject* Object, FName PropertyName, class UObject* Value);                           // [0x3376d50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetNamePropertyByName
	// void SetNamePropertyByName(class UObject* Object, FName PropertyName, FName& Value);                                     // [0x3376c40] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetLinearColorPropertyByName
	// void SetLinearColorPropertyByName(class UObject* Object, FName PropertyName, FLinearColor& Value);                       // [0x3376b30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetIntPropertyByName
	// void SetIntPropertyByName(class UObject* Object, FName PropertyName, int32_t Value);                                     // [0x3376920] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetInterfacePropertyByName
	// void SetInterfacePropertyByName(class UObject* Object, FName PropertyName, TScriptInterface<Class>& Value);              // [0x3376a20] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetInt64PropertyByName
	// void SetInt64PropertyByName(class UObject* Object, FName PropertyName, int64_t Value);                                   // [0x3376820] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetGamepadsBlockDeviceFeedback
	// void SetGamepadsBlockDeviceFeedback(bool bBlock);                                                                        // [0x336aef0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetFloatPropertyByName
	// void SetFloatPropertyByName(class UObject* Object, FName PropertyName, float Value);                                     // [0x3376710] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetFieldPathPropertyByName
	// void SetFieldPathPropertyByName(class UObject* Object, FName PropertyName, Value& Value);                                // [0x33765e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetColorPropertyByName
	// void SetColorPropertyByName(class UObject* Object, FName PropertyName, FColor& Value);                                   // [0x33764d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetCollisionProfileNameProperty
	// void SetCollisionProfileNameProperty(class UObject* Object, FName PropertyName, FCollisionProfileName& Value);           // [0x33763d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetClassPropertyByName
	// void SetClassPropertyByName(class UObject* Object, FName PropertyName, class UClass* Value);                             // [0x33762d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetBytePropertyByName
	// void SetBytePropertyByName(class UObject* Object, FName PropertyName, char Value);                                       // [0x33761d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetBoolPropertyByName
	// void SetBoolPropertyByName(class UObject* Object, FName PropertyName, bool Value);                                       // [0x33760d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.RetriggerableDelay
	// void RetriggerableDelay(class UObject* WorldContextObject, float Duration, FLatentActionInfo LatentInfo);                // [0x3375f90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ResetGamepadAssignmentToController
	// void ResetGamepadAssignmentToController(int32_t ControllerId);                                                           // [0x13f9af0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ResetGamepadAssignments
	// void ResetGamepadAssignments();                                                                                          // [0x1319980] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.RegisterForRemoteNotifications
	// void RegisterForRemoteNotifications();                                                                                   // [0x3375f70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.QuitGame
	// void QuitGame(class UObject* WorldContextObject, class APlayerController* SpecificPlayer, TEnumAsByte<EQuitPreference> QuitPreference, bool bIgnorePlatformRestrictions); // [0x3375e20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.PrintWarning
	// void PrintWarning(FString inString);                                                                                     // [0x1177520] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.PrintText
	// void PrintText(class UObject* WorldContextObject, FText InText, bool bPrintToScreen, bool bPrintToLog, FLinearColor TextColor, float Duration); // [0x3375bd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.PrintString
	// void PrintString(class UObject* WorldContextObject, FString inString, bool bPrintToScreen, bool bPrintToLog, FLinearColor TextColor, float Duration); // [0x33759d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ParseParamValue
	// bool ParseParamValue(FString inString, FString InParam, FString& OutValue);                                              // [0x3375870] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.ParseParam
	// bool ParseParam(FString inString, FString InParam);                                                                      // [0x3375780] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.ParseCommandLine
	// void ParseCommandLine(FString InCmdLine, TArray<FString>& OutTokens, TArray<FString>& OutSwitches, TMap<FString, FString>& OutParams); // [0x3375510] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.OnAssetLoaded__DelegateSignature
	// void OnAssetLoaded__DelegateSignature(class UObject* Loaded);                                                            // [0x198a600] Public|Delegate      
	// Function /Script/Engine.KismetSystemLibrary.OnAssetClassLoaded__DelegateSignature
	// void OnAssetClassLoaded__DelegateSignature(class UClass* Loaded);                                                        // [0x198a600] Public|Delegate      
	// Function /Script/Engine.KismetSystemLibrary.NotEqual_SoftObjectReference
	// bool NotEqual_SoftObjectReference(TWeakObjectPtr<UObject*>& A, TWeakObjectPtr<UObject*>& B);                             // [0x33753c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.NotEqual_SoftClassReference
	// bool NotEqual_SoftClassReference(TSoftObjectPtr<UClass*>& A, TSoftObjectPtr<UClass*>& B);                                // [0x33753c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.NotEqual_PrimaryAssetType
	// bool NotEqual_PrimaryAssetType(FPrimaryAssetType A, FPrimaryAssetType B);                                                // [0x2ad57c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.NotEqual_PrimaryAssetId
	// bool NotEqual_PrimaryAssetId(FPrimaryAssetId A, FPrimaryAssetId B);                                                      // [0x33752d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.NormalizeFilename
	// FString NormalizeFilename(FString InFilename);                                                                           // [0x33751f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MoveComponentTo
	// void MoveComponentTo(class USceneComponent* Component, FVector TargetRelativeLocation, FRotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, TEnumAsByte<EMoveComponentAction> MoveAction, FLatentActionInfo LatentInfo); // [0x3374f00] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.MakeSoftObjectPath
	// FSoftObjectPath MakeSoftObjectPath(FString PathString);                                                                  // [0x3374e10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeSoftClassPath
	// FSoftClassPath MakeSoftClassPath(FString PathString);                                                                    // [0x3374d50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralText
	// FText MakeLiteralText(FText Value);                                                                                      // [0x3374bf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralString
	// FString MakeLiteralString(FString Value);                                                                                // [0x3374ae0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralName
	// FName MakeLiteralName(FName Value);                                                                                      // [0x3374a60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralInt
	// int32_t MakeLiteralInt(int32_t Value);                                                                                   // [0xa8c8c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralFloat
	// float MakeLiteralFloat(float Value);                                                                                     // [0x33749e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralByte
	// char MakeLiteralByte(char Value);                                                                                        // [0x3374960] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralBool
	// bool MakeLiteralBool(bool Value);                                                                                        // [0x3335e50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.LoadInterstitialAd
	// void LoadInterstitialAd(int32_t AdIdIndex);                                                                              // [0x33748e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LoadClassAsset_Blocking
	// class UClass* LoadClassAsset_Blocking(TSoftObjectPtr<UClass*> AssetClass);                                               // [0x33747d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LoadAssetClass
	// void LoadAssetClass(class UObject* WorldContextObject, TSoftObjectPtr<UClass*> AssetClass, FDelegateProperty OnLoaded, FLatentActionInfo LatentInfo); // [0x33744d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LoadAsset_Blocking
	// class UObject* LoadAsset_Blocking(TWeakObjectPtr<UObject*> Asset);                                                       // [0x33746c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LoadAsset
	// void LoadAsset(class UObject* WorldContextObject, TWeakObjectPtr<UObject*> Asset, FDelegateProperty OnLoaded, FLatentActionInfo LatentInfo); // [0x33742e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceSingleForObjects
	// bool LineTraceSingleForObjects(class UObject* WorldContextObject, FVector Start, FVector End, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x3373e70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceSingleByProfile
	// bool LineTraceSingleByProfile(class UObject* WorldContextObject, FVector Start, FVector End, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x3373a20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceSingle
	// bool LineTraceSingle(class UObject* WorldContextObject, FVector Start, FVector End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x33735d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceMultiForObjects
	// bool LineTraceMultiForObjects(class UObject* WorldContextObject, FVector Start, FVector End, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x33731b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceMultiByProfile
	// bool LineTraceMultiByProfile(class UObject* WorldContextObject, FVector Start, FVector End, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x3372db0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceMulti
	// bool LineTraceMulti(class UObject* WorldContextObject, FVector Start, FVector End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x33729b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LaunchURL
	// void LaunchURL(FString URL);                                                                                             // [0x3372920] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_UnPauseTimerHandle
	// void K2_UnPauseTimerHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                      // [0x3372860] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_UnPauseTimerDelegate
	// void K2_UnPauseTimerDelegate(FDelegateProperty Delegate);                                                                // [0x33727d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_UnPauseTimer
	// void K2_UnPauseTimer(class UObject* Object, FString FunctionName);                                                       // [0x33726b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_TimerExistsHandle
	// bool K2_TimerExistsHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                       // [0x33725e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_TimerExistsDelegate
	// bool K2_TimerExistsDelegate(FDelegateProperty Delegate);                                                                 // [0x3372540] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_TimerExists
	// bool K2_TimerExists(class UObject* Object, FString FunctionName);                                                        // [0x3372410] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_SetTimerDelegate
	// FTimerHandle K2_SetTimerDelegate(FDelegateProperty Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance); // [0x3372260] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_SetTimer
	// FTimerHandle K2_SetTimer(class UObject* Object, FString FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance); // [0x3372020] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_PauseTimerHandle
	// void K2_PauseTimerHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                        // [0x3371f60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_PauseTimerDelegate
	// void K2_PauseTimerDelegate(FDelegateProperty Delegate);                                                                  // [0x3371ed0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_PauseTimer
	// void K2_PauseTimer(class UObject* Object, FString FunctionName);                                                         // [0x3371db0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsValidTimerHandle
	// bool K2_IsValidTimerHandle(FTimerHandle Handle);                                                                         // [0x3371d20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerPausedHandle
	// bool K2_IsTimerPausedHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                     // [0x3371c50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerPausedDelegate
	// bool K2_IsTimerPausedDelegate(FDelegateProperty Delegate);                                                               // [0x3371bb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerPaused
	// bool K2_IsTimerPaused(class UObject* Object, FString FunctionName);                                                      // [0x3371a80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerActiveHandle
	// bool K2_IsTimerActiveHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                     // [0x33719b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerActiveDelegate
	// bool K2_IsTimerActiveDelegate(FDelegateProperty Delegate);                                                               // [0x3371910] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerActive
	// bool K2_IsTimerActive(class UObject* Object, FString FunctionName);                                                      // [0x33717e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_InvalidateTimerHandle
	// FTimerHandle K2_InvalidateTimerHandle(FTimerHandle& Handle);                                                             // [0x3371740] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeHandle
	// float K2_GetTimerRemainingTimeHandle(class UObject* WorldContextObject, FTimerHandle Handle);                            // [0x3371670] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeDelegate
	// float K2_GetTimerRemainingTimeDelegate(FDelegateProperty Delegate);                                                      // [0x33715d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerRemainingTime
	// float K2_GetTimerRemainingTime(class UObject* Object, FString FunctionName);                                             // [0x33714a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeHandle
	// float K2_GetTimerElapsedTimeHandle(class UObject* WorldContextObject, FTimerHandle Handle);                              // [0x33713d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeDelegate
	// float K2_GetTimerElapsedTimeDelegate(FDelegateProperty Delegate);                                                        // [0x3371330] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerElapsedTime
	// float K2_GetTimerElapsedTime(class UObject* Object, FString FunctionName);                                               // [0x3371200] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_ClearTimerHandle
	// void K2_ClearTimerHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                        // [0x3371140] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_ClearTimerDelegate
	// void K2_ClearTimerDelegate(FDelegateProperty Delegate);                                                                  // [0x33710b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_ClearTimer
	// void K2_ClearTimer(class UObject* Object, FString FunctionName);                                                         // [0x3370f90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_ClearAndInvalidateTimerHandle
	// void K2_ClearAndInvalidateTimerHandle(class UObject* WorldContextObject, FTimerHandle& Handle);                          // [0x3370ec0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.IsValidSoftObjectReference
	// bool IsValidSoftObjectReference(TWeakObjectPtr<UObject*>& SoftObjectReference);                                          // [0x3370e00] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsValidSoftClassReference
	// bool IsValidSoftClassReference(TSoftObjectPtr<UClass*>& SoftClassReference);                                             // [0x3370e00] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsValidPrimaryAssetType
	// bool IsValidPrimaryAssetType(FPrimaryAssetType PrimaryAssetType);                                                        // [0x2ad4fb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsValidPrimaryAssetId
	// bool IsValidPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                                                              // [0x3370d60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsValidClass
	// bool IsValidClass(class UClass* Class);                                                                                  // [0x3370c80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsValid
	// bool IsValid(class UObject* Object);                                                                                     // [0x3370c80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsUnattended
	// bool IsUnattended();                                                                                                     // [0x3370c50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsStandalone
	// bool IsStandalone(class UObject* WorldContextObject);                                                                    // [0x3370bc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsSplitScreen
	// bool IsSplitScreen(class UObject* WorldContextObject);                                                                   // [0x3370b30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsServer
	// bool IsServer(class UObject* WorldContextObject);                                                                        // [0x3370aa0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsScreensaverEnabled
	// bool IsScreensaverEnabled();                                                                                             // [0x8a0fa0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.IsPackagedForDistribution
	// bool IsPackagedForDistribution();                                                                                        // [0x130ccd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsLoggedIn
	// bool IsLoggedIn(class APlayerController* SpecificPlayer);                                                                // [0x33708a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsInterstitialAdRequested
	// bool IsInterstitialAdRequested();                                                                                        // [0x3370870] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.IsInterstitialAdAvailable
	// bool IsInterstitialAdAvailable();                                                                                        // [0x3370840] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.IsDedicatedServer
	// bool IsDedicatedServer(class UObject* WorldContextObject);                                                               // [0x33707b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsControllerAssignedToGamepad
	// bool IsControllerAssignedToGamepad(int32_t ControllerId);                                                                // [0x3370720] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.HideAdBanner
	// void HideAdBanner();                                                                                                     // [0x3370700] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetVolumeButtonsHandledBySystem
	// bool GetVolumeButtonsHandledBySystem();                                                                                  // [0x130ccd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetUniqueDeviceId
	// FString GetUniqueDeviceId();                                                                                             // [0x130c580] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetSystemPath
	// FString GetSystemPath(class UObject* Object);                                                                            // [0x33702d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetSupportedFullscreenResolutions
	// bool GetSupportedFullscreenResolutions(TArray<FIntPoint>& Resolutions);                                                  // [0x3370220] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetSoftObjectReferenceFromPrimaryAssetId
	// TWeakObjectPtr<UObject*> GetSoftObjectReferenceFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                       // [0x3370150] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetSoftClassReferenceFromPrimaryAssetId
	// TSoftObjectPtr<UClass*> GetSoftClassReferenceFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                         // [0x3370080] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel
	// int32_t GetRenderingMaterialQualityLevel();                                                                              // [0x3370050] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetRenderingDetailMode
	// int32_t GetRenderingDetailMode();                                                                                        // [0x3370020] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetProjectSavedDirectory
	// FString GetProjectSavedDirectory();                                                                                      // [0x336ff20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetProjectDirectory
	// FString GetProjectDirectory();                                                                                           // [0x336fea0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetProjectContentDirectory
	// FString GetProjectContentDirectory();                                                                                    // [0x336fe20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetsWithBundleState
	// void GetPrimaryAssetsWithBundleState(TArray<FName>& RequiredBundles, TArray<FName>& ExcludedBundles, TArray<FPrimaryAssetType>& ValidTypes, bool bForceCurrentState, TArray<FPrimaryAssetId>& OutPrimaryAssetIdList); // [0x336fc00] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdList
	// void GetPrimaryAssetIdList(FPrimaryAssetType PrimaryAssetType, TArray<FPrimaryAssetId>& OutPrimaryAssetIdList);          // [0x336fb20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftObjectReference
	// FPrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(TWeakObjectPtr<UObject*> SoftObjectReference);                  // [0x336fa00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftClassReference
	// FPrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(TSoftObjectPtr<UClass*> SoftClassReference);                     // [0x336f8e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromObject
	// FPrimaryAssetId GetPrimaryAssetIdFromObject(class UObject* Object);                                                      // [0x336f840] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromClass
	// FPrimaryAssetId GetPrimaryAssetIdFromClass(class UClass* Class);                                                         // [0x336f7a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPreferredLanguages
	// TArray<FString> GetPreferredLanguages();                                                                                 // [0x336f720] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetPlatformUserName
	// FString GetPlatformUserName();                                                                                           // [0x336f6a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPlatformUserDir
	// FString GetPlatformUserDir();                                                                                            // [0x336f620] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPathName
	// FString GetPathName(class UObject* Object);                                                                              // [0x336f550] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetOuterObject
	// class UObject* GetOuterObject(class UObject* Object);                                                                    // [0x336f4c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetObjectName
	// FString GetObjectName(class UObject* Object);                                                                            // [0x336f3f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetObjectFromPrimaryAssetId
	// class UObject* GetObjectFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                                              // [0x336f350] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetMinYResolutionForUI
	// int32_t GetMinYResolutionForUI();                                                                                        // [0x336f320] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetMinYResolutionFor3DView
	// int32_t GetMinYResolutionFor3DView();                                                                                    // [0x336f2f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetLocalCurrencySymbol
	// FString GetLocalCurrencySymbol();                                                                                        // [0x336ed50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetLocalCurrencyCode
	// FString GetLocalCurrencyCode();                                                                                          // [0x336ed50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetGameTimeInSeconds
	// float GetGameTimeInSeconds(class UObject* WorldContextObject);                                                           // [0x33053d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetGamepadControllerName
	// FString GetGamepadControllerName(int32_t ControllerId);                                                                  // [0x336f030] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetGamepadButtonGlyph
	// class UTexture2D* GetGamepadButtonGlyph(FString ButtonKey, int32_t ControllerIndex);                                     // [0x336ef50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetGameName
	// FString GetGameName();                                                                                                   // [0x1114190] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetGameBundleId
	// FString GetGameBundleId();                                                                                               // [0x336eed0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetFrameCount
	// int64_t GetFrameCount();                                                                                                 // [0x336eea0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetEngineVersion
	// FString GetEngineVersion();                                                                                              // [0x1113e10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetDisplayName
	// FString GetDisplayName(class UObject* Object);                                                                           // [0x336edd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetDeviceId
	// FString GetDeviceId();                                                                                                   // [0x336ed50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetDefaultLocale
	// FString GetDefaultLocale();                                                                                              // [0x336ecd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetDefaultLanguage
	// FString GetDefaultLanguage();                                                                                            // [0x336ec50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetCurrentBundleState
	// bool GetCurrentBundleState(FPrimaryAssetId PrimaryAssetId, bool bForceCurrentState, TArray<FName>& OutBundles);          // [0x336eb00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetConvenientWindowedResolutions
	// bool GetConvenientWindowedResolutions(TArray<FIntPoint>& Resolutions);                                                   // [0x336ea50] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetConsoleVariableIntValue
	// int32_t GetConsoleVariableIntValue(FString VariableName);                                                                // [0x336e9b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetConsoleVariableFloatValue
	// float GetConsoleVariableFloatValue(FString VariableName);                                                                // [0x336e910] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetConsoleVariableBoolValue
	// bool GetConsoleVariableBoolValue(FString VariableName);                                                                  // [0x336e870] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetComponentBounds
	// void GetComponentBounds(class USceneComponent* Component, FVector& Origin, FVector& BoxExtent, float& SphereRadius);     // [0x336e700] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetCommandLine
	// FString GetCommandLine();                                                                                                // [0x336e680] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetClassFromPrimaryAssetId
	// class UClass* GetClassFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                                                // [0x336e5e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetClassDisplayName
	// FString GetClassDisplayName(class UClass* Class);                                                                        // [0x336e510] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetAdIDCount
	// int32_t GetAdIDCount();                                                                                                  // [0x336e4e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetActorListFromComponentList
	// void GetActorListFromComponentList(TArray<UPrimitiveComponent*>& ComponentList, class UClass* ActorClassFilter, TArray<AActor*>& OutActorList); // [0x336e390] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetActorBounds
	// void GetActorBounds(class AActor* Actor, FVector& Origin, FVector& BoxExtent);                                           // [0x336e270] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.ForceCloseAdBanner
	// void ForceCloseAdBanner();                                                                                               // [0x336e250] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.FlushPersistentDebugLines
	// void FlushPersistentDebugLines(class UObject* WorldContextObject);                                                       // [0x336b860] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.FlushDebugStrings
	// void FlushDebugStrings(class UObject* WorldContextObject);                                                               // [0x336b860] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ExecuteConsoleCommand
	// void ExecuteConsoleCommand(class UObject* WorldContextObject, FString Command, class APlayerController* SpecificPlayer); // [0x336e130] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.EqualEqual_SoftObjectReference
	// bool EqualEqual_SoftObjectReference(TWeakObjectPtr<UObject*>& A, TWeakObjectPtr<UObject*>& B);                           // [0x336dfe0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.EqualEqual_SoftClassReference
	// bool EqualEqual_SoftClassReference(TSoftObjectPtr<UClass*>& A, TSoftObjectPtr<UClass*>& B);                              // [0x336dfe0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetType
	// bool EqualEqual_PrimaryAssetType(FPrimaryAssetType A, FPrimaryAssetType B);                                              // [0x2ad3ff0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetId
	// bool EqualEqual_PrimaryAssetId(FPrimaryAssetId A, FPrimaryAssetId B);                                                    // [0x336def0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.EndTransaction
	// int32_t EndTransaction();                                                                                                // [0x336dec0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugString
	// void DrawDebugString(class UObject* WorldContextObject, FVector TextLocation, FString Text, class AActor* TestBaseActor, FLinearColor TextColor, float Duration); // [0x336dcc0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugSphere
	// void DrawDebugSphere(class UObject* WorldContextObject, FVector Center, float Radius, int32_t Segments, FLinearColor LineColor, float Duration, float Thickness); // [0x336da90] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugPoint
	// void DrawDebugPoint(class UObject* WorldContextObject, FVector Position, float Size, FLinearColor PointColor, float Duration); // [0x336d8f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugPlane
	// void DrawDebugPlane(class UObject* WorldContextObject, FPlane& PlaneCoordinates, FVector Location, float Size, FLinearColor PlaneColor, float Duration); // [0x336d700] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugLine
	// void DrawDebugLine(class UObject* WorldContextObject, FVector LineStart, FVector LineEnd, FLinearColor LineColor, float Duration, float Thickness); // [0x336d500] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugFrustum
	// void DrawDebugFrustum(class UObject* WorldContextObject, FTransform& FrustumTransform, FLinearColor FrustumColor, float Duration, float Thickness); // [0x336d300] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform
	// void DrawDebugFloatHistoryTransform(class UObject* WorldContextObject, FDebugFloatHistory& FloatHistory, FTransform& DrawTransform, FVector2D DrawSize, FLinearColor DrawColor, float Duration); // [0x336d0a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation
	// void DrawDebugFloatHistoryLocation(class UObject* WorldContextObject, FDebugFloatHistory& FloatHistory, FVector DrawLocation, FVector2D DrawSize, FLinearColor DrawColor, float Duration); // [0x336ce90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCylinder
	// void DrawDebugCylinder(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, int32_t Segments, FLinearColor LineColor, float Duration, float Thickness); // [0x336cc10] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCoordinateSystem
	// void DrawDebugCoordinateSystem(class UObject* WorldContextObject, FVector AxisLoc, FRotator AxisRot, float Scale, float Duration, float Thickness); // [0x336ca20] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugConeInDegrees
	// void DrawDebugConeInDegrees(class UObject* WorldContextObject, FVector Origin, FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, FLinearColor LineColor, float Duration, float Thickness); // [0x336c710] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCone
	// void DrawDebugCone(class UObject* WorldContextObject, FVector Origin, FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, FLinearColor LineColor, float Duration, float Thickness); // [0x336c710] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCircle
	// void DrawDebugCircle(class UObject* WorldContextObject, FVector Center, float Radius, int32_t NumSegments, FLinearColor LineColor, float Duration, float Thickness, FVector YAxis, FVector ZAxis, bool bDrawAxis); // [0x336c3f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCapsule
	// void DrawDebugCapsule(class UObject* WorldContextObject, FVector Center, float HalfHeight, float Radius, FRotator Rotation, FLinearColor LineColor, float Duration, float Thickness); // [0x336c170] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCamera
	// void DrawDebugCamera(class ACameraActor* CameraActor, FLinearColor CameraColor, float Duration);                         // [0x336c060] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugBox
	// void DrawDebugBox(class UObject* WorldContextObject, FVector Center, FVector Extent, FLinearColor LineColor, FRotator Rotation, float Duration, float Thickness); // [0x336be10] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugArrow
	// void DrawDebugArrow(class UObject* WorldContextObject, FVector LineStart, FVector LineEnd, float ArrowSize, FLinearColor LineColor, float Duration, float Thickness); // [0x336bbd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DoesImplementInterface
	// bool DoesImplementInterface(class UObject* TestObject, class UClass* Interface);                                         // [0x336bb00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.DelayUntilNextTick
	// void DelayUntilNextTick(class UObject* WorldContextObject, FLatentActionInfo LatentInfo);                                // [0x336ba20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.Delay
	// void Delay(class UObject* WorldContextObject, float Duration, FLatentActionInfo LatentInfo);                             // [0x336b8e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CreateCopyForUndoBuffer
	// void CreateCopyForUndoBuffer(class UObject* ObjectToModify);                                                             // [0x336b860] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ConvertToRelativePath
	// FString ConvertToRelativePath(FString Filename);                                                                         // [0x336b780] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.ConvertToAbsolutePath
	// FString ConvertToAbsolutePath(FString Filename);                                                                         // [0x336b6a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftObjPathToSoftObjRef
	// TWeakObjectPtr<UObject*> Conv_SoftObjPathToSoftObjRef(FSoftObjectPath& SoftObjectPath);                                  // [0x336b500] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToString
	// FString Conv_SoftObjectReferenceToString(TWeakObjectPtr<UObject*>& SoftObjectReference);                                 // [0x336b400] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToObject
	// class UObject* Conv_SoftObjectReferenceToObject(TWeakObjectPtr<UObject*>& SoftObject);                                   // [0x336b5e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftClassReferenceToString
	// FString Conv_SoftClassReferenceToString(TSoftObjectPtr<UClass*>& SoftClassReference);                                    // [0x336b400] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftClassReferenceToClass
	// class UClass* Conv_SoftClassReferenceToClass(TSoftObjectPtr<UClass*>& SoftClass);                                        // [0x336b340] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftClassPathToSoftClassRef
	// TSoftObjectPtr<UClass*> Conv_SoftClassPathToSoftClassRef(FSoftClassPath& SoftClassPath);                                 // [0x336b260] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_PrimaryAssetTypeToString
	// FString Conv_PrimaryAssetTypeToString(FPrimaryAssetType PrimaryAssetType);                                               // [0x2ad43f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_PrimaryAssetIdToString
	// FString Conv_PrimaryAssetIdToString(FPrimaryAssetId PrimaryAssetId);                                                     // [0x336b180] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_ObjectToSoftObjectReference
	// TWeakObjectPtr<UObject*> Conv_ObjectToSoftObjectReference(class UObject* Object);                                        // [0x336b0d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_InterfaceToObject
	// class UObject* Conv_InterfaceToObject(TScriptInterface<Class>& Interface);                                               // [0x336b030] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_ClassToSoftClassReference
	// TSoftObjectPtr<UClass*> Conv_ClassToSoftClassReference(class UClass*& Class);                                            // [0x336af70] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.ControlScreensaver
	// void ControlScreensaver(bool bAllowScreenSaver);                                                                         // [0x336aef0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ComponentOverlapComponents
	// bool ComponentOverlapComponents(class UPrimitiveComponent* Component, FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // [0x336ac60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ComponentOverlapActors
	// bool ComponentOverlapActors(class UPrimitiveComponent* Component, FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // [0x336a9d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CollectGarbage
	// void CollectGarbage();                                                                                                   // [0x336a9b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects
	// bool CapsuleTraceSingleForObjects(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x336a4c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceSingleByProfile
	// bool CapsuleTraceSingleByProfile(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x3369ff0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceSingle
	// bool CapsuleTraceSingle(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x3369b20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects
	// bool CapsuleTraceMultiForObjects(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x3369660] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceMultiByProfile
	// bool CapsuleTraceMultiByProfile(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x33691d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceMulti
	// bool CapsuleTraceMulti(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x3368d30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleOverlapComponents
	// bool CapsuleOverlapComponents(class UObject* WorldContextObject, FVector CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // [0x3368a60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleOverlapActors
	// bool CapsuleOverlapActors(class UObject* WorldContextObject, FVector CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // [0x3368790] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CanLaunchURL
	// bool CanLaunchURL(FString URL);                                                                                          // [0x33686f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CancelTransaction
	// void CancelTransaction(int32_t Index);                                                                                   // [0x13f9af0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BreakSoftObjectPath
	// void BreakSoftObjectPath(FSoftObjectPath InSoftObjectPath, FString& PathString);                                         // [0x33685a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.BreakSoftClassPath
	// void BreakSoftClassPath(FSoftClassPath InSoftClassPath, FString& PathString);                                            // [0x33685a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceSingleForObjects
	// bool BoxTraceSingleForObjects(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x3368090] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceSingleByProfile
	// bool BoxTraceSingleByProfile(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x3367b90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceSingle
	// bool BoxTraceSingle(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x3367690] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceMultiForObjects
	// bool BoxTraceMultiForObjects(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x33671c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceMultiByProfile
	// bool BoxTraceMultiByProfile(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x3366d00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceMulti
	// bool BoxTraceMulti(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x3366840] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxOverlapComponents
	// bool BoxOverlapComponents(class UObject* WorldContextObject, FVector BoxPos, FVector Extent, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // [0x33665b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxOverlapActors
	// bool BoxOverlapActors(class UObject* WorldContextObject, FVector BoxPos, FVector BoxExtent, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // [0x3366320] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BeginTransaction
	// int32_t BeginTransaction(FString Context, FText Description, class UObject* PrimaryObject);                              // [0x3366190] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.AddFloatHistorySample
	// FDebugFloatHistory AddFloatHistorySample(float Value, FDebugFloatHistory& FloatHistory);                                 // [0x3366020] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.KismetTextLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UKismetTextLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.KismetTextLibrary.TextTrimTrailing
	// FText TextTrimTrailing(FText& InText);                                                                                   // [0x337f4e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing
	// FText TextTrimPrecedingAndTrailing(FText& InText);                                                                       // [0x337f3b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextTrimPreceding
	// FText TextTrimPreceding(FText& InText);                                                                                  // [0x337f280] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextToUpper
	// FText TextToUpper(FText& InText);                                                                                        // [0x337f150] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextToLower
	// FText TextToLower(FText& InText);                                                                                        // [0x337f020] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextIsTransient
	// bool TextIsTransient(FText& InText);                                                                                     // [0x337ef50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextIsFromStringTable
	// bool TextIsFromStringTable(FText& Text);                                                                                 // [0x337ee80] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextIsEmpty
	// bool TextIsEmpty(FText& InText);                                                                                         // [0x337edb0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextIsCultureInvariant
	// bool TextIsCultureInvariant(FText& InText);                                                                              // [0x337ece0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextFromStringTable
	// FText TextFromStringTable(FName TableId, FString Key);                                                                   // [0x337eba0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.StringTableIdAndKeyFromText
	// bool StringTableIdAndKeyFromText(FText Text, FName& OutTableId, FString& OutKey);                                        // [0x337e9f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.PolyglotDataToText
	// FText PolyglotDataToText(FPolyglotTextData& PolyglotData);                                                               // [0x337e7e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.NotEqual_TextText
	// bool NotEqual_TextText(FText& A, FText& B);                                                                              // [0x337e670] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText
	// bool NotEqual_IgnoreCase_TextText(FText& A, FText& B);                                                                   // [0x337e500] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.IsPolyglotDataValid
	// void IsPolyglotDataValid(FPolyglotTextData& PolyglotData, bool& IsValid, FText& ErrorMessage);                           // [0x337e260] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.GetEmptyText
	// FText GetEmptyText();                                                                                                    // [0x337e1d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Format
	// FText Format(FText InPattern, TArray<FFormatArgumentData> InArgs);                                                       // [0x337dfa0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.FindTextInLocalizationTable
	// bool FindTextInLocalizationTable(FString Namespace, FString Key, FText& OutText);                                        // [0x337de20] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.EqualEqual_TextText
	// bool EqualEqual_TextText(FText& A, FText& B);                                                                            // [0x337dcb0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText
	// bool EqualEqual_IgnoreCase_TextText(FText& A, FText& B);                                                                 // [0x337db40] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_VectorToText
	// FText Conv_VectorToText(FVector InVec);                                                                                  // [0x337da50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_Vector2dToText
	// FText Conv_Vector2dToText(FVector2D InVec);                                                                              // [0x337d970] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_TransformToText
	// FText Conv_TransformToText(FTransform& InTrans);                                                                         // [0x337d830] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_TextToString
	// FString Conv_TextToString(FText& InText);                                                                                // [0x337d720] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_StringToText
	// FText Conv_StringToText(FString inString);                                                                               // [0x337d620] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_RotatorToText
	// FText Conv_RotatorToText(FRotator InRot);                                                                                // [0x337d530] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_ObjectToText
	// FText Conv_ObjectToText(class UObject* InObj);                                                                           // [0x337d440] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_NameToText
	// FText Conv_NameToText(FName InName);                                                                                     // [0x337d350] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_IntToText
	// FText Conv_IntToText(int32_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // [0x337d130] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_Int64ToText
	// FText Conv_Int64ToText(int64_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // [0x337cf10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_FloatToText
	// FText Conv_FloatToText(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // [0x337cc40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_ColorToText
	// FText Conv_ColorToText(FLinearColor InColor);                                                                            // [0x337cb60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_ByteToText
	// FText Conv_ByteToText(char Value);                                                                                       // [0x337ca80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_BoolToText
	// FText Conv_BoolToText(bool InBool);                                                                                      // [0x337c990] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsTimeZoneTime_DateTime
	// FText AsTimeZoneTime_DateTime(FDateTime& InDateTime, FString InTimeZone);                                                // [0x337c660] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsTimeZoneDateTime_DateTime
	// FText AsTimeZoneDateTime_DateTime(FDateTime& InDateTime, FString InTimeZone);                                            // [0x337c3c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsTimeZoneDate_DateTime
	// FText AsTimeZoneDate_DateTime(FDateTime& InDateTime, FString InTimeZone);                                                // [0x337c510] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsTimespan_Timespan
	// FText AsTimespan_Timespan(FTimespan& InTimespan);                                                                        // [0x337c8a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsTime_DateTime
	// FText AsTime_DateTime(FDateTime& In);                                                                                    // [0x337c7b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsPercent_Float
	// FText AsPercent_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // [0x337c0f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsDateTime_DateTime
	// FText AsDateTime_DateTime(FDateTime& In);                                                                                // [0x337bf10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsDate_DateTime
	// FText AsDate_DateTime(FDateTime& InDateTime);                                                                            // [0x337c000] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsCurrencyBase
	// FText AsCurrencyBase(int32_t BaseValue, FString CurrencyCode);                                                           // [0x337b790] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsCurrency_Integer
	// FText AsCurrency_Integer(int32_t Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, FString CurrencyCode); // [0x337bbf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsCurrency_Float
	// FText AsCurrency_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, FString CurrencyCode); // [0x337b8d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Struct /Script/Engine.LayerActorStats
/// Size: 0x0010 (0x000000 - 0x000010)
class FLayerActorStats : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UClass*)                             Type                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   Total                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Class /Script/Engine.Layer
/// Size: 0x0020 (0x000028 - 0x000048)
class ULayer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FName)                                     LayerName                                                   OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      bIsVisible                                                  OFFSET(get<bool>, {0x30, 1, 1, 0})
	CMember(TArray<FLayerActorStats>)                  ActorStats                                                  OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Engine.LevelPartitionInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class ULevelPartitionInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Engine.ReplicatedStaticActorDestructionInfo
/// Size: 0x0038 (0x000000 - 0x000038)
class FReplicatedStaticActorDestructionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UClass*)                             ObjClass                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/Engine.Level
/// Size: 0x0270 (0x000028 - 0x000298)
class ULevel : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(class UWorld*)                             OwningWorld                                                 OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(class UModel*)                             Model                                                       OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(TArray<class UModelComponent*>)            ModelComponents                                             OFFSET(get<T>, {0xC8, 16, 0, 0})
	CMember(class ULevelActorContainer*)               ActorCluster                                                OFFSET(get<T>, {0xD8, 8, 0, 0})
	DMember(int32_t)                                   NumTextureStreamingUnbuiltComponents                        OFFSET(get<int32_t>, {0xE0, 4, 0, 0})
	DMember(int32_t)                                   NumTextureStreamingDirtyResources                           OFFSET(get<int32_t>, {0xE4, 4, 0, 0})
	CMember(class ALevelScriptActor*)                  LevelScriptActor                                            OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(class ANavigationObjectBase*)              NavListStart                                                OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(class ANavigationObjectBase*)              NavListEnd                                                  OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(TArray<class UNavigationDataChunk*>)       NavDataChunks                                               OFFSET(get<T>, {0x100, 16, 0, 0})
	DMember(float)                                     LightmapTotalSize                                           OFFSET(get<float>, {0x110, 4, 0, 0})
	DMember(float)                                     ShadowmapTotalSize                                          OFFSET(get<float>, {0x114, 4, 0, 0})
	CMember(TArray<FVector>)                           StaticNavigableGeometry                                     OFFSET(get<T>, {0x118, 16, 0, 0})
	CMember(TArray<FGuid>)                             StreamingTextureGuids                                       OFFSET(get<T>, {0x128, 16, 0, 0})
	SMember(FGuid)                                     LevelBuildDataId                                            OFFSET(getStruct<T>, {0x1D0, 16, 0, 0})
	CMember(class UMapBuildDataRegistry*)              MapBuildData                                                OFFSET(get<T>, {0x1E0, 8, 0, 0})
	SMember(FIntVector)                                LightBuildLevelOffset                                       OFFSET(getStruct<T>, {0x1E8, 12, 0, 0})
	DMember(bool)                                      bIsLightingScenario                                         OFFSET(get<bool>, {0x1F4, 1, 1, 0})
	DMember(bool)                                      bTextureStreamingRotationChanged                            OFFSET(get<bool>, {0x1F4, 1, 1, 3})
	DMember(bool)                                      bStaticComponentsRegisteredInStreamingManager               OFFSET(get<bool>, {0x1F4, 1, 1, 4})
	DMember(bool)                                      bIsVisible                                                  OFFSET(get<bool>, {0x1F4, 1, 1, 5})
	CMember(class AWorldSettings*)                     WorldSettings                                               OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(TArray<class UAssetUserData*>)             AssetUserData                                               OFFSET(get<T>, {0x268, 16, 0, 0})
	CMember(TArray<FReplicatedStaticActorDestructionInfo>) DestroyedReplicatedStaticActors                         OFFSET(get<T>, {0x288, 16, 0, 0})
};

/// Class /Script/Engine.LevelActorContainer
/// Size: 0x0010 (0x000028 - 0x000038)
class ULevelActorContainer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<class AActor*>)                     Actors                                                      OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.LevelBounds
/// Size: 0x0010 (0x000220 - 0x000230)
class ALevelBounds : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(class UBoxComponent*)                      BoxComponent                                                OFFSET(get<T>, {0x220, 8, 0, 0})
	DMember(bool)                                      bAutoUpdateBounds                                           OFFSET(get<bool>, {0x228, 1, 0, 0})
};

/// Class /Script/Engine.LevelScriptActor
/// Size: 0x0008 (0x000220 - 0x000228)
class ALevelScriptActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	DMember(bool)                                      bInputEnabled                                               OFFSET(get<bool>, {0x220, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.LevelScriptActor.WorldOriginLocationChanged
	// void WorldOriginLocationChanged(FIntVector OldOriginLocation, FIntVector NewOriginLocation);                             // [0x198a600] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.LevelScriptActor.SetCinematicMode
	// void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // [0x3382890] Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelScriptActor.RemoteEvent
	// bool RemoteEvent(FName EventName);                                                                                       // [0x3381fd0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelScriptActor.LevelReset
	// void LevelReset();                                                                                                       // [0x198a600] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
};

/// Class /Script/Engine.LevelScriptBlueprint
/// Size: 0x0000 (0x0000A0 - 0x0000A0)
class ULevelScriptBlueprint : public UBlueprint
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
};

/// Class /Script/Engine.LevelStreaming
/// Size: 0x0128 (0x000028 - 0x000150)
class ULevelStreaming : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	CMember(TWeakObjectPtr<class UWorld*>)             WorldAsset                                                  OFFSET(get<T>, {0x28, 8, 0, 0})
	SMember(FName)                                     PackageNameToLoad                                           OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	CMember(TArray<FName>)                             LODPackageNames                                             OFFSET(get<T>, {0x58, 16, 0, 0})
	SMember(FTransform)                                LevelTransform                                              OFFSET(getStruct<T>, {0x80, 48, 0, 0})
	DMember(int32_t)                                   LevelLODIndex                                               OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
	DMember(int32_t)                                   StreamingPriority                                           OFFSET(get<int32_t>, {0xB4, 4, 0, 0})
	DMember(bool)                                      bShouldBeVisible                                            OFFSET(get<bool>, {0xBA, 1, 1, 3})
	DMember(bool)                                      bShouldBeLoaded                                             OFFSET(get<bool>, {0xBA, 1, 1, 4})
	DMember(bool)                                      bLocked                                                     OFFSET(get<bool>, {0xBA, 1, 1, 5})
	DMember(bool)                                      bIsStatic                                                   OFFSET(get<bool>, {0xBA, 1, 1, 6})
	DMember(bool)                                      bShouldBlockOnLoad                                          OFFSET(get<bool>, {0xBA, 1, 1, 7})
	DMember(bool)                                      bShouldBlockOnUnload                                        OFFSET(get<bool>, {0xBB, 1, 1, 0})
	DMember(bool)                                      bDisableDistanceStreaming                                   OFFSET(get<bool>, {0xBB, 1, 1, 1})
	DMember(bool)                                      bDrawOnLevelStatusMap                                       OFFSET(get<bool>, {0xBB, 1, 1, 2})
	SMember(FLinearColor)                              LevelColor                                                  OFFSET(getStruct<T>, {0xBC, 16, 0, 0})
	CMember(TArray<class ALevelStreamingVolume*>)      EditorStreamingVolumes                                      OFFSET(get<T>, {0xD0, 16, 0, 0})
	DMember(float)                                     MinTimeBetweenVolumeUnloadRequests                          OFFSET(get<float>, {0xE0, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLevelLoaded                                               OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLevelUnloaded                                             OFFSET(getStruct<T>, {0xF8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLevelShown                                                OFFSET(getStruct<T>, {0x108, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLevelHidden                                               OFFSET(getStruct<T>, {0x118, 16, 0, 0})
	CMember(class ULevel*)                             LoadedLevel                                                 OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(class ULevel*)                             PendingUnloadLevel                                          OFFSET(get<T>, {0x130, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.LevelStreaming.ShouldBeLoaded
	// bool ShouldBeLoaded();                                                                                                   // [0x2b4ab40] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.SetShouldBeVisible
	// void SetShouldBeVisible(bool bInShouldBeVisible);                                                                        // [0x33837d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelStreaming.SetShouldBeLoaded
	// void SetShouldBeLoaded(bool bInShouldBeLoaded);                                                                          // [0x330e260] Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelStreaming.SetPriority
	// void SetPriority(int32_t NewPriority);                                                                                   // [0x33835b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelStreaming.SetLevelLODIndex
	// void SetLevelLODIndex(int32_t LODIndex);                                                                                 // [0x3382ec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelStreaming.SetIsRequestingUnloadAndRemoval
	// void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);                                              // [0x3382e30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelStreaming.IsStreamingStatePending
	// bool IsStreamingStatePending();                                                                                          // [0x3381ac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.IsLevelVisible
	// bool IsLevelVisible();                                                                                                   // [0x3381a90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.IsLevelLoaded
	// bool IsLevelLoaded();                                                                                                    // [0x3381a60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.GetWorldAssetPackageFName
	// FName GetWorldAssetPackageFName();                                                                                       // [0x33819f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.GetLoadedLevel
	// class ULevel* GetLoadedLevel();                                                                                          // [0x2506a10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.GetLevelScriptActor
	// class ALevelScriptActor* GetLevelScriptActor();                                                                          // [0x3381940] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.LevelStreaming.GetIsRequestingUnloadAndRemoval
	// bool GetIsRequestingUnloadAndRemoval();                                                                                  // [0x3381910] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.CreateInstance
	// class ULevelStreaming* CreateInstance(FString UniqueInstanceName);                                                       // [0x3381830] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.LevelStreamingAlwaysLoaded
/// Size: 0x0008 (0x000148 - 0x000150)
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
};

/// Class /Script/Engine.LevelStreamingDynamic
/// Size: 0x0008 (0x000148 - 0x000150)
class ULevelStreamingDynamic : public ULevelStreaming
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	DMember(bool)                                      bInitiallyLoaded                                            OFFSET(get<bool>, {0x148, 1, 1, 0})
	DMember(bool)                                      bInitiallyVisible                                           OFFSET(get<bool>, {0x148, 1, 1, 1})


	/// Functions
	// Function /Script/Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr
	// class ULevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(class UObject* WorldContextObject, TWeakObjectPtr<UWorld*> Level, FVector Location, FRotator Rotation, bool& bOutSuccess, FString OptionalLevelNameOverride); // [0x3381d50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.LevelStreamingDynamic.LoadLevelInstance
	// class ULevelStreamingDynamic* LoadLevelInstance(class UObject* WorldContextObject, FString LevelName, FVector Location, FRotator Rotation, bool& bOutSuccess, FString OptionalLevelNameOverride); // [0x3381af0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.LevelStreamingPersistent
/// Size: 0x0008 (0x000148 - 0x000150)
class ULevelStreamingPersistent : public ULevelStreaming
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
};

/// Class /Script/Engine.LevelStreamingVolume
/// Size: 0x0018 (0x000258 - 0x000270)
class ALevelStreamingVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	CMember(TArray<FName>)                             StreamingLevelNames                                         OFFSET(get<T>, {0x258, 16, 0, 0})
	DMember(bool)                                      bEditorPreVisOnly                                           OFFSET(get<bool>, {0x268, 1, 1, 0})
	DMember(bool)                                      bDisabled                                                   OFFSET(get<bool>, {0x268, 1, 1, 1})
	CMember(TEnumAsByte<EStreamingVolumeUsage>)        StreamingUsage                                              OFFSET(get<T>, {0x26C, 1, 0, 0})
};

/// Class /Script/Engine.LightmappedSurfaceCollection
/// Size: 0x0018 (0x000028 - 0x000040)
class ULightmappedSurfaceCollection : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UModel*)                             SourceModel                                                 OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TArray<int32_t>)                           Surfaces                                                    OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Engine.LightMapTexture2D
/// Size: 0x0008 (0x000100 - 0x000108)
class ULightMapTexture2D : public UTexture2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
};

/// Class /Script/Engine.LightMapVirtualTexture2D
/// Size: 0x0018 (0x000100 - 0x000118)
class ULightMapVirtualTexture2D : public UTexture2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	CMember(TArray<int8_t>)                            TypeToLayer                                                 OFFSET(get<T>, {0x100, 16, 0, 0})
};

/// Class /Script/Engine.LightmassCharacterIndirectDetailVolume
/// Size: 0x0000 (0x000258 - 0x000258)
class ALightmassCharacterIndirectDetailVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
};

/// Class /Script/Engine.LightmassImportanceVolume
/// Size: 0x0000 (0x000258 - 0x000258)
class ALightmassImportanceVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
};

/// Class /Script/Engine.LightmassPortal
/// Size: 0x0008 (0x000220 - 0x000228)
class ALightmassPortal : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(class ULightmassPortalComponent*)          PortalComponent                                             OFFSET(get<T>, {0x220, 8, 0, 0})
};

/// Class /Script/Engine.LightmassPortalComponent
/// Size: 0x0008 (0x0001F8 - 0x000200)
class ULightmassPortalComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
	CMember(class UBoxComponent*)                      PreviewBox                                                  OFFSET(get<T>, {0x1F8, 8, 0, 0})
};

/// Class /Script/Engine.LightmassPrimitiveSettingsObject
/// Size: 0x0018 (0x000028 - 0x000040)
class ULightmassPrimitiveSettingsObject : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FLightmassPrimitiveSettings)               LightmassSettings                                           OFFSET(getStruct<T>, {0x28, 24, 0, 0})
};

/// Class /Script/Engine.LineBatchComponent
/// Size: 0x0048 (0x000468 - 0x0004B0)
class ULineBatchComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1200;

public:
};

/// Struct /Script/Engine.LightmassPointLightSettings
/// Size: 0x0000 (0x00000C - 0x00000C)
class FLightmassPointLightSettings : public FLightmassLightSettings
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Class /Script/Engine.LocalLightComponent
/// Size: 0x0018 (0x000328 - 0x000340)
class ULocalLightComponent : public ULightComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	CMember(ELightUnits)                               IntensityUnits                                              OFFSET(get<T>, {0x328, 1, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x32C, 4, 0, 0})
	DMember(float)                                     AttenuationRadius                                           OFFSET(get<float>, {0x330, 4, 0, 0})
	SMember(FLightmassPointLightSettings)              LightmassSettings                                           OFFSET(getStruct<T>, {0x334, 12, 0, 0})


	/// Functions
	// Function /Script/Engine.LocalLightComponent.SetIntensityUnits
	// void SetIntensityUnits(ELightUnits NewIntensityUnits);                                                                   // [0x3385ec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LocalLightComponent.SetAttenuationRadius
	// void SetAttenuationRadius(float NewRadius);                                                                              // [0x3385e40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LocalLightComponent.GetUnitsConversionFactor
	// float GetUnitsConversionFactor(ELightUnits SrcUnits, ELightUnits TargetUnits, float CosHalfConeAngle);                   // [0x3385d30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.LODActor
/// Size: 0x0088 (0x000220 - 0x0002A8)
class ALODActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	CMember(class UStaticMeshComponent*)               StaticMeshComponent                                         OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(TMap<class UMaterialInterface*, class UInstancedStaticMeshComponent*>) ImpostersStaticMeshComponents   OFFSET(get<T>, {0x228, 80, 0, 0})
	CMember(class UHLODProxy*)                         Proxy                                                       OFFSET(get<T>, {0x278, 8, 0, 0})
	SMember(FName)                                     Key                                                         OFFSET(getStruct<T>, {0x280, 8, 0, 0})
	DMember(float)                                     LODDrawDistance                                             OFFSET(get<float>, {0x288, 4, 0, 0})
	DMember(int32_t)                                   LODLevel                                                    OFFSET(get<int32_t>, {0x28C, 4, 0, 0})
	CMember(TArray<class AActor*>)                     SubActors                                                   OFFSET(get<T>, {0x290, 16, 0, 0})
	DMember(char)                                      CachedNumHLODLevels                                         OFFSET(get<char>, {0x2A0, 1, 0, 0})
};

/// Struct /Script/Engine.ComponentSync
/// Size: 0x000C (0x000000 - 0x00000C)
class FComponentSync : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(ESyncOption)                               SyncOption                                                  OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/Engine.LODMappingData
/// Size: 0x0020 (0x000000 - 0x000020)
class FLODMappingData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<int32_t>)                           Mapping                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<int32_t>)                           InverseMapping                                              OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Class /Script/Engine.LODSyncComponent
/// Size: 0x0090 (0x0000B0 - 0x000140)
class ULODSyncComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	DMember(int32_t)                                   NumLODs                                                     OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
	DMember(int32_t)                                   ForcedLOD                                                   OFFSET(get<int32_t>, {0xB4, 4, 0, 0})
	CMember(TArray<FComponentSync>)                    ComponentsToSync                                            OFFSET(get<T>, {0xB8, 16, 0, 0})
	CMember(TMap<FName, FLODMappingData>)              CustomLODMapping                                            OFFSET(get<T>, {0xC8, 80, 0, 0})
	DMember(int32_t)                                   CurrentLOD                                                  OFFSET(get<int32_t>, {0x118, 4, 0, 0})
	DMember(int32_t)                                   CurrentNumLODs                                              OFFSET(get<int32_t>, {0x11C, 4, 0, 0})
	CMember(TArray<class UPrimitiveComponent*>)        DriveComponents                                             OFFSET(get<T>, {0x120, 16, 0, 0})
	CMember(TArray<class UPrimitiveComponent*>)        SubComponents                                               OFFSET(get<T>, {0x130, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.LODSyncComponent.GetLODSyncDebugText
	// FString GetLODSyncDebugText();                                                                                           // [0x3385cb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.LODSyncInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class ULODSyncInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.MapBuildDataRegistry
/// Size: 0x0210 (0x000028 - 0x000238)
class UMapBuildDataRegistry : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(TEnumAsByte<ELightingBuildQuality>)        LevelLightingQuality                                        OFFSET(get<T>, {0x28, 1, 0, 0})
};

/// Struct /Script/Engine.MaterialInput
/// Size: 0x000C (0x000000 - 0x00000C)
class FMaterialInput : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   OutputIndex                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FName)                                     ExpressionName                                              OFFSET(getStruct<T>, {0x4, 8, 0, 0})
};

/// Struct /Script/Engine.ScalarMaterialInput
/// Size: 0x0000 (0x00000C - 0x00000C)
class FScalarMaterialInput : public FMaterialInput
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/Engine.VectorMaterialInput
/// Size: 0x0000 (0x00000C - 0x00000C)
class FVectorMaterialInput : public FMaterialInput
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/Engine.ColorMaterialInput
/// Size: 0x0000 (0x00000C - 0x00000C)
class FColorMaterialInput : public FMaterialInput
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/Engine.MaterialShadingModelField
/// Size: 0x0002 (0x000000 - 0x000002)
class FMaterialShadingModelField : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2;

public:
	DMember(uint16_t)                                  ShadingModelField                                           OFFSET(get<uint16_t>, {0x0, 2, 0, 0})
};

/// Struct /Script/Engine.MaterialAttributesInput
/// Size: 0x0004 (0x00000C - 0x000010)
class FMaterialAttributesInput : public FExpressionInput
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(int32_t)                                   PropertyConnectedBitmask                                    OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.ShadingModelMaterialInput
/// Size: 0x0000 (0x00000C - 0x00000C)
class FShadingModelMaterialInput : public FMaterialInput
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/Engine.MaterialFunctionInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FMaterialFunctionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FGuid)                                     StateId                                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(class UMaterialFunctionInterface*)         Function                                                    OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.MaterialParameterCollectionInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FMaterialParameterCollectionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FGuid)                                     StateId                                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(class UMaterialParameterCollection*)       ParameterCollection                                         OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.MaterialCachedExpressionData
/// Size: 0x0228 (0x000000 - 0x000228)
class FMaterialCachedExpressionData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	SMember(FMaterialCachedParameters)                 Parameters                                                  OFFSET(getStruct<T>, {0x0, 416, 0, 0})
	CMember(TArray<class UObject*>)                    ReferencedTextures                                          OFFSET(get<T>, {0x1A0, 16, 0, 0})
	CMember(TArray<FMaterialFunctionInfo>)             FunctionInfos                                               OFFSET(get<T>, {0x1B0, 16, 0, 0})
	CMember(TArray<FMaterialParameterCollectionInfo>)  ParameterCollectionInfos                                    OFFSET(get<T>, {0x1C0, 16, 0, 0})
	CMember(TArray<class UMaterialFunctionInterface*>) DefaultLayers                                               OFFSET(get<T>, {0x1D0, 16, 0, 0})
	CMember(TArray<class UMaterialFunctionInterface*>) DefaultLayerBlends                                          OFFSET(get<T>, {0x1E0, 16, 0, 0})
	CMember(TArray<class ULandscapeGrassType*>)        GrassTypes                                                  OFFSET(get<T>, {0x1F0, 16, 0, 0})
	CMember(TArray<FName>)                             DynamicParameterNames                                       OFFSET(get<T>, {0x200, 16, 0, 0})
	CMember(TArray<bool>)                              QualityLevelsUsed                                           OFFSET(get<T>, {0x210, 16, 0, 0})
	DMember(bool)                                      bHasRuntimeVirtualTextureOutput                             OFFSET(get<bool>, {0x220, 1, 1, 0})
	DMember(bool)                                      bHasSceneColor                                              OFFSET(get<bool>, {0x220, 1, 1, 1})
};

/// Class /Script/Engine.Material
/// Size: 0x0410 (0x000088 - 0x000498)
class UMaterial : public UMaterialInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1176;

public:
	CMember(class UPhysicalMaterial*)                  PhysMaterial                                                OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(class UPhysicalMaterialMask*)              PhysMaterialMask                                            OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(class UPhysicalMaterial*)                  PhysicalMaterialMap                                         OFFSET(get<T>, {0x98, 64, 0, 0})
	SMember(FScalarMaterialInput)                      Metallic                                                    OFFSET(getStruct<T>, {0xD8, 12, 0, 0})
	SMember(FScalarMaterialInput)                      Specular                                                    OFFSET(getStruct<T>, {0xEC, 12, 0, 0})
	SMember(FScalarMaterialInput)                      Anisotropy                                                  OFFSET(getStruct<T>, {0x100, 12, 0, 0})
	SMember(FVectorMaterialInput)                      Normal                                                      OFFSET(getStruct<T>, {0x114, 12, 0, 0})
	SMember(FVectorMaterialInput)                      Tangent                                                     OFFSET(getStruct<T>, {0x128, 12, 0, 0})
	SMember(FColorMaterialInput)                       EmissiveColor                                               OFFSET(getStruct<T>, {0x13C, 12, 0, 0})
	CMember(TEnumAsByte<EMaterialDomain>)              MaterialDomain                                              OFFSET(get<T>, {0x150, 1, 0, 0})
	CMember(TEnumAsByte<EBlendMode>)                   BlendMode                                                   OFFSET(get<T>, {0x151, 1, 0, 0})
	CMember(TEnumAsByte<EDecalBlendMode>)              DecalBlendMode                                              OFFSET(get<T>, {0x152, 1, 0, 0})
	CMember(TEnumAsByte<EMaterialDecalResponse>)       MaterialDecalResponse                                       OFFSET(get<T>, {0x153, 1, 0, 0})
	CMember(TEnumAsByte<EMaterialShadingModel>)        ShadingModel                                                OFFSET(get<T>, {0x154, 1, 0, 0})
	DMember(bool)                                      bCastDynamicShadowAsMasked                                  OFFSET(get<bool>, {0x155, 1, 1, 0})
	SMember(FMaterialShadingModelField)                ShadingModels                                               OFFSET(getStruct<T>, {0x156, 2, 0, 0})
	DMember(float)                                     OpacityMaskClipValue                                        OFFSET(get<float>, {0x158, 4, 0, 0})
	SMember(FVectorMaterialInput)                      WorldPositionOffset                                         OFFSET(getStruct<T>, {0x15C, 12, 0, 0})
	SMember(FScalarMaterialInput)                      Refraction                                                  OFFSET(getStruct<T>, {0x170, 12, 0, 0})
	SMember(FMaterialAttributesInput)                  MaterialAttributes                                          OFFSET(getStruct<T>, {0x184, 16, 0, 0})
	SMember(FScalarMaterialInput)                      PixelDepthOffset                                            OFFSET(getStruct<T>, {0x19C, 12, 0, 0})
	SMember(FShadingModelMaterialInput)                ShadingModelFromMaterialExpression                          OFFSET(getStruct<T>, {0x1B0, 12, 0, 0})
	DMember(bool)                                      bEnableSeparateTranslucency                                 OFFSET(get<bool>, {0x1C4, 1, 1, 0})
	DMember(bool)                                      bEnableResponsiveAA                                         OFFSET(get<bool>, {0x1C4, 1, 1, 1})
	DMember(bool)                                      bScreenSpaceReflections                                     OFFSET(get<bool>, {0x1C4, 1, 1, 2})
	DMember(bool)                                      bContactShadows                                             OFFSET(get<bool>, {0x1C4, 1, 1, 3})
	DMember(bool)                                      TwoSided                                                    OFFSET(get<bool>, {0x1C4, 1, 1, 4})
	DMember(bool)                                      DitheredLODTransition                                       OFFSET(get<bool>, {0x1C4, 1, 1, 5})
	DMember(bool)                                      DitherOpacityMask                                           OFFSET(get<bool>, {0x1C4, 1, 1, 6})
	DMember(bool)                                      bAllowHDRBaseColor                                          OFFSET(get<bool>, {0x1C4, 1, 1, 7})
	DMember(bool)                                      bAllowNegativeEmissiveColor                                 OFFSET(get<bool>, {0x1C5, 1, 1, 0})
	CMember(TEnumAsByte<ETranslucencyLightingMode>)    TranslucencyLightingMode                                    OFFSET(get<T>, {0x1C6, 1, 0, 0})
	DMember(bool)                                      bEnableMobileSeparateTranslucency                           OFFSET(get<bool>, {0x1C7, 1, 1, 0})
	DMember(int32_t)                                   NumCustomizedUVs                                            OFFSET(get<int32_t>, {0x1C8, 4, 0, 0})
	DMember(float)                                     TranslucencyDirectionalLightingIntensity                    OFFSET(get<float>, {0x1CC, 4, 0, 0})
	DMember(float)                                     TranslucentShadowDensityScale                               OFFSET(get<float>, {0x1D0, 4, 0, 0})
	DMember(float)                                     TranslucentSelfShadowDensityScale                           OFFSET(get<float>, {0x1D4, 4, 0, 0})
	DMember(float)                                     TranslucentSelfShadowSecondDensityScale                     OFFSET(get<float>, {0x1D8, 4, 0, 0})
	DMember(float)                                     TranslucentSelfShadowSecondOpacity                          OFFSET(get<float>, {0x1DC, 4, 0, 0})
	DMember(float)                                     TranslucentBackscatteringExponent                           OFFSET(get<float>, {0x1E0, 4, 0, 0})
	SMember(FLinearColor)                              TranslucentMultipleScatteringExtinction                     OFFSET(getStruct<T>, {0x1E4, 16, 0, 0})
	DMember(float)                                     TranslucentShadowStartOffset                                OFFSET(get<float>, {0x1F4, 4, 0, 0})
	DMember(bool)                                      bDisableDepthTest                                           OFFSET(get<bool>, {0x1F8, 1, 1, 0})
	DMember(bool)                                      bWriteOnlyAlpha                                             OFFSET(get<bool>, {0x1F8, 1, 1, 1})
	DMember(bool)                                      bGenerateSphericalParticleNormals                           OFFSET(get<bool>, {0x1F8, 1, 1, 2})
	DMember(bool)                                      bTangentSpaceNormal                                         OFFSET(get<bool>, {0x1F8, 1, 1, 3})
	DMember(bool)                                      bUseEmissiveForDynamicAreaLighting                          OFFSET(get<bool>, {0x1F8, 1, 1, 4})
	DMember(bool)                                      bBlockGI                                                    OFFSET(get<bool>, {0x1F8, 1, 1, 5})
	DMember(bool)                                      bUsedAsSpecialEngineMaterial                                OFFSET(get<bool>, {0x1F8, 1, 1, 6})
	DMember(bool)                                      bUsedWithSkeletalMesh                                       OFFSET(get<bool>, {0x1F8, 1, 1, 7})
	DMember(bool)                                      bUsedWithEditorCompositing                                  OFFSET(get<bool>, {0x1F9, 1, 1, 0})
	DMember(bool)                                      bUsedWithParticleSprites                                    OFFSET(get<bool>, {0x1F9, 1, 1, 1})
	DMember(bool)                                      bUsedWithBeamTrails                                         OFFSET(get<bool>, {0x1F9, 1, 1, 2})
	DMember(bool)                                      bUsedWithMeshParticles                                      OFFSET(get<bool>, {0x1F9, 1, 1, 3})
	DMember(bool)                                      bUsedWithNiagaraSprites                                     OFFSET(get<bool>, {0x1F9, 1, 1, 4})
	DMember(bool)                                      bUsedWithNiagaraRibbons                                     OFFSET(get<bool>, {0x1F9, 1, 1, 5})
	DMember(bool)                                      bUsedWithNiagaraMeshParticles                               OFFSET(get<bool>, {0x1F9, 1, 1, 6})
	DMember(bool)                                      bUsedWithGeometryCache                                      OFFSET(get<bool>, {0x1F9, 1, 1, 7})
	DMember(bool)                                      bUsedWithStaticLighting                                     OFFSET(get<bool>, {0x1FA, 1, 1, 0})
	DMember(bool)                                      bUsedWithMorphTargets                                       OFFSET(get<bool>, {0x1FA, 1, 1, 1})
	DMember(bool)                                      bUsedWithSplineMeshes                                       OFFSET(get<bool>, {0x1FA, 1, 1, 2})
	DMember(bool)                                      bUsedWithInstancedStaticMeshes                              OFFSET(get<bool>, {0x1FA, 1, 1, 3})
	DMember(bool)                                      bUsedWithGeometryCollections                                OFFSET(get<bool>, {0x1FA, 1, 1, 4})
	DMember(bool)                                      bUsesDistortion                                             OFFSET(get<bool>, {0x1FA, 1, 1, 5})
	DMember(bool)                                      bUsedWithClothing                                           OFFSET(get<bool>, {0x1FA, 1, 1, 6})
	DMember(bool)                                      bUsedWithWater                                              OFFSET(get<bool>, {0x1FC, 1, 1, 0})
	DMember(bool)                                      bUsedWithHairStrands                                        OFFSET(get<bool>, {0x1FC, 1, 1, 1})
	DMember(bool)                                      bUsedWithLidarPointCloud                                    OFFSET(get<bool>, {0x1FC, 1, 1, 2})
	DMember(bool)                                      bUsedWithVirtualHeightfieldMesh                             OFFSET(get<bool>, {0x1FC, 1, 1, 3})
	DMember(bool)                                      bUsedWithUI                                                 OFFSET(get<bool>, {0x200, 1, 1, 0})
	DMember(bool)                                      bAutomaticallySetUsageInEditor                              OFFSET(get<bool>, {0x200, 1, 1, 1})
	DMember(bool)                                      bFullyRough                                                 OFFSET(get<bool>, {0x200, 1, 1, 2})
	CMember(TEnumAsByte<EMobileMaterialType>)          MobileMaterialType                                          OFFSET(get<T>, {0x201, 1, 0, 0})
	DMember(bool)                                      bUseFullPrecision                                           OFFSET(get<bool>, {0x202, 1, 1, 0})
	DMember(bool)                                      bUseLightmapDirectionality                                  OFFSET(get<bool>, {0x202, 1, 1, 1})
	DMember(bool)                                      bUseAlphaToCoverage                                         OFFSET(get<bool>, {0x202, 1, 1, 2})
	DMember(bool)                                      bForwardRenderUsePreintegratedGFForSimpleIBL                OFFSET(get<bool>, {0x204, 1, 1, 0})
	DMember(bool)                                      bUseHQForwardReflections                                    OFFSET(get<bool>, {0x208, 1, 1, 0})
	DMember(bool)                                      bUsePlanarForwardReflections                                OFFSET(get<bool>, {0x208, 1, 1, 1})
	DMember(bool)                                      bUseTranslucentDepthMask                                    OFFSET(get<bool>, {0x208, 1, 1, 2})
	DMember(bool)                                      bForceEarlyZ                                                OFFSET(get<bool>, {0x208, 1, 1, 3})
	DMember(bool)                                      bIsMobileEnvMaterial                                        OFFSET(get<bool>, {0x208, 1, 1, 4})
	DMember(bool)                                      bNormalCurvatureToRoughness                                 OFFSET(get<bool>, {0x208, 1, 1, 5})
	CMember(TEnumAsByte<EMaterialTessellationMode>)    D3D11TessellationMode                                       OFFSET(get<T>, {0x209, 1, 0, 0})
	DMember(bool)                                      bEnableCrackFreeDisplacement                                OFFSET(get<bool>, {0x20A, 1, 1, 0})
	DMember(bool)                                      bEnableAdaptiveTessellation                                 OFFSET(get<bool>, {0x20A, 1, 1, 1})
	DMember(bool)                                      AllowTranslucentCustomDepthWrites                           OFFSET(get<bool>, {0x20A, 1, 1, 2})
	DMember(bool)                                      Wireframe                                                   OFFSET(get<bool>, {0x20A, 1, 1, 3})
	CMember(TEnumAsByte<EMaterialShadingRate>)         ShadingRate                                                 OFFSET(get<T>, {0x20B, 1, 0, 0})
	DMember(bool)                                      bCanMaskedBeAssumedOpaque                                   OFFSET(get<bool>, {0x20C, 1, 1, 0})
	DMember(bool)                                      bIsMasked                                                   OFFSET(get<bool>, {0x20C, 1, 1, 1})
	DMember(bool)                                      bIsPreviewMaterial                                          OFFSET(get<bool>, {0x20C, 1, 1, 2})
	DMember(bool)                                      bIsFunctionPreviewMaterial                                  OFFSET(get<bool>, {0x20C, 1, 1, 3})
	DMember(bool)                                      bUseMaterialAttributes                                      OFFSET(get<bool>, {0x20C, 1, 1, 4})
	DMember(bool)                                      bCastRayTracedShadows                                       OFFSET(get<bool>, {0x20C, 1, 1, 5})
	DMember(bool)                                      bUseTranslucencyVertexFog                                   OFFSET(get<bool>, {0x20C, 1, 1, 6})
	DMember(bool)                                      bApplyCloudFogging                                          OFFSET(get<bool>, {0x20C, 1, 1, 7})
	DMember(bool)                                      bIsSky                                                      OFFSET(get<bool>, {0x20D, 1, 1, 0})
	DMember(bool)                                      bIsCelSkin                                                  OFFSET(get<bool>, {0x20D, 1, 1, 1})
	DMember(bool)                                      bComputeFogPerPixel                                         OFFSET(get<bool>, {0x20D, 1, 1, 2})
	DMember(bool)                                      bOutputTranslucentVelocity                                  OFFSET(get<bool>, {0x20D, 1, 1, 3})
	DMember(bool)                                      bAllowDevelopmentShaderCompile                              OFFSET(get<bool>, {0x20D, 1, 1, 4})
	DMember(bool)                                      bIsMaterialEditorStatsMaterial                              OFFSET(get<bool>, {0x20D, 1, 1, 5})
	CMember(TEnumAsByte<EBlendableLocation>)           BlendableLocation                                           OFFSET(get<T>, {0x20E, 1, 0, 0})
	DMember(bool)                                      BlendableOutputAlpha                                        OFFSET(get<bool>, {0x20F, 1, 1, 0})
	DMember(bool)                                      bIsUseSceneColorFetch                                       OFFSET(get<bool>, {0x20F, 1, 1, 1})
	DMember(uint32_t)                                  PostprocessDetailLevel                                      OFFSET(get<uint32_t>, {0x210, 4, 0, 0})
	DMember(bool)                                      bEnableStencilTest                                          OFFSET(get<bool>, {0x214, 1, 1, 0})
	CMember(TEnumAsByte<EMaterialStencilCompare>)      StencilCompare                                              OFFSET(get<T>, {0x215, 1, 0, 0})
	DMember(char)                                      StencilRefValue                                             OFFSET(get<char>, {0x216, 1, 0, 0})
	CMember(TEnumAsByte<ERefractionMode>)              RefractionMode                                              OFFSET(get<T>, {0x217, 1, 0, 0})
	DMember(int32_t)                                   BlendablePriority                                           OFFSET(get<int32_t>, {0x218, 4, 0, 0})
	DMember(bool)                                      bIsBlendable                                                OFFSET(get<bool>, {0x21C, 1, 1, 0})
	DMember(uint32_t)                                  UsageFlagWarnings                                           OFFSET(get<uint32_t>, {0x220, 4, 0, 0})
	DMember(float)                                     RefractionDepthBias                                         OFFSET(get<float>, {0x224, 4, 0, 0})
	SMember(FGuid)                                     StateId                                                     OFFSET(getStruct<T>, {0x228, 16, 0, 0})
	DMember(float)                                     MaxDisplacement                                             OFFSET(get<float>, {0x238, 4, 0, 0})
	SMember(FMaterialCachedExpressionData)             CachedExpressionData                                        OFFSET(getStruct<T>, {0x270, 552, 0, 0})
};

/// Struct /Script/Engine.MaterialSpriteElement
/// Size: 0x0028 (0x000000 - 0x000028)
class FMaterialSpriteElement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class UMaterialInterface*)                 Material                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UCurveFloat*)                        DistanceToOpacityCurve                                      OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bSizeIsInScreenSpace                                        OFFSET(get<bool>, {0x10, 1, 1, 0})
	DMember(float)                                     BaseSizeX                                                   OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     BaseSizeY                                                   OFFSET(get<float>, {0x18, 4, 0, 0})
	CMember(class UCurveFloat*)                        DistanceToSizeCurve                                         OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Class /Script/Engine.MaterialBillboardComponent
/// Size: 0x0018 (0x000468 - 0x000480)
class UMaterialBillboardComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1152;

public:
	CMember(TArray<FMaterialSpriteElement>)            Elements                                                    OFFSET(get<T>, {0x468, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.MaterialBillboardComponent.SetElements
	// void SetElements(TArray<FMaterialSpriteElement>& NewElements);                                                           // [0x3389e20] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.MaterialBillboardComponent.AddElement
	// void AddElement(class UMaterialInterface* Material, class UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UCurveFloat* DistanceToSizeCurve); // [0x3389c30] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.MaterialExpressionAbs
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionAbs : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionActorPositionWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionActorPositionWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionAdd
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionAdd : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0x6C, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionAdvancedFeatureSwitch
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionAdvancedFeatureSwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FExpressionInput)                          Default                                                     OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          Advanced                                                    OFFSET(getStruct<T>, {0x54, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionAntialiasedTextureMask
/// Size: 0x0008 (0x000080 - 0x000088)
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	DMember(float)                                     Threshold                                                   OFFSET(get<float>, {0x80, 4, 0, 0})
	CMember(TEnumAsByte<ETextureColorChannel>)         Channel                                                     OFFSET(get<T>, {0x84, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionAppendVector
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionAppendVector : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x54, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArccosine
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionArccosine : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArccosineFast
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionArccosineFast : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArcsine
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionArcsine : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArcsineFast
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionArcsineFast : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArctangent
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionArctangent : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArctangent2
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionArctangent2 : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FExpressionInput)                          Y                                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          X                                                           OFFSET(getStruct<T>, {0x54, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArctangent2Fast
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionArctangent2Fast : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FExpressionInput)                          Y                                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          X                                                           OFFSET(getStruct<T>, {0x54, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionArctangentFast
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionArctangentFast : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionAtmosphericFogColor
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          WorldPosition                                               OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionAtmosphericLightColor
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionAtmosphericLightVector
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionBentNormalCustomOutput
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionBlackBody
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionBlackBody : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Temp                                                        OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionBlendMaterialAttributes
/// Size: 0x0048 (0x000040 - 0x000088)
class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FMaterialAttributesInput)                  A                                                           OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FMaterialAttributesInput)                  B                                                           OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	SMember(FExpressionInput)                          Alpha                                                       OFFSET(getStruct<T>, {0x70, 12, 0, 0})
	CMember(TEnumAsByte<EMaterialAttributeBlend>)      PixelAttributeBlendType                                     OFFSET(get<T>, {0x84, 1, 0, 0})
	CMember(TEnumAsByte<EMaterialAttributeBlend>)      VertexAttributeBlendType                                    OFFSET(get<T>, {0x85, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionBreakMaterialAttributes
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FMaterialAttributesInput)                  MaterialAttributes                                          OFFSET(getStruct<T>, {0x40, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionBumpOffset
/// Size: 0x0048 (0x000040 - 0x000088)
class UMaterialExpressionBumpOffset : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FExpressionInput)                          Coordinate                                                  OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          Height                                                      OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FExpressionInput)                          HeightRatioInput                                            OFFSET(getStruct<T>, {0x68, 12, 0, 0})
	DMember(float)                                     HeightRatio                                                 OFFSET(get<float>, {0x7C, 4, 0, 0})
	DMember(float)                                     ReferencePlane                                              OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(uint32_t)                                  ConstCoordinate                                             OFFSET(get<uint32_t>, {0x84, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionCameraPositionWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionCameraPositionWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionCameraVectorWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionCameraVectorWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionCeil
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionCeil : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionParameter
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionParameter : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x48, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionVectorParameter
/// Size: 0x0018 (0x000058 - 0x000070)
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FLinearColor)                              DefaultValue                                                OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	DMember(bool)                                      bUseCustomPrimitiveData                                     OFFSET(get<bool>, {0x68, 1, 0, 0})
	DMember(char)                                      PrimitiveDataIndex                                          OFFSET(get<char>, {0x69, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionChannelMaskParameter
/// Size: 0x0008 (0x000070 - 0x000078)
class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TEnumAsByte<EChannelMaskParameterColor>)   MaskChannel                                                 OFFSET(get<T>, {0x70, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionClamp
/// Size: 0x0048 (0x000040 - 0x000088)
class UMaterialExpressionClamp : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          Min                                                         OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FExpressionInput)                          Max                                                         OFFSET(getStruct<T>, {0x68, 12, 0, 0})
	CMember(TEnumAsByte<EClampMode>)                   ClampMode                                                   OFFSET(get<T>, {0x7C, 1, 0, 0})
	DMember(float)                                     MinDefault                                                  OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(float)                                     MaxDefault                                                  OFFSET(get<float>, {0x84, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionClearCoatNormalCustomOutput
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionCloudSampleAttribute
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionCloudSampleAttribute : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionCollectionParameter
/// Size: 0x0020 (0x000040 - 0x000060)
class UMaterialExpressionCollectionParameter : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UMaterialParameterCollection*)       Collection                                                  OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	SMember(FGuid)                                     ParameterId                                                 OFFSET(getStruct<T>, {0x50, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionComment
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionComment : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(int32_t)                                   SizeX                                                       OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   SizeY                                                       OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	SMember(FString)                                   Text                                                        OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FLinearColor)                              CommentColor                                                OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	DMember(int32_t)                                   FontSize                                                    OFFSET(get<int32_t>, {0x68, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionComponentMask
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionComponentMask : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	DMember(bool)                                      R                                                           OFFSET(get<bool>, {0x54, 1, 1, 0})
	DMember(bool)                                      G                                                           OFFSET(get<bool>, {0x54, 1, 1, 1})
	DMember(bool)                                      B                                                           OFFSET(get<bool>, {0x54, 1, 1, 2})
	DMember(bool)                                      A                                                           OFFSET(get<bool>, {0x54, 1, 1, 3})
};

/// Class /Script/Engine.MaterialExpressionConstant
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionConstant : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     R                                                           OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionConstant2Vector
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     R                                                           OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     G                                                           OFFSET(get<float>, {0x44, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionConstant3Vector
/// Size: 0x0010 (0x000040 - 0x000050)
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FLinearColor)                              Constant                                                    OFFSET(getStruct<T>, {0x40, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionConstant4Vector
/// Size: 0x0010 (0x000040 - 0x000050)
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FLinearColor)                              Constant                                                    OFFSET(getStruct<T>, {0x40, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionConstantBiasScale
/// Size: 0x0020 (0x000040 - 0x000060)
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	DMember(float)                                     Bias                                                        OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0x58, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionCosine
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionCosine : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	DMember(float)                                     Period                                                      OFFSET(get<float>, {0x54, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionCrossProduct
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionCrossProduct : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x54, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionScalarParameter
/// Size: 0x0008 (0x000058 - 0x000060)
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(float)                                     DefaultValue                                                OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(bool)                                      bUseCustomPrimitiveData                                     OFFSET(get<bool>, {0x5C, 1, 0, 0})
	DMember(char)                                      PrimitiveDataIndex                                          OFFSET(get<char>, {0x5D, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionCurveAtlasRowParameter
/// Size: 0x0028 (0x000060 - 0x000088)
class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(class UCurveLinearColor*)                  Curve                                                       OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(class UCurveLinearColorAtlas*)             Atlas                                                       OFFSET(get<T>, {0x68, 8, 0, 0})
	SMember(FExpressionInput)                          InputTime                                                   OFFSET(getStruct<T>, {0x70, 12, 0, 0})
};

/// Struct /Script/Engine.CustomInput
/// Size: 0x001C (0x000000 - 0x00001C)
class FCustomInput : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FName)                                     InputName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x8, 12, 0, 0})
};

/// Struct /Script/Engine.CustomOutput
/// Size: 0x000C (0x000000 - 0x00000C)
class FCustomOutput : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     OutputName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<ECustomMaterialOutputType>)    OutputType                                                  OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/Engine.CustomDefine
/// Size: 0x0020 (0x000000 - 0x000020)
class FCustomDefine : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   DefineName                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   DefineValue                                                 OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionCustom
/// Size: 0x0068 (0x000040 - 0x0000A8)
class UMaterialExpressionCustom : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FString)                                   Code                                                        OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(TEnumAsByte<ECustomMaterialOutputType>)    OutputType                                                  OFFSET(get<T>, {0x50, 1, 0, 0})
	SMember(FString)                                   Description                                                 OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	CMember(TArray<FCustomInput>)                      Inputs                                                      OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<FCustomOutput>)                     AdditionalOutputs                                           OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TArray<FCustomDefine>)                     AdditionalDefines                                           OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(TArray<FString>)                           IncludeFilePaths                                            OFFSET(get<T>, {0x98, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDDX
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionDDX : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Value                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDDY
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionDDY : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Value                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDecalDerivative
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionDecalDerivative : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionDecalLifetimeOpacity
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionDecalMipmapLevel
/// Size: 0x0020 (0x000040 - 0x000060)
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FExpressionInput)                          TextureSize                                                 OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	DMember(float)                                     ConstWidth                                                  OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     ConstHeight                                                 OFFSET(get<float>, {0x58, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDeltaTime
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionDeltaTime : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionDepthFade
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionDepthFade : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          InOpacity                                                   OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          FadeDistance                                                OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	DMember(float)                                     OpacityDefault                                              OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     FadeDistanceDefault                                         OFFSET(get<float>, {0x6C, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDepthOfFieldFunction
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TEnumAsByte<EDepthOfFieldFunctionValue>)   FunctionValue                                               OFFSET(get<T>, {0x40, 1, 0, 0})
	SMember(FExpressionInput)                          Depth                                                       OFFSET(getStruct<T>, {0x44, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDeriveNormalZ
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          InXY                                                        OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDesaturation
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionDesaturation : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          Fraction                                                    OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FLinearColor)                              LuminanceFactors                                            OFFSET(getStruct<T>, {0x68, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDistance
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionDistance : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x54, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDistanceCullFade
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionDistanceCullFade : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionDistanceFieldGradient
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Position                                                    OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDistanceToNearestSurface
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Position                                                    OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDivide
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionDivide : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0x6C, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDotProduct
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionDotProduct : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x54, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionDynamicParameter
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<FString>)                           ParamNames                                                  OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FLinearColor)                              DefaultValue                                                OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	DMember(uint32_t)                                  ParameterIndex                                              OFFSET(get<uint32_t>, {0x60, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionEdenCustomMaterialOutput
/// Size: 0x00A0 (0x000040 - 0x0000E0)
class UMaterialExpressionEdenCustomMaterialOutput : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FExpressionInput)                          EdenCustomInput0                                            OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          EdenCustomInput1                                            OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FExpressionInput)                          EdenCustomInput2                                            OFFSET(getStruct<T>, {0x68, 12, 0, 0})
	SMember(FExpressionInput)                          EdenCustomInput3                                            OFFSET(getStruct<T>, {0x7C, 12, 0, 0})
	SMember(FExpressionInput)                          EdenCustomInput4                                            OFFSET(getStruct<T>, {0x90, 12, 0, 0})
	SMember(FExpressionInput)                          EdenCustomInput5                                            OFFSET(getStruct<T>, {0xA4, 12, 0, 0})
	SMember(FExpressionInput)                          EdenCustomInput6                                            OFFSET(getStruct<T>, {0xB8, 12, 0, 0})
	SMember(FExpressionInput)                          EdenCustomInput7                                            OFFSET(getStruct<T>, {0xCC, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionEyeAdaptation
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionEyeAdaptation : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionFeatureLevelSwitch
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Default                                                     OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionFloor
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionFloor : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionFmod
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionFmod : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x54, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionFontSample
/// Size: 0x0010 (0x000040 - 0x000050)
class UMaterialExpressionFontSample : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UFont*)                              Font                                                        OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(int32_t)                                   FontTexturePage                                             OFFSET(get<int32_t>, {0x48, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionFontSampleParameter
/// Size: 0x0020 (0x000050 - 0x000070)
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	SMember(FName)                                     Group                                                       OFFSET(getStruct<T>, {0x68, 8, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionFrac
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionFrac : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionFresnel
/// Size: 0x0048 (0x000040 - 0x000088)
class UMaterialExpressionFresnel : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FExpressionInput)                          ExponentIn                                                  OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	DMember(float)                                     Exponent                                                    OFFSET(get<float>, {0x54, 4, 0, 0})
	SMember(FExpressionInput)                          BaseReflectFractionIn                                       OFFSET(getStruct<T>, {0x58, 12, 0, 0})
	DMember(float)                                     BaseReflectFraction                                         OFFSET(get<float>, {0x6C, 4, 0, 0})
	SMember(FExpressionInput)                          Normal                                                      OFFSET(getStruct<T>, {0x70, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionFunctionInput
/// Size: 0x0080 (0x000040 - 0x0000C0)
class UMaterialExpressionFunctionInput : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FExpressionInput)                          Preview                                                     OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FName)                                     InputName                                                   OFFSET(getStruct<T>, {0x54, 8, 0, 0})
	SMember(FString)                                   Description                                                 OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	SMember(FGuid)                                     ID                                                          OFFSET(getStruct<T>, {0x70, 16, 0, 0})
	CMember(TEnumAsByte<EFunctionInputType>)           InputType                                                   OFFSET(get<T>, {0x80, 1, 0, 0})
	SMember(FVector4)                                  PreviewValue                                                OFFSET(getStruct<T>, {0x90, 16, 0, 0})
	DMember(bool)                                      bUsePreviewValueAsDefault                                   OFFSET(get<bool>, {0xA0, 1, 1, 0})
	DMember(int32_t)                                   SortPriority                                                OFFSET(get<int32_t>, {0xA4, 4, 0, 0})
	DMember(bool)                                      bCompilingFunctionPreview                                   OFFSET(get<bool>, {0xA8, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionFunctionOutput
/// Size: 0x0048 (0x000040 - 0x000088)
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FName)                                     OutputName                                                  OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FString)                                   Description                                                 OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	DMember(int32_t)                                   SortPriority                                                OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x5C, 12, 0, 0})
	DMember(bool)                                      bLastPreviewed                                              OFFSET(get<bool>, {0x70, 1, 1, 0})
	SMember(FGuid)                                     ID                                                          OFFSET(getStruct<T>, {0x74, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionGetMaterialAttributes
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FMaterialAttributesInput)                  MaterialAttributes                                          OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(TArray<FGuid>)                             AttributeGetTypes                                           OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionGIReplace
/// Size: 0x0040 (0x000040 - 0x000080)
class UMaterialExpressionGIReplace : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FExpressionInput)                          Default                                                     OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          StaticIndirect                                              OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FExpressionInput)                          DynamicIndirect                                             OFFSET(getStruct<T>, {0x68, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionHairAttributes
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionHairAttributes : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bUseTangentSpace                                            OFFSET(get<bool>, {0x40, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionHairColor
/// Size: 0x0040 (0x000040 - 0x000080)
class UMaterialExpressionHairColor : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FExpressionInput)                          Melanin                                                     OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          Redness                                                     OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FExpressionInput)                          DyeColor                                                    OFFSET(getStruct<T>, {0x68, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionIf
/// Size: 0x0070 (0x000040 - 0x0000B0)
class UMaterialExpressionIf : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FExpressionInput)                          AGreaterThanB                                               OFFSET(getStruct<T>, {0x68, 12, 0, 0})
	SMember(FExpressionInput)                          AEqualsB                                                    OFFSET(getStruct<T>, {0x7C, 12, 0, 0})
	SMember(FExpressionInput)                          ALessThanB                                                  OFFSET(getStruct<T>, {0x90, 12, 0, 0})
	DMember(float)                                     EqualsThreshold                                             OFFSET(get<float>, {0xA4, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0xA8, 4, 0, 0})
	DMember(float)                                     ConstAEqualsB                                               OFFSET(get<float>, {0xAC, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionInverseLinearInterpolate
/// Size: 0x0050 (0x000040 - 0x000090)
class UMaterialExpressionInverseLinearInterpolate : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FExpressionInput)                          Value                                                       OFFSET(getStruct<T>, {0x68, 12, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0x7C, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(float)                                     ConstValue                                                  OFFSET(get<float>, {0x84, 4, 0, 0})
	DMember(bool)                                      bClampResult                                                OFFSET(get<bool>, {0x88, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionLightmapUVs
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionLightmassReplace
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FExpressionInput)                          Realtime                                                    OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          Lightmass                                                   OFFSET(getStruct<T>, {0x54, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionLightVector
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionLightVector : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionLinearInterpolate
/// Size: 0x0048 (0x000040 - 0x000088)
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FExpressionInput)                          Alpha                                                       OFFSET(getStruct<T>, {0x68, 12, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0x7C, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(float)                                     ConstAlpha                                                  OFFSET(get<float>, {0x84, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionLogarithm10
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionLogarithm10 : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          X                                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionLogarithm2
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionLogarithm2 : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          X                                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMakeMaterialAttributes
/// Size: 0x0230 (0x000040 - 0x000270)
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	SMember(FExpressionInput)                          BaseColor                                                   OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          Metallic                                                    OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FExpressionInput)                          Specular                                                    OFFSET(getStruct<T>, {0x68, 12, 0, 0})
	SMember(FExpressionInput)                          Roughness                                                   OFFSET(getStruct<T>, {0x7C, 12, 0, 0})
	SMember(FExpressionInput)                          Anisotropy                                                  OFFSET(getStruct<T>, {0x90, 12, 0, 0})
	SMember(FExpressionInput)                          EmissiveColor                                               OFFSET(getStruct<T>, {0xA4, 12, 0, 0})
	SMember(FExpressionInput)                          Opacity                                                     OFFSET(getStruct<T>, {0xB8, 12, 0, 0})
	SMember(FExpressionInput)                          OpacityMask                                                 OFFSET(getStruct<T>, {0xCC, 12, 0, 0})
	SMember(FExpressionInput)                          Normal                                                      OFFSET(getStruct<T>, {0xE0, 12, 0, 0})
	SMember(FExpressionInput)                          Tangent                                                     OFFSET(getStruct<T>, {0xF4, 12, 0, 0})
	SMember(FExpressionInput)                          WorldPositionOffset                                         OFFSET(getStruct<T>, {0x108, 12, 0, 0})
	SMember(FExpressionInput)                          WorldDisplacement                                           OFFSET(getStruct<T>, {0x11C, 12, 0, 0})
	SMember(FExpressionInput)                          TessellationMultiplier                                      OFFSET(getStruct<T>, {0x130, 12, 0, 0})
	SMember(FExpressionInput)                          SubsurfaceColor                                             OFFSET(getStruct<T>, {0x144, 12, 0, 0})
	SMember(FExpressionInput)                          ClearCoat                                                   OFFSET(getStruct<T>, {0x158, 12, 0, 0})
	SMember(FExpressionInput)                          ClearCoatRoughness                                          OFFSET(getStruct<T>, {0x16C, 12, 0, 0})
	SMember(FExpressionInput)                          AmbientOcclusion                                            OFFSET(getStruct<T>, {0x180, 12, 0, 0})
	SMember(FExpressionInput)                          Refraction                                                  OFFSET(getStruct<T>, {0x194, 12, 0, 0})
	SMember(FExpressionInput)                          CustomizedUVs                                               OFFSET(getStruct<T>, {0x1A8, 96, 0, 0})
	SMember(FExpressionInput)                          PixelDepthOffset                                            OFFSET(getStruct<T>, {0x248, 12, 0, 0})
	SMember(FExpressionInput)                          ShadingModel                                                OFFSET(getStruct<T>, {0x25C, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMapARPassthroughCameraUV
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Coordinates                                                 OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMaterialAttributeLayers
/// Size: 0x00A8 (0x000040 - 0x0000E8)
class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FMaterialAttributesInput)                  Input                                                       OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	SMember(FMaterialLayersFunctions)                  DefaultLayers                                               OFFSET(getStruct<T>, {0x70, 64, 0, 0})
	CMember(TArray<class UMaterialExpressionMaterialFunctionCall*>) LayerCallers                                   OFFSET(get<T>, {0xB0, 16, 0, 0})
	DMember(int32_t)                                   NumActiveLayerCallers                                       OFFSET(get<int32_t>, {0xC0, 4, 0, 0})
	CMember(TArray<class UMaterialExpressionMaterialFunctionCall*>) BlendCallers                                   OFFSET(get<T>, {0xC8, 16, 0, 0})
	DMember(int32_t)                                   NumActiveBlendCallers                                       OFFSET(get<int32_t>, {0xD8, 4, 0, 0})
	DMember(bool)                                      bIsLayerGraphBuilt                                          OFFSET(get<bool>, {0xDC, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMaterialFunctionCall
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class UMaterialFunctionInterface*)         MaterialFunction                                            OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FMaterialParameterInfo)                    FunctionParameterInfo                                       OFFSET(getStruct<T>, {0x48, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMaterialLayerOutput
/// Size: 0x0000 (0x000088 - 0x000088)
class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
};

/// Class /Script/Engine.MaterialExpressionMaterialProxyReplace
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FExpressionInput)                          Realtime                                                    OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          MaterialProxy                                               OFFSET(getStruct<T>, {0x54, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMax
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionMax : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0x6C, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMin
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionMin : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0x6C, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionMultiply
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionMultiply : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0x6C, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionNoise
/// Size: 0x0050 (0x000040 - 0x000090)
class UMaterialExpressionNoise : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FExpressionInput)                          Position                                                    OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          FilterWidth                                                 OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(int32_t)                                   Quality                                                     OFFSET(get<int32_t>, {0x6C, 4, 0, 0})
	CMember(TEnumAsByte<ENoiseFunction>)               NoiseFunction                                               OFFSET(get<T>, {0x70, 1, 0, 0})
	DMember(bool)                                      bTurbulence                                                 OFFSET(get<bool>, {0x74, 1, 1, 0})
	DMember(int32_t)                                   Levels                                                      OFFSET(get<int32_t>, {0x78, 4, 0, 0})
	DMember(float)                                     OutputMin                                                   OFFSET(get<float>, {0x7C, 4, 0, 0})
	DMember(float)                                     OutputMax                                                   OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(float)                                     LevelScale                                                  OFFSET(get<float>, {0x84, 4, 0, 0})
	DMember(bool)                                      bTiling                                                     OFFSET(get<bool>, {0x88, 1, 1, 0})
	DMember(uint32_t)                                  RepeatSize                                                  OFFSET(get<uint32_t>, {0x8C, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionNormalize
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionNormalize : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          VectorInput                                                 OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionObjectBounds
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionObjectBounds : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionObjectOrientation
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionObjectPositionWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionObjectPositionWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionObjectRadius
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionObjectRadius : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionOneMinus
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionOneMinus : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionPanner
/// Size: 0x0050 (0x000040 - 0x000090)
class UMaterialExpressionPanner : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FExpressionInput)                          Coordinate                                                  OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          Time                                                        OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FExpressionInput)                          Speed                                                       OFFSET(getStruct<T>, {0x68, 12, 0, 0})
	DMember(float)                                     SpeedX                                                      OFFSET(get<float>, {0x7C, 4, 0, 0})
	DMember(float)                                     SpeedY                                                      OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(uint32_t)                                  ConstCoordinate                                             OFFSET(get<uint32_t>, {0x84, 4, 0, 0})
	DMember(bool)                                      bFractionalPart                                             OFFSET(get<bool>, {0x88, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionParticleColor
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleColor : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleDirection
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleDirection : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleMacroUV
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleMotionBlurFade
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionParticlePositionWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticlePositionWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleRadius
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleRadius : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleRandom
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleRandom : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleRelativeTime
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleSize
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleSize : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleSpeed
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleSpeed : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionParticleSubUV
/// Size: 0x0008 (0x000060 - 0x000068)
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	DMember(bool)                                      bBlend                                                      OFFSET(get<bool>, {0x60, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionParticleSubUVProperties
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionPerInstanceCustomData
/// Size: 0x0020 (0x000040 - 0x000060)
class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FExpressionInput)                          DefaultValue                                                OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	DMember(float)                                     ConstDefaultValue                                           OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(uint32_t)                                  DataIndex                                                   OFFSET(get<uint32_t>, {0x58, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionPerInstanceFadeAmount
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionPerInstanceRandom
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionPixelDepth
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPixelDepth : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionPixelNormalWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPixelNormalWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionPower
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionPower : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Base                                                        OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          Exponent                                                    OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	DMember(float)                                     ConstExponent                                               OFFSET(get<float>, {0x68, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionPrecomputedAOMask
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionPreSkinnedLocalBounds
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionPreSkinnedNormal
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionPreSkinnedPosition
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionPreSkinnedTangent
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionPreSkinnedTangent : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionPreviousFrameSwitch
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FExpressionInput)                          CurrentFrame                                                OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          PreviousFrame                                               OFFSET(getStruct<T>, {0x54, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionQualitySwitch
/// Size: 0x0090 (0x000040 - 0x0000D0)
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FExpressionInput)                          Default                                                     OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          Inputs                                                      OFFSET(getStruct<T>, {0x54, 72, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionRayTracingQualitySwitch
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FExpressionInput)                          Normal                                                      OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          RayTraced                                                   OFFSET(getStruct<T>, {0x54, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionReflectionCapturePassSwitch
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionReflectionCapturePassSwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FExpressionInput)                          Default                                                     OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          Reflection                                                  OFFSET(getStruct<T>, {0x54, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionReflectionVectorWS
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          CustomWorldNormal                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	DMember(bool)                                      bNormalizeCustomWorldNormal                                 OFFSET(get<bool>, {0x54, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionReroute
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionReroute : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionRotateAboutAxis
/// Size: 0x0058 (0x000040 - 0x000098)
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FExpressionInput)                          NormalizedRotationAxis                                      OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          RotationAngle                                               OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FExpressionInput)                          PivotPoint                                                  OFFSET(getStruct<T>, {0x68, 12, 0, 0})
	SMember(FExpressionInput)                          Position                                                    OFFSET(getStruct<T>, {0x7C, 12, 0, 0})
	DMember(float)                                     Period                                                      OFFSET(get<float>, {0x90, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionRotator
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionRotator : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FExpressionInput)                          Coordinate                                                  OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          Time                                                        OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	DMember(float)                                     CenterX                                                     OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     CenterY                                                     OFFSET(get<float>, {0x6C, 4, 0, 0})
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x70, 4, 0, 0})
	DMember(uint32_t)                                  ConstCoordinate                                             OFFSET(get<uint32_t>, {0x74, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionRound
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionRound : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureOutput
/// Size: 0x0090 (0x000040 - 0x0000D0)
class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FExpressionInput)                          BaseColor                                                   OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          Specular                                                    OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FExpressionInput)                          Roughness                                                   OFFSET(getStruct<T>, {0x68, 12, 0, 0})
	SMember(FExpressionInput)                          Normal                                                      OFFSET(getStruct<T>, {0x7C, 12, 0, 0})
	SMember(FExpressionInput)                          WorldHeight                                                 OFFSET(getStruct<T>, {0x90, 12, 0, 0})
	SMember(FExpressionInput)                          Opacity                                                     OFFSET(getStruct<T>, {0xA4, 12, 0, 0})
	SMember(FExpressionInput)                          Mask                                                        OFFSET(getStruct<T>, {0xB8, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureReplace
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FExpressionInput)                          Default                                                     OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          VirtualTextureOutput                                        OFFSET(getStruct<T>, {0x54, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureSample
/// Size: 0x0050 (0x000040 - 0x000090)
class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FExpressionInput)                          Coordinates                                                 OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          WorldPosition                                               OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FExpressionInput)                          MipValue                                                    OFFSET(getStruct<T>, {0x68, 12, 0, 0})
	CMember(class URuntimeVirtualTexture*)             VirtualTexture                                              OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(ERuntimeVirtualTextureMaterialType)        MaterialType                                                OFFSET(get<T>, {0x88, 1, 0, 0})
	DMember(bool)                                      bSinglePhysicalSpace                                        OFFSET(get<bool>, {0x89, 1, 0, 0})
	DMember(bool)                                      bAdaptive                                                   OFFSET(get<bool>, {0x8A, 1, 0, 0})
	CMember(TEnumAsByte<ERuntimeVirtualTextureMipValueMode>) MipValueMode                                          OFFSET(get<T>, {0x8B, 1, 0, 0})
	CMember(TEnumAsByte<ERuntimeVirtualTextureTextureAddressMode>) TextureAddressMode                              OFFSET(get<T>, {0x8C, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
/// Size: 0x0020 (0x000090 - 0x0000B0)
class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	SMember(FGuid)                                     ExpressionGUID                                              OFFSET(getStruct<T>, {0x98, 16, 0, 0})
	SMember(FName)                                     Group                                                       OFFSET(getStruct<T>, {0xA8, 8, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSaturate
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionSaturate : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSceneColor
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionSceneColor : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TEnumAsByte<EMaterialSceneAttributeInputMode>) InputMode                                               OFFSET(get<T>, {0x40, 1, 0, 0})
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x44, 12, 0, 0})
	SMember(FExpressionInput)                          OffsetFraction                                              OFFSET(getStruct<T>, {0x58, 12, 0, 0})
	SMember(FVector2D)                                 ConstInput                                                  OFFSET(getStruct<T>, {0x6C, 8, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSceneDepth
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionSceneDepth : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TEnumAsByte<EMaterialSceneAttributeInputMode>) InputMode                                               OFFSET(get<T>, {0x40, 1, 0, 0})
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x44, 12, 0, 0})
	SMember(FExpressionInput)                          Coordinates                                                 OFFSET(getStruct<T>, {0x58, 12, 0, 0})
	SMember(FVector2D)                                 ConstInput                                                  OFFSET(getStruct<T>, {0x6C, 8, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSceneDepthWithoutWater
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionSceneDepthWithoutWater : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TEnumAsByte<EMaterialSceneAttributeInputMode>) InputMode                                               OFFSET(get<T>, {0x40, 1, 0, 0})
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x44, 12, 0, 0})
	SMember(FVector2D)                                 ConstInput                                                  OFFSET(getStruct<T>, {0x58, 8, 0, 0})
	DMember(float)                                     FallbackDepth                                               OFFSET(get<float>, {0x60, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSceneTexelSize
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionSceneTexelSize : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionSceneTexture
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionSceneTexture : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Coordinates                                                 OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	CMember(TEnumAsByte<ESceneTextureId>)              SceneTextureId                                              OFFSET(get<T>, {0x54, 1, 0, 0})
	DMember(bool)                                      bFiltered                                                   OFFSET(get<bool>, {0x55, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionScreenPosition
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionScreenPosition : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionSetMaterialAttributes
/// Size: 0x0020 (0x000040 - 0x000060)
class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TArray<FExpressionInput>)                  Inputs                                                      OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FGuid>)                             AttributeSetTypes                                           OFFSET(get<T>, {0x50, 16, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionShaderStageSwitch
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionShaderStageSwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FExpressionInput)                          PixelShader                                                 OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          VertexShader                                                OFFSET(getStruct<T>, {0x54, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionShadingModel
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionShadingModel : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TEnumAsByte<EMaterialShadingModel>)        ShadingModel                                                OFFSET(get<T>, {0x40, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionShadingPathSwitch
/// Size: 0x0050 (0x000040 - 0x000090)
class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FExpressionInput)                          Default                                                     OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          Inputs                                                      OFFSET(getStruct<T>, {0x54, 36, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionShadowReplace
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionShadowReplace : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FExpressionInput)                          Default                                                     OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          Shadow                                                      OFFSET(getStruct<T>, {0x54, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSign
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionSign : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSine
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionSine : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	DMember(float)                                     Period                                                      OFFSET(get<float>, {0x54, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSingleLayerWaterMaterialOutput
/// Size: 0x0050 (0x000040 - 0x000090)
class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FExpressionInput)                          ScatteringCoefficients                                      OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          AbsorptionCoefficients                                      OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FExpressionInput)                          PhaseG                                                      OFFSET(getStruct<T>, {0x68, 12, 0, 0})
	SMember(FExpressionInput)                          ColorScaleBehindWater                                       OFFSET(getStruct<T>, {0x7C, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSkinningVertexOffsets
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionSkinningVertexOffsets : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereLightDirection
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(int32_t)                                   LightIndex                                                  OFFSET(get<int32_t>, {0x40, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereLightIlluminance
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(int32_t)                                   LightIndex                                                  OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	SMember(FExpressionInput)                          WorldPosition                                               OFFSET(getStruct<T>, {0x44, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(int32_t)                                   LightIndex                                                  OFFSET(get<int32_t>, {0x40, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereAerialPerspective
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          WorldPosition                                               OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereViewLuminance
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionSmoothStep
/// Size: 0x0048 (0x000040 - 0x000088)
class UMaterialExpressionSmoothStep : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FExpressionInput)                          Min                                                         OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          Max                                                         OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FExpressionInput)                          Value                                                       OFFSET(getStruct<T>, {0x68, 12, 0, 0})
	DMember(float)                                     ConstMin                                                    OFFSET(get<float>, {0x7C, 4, 0, 0})
	DMember(float)                                     ConstMax                                                    OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(float)                                     ConstValue                                                  OFFSET(get<float>, {0x84, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSobol
/// Size: 0x0048 (0x000040 - 0x000088)
class UMaterialExpressionSobol : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FExpressionInput)                          Cell                                                        OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          Index                                                       OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FExpressionInput)                          Seed                                                        OFFSET(getStruct<T>, {0x68, 12, 0, 0})
	DMember(uint32_t)                                  ConstIndex                                                  OFFSET(get<uint32_t>, {0x7C, 4, 0, 0})
	SMember(FVector2D)                                 ConstSeed                                                   OFFSET(getStruct<T>, {0x80, 8, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSpeedTree
/// Size: 0x0060 (0x000040 - 0x0000A0)
class UMaterialExpressionSpeedTree : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FExpressionInput)                          GeometryInput                                               OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          WindInput                                                   OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FExpressionInput)                          LODInput                                                    OFFSET(getStruct<T>, {0x68, 12, 0, 0})
	SMember(FExpressionInput)                          ExtraBendWS                                                 OFFSET(getStruct<T>, {0x7C, 12, 0, 0})
	CMember(TEnumAsByte<ESpeedTreeGeometryType>)       GeometryType                                                OFFSET(get<T>, {0x90, 1, 0, 0})
	CMember(TEnumAsByte<ESpeedTreeWindType>)           WindType                                                    OFFSET(get<T>, {0x91, 1, 0, 0})
	CMember(TEnumAsByte<ESpeedTreeLODType>)            LODType                                                     OFFSET(get<T>, {0x92, 1, 0, 0})
	DMember(float)                                     BillboardThreshold                                          OFFSET(get<float>, {0x94, 4, 0, 0})
	DMember(bool)                                      bAccurateWindVelocities                                     OFFSET(get<bool>, {0x98, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSphereMask
/// Size: 0x0058 (0x000040 - 0x000098)
class UMaterialExpressionSphereMask : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FExpressionInput)                          Radius                                                      OFFSET(getStruct<T>, {0x68, 12, 0, 0})
	SMember(FExpressionInput)                          Hardness                                                    OFFSET(getStruct<T>, {0x7C, 12, 0, 0})
	DMember(float)                                     AttenuationRadius                                           OFFSET(get<float>, {0x90, 4, 0, 0})
	DMember(float)                                     HardnessPercent                                             OFFSET(get<float>, {0x94, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSphericalParticleOpacity
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Density                                                     OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	DMember(float)                                     ConstantDensity                                             OFFSET(get<float>, {0x54, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSquareRoot
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionSquareRoot : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStaticBool
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionStaticBool : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      Value                                                       OFFSET(get<bool>, {0x40, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionStaticBoolParameter
/// Size: 0x0008 (0x000058 - 0x000060)
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      DefaultValue                                                OFFSET(get<bool>, {0x58, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionStaticComponentMaskParameter
/// Size: 0x0008 (0x000058 - 0x000060)
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      DefaultR                                                    OFFSET(get<bool>, {0x58, 1, 1, 0})
	DMember(bool)                                      DefaultG                                                    OFFSET(get<bool>, {0x58, 1, 1, 1})
	DMember(bool)                                      DefaultB                                                    OFFSET(get<bool>, {0x58, 1, 1, 2})
	DMember(bool)                                      DefaultA                                                    OFFSET(get<bool>, {0x58, 1, 1, 3})
};

/// Class /Script/Engine.MaterialExpressionStaticSwitch
/// Size: 0x0040 (0x000040 - 0x000080)
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	DMember(bool)                                      DefaultValue                                                OFFSET(get<bool>, {0x40, 1, 1, 0})
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x44, 12, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x58, 12, 0, 0})
	SMember(FExpressionInput)                          Value                                                       OFFSET(getStruct<T>, {0x6C, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionStaticSwitchParameter
/// Size: 0x0000 (0x000060 - 0x000060)
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Class /Script/Engine.MaterialExpressionStep
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionStep : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          Y                                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          X                                                           OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	DMember(float)                                     ConstY                                                      OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     ConstX                                                      OFFSET(get<float>, {0x6C, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionSubtract
/// Size: 0x0030 (0x000040 - 0x000070)
class UMaterialExpressionSubtract : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FExpressionInput)                          A                                                           OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          B                                                           OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	DMember(float)                                     ConstA                                                      OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     ConstB                                                      OFFSET(get<float>, {0x6C, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTangent
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionTangent : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	DMember(float)                                     Period                                                      OFFSET(get<float>, {0x54, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTangentOutput
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTemporalSobol
/// Size: 0x0038 (0x000040 - 0x000078)
class UMaterialExpressionTemporalSobol : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FExpressionInput)                          Index                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          Seed                                                        OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	DMember(uint32_t)                                  ConstIndex                                                  OFFSET(get<uint32_t>, {0x68, 4, 0, 0})
	SMember(FVector2D)                                 ConstSeed                                                   OFFSET(getStruct<T>, {0x6C, 8, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTextureCoordinate
/// Size: 0x0010 (0x000040 - 0x000050)
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(int32_t)                                   CoordinateIndex                                             OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(float)                                     UTiling                                                     OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     VTiling                                                     OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(bool)                                      UnMirrorU                                                   OFFSET(get<bool>, {0x4C, 1, 1, 0})
	DMember(bool)                                      UnMirrorV                                                   OFFSET(get<bool>, {0x4C, 1, 1, 1})
};

/// Class /Script/Engine.MaterialExpressionTextureObject
/// Size: 0x0000 (0x000048 - 0x000048)
class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/Engine.MaterialExpressionTextureObjectParameter
/// Size: 0x0000 (0x000080 - 0x000080)
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Engine.MaterialExpressionTextureProperty
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionTextureProperty : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          TextureObject                                               OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	CMember(TEnumAsByte<EMaterialExposedTextureProperty>) Property                                                 OFFSET(get<T>, {0x54, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameter2DArray
/// Size: 0x0000 (0x000080 - 0x000080)
class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameterCube
/// Size: 0x0000 (0x000080 - 0x000080)
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameterSubUV
/// Size: 0x0008 (0x000080 - 0x000088)
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	DMember(bool)                                      bBlend                                                      OFFSET(get<bool>, {0x80, 1, 1, 0})
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameterVolume
/// Size: 0x0000 (0x000080 - 0x000080)
class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Engine.MaterialExpressionThinTranslucentMaterialOutput
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          TransmittanceColor                                          OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTime
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionTime : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bIgnorePause                                                OFFSET(get<bool>, {0x40, 1, 1, 0})
	DMember(bool)                                      bOverride_Period                                            OFFSET(get<bool>, {0x40, 1, 1, 1})
	DMember(float)                                     Period                                                      OFFSET(get<float>, {0x44, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTransform
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionTransform : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	CMember(TEnumAsByte<EMaterialVectorCoordTransformSource>) TransformSourceType                                  OFFSET(get<T>, {0x54, 1, 0, 0})
	CMember(TEnumAsByte<EMaterialVectorCoordTransform>) TransformType                                              OFFSET(get<T>, {0x55, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTransformPosition
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionTransformPosition : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	CMember(TEnumAsByte<EMaterialPositionTransformSource>) TransformSourceType                                     OFFSET(get<T>, {0x54, 1, 0, 0})
	CMember(TEnumAsByte<EMaterialPositionTransformSource>) TransformType                                           OFFSET(get<T>, {0x55, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTruncate
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialExpressionTruncate : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionTwoSidedSign
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionVectorNoise
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionVectorNoise : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FExpressionInput)                          Position                                                    OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	CMember(TEnumAsByte<EVectorNoiseFunction>)         NoiseFunction                                               OFFSET(get<T>, {0x54, 1, 0, 0})
	DMember(int32_t)                                   Quality                                                     OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	DMember(bool)                                      bTiling                                                     OFFSET(get<bool>, {0x5C, 1, 1, 0})
	DMember(uint32_t)                                  TileSize                                                    OFFSET(get<uint32_t>, {0x60, 4, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionVertexColor
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionVertexColor : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionVertexInterpolator
/// Size: 0x0020 (0x000040 - 0x000060)
class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionVertexNormalWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionVertexNormalWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionVertexTangentWS
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionVertexTangentWS : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionViewProperty
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionViewProperty : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TEnumAsByte<EMaterialExposedViewProperty>) Property                                                    OFFSET(get<T>, {0x40, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionViewSize
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionViewSize : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionVirtualTextureFeatureSwitch
/// Size: 0x0028 (0x000040 - 0x000068)
class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FExpressionInput)                          No                                                          OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          Yes                                                         OFFSET(getStruct<T>, {0x54, 12, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionVolumetricAdvancedMaterialInput
/// Size: 0x0000 (0x000040 - 0x000040)
class UMaterialExpressionVolumetricAdvancedMaterialInput : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Engine.MaterialExpressionVolumetricAdvancedMaterialOutput
/// Size: 0x00B0 (0x000040 - 0x0000F0)
class UMaterialExpressionVolumetricAdvancedMaterialOutput : public UMaterialExpressionCustomOutput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FExpressionInput)                          PhaseG                                                      OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FExpressionInput)                          PhaseG2                                                     OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FExpressionInput)                          PhaseBlend                                                  OFFSET(getStruct<T>, {0x68, 12, 0, 0})
	SMember(FExpressionInput)                          MultiScatteringContribution                                 OFFSET(getStruct<T>, {0x7C, 12, 0, 0})
	SMember(FExpressionInput)                          MultiScatteringOcclusion                                    OFFSET(getStruct<T>, {0x90, 12, 0, 0})
	SMember(FExpressionInput)                          MultiScatteringEccentricity                                 OFFSET(getStruct<T>, {0xA4, 12, 0, 0})
	SMember(FExpressionInput)                          ConservativeDensity                                         OFFSET(getStruct<T>, {0xB8, 12, 0, 0})
	DMember(float)                                     ConstPhaseG                                                 OFFSET(get<float>, {0xCC, 4, 0, 0})
	DMember(float)                                     ConstPhaseG2                                                OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(float)                                     ConstPhaseBlend                                             OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(bool)                                      PerSamplePhaseEvaluation                                    OFFSET(get<bool>, {0xD8, 1, 0, 0})
	DMember(uint32_t)                                  MultiScatteringApproximationOctaveCount                     OFFSET(get<uint32_t>, {0xDC, 4, 0, 0})
	DMember(float)                                     ConstMultiScatteringContribution                            OFFSET(get<float>, {0xE0, 4, 0, 0})
	DMember(float)                                     ConstMultiScatteringOcclusion                               OFFSET(get<float>, {0xE4, 4, 0, 0})
	DMember(float)                                     ConstMultiScatteringEccentricity                            OFFSET(get<float>, {0xE8, 4, 0, 0})
	DMember(bool)                                      bGroundContribution                                         OFFSET(get<bool>, {0xEC, 1, 0, 0})
	DMember(bool)                                      bGrayScaleMaterial                                          OFFSET(get<bool>, {0xED, 1, 0, 0})
	DMember(bool)                                      bRayMarchVolumeShadow                                       OFFSET(get<bool>, {0xEE, 1, 0, 0})
};

/// Class /Script/Engine.MaterialExpressionWorldPosition
/// Size: 0x0008 (0x000040 - 0x000048)
class UMaterialExpressionWorldPosition : public UMaterialExpression
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TEnumAsByte<EWorldPositionIncludedOffsets>) WorldPositionShaderOffset                                  OFFSET(get<T>, {0x40, 1, 0, 0})
};

/// Class /Script/Engine.MaterialFunctionInterface
/// Size: 0x0018 (0x000028 - 0x000040)
class UMaterialFunctionInterface : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FGuid)                                     StateId                                                     OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	CMember(EMaterialFunctionUsage)                    MaterialFunctionUsage                                       OFFSET(get<T>, {0x38, 1, 0, 0})
};

/// Class /Script/Engine.MaterialFunction
/// Size: 0x0018 (0x000040 - 0x000058)
class UMaterialFunction : public UMaterialFunctionInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FString)                                   Description                                                 OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	DMember(bool)                                      bExposeToLibrary                                            OFFSET(get<bool>, {0x50, 1, 1, 0})
	DMember(bool)                                      bPrefixParameterNames                                       OFFSET(get<bool>, {0x50, 1, 1, 1})
};

/// Class /Script/Engine.MaterialFunctionInstance
/// Size: 0x0080 (0x000040 - 0x0000C0)
class UMaterialFunctionInstance : public UMaterialFunctionInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(class UMaterialFunctionInterface*)         Parent                                                      OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UMaterialFunctionInterface*)         Base                                                        OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TArray<FScalarParameterValue>)             ScalarParameterValues                                       OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FVectorParameterValue>)             VectorParameterValues                                       OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<FTextureParameterValue>)            TextureParameterValues                                      OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FFontParameterValue>)               FontParameterValues                                         OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<FStaticSwitchParameter>)            StaticSwitchParameterValues                                 OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<FStaticComponentMaskParameter>)     StaticComponentMaskParameterValues                          OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TArray<FRuntimeVirtualTextureParameterValue>) RuntimeVirtualTextureParameterValues                     OFFSET(get<T>, {0xB0, 16, 0, 0})
};

/// Class /Script/Engine.MaterialFunctionMaterialLayer
/// Size: 0x0000 (0x000058 - 0x000058)
class UMaterialFunctionMaterialLayer : public UMaterialFunction
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Class /Script/Engine.MaterialFunctionMaterialLayerInstance
/// Size: 0x0000 (0x0000C0 - 0x0000C0)
class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
};

/// Class /Script/Engine.MaterialFunctionMaterialLayerBlend
/// Size: 0x0000 (0x000058 - 0x000058)
class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Class /Script/Engine.MaterialFunctionMaterialLayerBlendInstance
/// Size: 0x0000 (0x0000C0 - 0x0000C0)
class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
};

/// Class /Script/Engine.MaterialInstanceActor
/// Size: 0x0010 (0x000220 - 0x000230)
class AMaterialInstanceActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(TArray<class AActor*>)                     TargetActors                                                OFFSET(get<T>, {0x220, 16, 0, 0})
};

/// Class /Script/Engine.MaterialInstanceDynamic
/// Size: 0x0050 (0x000378 - 0x0003C8)
class UMaterialInstanceDynamic : public UMaterialInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 968;

public:


	/// Functions
	// Function /Script/Engine.MaterialInstanceDynamic.SetVectorParameterValueByInfo
	// void SetVectorParameterValueByInfo(FMaterialParameterInfo& ParameterInfo, FLinearColor Value);                           // [0x339b410] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.SetVectorParameterValue
	// void SetVectorParameterValue(FName ParameterName, FLinearColor Value);                                                   // [0x339b340] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.SetTextureParameterValueByInfo
	// void SetTextureParameterValueByInfo(FMaterialParameterInfo& ParameterInfo, class UTexture* Value);                       // [0x339b250] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.SetTextureParameterValue
	// void SetTextureParameterValue(FName ParameterName, class UTexture* Value);                                               // [0x339b180] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.SetScalarParameterValueByInfo
	// void SetScalarParameterValueByInfo(FMaterialParameterInfo& ParameterInfo, float Value);                                  // [0x339b090] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.SetScalarParameterValue
	// void SetScalarParameterValue(FName ParameterName, float Value);                                                          // [0x339afc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams
	// void K2_InterpolateMaterialInstanceParams(class UMaterialInstance* SourceA, class UMaterialInstance* SourceB, float Alpha); // [0x339abe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetVectorParameterValueByInfo
	// FLinearColor K2_GetVectorParameterValueByInfo(FMaterialParameterInfo& ParameterInfo);                                    // [0x339ab30] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue
	// FLinearColor K2_GetVectorParameterValue(FName ParameterName);                                                            // [0x339aa90] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetTextureParameterValueByInfo
	// class UTexture* K2_GetTextureParameterValueByInfo(FMaterialParameterInfo& ParameterInfo);                                // [0x339a9e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue
	// class UTexture* K2_GetTextureParameterValue(FName ParameterName);                                                        // [0x339a940] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetScalarParameterValueByInfo
	// float K2_GetScalarParameterValueByInfo(FMaterialParameterInfo& ParameterInfo);                                           // [0x339a890] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue
	// float K2_GetScalarParameterValue(FName ParameterName);                                                                   // [0x339a7f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters
	// void K2_CopyMaterialInstanceParameters(class UMaterialInterface* Source, bool bQuickParametersOnly);                     // [0x339a720] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.CopyParameterOverrides
	// void CopyParameterOverrides(class UMaterialInstance* MaterialInstance);                                                  // [0x339a340] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.CopyInterpParameters
	// void CopyInterpParameters(class UMaterialInstance* Source);                                                              // [0x339a2b0] Final|Native|Public  
};

/// Struct /Script/Engine.CollectionParameterBase
/// Size: 0x0018 (0x000000 - 0x000018)
class FCollectionParameterBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FGuid)                                     ID                                                          OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.CollectionScalarParameter
/// Size: 0x0004 (0x000018 - 0x00001C)
class FCollectionScalarParameter : public FCollectionParameterBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	DMember(float)                                     DefaultValue                                                OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.CollectionVectorParameter
/// Size: 0x0010 (0x000018 - 0x000028)
class FCollectionVectorParameter : public FCollectionParameterBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FLinearColor)                              DefaultValue                                                OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Class /Script/Engine.MaterialParameterCollection
/// Size: 0x0048 (0x000028 - 0x000070)
class UMaterialParameterCollection : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FGuid)                                     StateId                                                     OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	CMember(TArray<FCollectionScalarParameter>)        ScalarParameters                                            OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FCollectionVectorParameter>)        VectorParameters                                            OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Class /Script/Engine.MaterialParameterCollectionInstance
/// Size: 0x00E0 (0x000028 - 0x000108)
class UMaterialParameterCollectionInstance : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	CMember(class UMaterialParameterCollection*)       Collection                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/Engine.InterpGroupActorInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FInterpGroupActorInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     ObjectName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<class AActor*>)                     Actors                                                      OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.CameraCutInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FCameraCutInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(float)                                     Timestamp                                                   OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Class /Script/Engine.MatineeActor
/// Size: 0x00A8 (0x000220 - 0x0002C8)
class AMatineeActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
	CMember(class UInterpData*)                        MatineeData                                                 OFFSET(get<T>, {0x220, 8, 0, 0})
	SMember(FName)                                     MatineeControllerName                                       OFFSET(getStruct<T>, {0x228, 8, 0, 0})
	DMember(float)                                     PlayRate                                                    OFFSET(get<float>, {0x230, 4, 0, 0})
	DMember(bool)                                      bPlayOnLevelLoad                                            OFFSET(get<bool>, {0x234, 1, 1, 0})
	DMember(bool)                                      bForceStartPos                                              OFFSET(get<bool>, {0x234, 1, 1, 1})
	DMember(float)                                     ForceStartPosition                                          OFFSET(get<float>, {0x238, 4, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x23C, 1, 1, 0})
	DMember(bool)                                      bRewindOnPlay                                               OFFSET(get<bool>, {0x23C, 1, 1, 1})
	DMember(bool)                                      bNoResetOnRewind                                            OFFSET(get<bool>, {0x23C, 1, 1, 2})
	DMember(bool)                                      bRewindIfAlreadyPlaying                                     OFFSET(get<bool>, {0x23C, 1, 1, 3})
	DMember(bool)                                      bDisableRadioFilter                                         OFFSET(get<bool>, {0x23C, 1, 1, 4})
	DMember(bool)                                      bClientSideOnly                                             OFFSET(get<bool>, {0x23C, 1, 1, 5})
	DMember(bool)                                      bSkipUpdateIfNotVisible                                     OFFSET(get<bool>, {0x23C, 1, 1, 6})
	DMember(bool)                                      bIsSkippable                                                OFFSET(get<bool>, {0x23C, 1, 1, 7})
	DMember(int32_t)                                   PreferredSplitScreenNum                                     OFFSET(get<int32_t>, {0x240, 4, 0, 0})
	DMember(bool)                                      bDisableMovementInput                                       OFFSET(get<bool>, {0x244, 1, 1, 0})
	DMember(bool)                                      bDisableLookAtInput                                         OFFSET(get<bool>, {0x244, 1, 1, 1})
	DMember(bool)                                      bHidePlayer                                                 OFFSET(get<bool>, {0x244, 1, 1, 2})
	DMember(bool)                                      bHideHud                                                    OFFSET(get<bool>, {0x244, 1, 1, 3})
	CMember(TArray<FInterpGroupActorInfo>)             GroupActorInfos                                             OFFSET(get<T>, {0x248, 16, 0, 0})
	DMember(bool)                                      bShouldShowGore                                             OFFSET(get<bool>, {0x258, 1, 1, 0})
	CMember(TArray<class UInterpGroupInst*>)           GroupInst                                                   OFFSET(get<T>, {0x260, 16, 0, 0})
	CMember(TArray<FCameraCutInfo>)                    CameraCuts                                                  OFFSET(get<T>, {0x270, 16, 0, 0})
	DMember(bool)                                      bIsPlaying                                                  OFFSET(get<bool>, {0x280, 1, 1, 0})
	DMember(bool)                                      bReversePlayback                                            OFFSET(get<bool>, {0x280, 1, 1, 1})
	DMember(bool)                                      bPaused                                                     OFFSET(get<bool>, {0x280, 1, 1, 2})
	DMember(bool)                                      bPendingStop                                                OFFSET(get<bool>, {0x280, 1, 1, 3})
	DMember(float)                                     InterpPosition                                              OFFSET(get<float>, {0x284, 4, 0, 0})
	DMember(char)                                      ReplicationForceIsPlaying                                   OFFSET(get<char>, {0x28C, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlay                                                      OFFSET(getStruct<T>, {0x290, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnStop                                                      OFFSET(getStruct<T>, {0x2A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPause                                                     OFFSET(getStruct<T>, {0x2B0, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.MatineeActor.Stop
	// void Stop();                                                                                                             // [0x15e7d10] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.SetPosition
	// void SetPosition(float NewPosition, bool bJump);                                                                         // [0x339aee0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.SetLoopingState
	// void SetLoopingState(bool bNewLooping);                                                                                  // [0xb526b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.Reverse
	// void Reverse();                                                                                                          // [0x339ad00] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.Play
	// void Play();                                                                                                             // [0x32f0400] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.Pause
	// void Pause();                                                                                                            // [0x13e1a00] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.EnableGroupByName
	// void EnableGroupByName(FString GroupName, bool bEnable);                                                                 // [0x339a3d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.ChangePlaybackDirection
	// void ChangePlaybackDirection();                                                                                          // [0x32c1d50] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.MatineeActorCameraAnim
/// Size: 0x0008 (0x0002C8 - 0x0002D0)
class AMatineeActorCameraAnim : public AMatineeActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	CMember(class UCameraAnim*)                        CameraAnim                                                  OFFSET(get<T>, {0x2C8, 8, 0, 0})
};

/// Class /Script/Engine.MatineeAnimInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UMatineeAnimInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.MatineeInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UMatineeInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.MeshMergeCullingVolume
/// Size: 0x0000 (0x000258 - 0x000258)
class AMeshMergeCullingVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
};

/// Class /Script/Engine.MeshSimplificationSettings
/// Size: 0x0008 (0x000038 - 0x000040)
class UMeshSimplificationSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     MeshReductionModuleName                                     OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Engine.MeshVertexPainterKismetLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.MeshVertexPainterKismetLibrary.RemovePaintedVertices
	// void RemovePaintedVertices(class UStaticMeshComponent* StaticMeshComponent);                                             // [0x339e7a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.MeshVertexPainterKismetLibrary.PaintVerticesSingleColor
	// void PaintVerticesSingleColor(class UStaticMeshComponent* StaticMeshComponent, FLinearColor& FillColor, bool bConvertToSRGB); // [0x339e4d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MeshVertexPainterKismetLibrary.PaintVerticesLerpAlongAxis
	// void PaintVerticesLerpAlongAxis(class UStaticMeshComponent* StaticMeshComponent, FLinearColor& StartColor, FLinearColor& EndColor, EVertexPaintAxis Axis, bool bConvertToSRGB); // [0x339e310] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Struct /Script/Engine.PurchaseInfo
/// Size: 0x0040 (0x000000 - 0x000040)
class FPurchaseInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FString)                                   Identifier                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   DisplayName                                                 OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   DisplayDescription                                          OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FString)                                   DisplayPrice                                                OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Engine.MicroTransactionBase
/// Size: 0x0030 (0x000038 - 0x000068)
class UMicroTransactionBase : public UPlatformInterfaceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<FPurchaseInfo>)                     AvailableProducts                                           OFFSET(get<T>, {0x38, 16, 0, 0})
	SMember(FString)                                   LastError                                                   OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FString)                                   LastErrorSolution                                           OFFSET(getStruct<T>, {0x58, 16, 0, 0})
};

/// Class /Script/Engine.ModelComponent
/// Size: 0x0048 (0x000468 - 0x0004B0)
class UModelComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1200;

public:
	CMember(class UBodySetup*)                         ModelBodySetup                                              OFFSET(get<T>, {0x480, 8, 0, 0})
};

/// Class /Script/Engine.MorphTarget
/// Size: 0x0018 (0x000028 - 0x000040)
class UMorphTarget : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class USkeletalMesh*)                      BaseSkelMesh                                                OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/Engine.NavAgentInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavAgentInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NavAreaBase
/// Size: 0x0008 (0x000028 - 0x000030)
class UNavAreaBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.NavCollisionBase
/// Size: 0x0048 (0x000028 - 0x000070)
class UNavCollisionBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(bool)                                      bIsDynamicObstacle                                          OFFSET(get<bool>, {0x28, 1, 1, 0})
};

/// Class /Script/Engine.NavEdgeProviderInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavEdgeProviderInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NavigationDataChunk
/// Size: 0x0008 (0x000028 - 0x000030)
class UNavigationDataChunk : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FName)                                     NavigationDataName                                          OFFSET(getStruct<T>, {0x28, 8, 0, 0})
};

/// Class /Script/Engine.NavigationDataInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavigationDataInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NavigationObjectBase
/// Size: 0x0028 (0x000220 - 0x000248)
class ANavigationObjectBase : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	CMember(class UCapsuleComponent*)                  CapsuleComponent                                            OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UBillboardComponent*)                GoodSprite                                                  OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UBillboardComponent*)                BadSprite                                                   OFFSET(get<T>, {0x238, 8, 0, 0})
	DMember(bool)                                      bIsPIEPlayerStart                                           OFFSET(get<bool>, {0x240, 1, 1, 0})
};

/// Class /Script/Engine.NavigationSystemBase
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavigationSystemBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Engine.NavAgentSelector
/// Size: 0x0004 (0x000000 - 0x000004)
class FNavAgentSelector : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bSupportsAgent0                                             OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bSupportsAgent1                                             OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bSupportsAgent2                                             OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bSupportsAgent3                                             OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(bool)                                      bSupportsAgent4                                             OFFSET(get<bool>, {0x0, 1, 1, 4})
	DMember(bool)                                      bSupportsAgent5                                             OFFSET(get<bool>, {0x0, 1, 1, 5})
	DMember(bool)                                      bSupportsAgent6                                             OFFSET(get<bool>, {0x0, 1, 1, 6})
	DMember(bool)                                      bSupportsAgent7                                             OFFSET(get<bool>, {0x0, 1, 1, 7})
	DMember(bool)                                      bSupportsAgent8                                             OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(bool)                                      bSupportsAgent9                                             OFFSET(get<bool>, {0x1, 1, 1, 1})
	DMember(bool)                                      bSupportsAgent10                                            OFFSET(get<bool>, {0x1, 1, 1, 2})
	DMember(bool)                                      bSupportsAgent11                                            OFFSET(get<bool>, {0x1, 1, 1, 3})
	DMember(bool)                                      bSupportsAgent12                                            OFFSET(get<bool>, {0x1, 1, 1, 4})
	DMember(bool)                                      bSupportsAgent13                                            OFFSET(get<bool>, {0x1, 1, 1, 5})
	DMember(bool)                                      bSupportsAgent14                                            OFFSET(get<bool>, {0x1, 1, 1, 6})
	DMember(bool)                                      bSupportsAgent15                                            OFFSET(get<bool>, {0x1, 1, 1, 7})
};

/// Class /Script/Engine.NavigationSystemConfig
/// Size: 0x0028 (0x000028 - 0x000050)
class UNavigationSystemConfig : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FSoftClassPath)                            NavigationSystemClass                                       OFFSET(getStruct<T>, {0x28, 24, 0, 0})
	SMember(FNavAgentSelector)                         SupportedAgentsMask                                         OFFSET(getStruct<T>, {0x40, 4, 0, 0})
	SMember(FName)                                     DefaultAgentName                                            OFFSET(getStruct<T>, {0x44, 8, 0, 0})
	DMember(bool)                                      bIsOverriden                                                OFFSET(get<bool>, {0x4C, 1, 1, 0})
};

/// Class /Script/Engine.NullNavSysConfig
/// Size: 0x0000 (0x000050 - 0x000050)
class UNullNavSysConfig : public UNavigationSystemConfig
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Struct /Script/Engine.NavigationLinkBase
/// Size: 0x0030 (0x000000 - 0x000030)
class FNavigationLinkBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     LeftProjectHeight                                           OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     MaxFallDownLength                                           OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     SnapRadius                                                  OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     SnapHeight                                                  OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FNavAgentSelector)                         SupportedAgents                                             OFFSET(getStruct<T>, {0x14, 4, 0, 0})
	DMember(bool)                                      bSupportsAgent0                                             OFFSET(get<bool>, {0x18, 1, 1, 0})
	DMember(bool)                                      bSupportsAgent1                                             OFFSET(get<bool>, {0x18, 1, 1, 1})
	DMember(bool)                                      bSupportsAgent2                                             OFFSET(get<bool>, {0x18, 1, 1, 2})
	DMember(bool)                                      bSupportsAgent3                                             OFFSET(get<bool>, {0x18, 1, 1, 3})
	DMember(bool)                                      bSupportsAgent4                                             OFFSET(get<bool>, {0x18, 1, 1, 4})
	DMember(bool)                                      bSupportsAgent5                                             OFFSET(get<bool>, {0x18, 1, 1, 5})
	DMember(bool)                                      bSupportsAgent6                                             OFFSET(get<bool>, {0x18, 1, 1, 6})
	DMember(bool)                                      bSupportsAgent7                                             OFFSET(get<bool>, {0x18, 1, 1, 7})
	DMember(bool)                                      bSupportsAgent8                                             OFFSET(get<bool>, {0x19, 1, 1, 0})
	DMember(bool)                                      bSupportsAgent9                                             OFFSET(get<bool>, {0x19, 1, 1, 1})
	DMember(bool)                                      bSupportsAgent10                                            OFFSET(get<bool>, {0x19, 1, 1, 2})
	DMember(bool)                                      bSupportsAgent11                                            OFFSET(get<bool>, {0x19, 1, 1, 3})
	DMember(bool)                                      bSupportsAgent12                                            OFFSET(get<bool>, {0x19, 1, 1, 4})
	DMember(bool)                                      bSupportsAgent13                                            OFFSET(get<bool>, {0x19, 1, 1, 5})
	DMember(bool)                                      bSupportsAgent14                                            OFFSET(get<bool>, {0x19, 1, 1, 6})
	DMember(bool)                                      bSupportsAgent15                                            OFFSET(get<bool>, {0x19, 1, 1, 7})
	CMember(TEnumAsByte<ENavLinkDirection>)            Direction                                                   OFFSET(get<T>, {0x1C, 1, 0, 0})
	DMember(bool)                                      bUseSnapHeight                                              OFFSET(get<bool>, {0x1D, 1, 1, 0})
	DMember(bool)                                      bSnapToCheapestArea                                         OFFSET(get<bool>, {0x1D, 1, 1, 1})
	DMember(bool)                                      bCustomFlag0                                                OFFSET(get<bool>, {0x1D, 1, 1, 2})
	DMember(bool)                                      bCustomFlag1                                                OFFSET(get<bool>, {0x1D, 1, 1, 3})
	DMember(bool)                                      bCustomFlag2                                                OFFSET(get<bool>, {0x1D, 1, 1, 4})
	DMember(bool)                                      bCustomFlag3                                                OFFSET(get<bool>, {0x1D, 1, 1, 5})
	DMember(bool)                                      bCustomFlag4                                                OFFSET(get<bool>, {0x1D, 1, 1, 6})
	DMember(bool)                                      bCustomFlag5                                                OFFSET(get<bool>, {0x1D, 1, 1, 7})
	DMember(bool)                                      bCustomFlag6                                                OFFSET(get<bool>, {0x1E, 1, 1, 0})
	DMember(bool)                                      bCustomFlag7                                                OFFSET(get<bool>, {0x1E, 1, 1, 1})
	CMember(class UClass*)                             AreaClass                                                   OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/Engine.NavigationLink
/// Size: 0x0018 (0x000030 - 0x000048)
class FNavigationLink : public FNavigationLinkBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FVector)                                   Left                                                        OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	SMember(FVector)                                   Right                                                       OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
};

/// Struct /Script/Engine.NavigationSegmentLink
/// Size: 0x0030 (0x000030 - 0x000060)
class FNavigationSegmentLink : public FNavigationLinkBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FVector)                                   LeftStart                                                   OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	SMember(FVector)                                   LeftEnd                                                     OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
	SMember(FVector)                                   RightStart                                                  OFFSET(getStruct<T>, {0x48, 12, 0, 0})
	SMember(FVector)                                   RightEnd                                                    OFFSET(getStruct<T>, {0x54, 12, 0, 0})
};

/// Class /Script/Engine.NavLinkDefinition
/// Size: 0x0028 (0x000028 - 0x000050)
class UNavLinkDefinition : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<FNavigationLink>)                   Links                                                       OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<FNavigationSegmentLink>)            SegmentLinks                                                OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Engine.NavPathObserverInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavPathObserverInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.NavRelevantInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNavRelevantInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.SimulatedClientNetConnection
/// Size: 0x0000 (0x001AF0 - 0x001AF0)
class USimulatedClientNetConnection : public UNetConnection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 6896;

public:
};

/// Class /Script/Engine.NetPushModelHelpers
/// Size: 0x0000 (0x000028 - 0x000028)
class UNetPushModelHelpers : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.NetPushModelHelpers.MarkPropertyDirtyFromRepIndex
	// void MarkPropertyDirtyFromRepIndex(class UObject* Object, int32_t RepIndex, FName PropertyName);                         // [0x33a62d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.NetPushModelHelpers.MarkPropertyDirty
	// void MarkPropertyDirty(class UObject* Object, FName PropertyName);                                                       // [0x33a6210] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.NetworkPredictionInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNetworkPredictionInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Engine.NetworkEmulationProfileDescription
/// Size: 0x0020 (0x000000 - 0x000020)
class FNetworkEmulationProfileDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   ProfileName                                                 OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   Tooltip                                                     OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Class /Script/Engine.NetworkSettings
/// Size: 0x0020 (0x000038 - 0x000058)
class UNetworkSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(bool)                                      bVerifyPeer                                                 OFFSET(get<bool>, {0x38, 1, 1, 0})
	DMember(bool)                                      bEnableMultiplayerWorldOriginRebasing                       OFFSET(get<bool>, {0x38, 1, 1, 1})
	DMember(int32_t)                                   MaxRepArraySize                                             OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(int32_t)                                   MaxRepArrayMemory                                           OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	CMember(TArray<FNetworkEmulationProfileDescription>) NetworkEmulationProfiles                                  OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Struct /Script/Engine.NodeItem
/// Size: 0x0040 (0x000000 - 0x000040)
class FNodeItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     ParentName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FTransform)                                Transform                                                   OFFSET(getStruct<T>, {0x10, 48, 0, 0})
};

/// Class /Script/Engine.NodeMappingContainer
/// Size: 0x0140 (0x000028 - 0x000168)
class UNodeMappingContainer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(TMap<FName, FNodeItem>)                    SourceItems                                                 OFFSET(get<T>, {0x28, 80, 0, 0})
	CMember(TMap<FName, FNodeItem>)                    TargetItems                                                 OFFSET(get<T>, {0x78, 80, 0, 0})
	CMember(TMap<FName, FName>)                        SourceToTarget                                              OFFSET(get<T>, {0xC8, 80, 0, 0})
	CMember(TWeakObjectPtr<class UObject*>)            SourceAsset                                                 OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(TWeakObjectPtr<class UObject*>)            TargetAsset                                                 OFFSET(get<T>, {0x140, 8, 0, 0})
};

/// Class /Script/Engine.NodeMappingProviderInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNodeMappingProviderInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Note
/// Size: 0x0000 (0x000220 - 0x000220)
class ANote : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
};

/// Class /Script/Engine.ObjectLibrary
/// Size: 0x0080 (0x000028 - 0x0000A8)
class UObjectLibrary : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(class UClass*)                             ObjectBaseClass                                             OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      bHasBlueprintClasses                                        OFFSET(get<bool>, {0x30, 1, 0, 0})
	CMember(TArray<class UObject*>)                    Objects                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<UObject*>>)          WeakObjects                                                 OFFSET(get<T>, {0x48, 16, 0, 0})
	DMember(bool)                                      bUseWeakReferences                                          OFFSET(get<bool>, {0x58, 1, 0, 0})
	DMember(bool)                                      bIsFullyLoaded                                              OFFSET(get<bool>, {0x59, 1, 0, 0})
};

/// Class /Script/Engine.ObjectReferencer
/// Size: 0x0010 (0x000028 - 0x000038)
class UObjectReferencer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<class UObject*>)                    ReferencedObjects                                           OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.ObjectTraceWorldSubsystem
/// Size: 0x0008 (0x000030 - 0x000038)
class UObjectTraceWorldSubsystem : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.PackageMapClient
/// Size: 0x0318 (0x0000E0 - 0x0003F8)
class UPackageMapClient : public UPackageMap
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1016;

public:
};

/// Class /Script/Engine.PainCausingVolume
/// Size: 0x0028 (0x000268 - 0x000290)
class APainCausingVolume : public APhysicsVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	DMember(bool)                                      bPainCausing                                                OFFSET(get<bool>, {0x268, 1, 1, 0})
	DMember(float)                                     DamagePerSec                                                OFFSET(get<float>, {0x26C, 4, 0, 0})
	CMember(class UClass*)                             DamageType                                                  OFFSET(get<T>, {0x270, 8, 0, 0})
	DMember(float)                                     PainInterval                                                OFFSET(get<float>, {0x278, 4, 0, 0})
	DMember(bool)                                      bEntryPain                                                  OFFSET(get<bool>, {0x27C, 1, 1, 0})
	DMember(bool)                                      BACKUP_bPainCausing                                         OFFSET(get<bool>, {0x27C, 1, 1, 1})
	CMember(class AController*)                        DamageInstigator                                            OFFSET(get<T>, {0x280, 8, 0, 0})
};

/// Class /Script/Engine.ParticleEmitter
/// Size: 0x0198 (0x000028 - 0x0001C0)
class UParticleEmitter : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
	SMember(FName)                                     EmitterName                                                 OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	DMember(int32_t)                                   SubUVDataOffset                                             OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	CMember(TEnumAsByte<EEmitterRenderMode>)           EmitterRenderMode                                           OFFSET(get<T>, {0x34, 1, 0, 0})
	CMember(EParticleSignificanceLevel)                SignificanceLevel                                           OFFSET(get<T>, {0x35, 1, 0, 0})
	DMember(bool)                                      bUseLegacySpawningBehavior                                  OFFSET(get<bool>, {0x37, 1, 1, 0})
	DMember(bool)                                      ConvertedModules                                            OFFSET(get<bool>, {0x37, 1, 1, 5})
	DMember(bool)                                      bIsSoloing                                                  OFFSET(get<bool>, {0x37, 1, 1, 6})
	DMember(bool)                                      bCookedOut                                                  OFFSET(get<bool>, {0x37, 1, 1, 7})
	DMember(bool)                                      bDisabledLODsKeepEmitterAlive                               OFFSET(get<bool>, {0x38, 1, 1, 0})
	DMember(bool)                                      bDisableWhenInsignficant                                    OFFSET(get<bool>, {0x38, 1, 1, 1})
	CMember(TArray<class UParticleLODLevel*>)          LODLevels                                                   OFFSET(get<T>, {0x40, 16, 0, 0})
	DMember(int32_t)                                   PeakActiveParticles                                         OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	DMember(int32_t)                                   InitialAllocationCount                                      OFFSET(get<int32_t>, {0x54, 4, 0, 0})
	DMember(float)                                     QualityLevelSpawnRateScale                                  OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(uint32_t)                                  DetailModeBitmask                                           OFFSET(get<uint32_t>, {0x5C, 4, 0, 0})
};

/// Class /Script/Engine.ParticleEventManager
/// Size: 0x0000 (0x000220 - 0x000220)
class AParticleEventManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
};

/// Class /Script/Engine.ParticleLODLevel
/// Size: 0x0090 (0x000028 - 0x0000B8)
class UParticleLODLevel : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x2C, 1, 1, 0})
	CMember(class UParticleModuleRequired*)            RequiredModule                                              OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<class UParticleModule*>)            Modules                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(class UParticleModuleTypeDataBase*)        TypeDataModule                                              OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UParticleModuleSpawn*)               SpawnModule                                                 OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UParticleModuleEventGenerator*)      EventGenerator                                              OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(TArray<class UParticleModuleSpawnBase*>)   SpawningModules                                             OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<class UParticleModule*>)            SpawnModules                                                OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<class UParticleModule*>)            UpdateModules                                               OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<class UParticleModuleOrbit*>)       OrbitModules                                                OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<class UParticleModuleEventReceiverBase*>) EventReceiverModules                                  OFFSET(get<T>, {0xA0, 16, 0, 0})
	DMember(bool)                                      ConvertedModules                                            OFFSET(get<bool>, {0xB0, 1, 1, 0})
	DMember(int32_t)                                   PeakActiveParticles                                         OFFSET(get<int32_t>, {0xB4, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModule
/// Size: 0x0008 (0x000028 - 0x000030)
class UParticleModule : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      bSpawnModule                                                OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(bool)                                      bUpdateModule                                               OFFSET(get<bool>, {0x28, 1, 1, 1})
	DMember(bool)                                      bFinalUpdateModule                                          OFFSET(get<bool>, {0x28, 1, 1, 2})
	DMember(bool)                                      bUpdateForGPUEmitter                                        OFFSET(get<bool>, {0x28, 1, 1, 3})
	DMember(bool)                                      bCurvesAsColor                                              OFFSET(get<bool>, {0x28, 1, 1, 4})
	DMember(bool)                                      b3DDrawMode                                                 OFFSET(get<bool>, {0x28, 1, 1, 5})
	DMember(bool)                                      bSupported3DDrawMode                                        OFFSET(get<bool>, {0x28, 1, 1, 6})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x28, 1, 1, 7})
	DMember(bool)                                      bEditable                                                   OFFSET(get<bool>, {0x29, 1, 1, 0})
	DMember(bool)                                      LODDuplicate                                                OFFSET(get<bool>, {0x29, 1, 1, 1})
	DMember(bool)                                      bSupportsRandomSeed                                         OFFSET(get<bool>, {0x29, 1, 1, 2})
	DMember(bool)                                      bRequiresLoopingNotification                                OFFSET(get<bool>, {0x29, 1, 1, 3})
	DMember(char)                                      LODValidity                                                 OFFSET(get<char>, {0x2A, 1, 0, 0})
};

/// Class /Script/Engine.ParticleModuleAccelerationBase
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleAccelerationBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bAlwaysInWorldSpace                                         OFFSET(get<bool>, {0x30, 1, 1, 0})
};

/// Struct /Script/Engine.DistributionLookupTable
/// Size: 0x0020 (0x000000 - 0x000020)
class FDistributionLookupTable : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(float)                                     TimeScale                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     TimeBias                                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(TArray<float>)                             Values                                                      OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(char)                                      Op                                                          OFFSET(get<char>, {0x18, 1, 0, 0})
	DMember(char)                                      EntryCount                                                  OFFSET(get<char>, {0x19, 1, 0, 0})
	DMember(char)                                      EntryStride                                                 OFFSET(get<char>, {0x1A, 1, 0, 0})
	DMember(char)                                      SubEntryStride                                              OFFSET(get<char>, {0x1B, 1, 0, 0})
	DMember(char)                                      LockFlag                                                    OFFSET(get<char>, {0x1C, 1, 0, 0})
};

/// Struct /Script/Engine.RawDistribution
/// Size: 0x0020 (0x000000 - 0x000020)
class FRawDistribution : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FDistributionLookupTable)                  Table                                                       OFFSET(getStruct<T>, {0x0, 32, 0, 0})
};

/// Struct /Script/Engine.RawDistributionVector
/// Size: 0x0028 (0x000020 - 0x000048)
class FRawDistributionVector : public FRawDistribution
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     MinValue                                                    OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     MaxValue                                                    OFFSET(get<float>, {0x24, 4, 0, 0})
	SMember(FVector)                                   MinValueVec                                                 OFFSET(getStruct<T>, {0x28, 12, 0, 0})
	SMember(FVector)                                   MaxValueVec                                                 OFFSET(getStruct<T>, {0x34, 12, 0, 0})
	CMember(class UDistributionVector*)                Distribution                                                OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/Engine.ParticleModuleAcceleration
/// Size: 0x0050 (0x000038 - 0x000088)
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FRawDistributionVector)                    Acceleration                                                OFFSET(getStruct<T>, {0x38, 72, 0, 0})
	DMember(bool)                                      bApplyOwnerScale                                            OFFSET(get<bool>, {0x80, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleAccelerationConstant
/// Size: 0x0010 (0x000038 - 0x000048)
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FVector)                                   Acceleration                                                OFFSET(getStruct<T>, {0x38, 12, 0, 0})
};

/// Struct /Script/Engine.RawDistributionFloat
/// Size: 0x0010 (0x000020 - 0x000030)
class FRawDistributionFloat : public FRawDistribution
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     MinValue                                                    OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     MaxValue                                                    OFFSET(get<float>, {0x24, 4, 0, 0})
	CMember(class UDistributionFloat*)                 Distribution                                                OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/Engine.ParticleModuleAccelerationDrag
/// Size: 0x0038 (0x000038 - 0x000070)
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(class UDistributionFloat*)                 DragCoefficient                                             OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FRawDistributionFloat)                     DragCoefficientRaw                                          OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleAccelerationDragScaleOverLife
/// Size: 0x0038 (0x000038 - 0x000070)
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(class UDistributionFloat*)                 DragScale                                                   OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FRawDistributionFloat)                     DragScaleRaw                                                OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleAccelerationOverLifetime
/// Size: 0x0048 (0x000038 - 0x000080)
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FRawDistributionVector)                    AccelOverLife                                               OFFSET(getStruct<T>, {0x38, 72, 0, 0})
};

/// Class /Script/Engine.ParticleModuleAttractorBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleAttractorBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleAttractorLine
/// Size: 0x0078 (0x000030 - 0x0000A8)
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FVector)                                   EndPoint0                                                   OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	SMember(FVector)                                   EndPoint1                                                   OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
	SMember(FRawDistributionFloat)                     Range                                                       OFFSET(getStruct<T>, {0x48, 48, 0, 0})
	SMember(FRawDistributionFloat)                     Strength                                                    OFFSET(getStruct<T>, {0x78, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleAttractorParticle
/// Size: 0x0080 (0x000030 - 0x0000B0)
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FName)                                     EmitterName                                                 OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FRawDistributionFloat)                     Range                                                       OFFSET(getStruct<T>, {0x38, 48, 0, 0})
	DMember(bool)                                      bStrengthByDistance                                         OFFSET(get<bool>, {0x68, 1, 1, 0})
	SMember(FRawDistributionFloat)                     Strength                                                    OFFSET(getStruct<T>, {0x70, 48, 0, 0})
	DMember(bool)                                      bAffectBaseVelocity                                         OFFSET(get<bool>, {0xA0, 1, 1, 0})
	CMember(TEnumAsByte<EAttractorParticleSelectionMethod>) SelectionMethod                                        OFFSET(get<T>, {0xA4, 1, 0, 0})
	DMember(bool)                                      bRenewSource                                                OFFSET(get<bool>, {0xA8, 1, 1, 0})
	DMember(bool)                                      bInheritSourceVel                                           OFFSET(get<bool>, {0xA8, 1, 1, 1})
	DMember(int32_t)                                   LastSelIndex                                                OFFSET(get<int32_t>, {0xAC, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleAttractorPoint
/// Size: 0x00B0 (0x000030 - 0x0000E0)
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FRawDistributionVector)                    Position                                                    OFFSET(getStruct<T>, {0x30, 72, 0, 0})
	SMember(FRawDistributionFloat)                     Range                                                       OFFSET(getStruct<T>, {0x78, 48, 0, 0})
	SMember(FRawDistributionFloat)                     Strength                                                    OFFSET(getStruct<T>, {0xA8, 48, 0, 0})
	DMember(bool)                                      StrengthByDistance                                          OFFSET(get<bool>, {0xD8, 1, 1, 0})
	DMember(bool)                                      bAffectBaseVelocity                                         OFFSET(get<bool>, {0xD8, 1, 1, 1})
	DMember(bool)                                      bOverrideVelocity                                           OFFSET(get<bool>, {0xD8, 1, 1, 2})
	DMember(bool)                                      bUseWorldSpacePosition                                      OFFSET(get<bool>, {0xD8, 1, 1, 3})
	DMember(bool)                                      Positive_X                                                  OFFSET(get<bool>, {0xD8, 1, 1, 4})
	DMember(bool)                                      Positive_Y                                                  OFFSET(get<bool>, {0xD8, 1, 1, 5})
	DMember(bool)                                      Positive_Z                                                  OFFSET(get<bool>, {0xD8, 1, 1, 6})
	DMember(bool)                                      Negative_X                                                  OFFSET(get<bool>, {0xD8, 1, 1, 7})
	DMember(bool)                                      Negative_Y                                                  OFFSET(get<bool>, {0xD9, 1, 1, 0})
	DMember(bool)                                      Negative_Z                                                  OFFSET(get<bool>, {0xD9, 1, 1, 1})
};

/// Class /Script/Engine.ParticleModuleAttractorPointGravity
/// Size: 0x0048 (0x000030 - 0x000078)
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x3C, 4, 0, 0})
	CMember(class UDistributionFloat*)                 Strength                                                    OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FRawDistributionFloat)                     StrengthRaw                                                 OFFSET(getStruct<T>, {0x48, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleBeamBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleBeamBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.BeamModifierOptions
/// Size: 0x0004 (0x000000 - 0x000004)
class FBeamModifierOptions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bModify                                                     OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bScale                                                      OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bLock                                                       OFFSET(get<bool>, {0x0, 1, 1, 2})
};

/// Class /Script/Engine.ParticleModuleBeamModifier
/// Size: 0x00D8 (0x000030 - 0x000108)
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	CMember(TEnumAsByte<BeamModifierType>)             ModifierType                                                OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FBeamModifierOptions)                      PositionOptions                                             OFFSET(getStruct<T>, {0x34, 4, 0, 0})
	SMember(FRawDistributionVector)                    Position                                                    OFFSET(getStruct<T>, {0x38, 72, 0, 0})
	SMember(FBeamModifierOptions)                      TangentOptions                                              OFFSET(getStruct<T>, {0x80, 4, 0, 0})
	SMember(FRawDistributionVector)                    Tangent                                                     OFFSET(getStruct<T>, {0x88, 72, 0, 0})
	DMember(bool)                                      bAbsoluteTangent                                            OFFSET(get<bool>, {0xD0, 1, 1, 0})
	SMember(FBeamModifierOptions)                      StrengthOptions                                             OFFSET(getStruct<T>, {0xD4, 4, 0, 0})
	SMember(FRawDistributionFloat)                     Strength                                                    OFFSET(getStruct<T>, {0xD8, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleBeamNoise
/// Size: 0x0160 (0x000030 - 0x000190)
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	DMember(bool)                                      bLowFreq_Enabled                                            OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(int32_t)                                   Frequency                                                   OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   Frequency_LowRange                                          OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	SMember(FRawDistributionVector)                    NoiseRange                                                  OFFSET(getStruct<T>, {0x40, 72, 0, 0})
	SMember(FRawDistributionFloat)                     NoiseRangeScale                                             OFFSET(getStruct<T>, {0x88, 48, 0, 0})
	DMember(bool)                                      bNRScaleEmitterTime                                         OFFSET(get<bool>, {0xB8, 1, 1, 0})
	SMember(FRawDistributionVector)                    NoiseSpeed                                                  OFFSET(getStruct<T>, {0xC0, 72, 0, 0})
	DMember(bool)                                      bSmooth                                                     OFFSET(get<bool>, {0x108, 1, 1, 0})
	DMember(float)                                     NoiseLockRadius                                             OFFSET(get<float>, {0x10C, 4, 0, 0})
	DMember(bool)                                      bNoiseLock                                                  OFFSET(get<bool>, {0x110, 1, 1, 0})
	DMember(bool)                                      bOscillate                                                  OFFSET(get<bool>, {0x110, 1, 1, 1})
	DMember(float)                                     NoiseLockTime                                               OFFSET(get<float>, {0x114, 4, 0, 0})
	DMember(float)                                     NoiseTension                                                OFFSET(get<float>, {0x118, 4, 0, 0})
	DMember(bool)                                      bUseNoiseTangents                                           OFFSET(get<bool>, {0x11C, 1, 1, 0})
	SMember(FRawDistributionFloat)                     NoiseTangentStrength                                        OFFSET(getStruct<T>, {0x120, 48, 0, 0})
	DMember(int32_t)                                   NoiseTessellation                                           OFFSET(get<int32_t>, {0x150, 4, 0, 0})
	DMember(bool)                                      bTargetNoise                                                OFFSET(get<bool>, {0x154, 1, 1, 0})
	DMember(float)                                     FrequencyDistance                                           OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(bool)                                      bApplyNoiseScale                                            OFFSET(get<bool>, {0x15C, 1, 1, 0})
	SMember(FRawDistributionFloat)                     NoiseScale                                                  OFFSET(getStruct<T>, {0x160, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleBeamSource
/// Size: 0x00E8 (0x000030 - 0x000118)
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	CMember(TEnumAsByte<Beam2SourceTargetMethod>)      SourceMethod                                                OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FName)                                     SourceName                                                  OFFSET(getStruct<T>, {0x34, 8, 0, 0})
	DMember(bool)                                      bSourceAbsolute                                             OFFSET(get<bool>, {0x3C, 1, 1, 0})
	SMember(FRawDistributionVector)                    Source                                                      OFFSET(getStruct<T>, {0x40, 72, 0, 0})
	DMember(bool)                                      bLockSource                                                 OFFSET(get<bool>, {0x88, 1, 1, 0})
	CMember(TEnumAsByte<Beam2SourceTargetTangentMethod>) SourceTangentMethod                                       OFFSET(get<T>, {0x8C, 1, 0, 0})
	SMember(FRawDistributionVector)                    SourceTangent                                               OFFSET(getStruct<T>, {0x90, 72, 0, 0})
	DMember(bool)                                      bLockSourceTangent                                          OFFSET(get<bool>, {0xD8, 1, 1, 0})
	SMember(FRawDistributionFloat)                     SourceStrength                                              OFFSET(getStruct<T>, {0xE0, 48, 0, 0})
	DMember(bool)                                      bLockSourceStength                                          OFFSET(get<bool>, {0x110, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleBeamTarget
/// Size: 0x00F0 (0x000030 - 0x000120)
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	CMember(TEnumAsByte<Beam2SourceTargetMethod>)      TargetMethod                                                OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FName)                                     TargetName                                                  OFFSET(getStruct<T>, {0x34, 8, 0, 0})
	SMember(FRawDistributionVector)                    Target                                                      OFFSET(getStruct<T>, {0x40, 72, 0, 0})
	DMember(bool)                                      bTargetAbsolute                                             OFFSET(get<bool>, {0x88, 1, 1, 0})
	DMember(bool)                                      bLockTarget                                                 OFFSET(get<bool>, {0x88, 1, 1, 1})
	CMember(TEnumAsByte<Beam2SourceTargetTangentMethod>) TargetTangentMethod                                       OFFSET(get<T>, {0x8C, 1, 0, 0})
	SMember(FRawDistributionVector)                    TargetTangent                                               OFFSET(getStruct<T>, {0x90, 72, 0, 0})
	DMember(bool)                                      bLockTargetTangent                                          OFFSET(get<bool>, {0xD8, 1, 1, 0})
	SMember(FRawDistributionFloat)                     TargetStrength                                              OFFSET(getStruct<T>, {0xE0, 48, 0, 0})
	DMember(bool)                                      bLockTargetStength                                          OFFSET(get<bool>, {0x110, 1, 1, 0})
	DMember(float)                                     LockRadius                                                  OFFSET(get<float>, {0x114, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleCameraBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleCameraBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleCameraOffset
/// Size: 0x0038 (0x000030 - 0x000068)
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FRawDistributionFloat)                     CameraOffset                                                OFFSET(getStruct<T>, {0x30, 48, 0, 0})
	DMember(bool)                                      bSpawnTimeOnly                                              OFFSET(get<bool>, {0x60, 1, 1, 0})
	CMember(TEnumAsByte<EParticleCameraOffsetUpdateMethod>) UpdateMethod                                           OFFSET(get<T>, {0x64, 1, 0, 0})
};

/// Class /Script/Engine.ParticleModuleCollisionBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleCollisionBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleCollision
/// Size: 0x0160 (0x000030 - 0x000190)
class UParticleModuleCollision : public UParticleModuleCollisionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	SMember(FRawDistributionVector)                    DampingFactor                                               OFFSET(getStruct<T>, {0x30, 72, 0, 0})
	SMember(FRawDistributionVector)                    DampingFactorRotation                                       OFFSET(getStruct<T>, {0x78, 72, 0, 0})
	SMember(FRawDistributionFloat)                     MaxCollisions                                               OFFSET(getStruct<T>, {0xC0, 48, 0, 0})
	CMember(TEnumAsByte<EParticleCollisionComplete>)   CollisionCompletionOption                                   OFFSET(get<T>, {0xF0, 1, 0, 0})
	CMember(TArray<TEnumAsByte<EObjectTypeQuery>>)     CollisionTypes                                              OFFSET(get<T>, {0xF8, 16, 0, 0})
	DMember(bool)                                      bApplyPhysics                                               OFFSET(get<bool>, {0x110, 1, 1, 0})
	DMember(bool)                                      bIgnoreTriggerVolumes                                       OFFSET(get<bool>, {0x110, 1, 1, 1})
	SMember(FRawDistributionFloat)                     ParticleMass                                                OFFSET(getStruct<T>, {0x118, 48, 0, 0})
	DMember(float)                                     DirScalar                                                   OFFSET(get<float>, {0x148, 4, 0, 0})
	DMember(bool)                                      bPawnsDoNotDecrementCount                                   OFFSET(get<bool>, {0x14C, 1, 1, 0})
	DMember(bool)                                      bOnlyVerticalNormalsDecrementCount                          OFFSET(get<bool>, {0x14C, 1, 1, 1})
	DMember(float)                                     VerticalFudgeFactor                                         OFFSET(get<float>, {0x150, 4, 0, 0})
	SMember(FRawDistributionFloat)                     DelayAmount                                                 OFFSET(getStruct<T>, {0x158, 48, 0, 0})
	DMember(bool)                                      bDropDetail                                                 OFFSET(get<bool>, {0x188, 1, 1, 0})
	DMember(bool)                                      bCollideOnlyIfVisible                                       OFFSET(get<bool>, {0x188, 1, 1, 1})
	DMember(bool)                                      bIgnoreSourceActor                                          OFFSET(get<bool>, {0x188, 1, 1, 2})
	DMember(float)                                     MaxCollisionDistance                                        OFFSET(get<float>, {0x18C, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleCollisionGPU
/// Size: 0x0078 (0x000030 - 0x0000A8)
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FRawDistributionFloat)                     Resilience                                                  OFFSET(getStruct<T>, {0x30, 48, 0, 0})
	SMember(FRawDistributionFloat)                     ResilienceScaleOverLife                                     OFFSET(getStruct<T>, {0x60, 48, 0, 0})
	DMember(float)                                     Friction                                                    OFFSET(get<float>, {0x90, 4, 0, 0})
	DMember(float)                                     RandomSpread                                                OFFSET(get<float>, {0x94, 4, 0, 0})
	DMember(float)                                     RandomDistribution                                          OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(float)                                     RadiusScale                                                 OFFSET(get<float>, {0x9C, 4, 0, 0})
	DMember(float)                                     RadiusBias                                                  OFFSET(get<float>, {0xA0, 4, 0, 0})
	CMember(TEnumAsByte<EParticleCollisionResponse>)   Response                                                    OFFSET(get<T>, {0xA4, 1, 0, 0})
	CMember(TEnumAsByte<EParticleCollisionMode>)       CollisionMode                                               OFFSET(get<T>, {0xA5, 1, 0, 0})
};

/// Class /Script/Engine.ParticleModuleColorBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleColorBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleColor
/// Size: 0x0080 (0x000030 - 0x0000B0)
class UParticleModuleColor : public UParticleModuleColorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FRawDistributionVector)                    StartColor                                                  OFFSET(getStruct<T>, {0x30, 72, 0, 0})
	SMember(FRawDistributionFloat)                     StartAlpha                                                  OFFSET(getStruct<T>, {0x78, 48, 0, 0})
	DMember(bool)                                      bClampAlpha                                                 OFFSET(get<bool>, {0xA8, 1, 1, 0})
};

/// Struct /Script/Engine.ParticleRandomSeedInfo
/// Size: 0x0020 (0x000000 - 0x000020)
class FParticleRandomSeedInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bGetSeedFromInstance                                        OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      bInstanceSeedIsIndex                                        OFFSET(get<bool>, {0x8, 1, 1, 1})
	DMember(bool)                                      bResetSeedOnEmitterLooping                                  OFFSET(get<bool>, {0x8, 1, 1, 2})
	DMember(bool)                                      bRandomlySelectSeedArray                                    OFFSET(get<bool>, {0x8, 1, 1, 3})
	CMember(TArray<int32_t>)                           RandomSeeds                                                 OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Class /Script/Engine.ParticleModuleColor_Seeded
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class UParticleModuleColor_Seeded : public UParticleModuleColor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0xB0, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleColorOverLife
/// Size: 0x0080 (0x000030 - 0x0000B0)
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FRawDistributionVector)                    ColorOverLife                                               OFFSET(getStruct<T>, {0x30, 72, 0, 0})
	SMember(FRawDistributionFloat)                     AlphaOverLife                                               OFFSET(getStruct<T>, {0x78, 48, 0, 0})
	DMember(bool)                                      bClampAlpha                                                 OFFSET(get<bool>, {0xA8, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleColorScaleOverLife
/// Size: 0x0080 (0x000030 - 0x0000B0)
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FRawDistributionVector)                    ColorScaleOverLife                                          OFFSET(getStruct<T>, {0x30, 72, 0, 0})
	SMember(FRawDistributionFloat)                     AlphaScaleOverLife                                          OFFSET(getStruct<T>, {0x78, 48, 0, 0})
	DMember(bool)                                      bEmitterTime                                                OFFSET(get<bool>, {0xA8, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleEventBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleEventBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.ParticleEvent_GenerateInfo
/// Size: 0x0028 (0x000000 - 0x000028)
class FParticleEvent_GenerateInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TEnumAsByte<EParticleEventType>)           Type                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   Frequency                                                   OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   ParticleFrequency                                           OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(bool)                                      FirstTimeOnly                                               OFFSET(get<bool>, {0xC, 1, 1, 0})
	DMember(bool)                                      LastTimeOnly                                                OFFSET(get<bool>, {0xC, 1, 1, 1})
	DMember(bool)                                      UseReflectedImpactVector                                    OFFSET(get<bool>, {0xC, 1, 1, 2})
	DMember(bool)                                      bUseOrbitOffset                                             OFFSET(get<bool>, {0xC, 1, 1, 3})
	SMember(FName)                                     CustomName                                                  OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	CMember(TArray<class UParticleModuleEventSendToGame*>) ParticleModuleEventsToSendToGame                        OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Class /Script/Engine.ParticleModuleEventGenerator
/// Size: 0x0010 (0x000030 - 0x000040)
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FParticleEvent_GenerateInfo>)       Events                                                      OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Engine.ParticleModuleEventReceiverBase
/// Size: 0x0010 (0x000030 - 0x000040)
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TEnumAsByte<EParticleEventType>)           EventGeneratorType                                          OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FName)                                     EventName                                                   OFFSET(getStruct<T>, {0x34, 8, 0, 0})
};

/// Class /Script/Engine.ParticleModuleEventReceiverKillParticles
/// Size: 0x0008 (0x000040 - 0x000048)
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bStopSpawning                                               OFFSET(get<bool>, {0x40, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleEventReceiverSpawn
/// Size: 0x0098 (0x000040 - 0x0000D8)
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FRawDistributionFloat)                     SpawnCount                                                  OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	DMember(bool)                                      bUseParticleTime                                            OFFSET(get<bool>, {0x70, 1, 1, 0})
	DMember(bool)                                      bUsePSysLocation                                            OFFSET(get<bool>, {0x70, 1, 1, 1})
	DMember(bool)                                      bInheritVelocity                                            OFFSET(get<bool>, {0x70, 1, 1, 2})
	SMember(FRawDistributionVector)                    InheritVelocityScale                                        OFFSET(getStruct<T>, {0x78, 72, 0, 0})
	CMember(TArray<class UPhysicalMaterial*>)          PhysicalMaterials                                           OFFSET(get<T>, {0xC0, 16, 0, 0})
	DMember(bool)                                      bBanPhysicalMaterials                                       OFFSET(get<bool>, {0xD0, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleEventSendToGame
/// Size: 0x0000 (0x000028 - 0x000028)
class UParticleModuleEventSendToGame : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ParticleModuleKillBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleKillBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleKillBox
/// Size: 0x0098 (0x000030 - 0x0000C8)
class UParticleModuleKillBox : public UParticleModuleKillBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FRawDistributionVector)                    LowerLeftCorner                                             OFFSET(getStruct<T>, {0x30, 72, 0, 0})
	SMember(FRawDistributionVector)                    UpperRightCorner                                            OFFSET(getStruct<T>, {0x78, 72, 0, 0})
	DMember(bool)                                      bAbsolute                                                   OFFSET(get<bool>, {0xC0, 1, 1, 0})
	DMember(bool)                                      bKillInside                                                 OFFSET(get<bool>, {0xC0, 1, 1, 1})
	DMember(bool)                                      bAxisAlignedAndFixedSize                                    OFFSET(get<bool>, {0xC0, 1, 1, 2})
};

/// Class /Script/Engine.ParticleModuleKillHeight
/// Size: 0x0038 (0x000030 - 0x000068)
class UParticleModuleKillHeight : public UParticleModuleKillBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FRawDistributionFloat)                     Height                                                      OFFSET(getStruct<T>, {0x30, 48, 0, 0})
	DMember(bool)                                      bAbsolute                                                   OFFSET(get<bool>, {0x60, 1, 1, 0})
	DMember(bool)                                      bFloor                                                      OFFSET(get<bool>, {0x60, 1, 1, 1})
	DMember(bool)                                      bApplyPSysScale                                             OFFSET(get<bool>, {0x60, 1, 1, 2})
};

/// Class /Script/Engine.ParticleModuleLifetimeBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleLifetimeBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleLifetime
/// Size: 0x0030 (0x000030 - 0x000060)
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FRawDistributionFloat)                     LifeTime                                                    OFFSET(getStruct<T>, {0x30, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLifetime_Seeded
/// Size: 0x0020 (0x000060 - 0x000080)
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0x60, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLightBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleLightBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleLight
/// Size: 0x00F0 (0x000030 - 0x000120)
class UParticleModuleLight : public UParticleModuleLightBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	DMember(bool)                                      bUseInverseSquaredFalloff                                   OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(bool)                                      bAffectsTranslucency                                        OFFSET(get<bool>, {0x31, 1, 0, 0})
	DMember(bool)                                      bPreviewLightRadius                                         OFFSET(get<bool>, {0x32, 1, 0, 0})
	DMember(float)                                     SpawnFraction                                               OFFSET(get<float>, {0x34, 4, 0, 0})
	SMember(FRawDistributionVector)                    ColorScaleOverLife                                          OFFSET(getStruct<T>, {0x38, 72, 0, 0})
	SMember(FRawDistributionFloat)                     BrightnessOverLife                                          OFFSET(getStruct<T>, {0x80, 48, 0, 0})
	SMember(FRawDistributionFloat)                     RadiusScale                                                 OFFSET(getStruct<T>, {0xB0, 48, 0, 0})
	SMember(FRawDistributionFloat)                     LightExponent                                               OFFSET(getStruct<T>, {0xE0, 48, 0, 0})
	SMember(FLightingChannels)                         LightingChannels                                            OFFSET(getStruct<T>, {0x110, 1, 0, 0})
	DMember(float)                                     VolumetricScatteringIntensity                               OFFSET(get<float>, {0x114, 4, 0, 0})
	DMember(bool)                                      bHighQualityLights                                          OFFSET(get<bool>, {0x118, 1, 0, 0})
	DMember(bool)                                      bShadowCastingLights                                        OFFSET(get<bool>, {0x119, 1, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLight_Seeded
/// Size: 0x0020 (0x000120 - 0x000140)
class UParticleModuleLight_Seeded : public UParticleModuleLight
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0x120, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleLocationBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleLocation
/// Size: 0x0050 (0x000030 - 0x000080)
class UParticleModuleLocation : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FRawDistributionVector)                    StartLocation                                               OFFSET(getStruct<T>, {0x30, 72, 0, 0})
	DMember(float)                                     DistributeOverNPoints                                       OFFSET(get<float>, {0x78, 4, 0, 0})
	DMember(float)                                     DistributeThreshold                                         OFFSET(get<float>, {0x7C, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocation_Seeded
/// Size: 0x0020 (0x000080 - 0x0000A0)
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0x80, 32, 0, 0})
};

/// Struct /Script/Engine.LocationBoneSocketInfo
/// Size: 0x0014 (0x000000 - 0x000014)
class FLocationBoneSocketInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FName)                                     BoneSocketName                                              OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FVector)                                   Offset                                                      OFFSET(getStruct<T>, {0x8, 12, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationBoneSocket
/// Size: 0x0040 (0x000030 - 0x000070)
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TEnumAsByte<ELocationBoneSocketSource>)    SourceType                                                  OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FVector)                                   UniversalOffset                                             OFFSET(getStruct<T>, {0x34, 12, 0, 0})
	CMember(TArray<FLocationBoneSocketInfo>)           SourceLocations                                             OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TEnumAsByte<ELocationBoneSocketSelectionMethod>) SelectionMethod                                       OFFSET(get<T>, {0x50, 1, 0, 0})
	DMember(bool)                                      bUpdatePositionEachFrame                                    OFFSET(get<bool>, {0x54, 1, 1, 0})
	DMember(bool)                                      bOrientMeshEmitters                                         OFFSET(get<bool>, {0x54, 1, 1, 1})
	DMember(bool)                                      bInheritBoneVelocity                                        OFFSET(get<bool>, {0x54, 1, 1, 2})
	DMember(float)                                     InheritVelocityScale                                        OFFSET(get<float>, {0x58, 4, 0, 0})
	SMember(FName)                                     SkelMeshActorParamName                                      OFFSET(getStruct<T>, {0x5C, 8, 0, 0})
	DMember(int32_t)                                   NumPreSelectedIndices                                       OFFSET(get<int32_t>, {0x64, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationDirect
/// Size: 0x0120 (0x000030 - 0x000150)
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	SMember(FRawDistributionVector)                    Location                                                    OFFSET(getStruct<T>, {0x30, 72, 0, 0})
	SMember(FRawDistributionVector)                    LocationOffset                                              OFFSET(getStruct<T>, {0x78, 72, 0, 0})
	SMember(FRawDistributionVector)                    ScaleFactor                                                 OFFSET(getStruct<T>, {0xC0, 72, 0, 0})
	SMember(FRawDistributionVector)                    Direction                                                   OFFSET(getStruct<T>, {0x108, 72, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationEmitter
/// Size: 0x0020 (0x000030 - 0x000050)
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     EmitterName                                                 OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	CMember(TEnumAsByte<ELocationEmitterSelectionMethod>) SelectionMethod                                          OFFSET(get<T>, {0x38, 1, 0, 0})
	DMember(bool)                                      InheritSourceVelocity                                       OFFSET(get<bool>, {0x3C, 1, 1, 0})
	DMember(float)                                     InheritSourceVelocityScale                                  OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(bool)                                      bInheritSourceRotation                                      OFFSET(get<bool>, {0x44, 1, 1, 0})
	DMember(float)                                     InheritSourceRotationScale                                  OFFSET(get<float>, {0x48, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationEmitterDirect
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     EmitterName                                                 OFFSET(getStruct<T>, {0x30, 8, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveBase
/// Size: 0x0080 (0x000030 - 0x0000B0)
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	DMember(bool)                                      Positive_X                                                  OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      Positive_Y                                                  OFFSET(get<bool>, {0x30, 1, 1, 1})
	DMember(bool)                                      Positive_Z                                                  OFFSET(get<bool>, {0x30, 1, 1, 2})
	DMember(bool)                                      Negative_X                                                  OFFSET(get<bool>, {0x30, 1, 1, 3})
	DMember(bool)                                      Negative_Y                                                  OFFSET(get<bool>, {0x30, 1, 1, 4})
	DMember(bool)                                      Negative_Z                                                  OFFSET(get<bool>, {0x30, 1, 1, 5})
	DMember(bool)                                      SurfaceOnly                                                 OFFSET(get<bool>, {0x30, 1, 1, 6})
	DMember(bool)                                      Velocity                                                    OFFSET(get<bool>, {0x30, 1, 1, 7})
	SMember(FRawDistributionFloat)                     VelocityScale                                               OFFSET(getStruct<T>, {0x38, 48, 0, 0})
	SMember(FRawDistributionVector)                    StartLocation                                               OFFSET(getStruct<T>, {0x68, 72, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveCylinder
/// Size: 0x0070 (0x0000B0 - 0x000120)
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	DMember(bool)                                      RadialVelocity                                              OFFSET(get<bool>, {0xB0, 1, 1, 0})
	SMember(FRawDistributionFloat)                     StartRadius                                                 OFFSET(getStruct<T>, {0xB8, 48, 0, 0})
	SMember(FRawDistributionFloat)                     StartHeight                                                 OFFSET(getStruct<T>, {0xE8, 48, 0, 0})
	CMember(TEnumAsByte<CylinderHeightAxis>)           HeightAxis                                                  OFFSET(get<T>, {0x118, 1, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
/// Size: 0x0020 (0x000120 - 0x000140)
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0x120, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveSphere
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FRawDistributionFloat)                     StartRadius                                                 OFFSET(getStruct<T>, {0xB0, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveSphere_Seeded
/// Size: 0x0020 (0x0000E0 - 0x000100)
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0xE0, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveTriangle
/// Size: 0x00D8 (0x000030 - 0x000108)
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FRawDistributionVector)                    StartOffset                                                 OFFSET(getStruct<T>, {0x30, 72, 0, 0})
	SMember(FRawDistributionFloat)                     Height                                                      OFFSET(getStruct<T>, {0x78, 48, 0, 0})
	SMember(FRawDistributionFloat)                     Angle                                                       OFFSET(getStruct<T>, {0xA8, 48, 0, 0})
	SMember(FRawDistributionFloat)                     Thickness                                                   OFFSET(getStruct<T>, {0xD8, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationSkelVertSurface
/// Size: 0x0060 (0x000030 - 0x000090)
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TEnumAsByte<ELocationSkelVertSurfaceSource>) SourceType                                                OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FVector)                                   UniversalOffset                                             OFFSET(getStruct<T>, {0x34, 12, 0, 0})
	DMember(bool)                                      bUpdatePositionEachFrame                                    OFFSET(get<bool>, {0x40, 1, 1, 0})
	DMember(bool)                                      bOrientMeshEmitters                                         OFFSET(get<bool>, {0x40, 1, 1, 1})
	DMember(bool)                                      bInheritBoneVelocity                                        OFFSET(get<bool>, {0x40, 1, 1, 2})
	DMember(float)                                     InheritVelocityScale                                        OFFSET(get<float>, {0x44, 4, 0, 0})
	SMember(FName)                                     SkelMeshActorParamName                                      OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	CMember(TArray<FName>)                             ValidAssociatedBones                                        OFFSET(get<T>, {0x50, 16, 0, 0})
	DMember(bool)                                      bEnforceNormalCheck                                         OFFSET(get<bool>, {0x60, 1, 1, 0})
	SMember(FVector)                                   NormalToCompare                                             OFFSET(getStruct<T>, {0x64, 12, 0, 0})
	DMember(float)                                     NormalCheckToleranceDegrees                                 OFFSET(get<float>, {0x70, 4, 0, 0})
	DMember(float)                                     NormalCheckTolerance                                        OFFSET(get<float>, {0x74, 4, 0, 0})
	CMember(TArray<int32_t>)                           ValidMaterialIndices                                        OFFSET(get<T>, {0x78, 16, 0, 0})
	DMember(bool)                                      bInheritVertexColor                                         OFFSET(get<bool>, {0x88, 1, 1, 0})
	DMember(bool)                                      bInheritUV                                                  OFFSET(get<bool>, {0x88, 1, 1, 1})
	DMember(uint32_t)                                  InheritUVChannel                                            OFFSET(get<uint32_t>, {0x8C, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleLocationWorldOffset
/// Size: 0x0000 (0x000080 - 0x000080)
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Engine.ParticleModuleLocationWorldOffset_Seeded
/// Size: 0x0020 (0x000080 - 0x0000A0)
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0x80, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleMaterialBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleMaterialBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleMeshMaterial
/// Size: 0x0010 (0x000030 - 0x000040)
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<class UMaterialInterface*>)         MeshMaterials                                               OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRotationBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleRotationBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleMeshRotation
/// Size: 0x0050 (0x000030 - 0x000080)
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FRawDistributionVector)                    StartRotation                                               OFFSET(getStruct<T>, {0x30, 72, 0, 0})
	DMember(bool)                                      bInheritParent                                              OFFSET(get<bool>, {0x78, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleMeshRotation_Seeded
/// Size: 0x0020 (0x000080 - 0x0000A0)
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0x80, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRotationRateBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleRotationRateBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleMeshRotationRate
/// Size: 0x0048 (0x000030 - 0x000078)
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FRawDistributionVector)                    StartRotationRate                                           OFFSET(getStruct<T>, {0x30, 72, 0, 0})
};

/// Class /Script/Engine.ParticleModuleMeshRotationRate_Seeded
/// Size: 0x0020 (0x000078 - 0x000098)
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0x78, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleMeshRotationRateMultiplyLife
/// Size: 0x0048 (0x000030 - 0x000078)
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FRawDistributionVector)                    LifeMultiplier                                              OFFSET(getStruct<T>, {0x30, 72, 0, 0})
};

/// Class /Script/Engine.ParticleModuleMeshRotationRateOverLife
/// Size: 0x0050 (0x000030 - 0x000080)
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FRawDistributionVector)                    RotRate                                                     OFFSET(getStruct<T>, {0x30, 72, 0, 0})
	DMember(bool)                                      bScaleRotRate                                               OFFSET(get<bool>, {0x78, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleOrbitBase
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleOrbitBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bUseEmitterTime                                             OFFSET(get<bool>, {0x30, 1, 1, 0})
};

/// Struct /Script/Engine.OrbitOptions
/// Size: 0x0004 (0x000000 - 0x000004)
class FOrbitOptions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bProcessDuringSpawn                                         OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bProcessDuringUpdate                                        OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bUseEmitterTime                                             OFFSET(get<bool>, {0x0, 1, 1, 2})
};

/// Class /Script/Engine.ParticleModuleOrbit
/// Size: 0x00F8 (0x000038 - 0x000130)
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	CMember(TEnumAsByte<EOrbitChainMode>)              ChainMode                                                   OFFSET(get<T>, {0x38, 1, 0, 0})
	SMember(FRawDistributionVector)                    OffsetAmount                                                OFFSET(getStruct<T>, {0x40, 72, 0, 0})
	SMember(FOrbitOptions)                             OffsetOptions                                               OFFSET(getStruct<T>, {0x88, 4, 0, 0})
	SMember(FRawDistributionVector)                    RotationAmount                                              OFFSET(getStruct<T>, {0x90, 72, 0, 0})
	SMember(FOrbitOptions)                             RotationOptions                                             OFFSET(getStruct<T>, {0xD8, 4, 0, 0})
	SMember(FRawDistributionVector)                    RotationRateAmount                                          OFFSET(getStruct<T>, {0xE0, 72, 0, 0})
	SMember(FOrbitOptions)                             RotationRateOptions                                         OFFSET(getStruct<T>, {0x128, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleOrientationBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleOrientationBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleOrientationAxisLock
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TEnumAsByte<EParticleAxisLock>)            LockAxisFlags                                               OFFSET(get<T>, {0x30, 1, 0, 0})
	DMember(bool)                                      bSnapshot                                                   OFFSET(get<bool>, {0x31, 1, 0, 0})
};

/// Class /Script/Engine.ParticleModuleParameterBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleParameterBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.EmitterDynamicParameter
/// Size: 0x0048 (0x000000 - 0x000048)
class FEmitterDynamicParameter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FName)                                     ParamName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bUseEmitterTime                                             OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      bSpawnTimeOnly                                              OFFSET(get<bool>, {0x8, 1, 1, 1})
	CMember(TEnumAsByte<EEmitterDynamicParameterValue>) ValueMethod                                                OFFSET(get<T>, {0xC, 1, 0, 0})
	DMember(bool)                                      bScaleVelocityByParamValue                                  OFFSET(get<bool>, {0x10, 1, 1, 0})
	SMember(FRawDistributionFloat)                     ParamValue                                                  OFFSET(getStruct<T>, {0x18, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleParameterDynamic
/// Size: 0x0018 (0x000030 - 0x000048)
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FEmitterDynamicParameter>)          DynamicParams                                               OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(int32_t)                                   UpdateFlags                                                 OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(bool)                                      bUsesVelocity                                               OFFSET(get<bool>, {0x44, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleParameterDynamic_Seeded
/// Size: 0x0020 (0x000048 - 0x000068)
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0x48, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModulePivotOffset
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModulePivotOffset : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FVector2D)                                 PivotOffset                                                 OFFSET(getStruct<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/Engine.ParticleBurst
/// Size: 0x000C (0x000000 - 0x00000C)
class FParticleBurst : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   CountLow                                                    OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRequired
/// Size: 0x0110 (0x000030 - 0x000140)
class UParticleModuleRequired : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	CMember(class UMaterialInterface*)                 Material                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     MinFacingCameraBlendDistance                                OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     MaxFacingCameraBlendDistance                                OFFSET(get<float>, {0x3C, 4, 0, 0})
	SMember(FVector)                                   EmitterOrigin                                               OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FRotator)                                  EmitterRotation                                             OFFSET(getStruct<T>, {0x4C, 12, 0, 0})
	CMember(TEnumAsByte<EParticleScreenAlignment>)     ScreenAlignment                                             OFFSET(get<T>, {0x58, 1, 0, 0})
	DMember(bool)                                      bUseLocalSpace                                              OFFSET(get<bool>, {0x59, 1, 1, 0})
	DMember(bool)                                      bKillOnDeactivate                                           OFFSET(get<bool>, {0x59, 1, 1, 1})
	DMember(bool)                                      bKillOnCompleted                                            OFFSET(get<bool>, {0x59, 1, 1, 2})
	CMember(TEnumAsByte<EParticleSortMode>)            SortMode                                                    OFFSET(get<T>, {0x5A, 1, 0, 0})
	DMember(bool)                                      bUseLegacyEmitterTime                                       OFFSET(get<bool>, {0x5B, 1, 1, 0})
	DMember(bool)                                      bRemoveHMDRoll                                              OFFSET(get<bool>, {0x5B, 1, 1, 1})
	DMember(bool)                                      bEmitterDurationUseRange                                    OFFSET(get<bool>, {0x5B, 1, 1, 2})
	DMember(float)                                     EmitterDuration                                             OFFSET(get<float>, {0x5C, 4, 0, 0})
	SMember(FRawDistributionFloat)                     SpawnRate                                                   OFFSET(getStruct<T>, {0x60, 48, 0, 0})
	CMember(TArray<FParticleBurst>)                    BurstList                                                   OFFSET(get<T>, {0x90, 16, 0, 0})
	DMember(float)                                     EmitterDelay                                                OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(float)                                     EmitterDelayLow                                             OFFSET(get<float>, {0xA4, 4, 0, 0})
	DMember(bool)                                      bDelayFirstLoopOnly                                         OFFSET(get<bool>, {0xA8, 1, 1, 0})
	CMember(TEnumAsByte<EParticleSubUVInterpMethod>)   InterpolationMethod                                         OFFSET(get<T>, {0xA9, 1, 0, 0})
	DMember(bool)                                      bScaleUV                                                    OFFSET(get<bool>, {0xAA, 1, 1, 0})
	DMember(bool)                                      bEmitterDelayUseRange                                       OFFSET(get<bool>, {0xAA, 1, 1, 1})
	CMember(TEnumAsByte<EParticleBurstMethod>)         ParticleBurstMethod                                         OFFSET(get<T>, {0xAB, 1, 0, 0})
	DMember(bool)                                      bOverrideSystemMacroUV                                      OFFSET(get<bool>, {0xAC, 1, 1, 0})
	DMember(bool)                                      bUseMaxDrawCount                                            OFFSET(get<bool>, {0xAC, 1, 1, 1})
	CMember(TEnumAsByte<EOpacitySourceMode>)           OpacitySourceMode                                           OFFSET(get<T>, {0xAD, 1, 0, 0})
	CMember(TEnumAsByte<EEmitterNormalsMode>)          EmitterNormalsMode                                          OFFSET(get<T>, {0xAE, 1, 0, 0})
	DMember(bool)                                      bOrbitModuleAffectsVelocityAlignment                        OFFSET(get<bool>, {0xAF, 1, 1, 0})
	DMember(int32_t)                                   SubImages_Horizontal                                        OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
	DMember(int32_t)                                   SubImages_Vertical                                          OFFSET(get<int32_t>, {0xB4, 4, 0, 0})
	DMember(float)                                     RandomImageTime                                             OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(int32_t)                                   RandomImageChanges                                          OFFSET(get<int32_t>, {0xBC, 4, 0, 0})
	SMember(FVector)                                   MacroUVPosition                                             OFFSET(getStruct<T>, {0xC0, 12, 0, 0})
	DMember(float)                                     MacroUVRadius                                               OFFSET(get<float>, {0xCC, 4, 0, 0})
	CMember(EParticleUVFlipMode)                       UVFlippingMode                                              OFFSET(get<T>, {0xD0, 1, 0, 0})
	CMember(TEnumAsByte<ESubUVBoundingVertexCount>)    BoundingMode                                                OFFSET(get<T>, {0xD1, 1, 0, 0})
	DMember(bool)                                      bDurationRecalcEachLoop                                     OFFSET(get<bool>, {0xD2, 1, 1, 0})
	SMember(FVector)                                   NormalsSphereCenter                                         OFFSET(getStruct<T>, {0xD4, 12, 0, 0})
	DMember(float)                                     AlphaThreshold                                              OFFSET(get<float>, {0xE0, 4, 0, 0})
	DMember(int32_t)                                   EmitterLoops                                                OFFSET(get<int32_t>, {0xE4, 4, 0, 0})
	CMember(class UTexture2D*)                         CutoutTexture                                               OFFSET(get<T>, {0xE8, 8, 0, 0})
	DMember(int32_t)                                   MaxDrawCount                                                OFFSET(get<int32_t>, {0xF0, 4, 0, 0})
	DMember(float)                                     EmitterDurationLow                                          OFFSET(get<float>, {0xF4, 4, 0, 0})
	SMember(FVector)                                   NormalsCylinderDirection                                    OFFSET(getStruct<T>, {0xF8, 12, 0, 0})
	CMember(TArray<FName>)                             NamedMaterialOverrides                                      OFFSET(get<T>, {0x108, 16, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRotation
/// Size: 0x0030 (0x000030 - 0x000060)
class UParticleModuleRotation : public UParticleModuleRotationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FRawDistributionFloat)                     StartRotation                                               OFFSET(getStruct<T>, {0x30, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRotation_Seeded
/// Size: 0x0020 (0x000060 - 0x000080)
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0x60, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRotationOverLifetime
/// Size: 0x0038 (0x000030 - 0x000068)
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FRawDistributionFloat)                     RotationOverLife                                            OFFSET(getStruct<T>, {0x30, 48, 0, 0})
	DMember(bool)                                      Scale                                                       OFFSET(get<bool>, {0x60, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleRotationRate
/// Size: 0x0030 (0x000030 - 0x000060)
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FRawDistributionFloat)                     StartRotationRate                                           OFFSET(getStruct<T>, {0x30, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRotationRate_Seeded
/// Size: 0x0020 (0x000060 - 0x000080)
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0x60, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleRotationRateMultiplyLife
/// Size: 0x0030 (0x000030 - 0x000060)
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FRawDistributionFloat)                     LifeMultiplier                                              OFFSET(getStruct<T>, {0x30, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleSizeBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleSizeBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleSize
/// Size: 0x0048 (0x000030 - 0x000078)
class UParticleModuleSize : public UParticleModuleSizeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FRawDistributionVector)                    StartSize                                                   OFFSET(getStruct<T>, {0x30, 72, 0, 0})
};

/// Class /Script/Engine.ParticleModuleSize_Seeded
/// Size: 0x0020 (0x000078 - 0x000098)
class UParticleModuleSize_Seeded : public UParticleModuleSize
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0x78, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleSizeMultiplyLife
/// Size: 0x0050 (0x000030 - 0x000080)
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FRawDistributionVector)                    LifeMultiplier                                              OFFSET(getStruct<T>, {0x30, 72, 0, 0})
	DMember(bool)                                      MultiplyX                                                   OFFSET(get<bool>, {0x78, 1, 1, 0})
	DMember(bool)                                      MultiplyY                                                   OFFSET(get<bool>, {0x78, 1, 1, 1})
	DMember(bool)                                      MultiplyZ                                                   OFFSET(get<bool>, {0x78, 1, 1, 2})
};

/// Class /Script/Engine.ParticleModuleSizeScale
/// Size: 0x0050 (0x000030 - 0x000080)
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FRawDistributionVector)                    SizeScale                                                   OFFSET(getStruct<T>, {0x30, 72, 0, 0})
	DMember(bool)                                      EnableX                                                     OFFSET(get<bool>, {0x78, 1, 1, 0})
	DMember(bool)                                      EnableY                                                     OFFSET(get<bool>, {0x78, 1, 1, 1})
	DMember(bool)                                      EnableZ                                                     OFFSET(get<bool>, {0x78, 1, 1, 2})
};

/// Class /Script/Engine.ParticleModuleSizeScaleBySpeed
/// Size: 0x0010 (0x000030 - 0x000040)
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FVector2D)                                 SpeedScale                                                  OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FVector2D)                                 MaxScale                                                    OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Engine.ParticleModuleSourceMovement
/// Size: 0x0048 (0x000030 - 0x000078)
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FRawDistributionVector)                    SourceMovementScale                                         OFFSET(getStruct<T>, {0x30, 72, 0, 0})
};

/// Class /Script/Engine.ParticleModuleSpawnBase
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleSpawnBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bProcessSpawnRate                                           OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bProcessBurstList                                           OFFSET(get<bool>, {0x30, 1, 1, 1})
};

/// Class /Script/Engine.ParticleModuleSpawn
/// Size: 0x00B0 (0x000038 - 0x0000E8)
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FRawDistributionFloat)                     Rate                                                        OFFSET(getStruct<T>, {0x38, 48, 0, 0})
	SMember(FRawDistributionFloat)                     RateScale                                                   OFFSET(getStruct<T>, {0x68, 48, 0, 0})
	CMember(TEnumAsByte<EParticleBurstMethod>)         ParticleBurstMethod                                         OFFSET(get<T>, {0x98, 1, 0, 0})
	CMember(TArray<FParticleBurst>)                    BurstList                                                   OFFSET(get<T>, {0xA0, 16, 0, 0})
	SMember(FRawDistributionFloat)                     BurstScale                                                  OFFSET(getStruct<T>, {0xB0, 48, 0, 0})
	DMember(bool)                                      bApplyGlobalSpawnRateScale                                  OFFSET(get<bool>, {0xE0, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleSpawnPerUnit
/// Size: 0x0040 (0x000038 - 0x000078)
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	DMember(float)                                     UnitScalar                                                  OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     MovementTolerance                                           OFFSET(get<float>, {0x3C, 4, 0, 0})
	SMember(FRawDistributionFloat)                     SpawnPerUnit                                                OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	DMember(float)                                     MaxFrameDistance                                            OFFSET(get<float>, {0x70, 4, 0, 0})
	DMember(bool)                                      bIgnoreSpawnRateWhenMoving                                  OFFSET(get<bool>, {0x74, 1, 1, 0})
	DMember(bool)                                      bIgnoreMovementAlongX                                       OFFSET(get<bool>, {0x74, 1, 1, 1})
	DMember(bool)                                      bIgnoreMovementAlongY                                       OFFSET(get<bool>, {0x74, 1, 1, 2})
	DMember(bool)                                      bIgnoreMovementAlongZ                                       OFFSET(get<bool>, {0x74, 1, 1, 3})
};

/// Class /Script/Engine.ParticleModuleSubUVBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleSubUVBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleSubUV
/// Size: 0x0040 (0x000030 - 0x000070)
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(class USubUVAnimation*)                    Animation                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FRawDistributionFloat)                     SubImageIndex                                               OFFSET(getStruct<T>, {0x38, 48, 0, 0})
	DMember(bool)                                      bUseRealTime                                                OFFSET(get<bool>, {0x68, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleSubUVMovie
/// Size: 0x0040 (0x000070 - 0x0000B0)
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	DMember(bool)                                      bUseEmitterTime                                             OFFSET(get<bool>, {0x70, 1, 1, 0})
	SMember(FRawDistributionFloat)                     FrameRate                                                   OFFSET(getStruct<T>, {0x78, 48, 0, 0})
	DMember(int32_t)                                   StartingFrame                                               OFFSET(get<int32_t>, {0xA8, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleTrailBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleTrailBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleTrailSource
/// Size: 0x0060 (0x000030 - 0x000090)
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TEnumAsByte<ETrail2SourceMethod>)          SourceMethod                                                OFFSET(get<T>, {0x30, 1, 0, 0})
	SMember(FName)                                     SourceName                                                  OFFSET(getStruct<T>, {0x34, 8, 0, 0})
	SMember(FRawDistributionFloat)                     SourceStrength                                              OFFSET(getStruct<T>, {0x40, 48, 0, 0})
	DMember(bool)                                      bLockSourceStength                                          OFFSET(get<bool>, {0x70, 1, 1, 0})
	DMember(int32_t)                                   SourceOffsetCount                                           OFFSET(get<int32_t>, {0x74, 4, 0, 0})
	CMember(TArray<FVector>)                           SourceOffsetDefaults                                        OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TEnumAsByte<EParticleSourceSelectionMethod>) SelectionMethod                                           OFFSET(get<T>, {0x88, 1, 0, 0})
	DMember(bool)                                      bInheritRotation                                            OFFSET(get<bool>, {0x8C, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleTypeDataBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleTypeDataBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleTypeDataAnimTrail
/// Size: 0x0018 (0x000030 - 0x000048)
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bDeadTrailsOnDeactivate                                     OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bEnablePreviousTangentRecalculation                         OFFSET(get<bool>, {0x30, 1, 1, 1})
	DMember(bool)                                      bTangentRecalculationEveryFrame                             OFFSET(get<bool>, {0x30, 1, 1, 2})
	DMember(float)                                     TilingDistance                                              OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     DistanceTessellationStepSize                                OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     TangentTessellationStepSize                                 OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     WidthTessellationStepSize                                   OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleTypeDataBeam2
/// Size: 0x0120 (0x000030 - 0x000150)
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	CMember(TEnumAsByte<EBeam2Method>)                 BeamMethod                                                  OFFSET(get<T>, {0x30, 1, 0, 0})
	DMember(int32_t)                                   TextureTile                                                 OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(float)                                     TextureTileDistance                                         OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   Sheets                                                      OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(int32_t)                                   MaxBeamCount                                                OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(int32_t)                                   InterpolationPoints                                         OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(bool)                                      bAlwaysOn                                                   OFFSET(get<bool>, {0x4C, 1, 1, 0})
	DMember(int32_t)                                   UpVectorStepSize                                            OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	SMember(FName)                                     BranchParentName                                            OFFSET(getStruct<T>, {0x54, 8, 0, 0})
	SMember(FRawDistributionFloat)                     Distance                                                    OFFSET(getStruct<T>, {0x60, 48, 0, 0})
	CMember(TEnumAsByte<EBeamTaperMethod>)             TaperMethod                                                 OFFSET(get<T>, {0x90, 1, 0, 0})
	SMember(FRawDistributionFloat)                     TaperFactor                                                 OFFSET(getStruct<T>, {0x98, 48, 0, 0})
	SMember(FRawDistributionFloat)                     TaperScale                                                  OFFSET(getStruct<T>, {0xC8, 48, 0, 0})
	DMember(bool)                                      RenderGeometry                                              OFFSET(get<bool>, {0xF8, 1, 1, 0})
	DMember(bool)                                      RenderDirectLine                                            OFFSET(get<bool>, {0xF8, 1, 1, 1})
	DMember(bool)                                      RenderLines                                                 OFFSET(get<bool>, {0xF8, 1, 1, 2})
	DMember(bool)                                      RenderTessellation                                          OFFSET(get<bool>, {0xF8, 1, 1, 3})
};

/// Struct /Script/Engine.GPUSpriteLocalVectorFieldInfo
/// Size: 0x0070 (0x000000 - 0x000070)
class FGPUSpriteLocalVectorFieldInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(class UVectorField*)                       Field                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FTransform)                                Transform                                                   OFFSET(getStruct<T>, {0x10, 48, 0, 0})
	SMember(FRotator)                                  MinInitialRotation                                          OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FRotator)                                  MaxInitialRotation                                          OFFSET(getStruct<T>, {0x4C, 12, 0, 0})
	SMember(FRotator)                                  RotationRate                                                OFFSET(getStruct<T>, {0x58, 12, 0, 0})
	DMember(float)                                     Intensity                                                   OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     Tightness                                                   OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(bool)                                      bIgnoreComponentTransform                                   OFFSET(get<bool>, {0x6C, 1, 1, 0})
	DMember(bool)                                      bTileX                                                      OFFSET(get<bool>, {0x6C, 1, 1, 1})
	DMember(bool)                                      bTileY                                                      OFFSET(get<bool>, {0x6C, 1, 1, 2})
	DMember(bool)                                      bTileZ                                                      OFFSET(get<bool>, {0x6C, 1, 1, 3})
	DMember(bool)                                      bUseFixDT                                                   OFFSET(get<bool>, {0x6C, 1, 1, 4})
};

/// Struct /Script/Engine.FloatDistribution
/// Size: 0x0020 (0x000000 - 0x000020)
class FFloatDistribution : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FDistributionLookupTable)                  Table                                                       OFFSET(getStruct<T>, {0x0, 32, 0, 0})
};

/// Struct /Script/Engine.GPUSpriteEmitterInfo
/// Size: 0x0280 (0x000000 - 0x000280)
class FGPUSpriteEmitterInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	CMember(class UParticleModuleRequired*)            RequiredModule                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UParticleModuleSpawn*)               SpawnModule                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UParticleModuleSpawnPerUnit*)        SpawnPerUnitModule                                          OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(TArray<class UParticleModule*>)            SpawnModules                                                OFFSET(get<T>, {0x18, 16, 0, 0})
	SMember(FGPUSpriteLocalVectorFieldInfo)            LocalVectorField                                            OFFSET(getStruct<T>, {0x30, 112, 0, 0})
	SMember(FFloatDistribution)                        VectorFieldScale                                            OFFSET(getStruct<T>, {0xA0, 32, 0, 0})
	SMember(FFloatDistribution)                        DragCoefficient                                             OFFSET(getStruct<T>, {0xC0, 32, 0, 0})
	SMember(FFloatDistribution)                        PointAttractorStrength                                      OFFSET(getStruct<T>, {0xE0, 32, 0, 0})
	SMember(FFloatDistribution)                        Resilience                                                  OFFSET(getStruct<T>, {0x100, 32, 0, 0})
	SMember(FVector)                                   ConstantAcceleration                                        OFFSET(getStruct<T>, {0x120, 12, 0, 0})
	SMember(FVector)                                   PointAttractorPosition                                      OFFSET(getStruct<T>, {0x12C, 12, 0, 0})
	DMember(float)                                     PointAttractorRadiusSq                                      OFFSET(get<float>, {0x138, 4, 0, 0})
	SMember(FVector)                                   OrbitOffsetBase                                             OFFSET(getStruct<T>, {0x13C, 12, 0, 0})
	SMember(FVector)                                   OrbitOffsetRange                                            OFFSET(getStruct<T>, {0x148, 12, 0, 0})
	SMember(FVector2D)                                 InvMaxSize                                                  OFFSET(getStruct<T>, {0x154, 8, 0, 0})
	DMember(float)                                     InvRotationRateScale                                        OFFSET(get<float>, {0x15C, 4, 0, 0})
	DMember(float)                                     MaxLifetime                                                 OFFSET(get<float>, {0x160, 4, 0, 0})
	DMember(int32_t)                                   MaxParticleCount                                            OFFSET(get<int32_t>, {0x164, 4, 0, 0})
	CMember(TEnumAsByte<EParticleScreenAlignment>)     ScreenAlignment                                             OFFSET(get<T>, {0x168, 1, 0, 0})
	CMember(TEnumAsByte<EParticleAxisLock>)            LockAxisFlag                                                OFFSET(get<T>, {0x169, 1, 0, 0})
	DMember(bool)                                      bEnableCollision                                            OFFSET(get<bool>, {0x16C, 1, 1, 0})
	CMember(TEnumAsByte<EParticleCollisionMode>)       CollisionMode                                               OFFSET(get<T>, {0x170, 1, 0, 0})
	DMember(bool)                                      bRemoveHMDRoll                                              OFFSET(get<bool>, {0x174, 1, 1, 0})
	DMember(float)                                     MinFacingCameraBlendDistance                                OFFSET(get<float>, {0x178, 4, 0, 0})
	DMember(float)                                     MaxFacingCameraBlendDistance                                OFFSET(get<float>, {0x17C, 4, 0, 0})
	SMember(FRawDistributionVector)                    DynamicColor                                                OFFSET(getStruct<T>, {0x180, 72, 0, 0})
	SMember(FRawDistributionFloat)                     DynamicAlpha                                                OFFSET(getStruct<T>, {0x1C8, 48, 0, 0})
	SMember(FRawDistributionVector)                    DynamicColorScale                                           OFFSET(getStruct<T>, {0x1F8, 72, 0, 0})
	SMember(FRawDistributionFloat)                     DynamicAlphaScale                                           OFFSET(getStruct<T>, {0x240, 48, 0, 0})
};

/// Struct /Script/Engine.GPUSpriteResourceData
/// Size: 0x0160 (0x000000 - 0x000160)
class FGPUSpriteResourceData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(TArray<FColor>)                            QuantizedColorSamples                                       OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FColor>)                            QuantizedMiscSamples                                        OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FColor>)                            QuantizedSimulationAttrSamples                              OFFSET(get<T>, {0x20, 16, 0, 0})
	SMember(FVector4)                                  ColorScale                                                  OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FVector4)                                  ColorBias                                                   OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FVector4)                                  MiscScale                                                   OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	SMember(FVector4)                                  MiscBias                                                    OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	SMember(FVector4)                                  SimulationAttrCurveScale                                    OFFSET(getStruct<T>, {0x70, 16, 0, 0})
	SMember(FVector4)                                  SimulationAttrCurveBias                                     OFFSET(getStruct<T>, {0x80, 16, 0, 0})
	SMember(FVector4)                                  SubImageSize                                                OFFSET(getStruct<T>, {0x90, 16, 0, 0})
	SMember(FVector4)                                  SizeBySpeed                                                 OFFSET(getStruct<T>, {0xA0, 16, 0, 0})
	SMember(FVector)                                   ConstantAcceleration                                        OFFSET(getStruct<T>, {0xB0, 12, 0, 0})
	SMember(FVector)                                   OrbitOffsetBase                                             OFFSET(getStruct<T>, {0xBC, 12, 0, 0})
	SMember(FVector)                                   OrbitOffsetRange                                            OFFSET(getStruct<T>, {0xC8, 12, 0, 0})
	SMember(FVector)                                   OrbitFrequencyBase                                          OFFSET(getStruct<T>, {0xD4, 12, 0, 0})
	SMember(FVector)                                   OrbitFrequencyRange                                         OFFSET(getStruct<T>, {0xE0, 12, 0, 0})
	SMember(FVector)                                   OrbitPhaseBase                                              OFFSET(getStruct<T>, {0xEC, 12, 0, 0})
	SMember(FVector)                                   OrbitPhaseRange                                             OFFSET(getStruct<T>, {0xF8, 12, 0, 0})
	DMember(float)                                     GlobalVectorFieldScale                                      OFFSET(get<float>, {0x104, 4, 0, 0})
	DMember(float)                                     GlobalVectorFieldTightness                                  OFFSET(get<float>, {0x108, 4, 0, 0})
	DMember(float)                                     PerParticleVectorFieldScale                                 OFFSET(get<float>, {0x10C, 4, 0, 0})
	DMember(float)                                     PerParticleVectorFieldBias                                  OFFSET(get<float>, {0x110, 4, 0, 0})
	DMember(float)                                     DragCoefficientScale                                        OFFSET(get<float>, {0x114, 4, 0, 0})
	DMember(float)                                     DragCoefficientBias                                         OFFSET(get<float>, {0x118, 4, 0, 0})
	DMember(float)                                     ResilienceScale                                             OFFSET(get<float>, {0x11C, 4, 0, 0})
	DMember(float)                                     ResilienceBias                                              OFFSET(get<float>, {0x120, 4, 0, 0})
	DMember(float)                                     CollisionRadiusScale                                        OFFSET(get<float>, {0x124, 4, 0, 0})
	DMember(float)                                     CollisionRadiusBias                                         OFFSET(get<float>, {0x128, 4, 0, 0})
	DMember(float)                                     CollisionTimeBias                                           OFFSET(get<float>, {0x12C, 4, 0, 0})
	DMember(float)                                     CollisionRandomSpread                                       OFFSET(get<float>, {0x130, 4, 0, 0})
	DMember(float)                                     CollisionRandomDistribution                                 OFFSET(get<float>, {0x134, 4, 0, 0})
	DMember(float)                                     OneMinusFriction                                            OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(float)                                     RotationRateScale                                           OFFSET(get<float>, {0x13C, 4, 0, 0})
	DMember(float)                                     CameraMotionBlurAmount                                      OFFSET(get<float>, {0x140, 4, 0, 0})
	CMember(TEnumAsByte<EParticleScreenAlignment>)     ScreenAlignment                                             OFFSET(get<T>, {0x144, 1, 0, 0})
	CMember(TEnumAsByte<EParticleAxisLock>)            LockAxisFlag                                                OFFSET(get<T>, {0x145, 1, 0, 0})
	SMember(FVector2D)                                 PivotOffset                                                 OFFSET(getStruct<T>, {0x148, 8, 0, 0})
	DMember(bool)                                      bRemoveHMDRoll                                              OFFSET(get<bool>, {0x150, 1, 1, 0})
	DMember(float)                                     MinFacingCameraBlendDistance                                OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(float)                                     MaxFacingCameraBlendDistance                                OFFSET(get<float>, {0x158, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleTypeDataGpu
/// Size: 0x03F0 (0x000030 - 0x000420)
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1056;

public:
	SMember(FGPUSpriteEmitterInfo)                     EmitterInfo                                                 OFFSET(getStruct<T>, {0x30, 640, 0, 0})
	SMember(FGPUSpriteResourceData)                    ResourceData                                                OFFSET(getStruct<T>, {0x2B0, 352, 0, 0})
	DMember(float)                                     CameraMotionBlurAmount                                      OFFSET(get<float>, {0x410, 4, 0, 0})
	DMember(bool)                                      bClearExistingParticlesOnInit                               OFFSET(get<bool>, {0x414, 1, 1, 0})
};

/// Class /Script/Engine.ParticleModuleTypeDataMesh
/// Size: 0x0068 (0x000030 - 0x000098)
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(class UStaticMesh*)                        Mesh                                                        OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     LODSizeScale                                                OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(bool)                                      bUseStaticMeshLODs                                          OFFSET(get<bool>, {0x44, 1, 1, 0})
	DMember(bool)                                      CastShadows                                                 OFFSET(get<bool>, {0x44, 1, 1, 1})
	DMember(bool)                                      DoCollisions                                                OFFSET(get<bool>, {0x44, 1, 1, 2})
	CMember(TEnumAsByte<EMeshScreenAlignment>)         MeshAlignment                                               OFFSET(get<T>, {0x45, 1, 0, 0})
	DMember(bool)                                      bOverrideMaterial                                           OFFSET(get<bool>, {0x46, 1, 1, 0})
	DMember(bool)                                      bOverrideDefaultMotionBlurSettings                          OFFSET(get<bool>, {0x46, 1, 1, 1})
	DMember(bool)                                      bEnableMotionBlur                                           OFFSET(get<bool>, {0x46, 1, 1, 2})
	SMember(FRawDistributionVector)                    RollPitchYawRange                                           OFFSET(getStruct<T>, {0x48, 72, 0, 0})
	CMember(TEnumAsByte<EParticleAxisLock>)            AxisLockOption                                              OFFSET(get<T>, {0x90, 1, 0, 0})
	DMember(bool)                                      bCameraFacing                                               OFFSET(get<bool>, {0x91, 1, 1, 0})
	CMember(TEnumAsByte<EMeshCameraFacingUpAxis>)      CameraFacingUpAxisOption                                    OFFSET(get<T>, {0x92, 1, 0, 0})
	CMember(TEnumAsByte<EMeshCameraFacingOptions>)     CameraFacingOption                                          OFFSET(get<T>, {0x93, 1, 0, 0})
	DMember(bool)                                      bApplyParticleRotationAsSpin                                OFFSET(get<bool>, {0x94, 1, 1, 0})
	DMember(bool)                                      bFaceCameraDirectionRatherThanPosition                      OFFSET(get<bool>, {0x94, 1, 1, 1})
	DMember(bool)                                      bCollisionsConsiderPartilceSize                             OFFSET(get<bool>, {0x94, 1, 1, 2})
};

/// Class /Script/Engine.ParticleModuleTypeDataRibbon
/// Size: 0x0030 (0x000030 - 0x000060)
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(int32_t)                                   MaxTessellationBetweenParticles                             OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   SheetsPerTrail                                              OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   MaxTrailCount                                               OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   MaxParticleInTrailCount                                     OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(bool)                                      bDeadTrailsOnDeactivate                                     OFFSET(get<bool>, {0x40, 1, 1, 0})
	DMember(bool)                                      bDeadTrailsOnSourceLoss                                     OFFSET(get<bool>, {0x40, 1, 1, 1})
	DMember(bool)                                      bClipSourceSegement                                         OFFSET(get<bool>, {0x40, 1, 1, 2})
	DMember(bool)                                      bEnablePreviousTangentRecalculation                         OFFSET(get<bool>, {0x40, 1, 1, 3})
	DMember(bool)                                      bTangentRecalculationEveryFrame                             OFFSET(get<bool>, {0x40, 1, 1, 4})
	DMember(bool)                                      bSpawnInitialParticle                                       OFFSET(get<bool>, {0x40, 1, 1, 5})
	CMember(TEnumAsByte<ETrailsRenderAxisOption>)      RenderAxis                                                  OFFSET(get<T>, {0x44, 1, 0, 0})
	DMember(float)                                     TangentSpawningScalar                                       OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(bool)                                      bRenderGeometry                                             OFFSET(get<bool>, {0x4C, 1, 1, 0})
	DMember(bool)                                      bRenderSpawnPoints                                          OFFSET(get<bool>, {0x4C, 1, 1, 1})
	DMember(bool)                                      bRenderTangents                                             OFFSET(get<bool>, {0x4C, 1, 1, 2})
	DMember(bool)                                      bRenderTessellation                                         OFFSET(get<bool>, {0x4C, 1, 1, 3})
	DMember(float)                                     TilingDistance                                              OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     DistanceTessellationStepSize                                OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(bool)                                      bEnableTangentDiffInterpScale                               OFFSET(get<bool>, {0x58, 1, 1, 0})
	DMember(float)                                     TangentTessellationScalar                                   OFFSET(get<float>, {0x5C, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVectorFieldBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UParticleModuleVectorFieldBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ParticleModuleVectorFieldGlobal
/// Size: 0x0010 (0x000030 - 0x000040)
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bOverrideGlobalVectorFieldTightness                         OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(float)                                     GlobalVectorFieldScale                                      OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     GlobalVectorFieldTightness                                  OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVectorFieldLocal
/// Size: 0x0038 (0x000030 - 0x000068)
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(class UVectorField*)                       VectorField                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FVector)                                   RelativeTranslation                                         OFFSET(getStruct<T>, {0x38, 12, 0, 0})
	SMember(FRotator)                                  RelativeRotation                                            OFFSET(getStruct<T>, {0x44, 12, 0, 0})
	SMember(FVector)                                   RelativeScale3D                                             OFFSET(getStruct<T>, {0x50, 12, 0, 0})
	DMember(float)                                     Intensity                                                   OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     Tightness                                                   OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(bool)                                      bIgnoreComponentTransform                                   OFFSET(get<bool>, {0x64, 1, 1, 0})
	DMember(bool)                                      bTileX                                                      OFFSET(get<bool>, {0x64, 1, 1, 1})
	DMember(bool)                                      bTileY                                                      OFFSET(get<bool>, {0x64, 1, 1, 2})
	DMember(bool)                                      bTileZ                                                      OFFSET(get<bool>, {0x64, 1, 1, 3})
	DMember(bool)                                      bUseFixDT                                                   OFFSET(get<bool>, {0x64, 1, 1, 4})
};

/// Class /Script/Engine.ParticleModuleVectorFieldRotation
/// Size: 0x0018 (0x000030 - 0x000048)
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FVector)                                   MinInitialRotation                                          OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	SMember(FVector)                                   MaxInitialRotation                                          OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVectorFieldRotationRate
/// Size: 0x0010 (0x000030 - 0x000040)
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FVector)                                   RotationRate                                                OFFSET(getStruct<T>, {0x30, 12, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVectorFieldScale
/// Size: 0x0038 (0x000030 - 0x000068)
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(class UDistributionFloat*)                 VectorFieldScale                                            OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FRawDistributionFloat)                     VectorFieldScaleRaw                                         OFFSET(getStruct<T>, {0x38, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVectorFieldScaleOverLife
/// Size: 0x0038 (0x000030 - 0x000068)
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(class UDistributionFloat*)                 VectorFieldScaleOverLife                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FRawDistributionFloat)                     VectorFieldScaleOverLifeRaw                                 OFFSET(getStruct<T>, {0x38, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVelocityBase
/// Size: 0x0008 (0x000030 - 0x000038)
class UParticleModuleVelocityBase : public UParticleModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bInWorldSpace                                               OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bApplyOwnerScale                                            OFFSET(get<bool>, {0x30, 1, 1, 1})
};

/// Class /Script/Engine.ParticleModuleVelocity
/// Size: 0x0078 (0x000038 - 0x0000B0)
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FRawDistributionVector)                    StartVelocity                                               OFFSET(getStruct<T>, {0x38, 72, 0, 0})
	SMember(FRawDistributionFloat)                     StartVelocityRadial                                         OFFSET(getStruct<T>, {0x80, 48, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVelocity_Seeded
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FParticleRandomSeedInfo)                   RandomSeedInfo                                              OFFSET(getStruct<T>, {0xB0, 32, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVelocityCone
/// Size: 0x0070 (0x000038 - 0x0000A8)
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FRawDistributionFloat)                     Angle                                                       OFFSET(getStruct<T>, {0x38, 48, 0, 0})
	SMember(FRawDistributionFloat)                     Velocity                                                    OFFSET(getStruct<T>, {0x68, 48, 0, 0})
	SMember(FVector)                                   Direction                                                   OFFSET(getStruct<T>, {0x98, 12, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVelocityInheritParent
/// Size: 0x0048 (0x000038 - 0x000080)
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FRawDistributionVector)                    Scale                                                       OFFSET(getStruct<T>, {0x38, 72, 0, 0})
};

/// Class /Script/Engine.ParticleModuleVelocityOverLifetime
/// Size: 0x0050 (0x000038 - 0x000088)
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FRawDistributionVector)                    VelOverLife                                                 OFFSET(getStruct<T>, {0x38, 72, 0, 0})
	DMember(bool)                                      Absolute                                                    OFFSET(get<bool>, {0x80, 1, 1, 0})
};

/// Class /Script/Engine.ParticleSpriteEmitter
/// Size: 0x0000 (0x0001C0 - 0x0001C0)
class UParticleSpriteEmitter : public UParticleEmitter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
};

/// Struct /Script/Engine.ParticleSystemLOD
/// Size: 0x0001 (0x000000 - 0x000001)
class FParticleSystemLOD : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.LODSoloTrack
/// Size: 0x0010 (0x000000 - 0x000010)
class FLODSoloTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<char>)                              SoloEnableSetting                                           OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.NamedEmitterMaterial
/// Size: 0x0010 (0x000000 - 0x000010)
class FNamedEmitterMaterial : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(class UMaterialInterface*)                 Material                                                    OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/Engine.ParticleSystem
/// Size: 0x00E0 (0x000030 - 0x000110)
class UParticleSystem : public UFXSystemAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	DMember(float)                                     UpdateTime_FPS                                              OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     UpdateTime_Delta                                            OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     WarmupTime                                                  OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     WarmupTickRate                                              OFFSET(get<float>, {0x3C, 4, 0, 0})
	CMember(TArray<class UParticleEmitter*>)           Emitters                                                    OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(class UParticleSystemComponent*)           PreviewComponent                                            OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UInterpCurveEdSetup*)                CurveEdSetup                                                OFFSET(get<T>, {0x58, 8, 0, 0})
	DMember(float)                                     LODDistanceCheckTime                                        OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     MacroUVRadius                                               OFFSET(get<float>, {0x64, 4, 0, 0})
	CMember(TArray<float>)                             LODDistances                                                OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<FParticleSystemLOD>)                LODSettings                                                 OFFSET(get<T>, {0x78, 16, 0, 0})
	SMember(FBox)                                      FixedRelativeBoundingBox                                    OFFSET(getStruct<T>, {0x88, 28, 0, 0})
	DMember(float)                                     SecondsBeforeInactive                                       OFFSET(get<float>, {0xA4, 4, 0, 0})
	DMember(float)                                     Delay                                                       OFFSET(get<float>, {0xA8, 4, 0, 0})
	DMember(float)                                     DelayLow                                                    OFFSET(get<float>, {0xAC, 4, 0, 0})
	DMember(bool)                                      bOrientZAxisTowardCamera                                    OFFSET(get<bool>, {0xB0, 1, 1, 0})
	DMember(bool)                                      bUseFixedRelativeBoundingBox                                OFFSET(get<bool>, {0xB0, 1, 1, 1})
	DMember(bool)                                      bShouldResetPeakCounts                                      OFFSET(get<bool>, {0xB0, 1, 1, 2})
	DMember(bool)                                      bHasPhysics                                                 OFFSET(get<bool>, {0xB0, 1, 1, 3})
	DMember(bool)                                      bUseRealtimeThumbnail                                       OFFSET(get<bool>, {0xB0, 1, 1, 4})
	DMember(bool)                                      ThumbnailImageOutOfDate                                     OFFSET(get<bool>, {0xB0, 1, 1, 5})
	DMember(bool)                                      bUseDelayRange                                              OFFSET(get<bool>, {0xB1, 1, 1, 0})
	DMember(bool)                                      bAllowManagedTicking                                        OFFSET(get<bool>, {0xB1, 1, 1, 1})
	DMember(bool)                                      bAutoDeactivate                                             OFFSET(get<bool>, {0xB1, 1, 1, 2})
	DMember(bool)                                      bRegenerateLODDuplicate                                     OFFSET(get<bool>, {0xB1, 1, 1, 3})
	CMember(TEnumAsByte<EParticleSystemUpdateMode>)    SystemUpdateMode                                            OFFSET(get<T>, {0xB2, 1, 0, 0})
	CMember(TEnumAsByte<ParticleSystemLODMethod>)      LODMethod                                                   OFFSET(get<T>, {0xB3, 1, 0, 0})
	CMember(EParticleSystemInsignificanceReaction)     InsignificantReaction                                       OFFSET(get<T>, {0xB4, 1, 0, 0})
	CMember(TEnumAsByte<EParticleSystemOcclusionBoundsMethod>) OcclusionBoundsMethod                               OFFSET(get<T>, {0xB5, 1, 0, 0})
	CMember(EParticleSignificanceLevel)                MaxSignificanceLevel                                        OFFSET(get<T>, {0xB7, 1, 0, 0})
	DMember(uint32_t)                                  MinTimeBetweenTicks                                         OFFSET(get<uint32_t>, {0xB8, 4, 0, 0})
	DMember(float)                                     InsignificanceDelay                                         OFFSET(get<float>, {0xBC, 4, 0, 0})
	SMember(FVector)                                   MacroUVPosition                                             OFFSET(getStruct<T>, {0xC0, 12, 0, 0})
	SMember(FBox)                                      CustomOcclusionBounds                                       OFFSET(getStruct<T>, {0xCC, 28, 0, 0})
	CMember(TArray<FLODSoloTrack>)                     SoloTracking                                                OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(TArray<FNamedEmitterMaterial>)             NamedMaterialSlots                                          OFFSET(get<T>, {0xF8, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.ParticleSystem.ContainsEmitterType
	// bool ContainsEmitterType(class UClass* TypeData);                                                                        // [0x33b0fe0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.ParticleSystemReplay
/// Size: 0x0018 (0x000028 - 0x000040)
class UParticleSystemReplay : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(int32_t)                                   ClipIDNumber                                                OFFSET(get<int32_t>, {0x28, 4, 0, 0})
};

/// Class /Script/Engine.PathFollowingAgentInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UPathFollowingAgentInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.PawnNoiseEmitterComponent
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UPawnNoiseEmitterComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	DMember(bool)                                      bAIPerceptionSystemCompatibilityMode                        OFFSET(get<bool>, {0xB0, 1, 1, 0})
	SMember(FVector)                                   LastRemoteNoisePosition                                     OFFSET(getStruct<T>, {0xB4, 12, 0, 0})
	DMember(float)                                     NoiseLifetime                                               OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     LastRemoteNoiseVolume                                       OFFSET(get<float>, {0xC4, 4, 0, 0})
	DMember(float)                                     LastRemoteNoiseTime                                         OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(float)                                     LastLocalNoiseVolume                                        OFFSET(get<float>, {0xCC, 4, 0, 0})
	DMember(float)                                     LastLocalNoiseTime                                          OFFSET(get<float>, {0xD0, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.PawnNoiseEmitterComponent.MakeNoise
	// void MakeNoise(class AActor* NoiseMaker, float Loudness, FVector& NoiseLocation);                                        // [0x33b6ba0] BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.PhysicalAnimationComponent
/// Size: 0x0040 (0x0000B0 - 0x0000F0)
class UPhysicalAnimationComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	DMember(float)                                     StrengthMultiplyer                                          OFFSET(get<float>, {0xB0, 4, 0, 0})
	CMember(class USkeletalMeshComponent*)             SkeletalMeshComponent                                       OFFSET(get<T>, {0xB8, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.PhysicalAnimationComponent.SetStrengthMultiplyer
	// void SetStrengthMultiplyer(float InStrengthMultiplyer);                                                                  // [0x33b8720] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent
	// void SetSkeletalMeshComponent(class USkeletalMeshComponent* InSkeletalMeshComponent);                                    // [0x33b8690] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicalAnimationComponent.GetBodyTargetTransform
	// FTransform GetBodyTargetTransform(FName BodyName);                                                                       // [0x33b64c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow
	// void ApplyPhysicalAnimationSettingsBelow(FName BodyName, FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf); // [0x33b6280] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings
	// void ApplyPhysicalAnimationSettings(FName BodyName, FPhysicalAnimationData& PhysicalAnimationData);                      // [0x33b6190] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow
	// void ApplyPhysicalAnimationProfileBelow(FName BodyName, FName ProfileName, bool bIncludeSelf, bool bClearNotFound);      // [0x33b6030] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PhysicalMaterialMask
/// Size: 0x0008 (0x000028 - 0x000030)
class UPhysicalMaterialMask : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   UVChannelIndex                                              OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               AddressX                                                    OFFSET(get<T>, {0x2C, 1, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               AddressY                                                    OFFSET(get<T>, {0x2D, 1, 0, 0})
};

/// Struct /Script/Engine.SolverIterations
/// Size: 0x001C (0x000000 - 0x00001C)
class FSolverIterations : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	DMember(float)                                     FixedTimeStep                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   SolverIterations                                            OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   JointIterations                                             OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   CollisionIterations                                         OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   SolverPushOutIterations                                     OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   JointPushOutIterations                                      OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   CollisionPushOutIterations                                  OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Class /Script/Engine.PhysicsAsset
/// Size: 0x0110 (0x000028 - 0x000138)
class UPhysicsAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	CMember(TArray<int32_t>)                           BoundsBodies                                                OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<class USkeletalBodySetup*>)         SkeletalBodySetups                                          OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<class UPhysicsConstraintTemplate*>) ConstraintSetup                                             OFFSET(get<T>, {0x50, 16, 0, 0})
	SMember(FSolverIterations)                         SolverIterations                                            OFFSET(getStruct<T>, {0x60, 28, 0, 0})
	DMember(bool)                                      bNotForDedicatedServer                                      OFFSET(get<bool>, {0x7C, 1, 1, 0})
	CMember(class UThumbnailInfo*)                     ThumbnailInfo                                               OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(TArray<class UBodySetup*>)                 BodySetup                                                   OFFSET(get<T>, {0x128, 16, 0, 0})
};

/// Struct /Script/Engine.PhysicalAnimationData
/// Size: 0x0024 (0x000000 - 0x000024)
class FPhysicalAnimationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	SMember(FName)                                     BodyName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bIsLocalSimulation                                          OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(float)                                     OrientationStrength                                         OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     AngularVelocityStrength                                     OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     PositionStrength                                            OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     VelocityStrength                                            OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     MaxLinearForce                                              OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     MaxAngularForce                                             OFFSET(get<float>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.PhysicalAnimationProfile
/// Size: 0x002C (0x000000 - 0x00002C)
class FPhysicalAnimationProfile : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 44;

public:
	SMember(FName)                                     ProfileName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FPhysicalAnimationData)                    PhysicalAnimationData                                       OFFSET(getStruct<T>, {0x8, 36, 0, 0})
};

/// Class /Script/Engine.SkeletalBodySetup
/// Size: 0x0018 (0x0002A0 - 0x0002B8)
class USkeletalBodySetup : public UBodySetup
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 696;

public:
	DMember(bool)                                      bSkipScaleFromAnimation                                     OFFSET(get<bool>, {0x2A0, 1, 0, 0})
	CMember(TArray<FPhysicalAnimationProfile>)         PhysicalAnimationData                                       OFFSET(get<T>, {0x2A8, 16, 0, 0})
};

/// Class /Script/Engine.PhysicsCollisionHandler
/// Size: 0x0018 (0x000028 - 0x000040)
class UPhysicsCollisionHandler : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     ImpactThreshold                                             OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     ImpactReFireDelay                                           OFFSET(get<float>, {0x2C, 4, 0, 0})
	CMember(class USoundBase*)                         DefaultImpactSound                                          OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     LastImpactSoundTime                                         OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/Engine.RigidBodyBase
/// Size: 0x0000 (0x000220 - 0x000220)
class ARigidBodyBase : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
};

/// Class /Script/Engine.PhysicsConstraintActor
/// Size: 0x0020 (0x000220 - 0x000240)
class APhysicsConstraintActor : public ARigidBodyBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(class UPhysicsConstraintComponent*)        ConstraintComp                                              OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class AActor*)                             ConstraintActor1                                            OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class AActor*)                             ConstraintActor2                                            OFFSET(get<T>, {0x230, 8, 0, 0})
	DMember(bool)                                      bDisableCollision                                           OFFSET(get<bool>, {0x238, 1, 1, 0})
};

/// Struct /Script/Engine.ConstrainComponentPropName
/// Size: 0x0008 (0x000000 - 0x000008)
class FConstrainComponentPropName : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     ComponentName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.ConstraintInstanceBase
/// Size: 0x0018 (0x000000 - 0x000018)
class FConstraintInstanceBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Engine.ConstraintBaseParams
/// Size: 0x0014 (0x000000 - 0x000014)
class FConstraintBaseParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     Stiffness                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Damping                                                     OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Restitution                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     ContactDistance                                             OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(bool)                                      bSoftConstraint                                             OFFSET(get<bool>, {0x10, 1, 1, 0})
};

/// Struct /Script/Engine.LinearConstraint
/// Size: 0x0008 (0x000014 - 0x00001C)
class FLinearConstraint : public FConstraintBaseParams
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	DMember(float)                                     Limit                                                       OFFSET(get<float>, {0x14, 4, 0, 0})
	CMember(TEnumAsByte<ELinearConstraintMotion>)      XMotion                                                     OFFSET(get<T>, {0x18, 1, 0, 0})
	CMember(TEnumAsByte<ELinearConstraintMotion>)      YMotion                                                     OFFSET(get<T>, {0x19, 1, 0, 0})
	CMember(TEnumAsByte<ELinearConstraintMotion>)      ZMotion                                                     OFFSET(get<T>, {0x1A, 1, 0, 0})
};

/// Struct /Script/Engine.ConeConstraint
/// Size: 0x000C (0x000014 - 0x000020)
class FConeConstraint : public FConstraintBaseParams
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(float)                                     Swing1LimitDegrees                                          OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     Swing2LimitDegrees                                          OFFSET(get<float>, {0x18, 4, 0, 0})
	CMember(TEnumAsByte<EAngularConstraintMotion>)     Swing1Motion                                                OFFSET(get<T>, {0x1C, 1, 0, 0})
	CMember(TEnumAsByte<EAngularConstraintMotion>)     Swing2Motion                                                OFFSET(get<T>, {0x1D, 1, 0, 0})
};

/// Struct /Script/Engine.TwistConstraint
/// Size: 0x0008 (0x000014 - 0x00001C)
class FTwistConstraint : public FConstraintBaseParams
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	DMember(float)                                     TwistLimitDegrees                                           OFFSET(get<float>, {0x14, 4, 0, 0})
	CMember(TEnumAsByte<EAngularConstraintMotion>)     TwistMotion                                                 OFFSET(get<T>, {0x18, 1, 0, 0})
};

/// Struct /Script/Engine.ConstraintDrive
/// Size: 0x0010 (0x000000 - 0x000010)
class FConstraintDrive : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Stiffness                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Damping                                                     OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     MaxForce                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      bEnablePositionDrive                                        OFFSET(get<bool>, {0xC, 1, 1, 0})
	DMember(bool)                                      bEnableVelocityDrive                                        OFFSET(get<bool>, {0xC, 1, 1, 1})
};

/// Struct /Script/Engine.LinearDriveConstraint
/// Size: 0x004C (0x000000 - 0x00004C)
class FLinearDriveConstraint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 76;

public:
	SMember(FVector)                                   PositionTarget                                              OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   VelocityTarget                                              OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FConstraintDrive)                          XDrive                                                      OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	SMember(FConstraintDrive)                          YDrive                                                      OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FConstraintDrive)                          ZDrive                                                      OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      bEnablePositionDrive                                        OFFSET(get<bool>, {0x48, 1, 1, 0})
};

/// Struct /Script/Engine.AngularDriveConstraint
/// Size: 0x004C (0x000000 - 0x00004C)
class FAngularDriveConstraint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 76;

public:
	SMember(FConstraintDrive)                          TwistDrive                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FConstraintDrive)                          SwingDrive                                                  OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FConstraintDrive)                          SlerpDrive                                                  OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FRotator)                                  OrientationTarget                                           OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	SMember(FVector)                                   AngularVelocityTarget                                       OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
	CMember(TEnumAsByte<EAngularDriveMode>)            AngularDriveMode                                            OFFSET(get<T>, {0x48, 1, 0, 0})
};

/// Struct /Script/Engine.ConstraintProfileProperties
/// Size: 0x010C (0x000000 - 0x00010C)
class FConstraintProfileProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 268;

public:
	DMember(float)                                     ProjectionLinearTolerance                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     ProjectionAngularTolerance                                  OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     ProjectionLinearAlpha                                       OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     ProjectionAngularAlpha                                      OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     LinearBreakThreshold                                        OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     AngularBreakThreshold                                       OFFSET(get<float>, {0x14, 4, 0, 0})
	SMember(FLinearConstraint)                         LinearLimit                                                 OFFSET(getStruct<T>, {0x18, 28, 0, 0})
	SMember(FConeConstraint)                           ConeLimit                                                   OFFSET(getStruct<T>, {0x34, 32, 0, 0})
	SMember(FTwistConstraint)                          TwistLimit                                                  OFFSET(getStruct<T>, {0x54, 28, 0, 0})
	SMember(FLinearDriveConstraint)                    LinearDrive                                                 OFFSET(getStruct<T>, {0x70, 76, 0, 0})
	SMember(FAngularDriveConstraint)                   AngularDrive                                                OFFSET(getStruct<T>, {0xBC, 76, 0, 0})
	DMember(bool)                                      bDisableCollision                                           OFFSET(get<bool>, {0x108, 1, 1, 0})
	DMember(bool)                                      bParentDominates                                            OFFSET(get<bool>, {0x108, 1, 1, 1})
	DMember(bool)                                      bEnableProjection                                           OFFSET(get<bool>, {0x108, 1, 1, 2})
	DMember(bool)                                      bEnableSoftProjection                                       OFFSET(get<bool>, {0x108, 1, 1, 3})
	DMember(bool)                                      bAngularBreakable                                           OFFSET(get<bool>, {0x108, 1, 1, 4})
	DMember(bool)                                      bLinearBreakable                                            OFFSET(get<bool>, {0x108, 1, 1, 5})
};

/// Struct /Script/Engine.ConstraintInstance
/// Size: 0x01A8 (0x000018 - 0x0001C0)
class FConstraintInstance : public FConstraintInstanceBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
	SMember(FName)                                     JointName                                                   OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FName)                                     ConstraintBone1                                             OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	SMember(FName)                                     ConstraintBone2                                             OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	SMember(FVector)                                   Pos1                                                        OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	SMember(FVector)                                   PriAxis1                                                    OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
	SMember(FVector)                                   SecAxis1                                                    OFFSET(getStruct<T>, {0x48, 12, 0, 0})
	SMember(FVector)                                   Pos2                                                        OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FVector)                                   PriAxis2                                                    OFFSET(getStruct<T>, {0x60, 12, 0, 0})
	SMember(FVector)                                   SecAxis2                                                    OFFSET(getStruct<T>, {0x6C, 12, 0, 0})
	SMember(FRotator)                                  AngularRotationOffset                                       OFFSET(getStruct<T>, {0x78, 12, 0, 0})
	DMember(bool)                                      bScaleLinearLimits                                          OFFSET(get<bool>, {0x84, 1, 1, 0})
	SMember(FConstraintProfileProperties)              ProfileInstance                                             OFFSET(getStruct<T>, {0x8C, 268, 0, 0})
};

/// Class /Script/Engine.PhysicsConstraintComponent
/// Size: 0x0208 (0x0001F8 - 0x000400)
class UPhysicsConstraintComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
	CMember(class AActor*)                             ConstraintActor1                                            OFFSET(get<T>, {0x1F8, 8, 0, 0})
	SMember(FConstrainComponentPropName)               ComponentName1                                              OFFSET(getStruct<T>, {0x200, 8, 0, 0})
	CMember(class AActor*)                             ConstraintActor2                                            OFFSET(get<T>, {0x208, 8, 0, 0})
	SMember(FConstrainComponentPropName)               ComponentName2                                              OFFSET(getStruct<T>, {0x210, 8, 0, 0})
	CMember(class UPhysicsConstraintTemplate*)         ConstraintSetup                                             OFFSET(get<T>, {0x228, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnConstraintBroken                                          OFFSET(getStruct<T>, {0x230, 16, 0, 0})
	SMember(FConstraintInstance)                       ConstraintInstance                                          OFFSET(getStruct<T>, {0x240, 448, 0, 0})


	/// Functions
	// Function /Script/Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing
	// void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);                                   // [0x33b85c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP
	// void SetOrientationDriveSLERP(bool bEnableSLERP);                                                                        // [0x33b8530] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearZLimit
	// void SetLinearZLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);                              // [0x33b8460] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearYLimit
	// void SetLinearYLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);                              // [0x33b8390] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearXLimit
	// void SetLinearXLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);                              // [0x33b82c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearVelocityTarget
	// void SetLinearVelocityTarget(FVector& InVelTarget);                                                                      // [0x33b8230] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearVelocityDrive
	// void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);                                 // [0x33b8100] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearPositionTarget
	// void SetLinearPositionTarget(FVector& InPosTarget);                                                                      // [0x33b8070] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearPositionDrive
	// void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);                                 // [0x33b7f40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearDriveParams
	// void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);                           // [0x33b7e20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearBreakable
	// void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);                                              // [0x33b7d50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetDisableCollision
	// void SetDisableCollision(bool bDisableCollision);                                                                        // [0x33b7cc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstraintReferencePosition
	// void SetConstraintReferencePosition(TEnumAsByte<EConstraintFrame> Frame, FVector& RefPosition);                          // [0x33b7bf0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation
	// void SetConstraintReferenceOrientation(TEnumAsByte<EConstraintFrame> Frame, FVector& PriAxis, FVector& SecAxis);         // [0x33b7ac0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame
	// void SetConstraintReferenceFrame(TEnumAsByte<EConstraintFrame> Frame, FTransform& RefFrame);                             // [0x33b79a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstrainedComponents
	// void SetConstrainedComponents(class UPrimitiveComponent* Component1, FName BoneName1, class UPrimitiveComponent* Component2, FName BoneName2); // [0x33b7840] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityTarget
	// void SetAngularVelocityTarget(FVector& InVelTarget);                                                                     // [0x33b76e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing
	// void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);                               // [0x33b7610] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP
	// void SetAngularVelocityDriveSLERP(bool bEnableSLERP);                                                                    // [0x33b7580] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityDrive
	// void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);                                            // [0x33b74b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularTwistLimit
	// void SetAngularTwistLimit(TEnumAsByte<EAngularConstraintMotion> ConstraintType, float TwistLimitAngle);                  // [0x33b73e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularSwing2Limit
	// void SetAngularSwing2Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing2LimitAngle);                    // [0x33b7310] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularSwing1Limit
	// void SetAngularSwing1Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing1LimitAngle);                    // [0x33b7240] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularOrientationTarget
	// void SetAngularOrientationTarget(FRotator& InPosTarget);                                                                 // [0x33b71b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularOrientationDrive
	// void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);                                         // [0x33b70e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularDriveParams
	// void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);                          // [0x33b6fc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularDriveMode
	// void SetAngularDriveMode(TEnumAsByte<EAngularDriveMode> DriveMode);                                                      // [0x33b6f40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularBreakable
	// void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);                                           // [0x33b6e70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.IsBroken
	// bool IsBroken();                                                                                                         // [0x33b6960] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.GetCurrentTwist
	// float GetCurrentTwist();                                                                                                 // [0x33b6720] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsConstraintComponent.GetCurrentSwing2
	// float GetCurrentSwing2();                                                                                                // [0x33b66f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsConstraintComponent.GetCurrentSwing1
	// float GetCurrentSwing1();                                                                                                // [0x33b66c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsConstraintComponent.GetConstraintForce
	// void GetConstraintForce(FVector& OutLinearForce, FVector& OutAngularForce);                                              // [0x33b6580] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.BreakConstraint
	// void BreakConstraint();                                                                                                  // [0x33b63c0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.PhysicsConstraintProfileHandle
/// Size: 0x0114 (0x000000 - 0x000114)
class FPhysicsConstraintProfileHandle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 276;

public:
	SMember(FConstraintProfileProperties)              ProfileProperties                                           OFFSET(getStruct<T>, {0x0, 268, 0, 0})
	SMember(FName)                                     ProfileName                                                 OFFSET(getStruct<T>, {0x10C, 8, 0, 0})
};

/// Class /Script/Engine.PhysicsConstraintTemplate
/// Size: 0x02E0 (0x000028 - 0x000308)
class UPhysicsConstraintTemplate : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 776;

public:
	SMember(FConstraintInstance)                       DefaultInstance                                             OFFSET(getStruct<T>, {0x28, 448, 0, 0})
	CMember(TArray<FPhysicsConstraintProfileHandle>)   ProfileHandles                                              OFFSET(get<T>, {0x1E8, 16, 0, 0})
	SMember(FConstraintProfileProperties)              DefaultProfile                                              OFFSET(getStruct<T>, {0x1F8, 268, 0, 0})
};

/// Class /Script/Engine.PhysicsHandleComponent
/// Size: 0x00B0 (0x0000B0 - 0x000160)
class UPhysicsHandleComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(class UPrimitiveComponent*)                GrabbedComponent                                            OFFSET(get<T>, {0xB0, 8, 0, 0})
	DMember(bool)                                      bSoftAngularConstraint                                      OFFSET(get<bool>, {0xC0, 1, 1, 1})
	DMember(bool)                                      bSoftLinearConstraint                                       OFFSET(get<bool>, {0xC0, 1, 1, 2})
	DMember(bool)                                      bInterpolateTarget                                          OFFSET(get<bool>, {0xC0, 1, 1, 3})
	DMember(float)                                     LinearDamping                                               OFFSET(get<float>, {0xC4, 4, 0, 0})
	DMember(float)                                     LinearStiffness                                             OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(float)                                     AngularDamping                                              OFFSET(get<float>, {0xCC, 4, 0, 0})
	DMember(float)                                     AngularStiffness                                            OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(float)                                     InterpolationSpeed                                          OFFSET(get<float>, {0x140, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.PhysicsHandleComponent.SetTargetRotation
	// void SetTargetRotation(FRotator NewRotation);                                                                            // [0x33bb590] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetTargetLocationAndRotation
	// void SetTargetLocationAndRotation(FVector NewLocation, FRotator NewRotation);                                            // [0x33bb4b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetTargetLocation
	// void SetTargetLocation(FVector NewLocation);                                                                             // [0x33bb420] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetLinearStiffness
	// void SetLinearStiffness(float NewLinearStiffness);                                                                       // [0x33bb3a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetLinearDamping
	// void SetLinearDamping(float NewLinearDamping);                                                                           // [0x33bb320] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetInterpolationSpeed
	// void SetInterpolationSpeed(float NewInterpolationSpeed);                                                                 // [0x33bb2a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetAngularStiffness
	// void SetAngularStiffness(float NewAngularStiffness);                                                                     // [0x33bb220] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetAngularDamping
	// void SetAngularDamping(float NewAngularDamping);                                                                         // [0x33bb1a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.ReleaseComponent
	// void ReleaseComponent();                                                                                                 // [0x32e1120] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation
	// void GrabComponentAtLocationWithRotation(class UPrimitiveComponent* Component, FName InBoneName, FVector Location, FRotator Rotation); // [0x33baf20] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.GrabComponentAtLocation
	// void GrabComponentAtLocation(class UPrimitiveComponent* Component, FName InBoneName, FVector GrabLocation);              // [0x33bae00] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.GrabComponent
	// void GrabComponent(class UPrimitiveComponent* Component, FName InBoneName, FVector GrabLocation, bool bConstrainRotation); // [0x33bac90] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.GetTargetLocationAndRotation
	// void GetTargetLocationAndRotation(FVector& TargetLocation, FRotator& TargetRotation);                                    // [0x33babb0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsHandleComponent.GetGrabbedComponent
	// class UPrimitiveComponent* GetGrabbedComponent();                                                                        // [0x2506a60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.RigidBodyErrorCorrection
/// Size: 0x0034 (0x000000 - 0x000034)
class FRigidBodyErrorCorrection : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 52;

public:
	DMember(float)                                     PingExtrapolation                                           OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     PingLimit                                                   OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     ErrorPerLinearDifference                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     ErrorPerAngularDifference                                   OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     MaxRestoredStateError                                       OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     MaxLinearHardSnapDistance                                   OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     PositionLerp                                                OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     AngleLerp                                                   OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     LinearVelocityCoefficient                                   OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     AngularVelocityCoefficient                                  OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     ErrorAccumulationSeconds                                    OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     ErrorAccumulationDistanceSq                                 OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     ErrorAccumulationSimilarity                                 OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Struct /Script/Engine.PhysicalSurfaceName
/// Size: 0x000C (0x000000 - 0x00000C)
class FPhysicalSurfaceName : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	CMember(TEnumAsByte<EPhysicalSurface>)             Type                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x4, 8, 0, 0})
};

/// Struct /Script/Engine.BroadphaseSettings
/// Size: 0x0040 (0x000000 - 0x000040)
class FBroadphaseSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bUseMBPOnClient                                             OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bUseMBPOnServer                                             OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      bUseMBPOuterBounds                                          OFFSET(get<bool>, {0x2, 1, 0, 0})
	SMember(FBox)                                      MBPBounds                                                   OFFSET(getStruct<T>, {0x4, 28, 0, 0})
	SMember(FBox)                                      MBPOuterBounds                                              OFFSET(getStruct<T>, {0x20, 28, 0, 0})
	DMember(uint32_t)                                  MBPNumSubdivs                                               OFFSET(get<uint32_t>, {0x3C, 4, 0, 0})
};

/// Struct /Script/Engine.ChaosPhysicsSettings
/// Size: 0x0003 (0x000000 - 0x000003)
class FChaosPhysicsSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 3;

public:
	CMember(EChaosThreadingMode)                       DefaultThreadingModel                                       OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(EChaosSolverTickMode)                      DedicatedThreadTickMode                                     OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(EChaosBufferMode)                          DedicatedThreadBufferMode                                   OFFSET(get<T>, {0x2, 1, 0, 0})
};

/// Class /Script/Engine.PhysicsSettings
/// Size: 0x00C0 (0x0000E0 - 0x0001A0)
class UPhysicsSettings : public UPhysicsSettingsCore
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	SMember(FRigidBodyErrorCorrection)                 PhysicErrorCorrection                                       OFFSET(getStruct<T>, {0xE0, 52, 0, 0})
	CMember(TEnumAsByte<ESettingsLockedAxis>)          LockedAxis                                                  OFFSET(get<T>, {0x114, 1, 0, 0})
	CMember(TEnumAsByte<ESettingsDOF>)                 DefaultDegreesOfFreedom                                     OFFSET(get<T>, {0x115, 1, 0, 0})
	DMember(bool)                                      bSuppressFaceRemapTable                                     OFFSET(get<bool>, {0x116, 1, 0, 0})
	DMember(bool)                                      bSupportUVFromHitResults                                    OFFSET(get<bool>, {0x117, 1, 0, 0})
	DMember(bool)                                      bDisableActiveActors                                        OFFSET(get<bool>, {0x118, 1, 0, 0})
	DMember(bool)                                      bDisableKinematicStaticPairs                                OFFSET(get<bool>, {0x119, 1, 0, 0})
	DMember(bool)                                      bDisableKinematicKinematicPairs                             OFFSET(get<bool>, {0x11A, 1, 0, 0})
	DMember(bool)                                      bDisableCCD                                                 OFFSET(get<bool>, {0x11B, 1, 0, 0})
	DMember(bool)                                      bEnableEnhancedDeterminism                                  OFFSET(get<bool>, {0x11C, 1, 0, 0})
	DMember(float)                                     AnimPhysicsMinDeltaTime                                     OFFSET(get<float>, {0x120, 4, 0, 0})
	DMember(bool)                                      bSimulateAnimPhysicsAfterReset                              OFFSET(get<bool>, {0x124, 1, 0, 0})
	DMember(float)                                     MaxPhysicsDeltaTime                                         OFFSET(get<float>, {0x128, 4, 0, 0})
	DMember(bool)                                      bSubstepping                                                OFFSET(get<bool>, {0x12C, 1, 0, 0})
	DMember(bool)                                      bSubsteppingAsync                                           OFFSET(get<bool>, {0x12D, 1, 0, 0})
	DMember(float)                                     MaxSubstepDeltaTime                                         OFFSET(get<float>, {0x130, 4, 0, 0})
	DMember(int32_t)                                   MaxSubsteps                                                 OFFSET(get<int32_t>, {0x134, 4, 0, 0})
	DMember(float)                                     SyncSceneSmoothingFactor                                    OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(float)                                     InitialAverageFrameRate                                     OFFSET(get<float>, {0x13C, 4, 0, 0})
	DMember(int32_t)                                   PhysXTreeRebuildRate                                        OFFSET(get<int32_t>, {0x140, 4, 0, 0})
	CMember(TArray<FPhysicalSurfaceName>)              PhysicalSurfaces                                            OFFSET(get<T>, {0x148, 16, 0, 0})
	SMember(FBroadphaseSettings)                       DefaultBroadphaseSettings                                   OFFSET(getStruct<T>, {0x158, 64, 0, 0})
	DMember(float)                                     MinDeltaVelocityForHitEvents                                OFFSET(get<float>, {0x198, 4, 0, 0})
	SMember(FChaosPhysicsSettings)                     ChaosSettings                                               OFFSET(getStruct<T>, {0x19C, 3, 0, 0})
};

/// Class /Script/Engine.PhysicsSpringComponent
/// Size: 0x0028 (0x0001F8 - 0x000220)
class UPhysicsSpringComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	DMember(float)                                     SpringStiffness                                             OFFSET(get<float>, {0x1F8, 4, 0, 0})
	DMember(float)                                     SpringDamping                                               OFFSET(get<float>, {0x1FC, 4, 0, 0})
	DMember(float)                                     SpringLengthAtRest                                          OFFSET(get<float>, {0x200, 4, 0, 0})
	DMember(float)                                     SpringRadius                                                OFFSET(get<float>, {0x204, 4, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            SpringChannel                                               OFFSET(get<T>, {0x208, 1, 0, 0})
	DMember(bool)                                      bIgnoreSelf                                                 OFFSET(get<bool>, {0x209, 1, 0, 0})
	DMember(float)                                     SpringCompression                                           OFFSET(get<float>, {0x20C, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.PhysicsSpringComponent.GetSpringRestingPoint
	// FVector GetSpringRestingPoint();                                                                                         // [0x33bab70] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsSpringComponent.GetSpringDirection
	// FVector GetSpringDirection();                                                                                            // [0x33bab30] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint
	// FVector GetSpringCurrentEndPoint();                                                                                      // [0x33baaf0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar
	// float GetNormalizedCompressionScalar();                                                                                  // [0x33baac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.PhysicsThruster
/// Size: 0x0008 (0x000220 - 0x000228)
class APhysicsThruster : public ARigidBodyBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(class UPhysicsThrusterComponent*)          ThrusterComponent                                           OFFSET(get<T>, {0x220, 8, 0, 0})
};

/// Class /Script/Engine.PhysicsThrusterComponent
/// Size: 0x0008 (0x0001F8 - 0x000200)
class UPhysicsThrusterComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
	DMember(float)                                     ThrustStrength                                              OFFSET(get<float>, {0x1F8, 4, 0, 0})
};

/// Class /Script/Engine.SceneCapture
/// Size: 0x0010 (0x000220 - 0x000230)
class ASceneCapture : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(class UStaticMeshComponent*)               MeshComp                                                    OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class USceneComponent*)                    SceneComponent                                              OFFSET(get<T>, {0x228, 8, 0, 0})
};

/// Class /Script/Engine.PlanarReflection
/// Size: 0x0010 (0x000230 - 0x000240)
class APlanarReflection : public ASceneCapture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(class UPlanarReflectionComponent*)         PlanarReflectionComponent                                   OFFSET(get<T>, {0x230, 8, 0, 0})
	DMember(bool)                                      bShowPreviewPlane                                           OFFSET(get<bool>, {0x238, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.PlanarReflection.OnInterpToggle
	// void OnInterpToggle(bool bEnable);                                                                                       // [0x33bb110] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PlanarReflectionComponent
/// Size: 0x00F0 (0x0002B0 - 0x0003A0)
class UPlanarReflectionComponent : public USceneCaptureComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	CMember(class UBoxComponent*)                      PreviewBox                                                  OFFSET(get<T>, {0x2B0, 8, 0, 0})
	DMember(float)                                     NormalDistortionStrength                                    OFFSET(get<float>, {0x2B8, 4, 0, 0})
	DMember(float)                                     PrefilterRoughness                                          OFFSET(get<float>, {0x2BC, 4, 0, 0})
	DMember(float)                                     PrefilterRoughnessDistance                                  OFFSET(get<float>, {0x2C0, 4, 0, 0})
	DMember(int32_t)                                   ScreenPercentage                                            OFFSET(get<int32_t>, {0x2C4, 4, 0, 0})
	DMember(float)                                     ExtraFOV                                                    OFFSET(get<float>, {0x2C8, 4, 0, 0})
	DMember(float)                                     DistanceFromPlaneFadeStart                                  OFFSET(get<float>, {0x2CC, 4, 0, 0})
	DMember(float)                                     DistanceFromPlaneFadeEnd                                    OFFSET(get<float>, {0x2D0, 4, 0, 0})
	DMember(float)                                     DistanceFromPlaneFadeoutStart                               OFFSET(get<float>, {0x2D4, 4, 0, 0})
	DMember(float)                                     DistanceFromPlaneFadeoutEnd                                 OFFSET(get<float>, {0x2D8, 4, 0, 0})
	DMember(float)                                     AngleFromPlaneFadeStart                                     OFFSET(get<float>, {0x2DC, 4, 0, 0})
	DMember(float)                                     AngleFromPlaneFadeEnd                                       OFFSET(get<float>, {0x2E0, 4, 0, 0})
	DMember(bool)                                      bShowPreviewPlane                                           OFFSET(get<bool>, {0x2E4, 1, 0, 0})
	DMember(bool)                                      bRenderSceneTwoSided                                        OFFSET(get<bool>, {0x2E5, 1, 0, 0})
};

/// Class /Script/Engine.PlaneReflectionCapture
/// Size: 0x0000 (0x000228 - 0x000228)
class APlaneReflectionCapture : public AReflectionCapture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
};

/// Class /Script/Engine.PlaneReflectionCaptureComponent
/// Size: 0x0018 (0x000278 - 0x000290)
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	DMember(float)                                     InfluenceRadiusScale                                        OFFSET(get<float>, {0x278, 4, 0, 0})
	CMember(class UDrawSphereComponent*)               PreviewInfluenceRadius                                      OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UBoxComponent*)                      PreviewCaptureBox                                           OFFSET(get<T>, {0x288, 8, 0, 0})
};

/// Class /Script/Engine.PlatformEventsComponent
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class UPlatformEventsComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FMulticastInlineDelegate)                  PlatformChangedToLaptopModeDelegate                         OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  PlatformChangedToTabletModeDelegate                         OFFSET(getStruct<T>, {0xC0, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.PlatformEventsComponent.SupportsConvertibleLaptops
	// bool SupportsConvertibleLaptops();                                                                                       // [0x33bb620] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature
	// void PlatformEventDelegate__DelegateSignature();                                                                         // [0x198a600] MulticastDelegate|Public|Delegate 
	// Function /Script/Engine.PlatformEventsComponent.IsInTabletMode
	// bool IsInTabletMode();                                                                                                   // [0x33bb0e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlatformEventsComponent.IsInLaptopMode
	// bool IsInLaptopMode();                                                                                                   // [0x33bb0b0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PlatformInterfaceWebResponse
/// Size: 0x0088 (0x000028 - 0x0000B0)
class UPlatformInterfaceWebResponse : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FString)                                   OriginalURL                                                 OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	DMember(int32_t)                                   ResponseCode                                                OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   Tag                                                         OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	SMember(FString)                                   StringResponse                                              OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(TArray<char>)                              BinaryResponse                                              OFFSET(get<T>, {0x50, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.PlatformInterfaceWebResponse.GetNumHeaders
	// int32_t GetNumHeaders();                                                                                                 // [0xeba7c0] Native|Public        
	// Function /Script/Engine.PlatformInterfaceWebResponse.GetHeaderValue
	// FString GetHeaderValue(FString HeaderName);                                                                              // [0x33ba9d0] Native|Public        
	// Function /Script/Engine.PlatformInterfaceWebResponse.GetHeader
	// void GetHeader(int32_t HeaderIndex, FString& Header, FString& Value);                                                    // [0x33ba870] Native|Public|HasOutParms 
};

/// Struct /Script/Engine.MinimalViewInfo
/// Size: 0x05E0 (0x000000 - 0x0005E0)
class FMinimalViewInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1504;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	DMember(float)                                     FOV                                                         OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     DesiredFOV                                                  OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     OrthoWidth                                                  OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     OrthoNearClipPlane                                          OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     OrthoFarClipPlane                                           OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     AspectRatio                                                 OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(bool)                                      bConstrainAspectRatio                                       OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      bUseFieldOfViewForLOD                                       OFFSET(get<bool>, {0x30, 1, 1, 1})
	CMember(TEnumAsByte<ECameraProjectionMode>)        ProjectionMode                                              OFFSET(get<T>, {0x34, 1, 0, 0})
	DMember(float)                                     PostProcessBlendWeight                                      OFFSET(get<float>, {0x38, 4, 0, 0})
	SMember(FPostProcessSettings)                      PostProcessSettings                                         OFFSET(getStruct<T>, {0x40, 1360, 0, 0})
	SMember(FVector2D)                                 OffCenterProjectionOffset                                   OFFSET(getStruct<T>, {0x590, 8, 0, 0})
};

/// Struct /Script/Engine.CameraCacheEntry
/// Size: 0x05F0 (0x000000 - 0x0005F0)
class FCameraCacheEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1520;

public:
	DMember(float)                                     Timestamp                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FMinimalViewInfo)                          POV                                                         OFFSET(getStruct<T>, {0x10, 1504, 0, 0})
};

/// Struct /Script/Engine.TViewTarget
/// Size: 0x0600 (0x000000 - 0x000600)
class FTViewTarget : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1536;

public:
	CMember(class AActor*)                             Target                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FMinimalViewInfo)                          POV                                                         OFFSET(getStruct<T>, {0x10, 1504, 0, 0})
	CMember(class APlayerState*)                       PlayerState                                                 OFFSET(get<T>, {0x5F0, 8, 0, 0})
};

/// Class /Script/Engine.PlayerCameraManager
/// Size: 0x2590 (0x000220 - 0x0027B0)
class APlayerCameraManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 10160;

public:
	CMember(class APlayerController*)                  PCOwner                                                     OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class USceneComponent*)                    TransformComponent                                          OFFSET(get<T>, {0x228, 8, 0, 0})
	DMember(float)                                     DefaultFOV                                                  OFFSET(get<float>, {0x238, 4, 0, 0})
	DMember(float)                                     DefaultOrthoWidth                                           OFFSET(get<float>, {0x240, 4, 0, 0})
	DMember(float)                                     DefaultAspectRatio                                          OFFSET(get<float>, {0x248, 4, 0, 0})
	SMember(FCameraCacheEntry)                         CameraCache                                                 OFFSET(getStruct<T>, {0x290, 1520, 0, 0})
	SMember(FCameraCacheEntry)                         LastFrameCameraCache                                        OFFSET(getStruct<T>, {0x880, 1520, 0, 0})
	SMember(FTViewTarget)                              ViewTarget                                                  OFFSET(getStruct<T>, {0xE70, 1536, 0, 0})
	SMember(FTViewTarget)                              PendingViewTarget                                           OFFSET(getStruct<T>, {0x1470, 1536, 0, 0})
	SMember(FCameraCacheEntry)                         CameraCachePrivate                                          OFFSET(getStruct<T>, {0x1AA0, 1520, 0, 0})
	SMember(FCameraCacheEntry)                         LastFrameCameraCachePrivate                                 OFFSET(getStruct<T>, {0x2090, 1520, 0, 0})
	CMember(TArray<class UCameraModifier*>)            ModifierList                                                OFFSET(get<T>, {0x2680, 16, 0, 0})
	CMember(TArray<class UClass*>)                     DefaultModifiers                                            OFFSET(get<T>, {0x2690, 16, 0, 0})
	DMember(float)                                     FreeCamDistance                                             OFFSET(get<float>, {0x26A0, 4, 0, 0})
	SMember(FVector)                                   FreeCamOffset                                               OFFSET(getStruct<T>, {0x26A4, 12, 0, 0})
	SMember(FVector)                                   ViewTargetOffset                                            OFFSET(getStruct<T>, {0x26B0, 12, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAudioFadeChangeEvent                                      OFFSET(getStruct<T>, {0x26C0, 16, 0, 0})
	CMember(TArray<class AEmitterCameraLensEffectBase*>) CameraLensEffects                                         OFFSET(get<T>, {0x26E0, 16, 0, 0})
	CMember(class UCameraModifier_CameraShake*)        CachedCameraShakeMod                                        OFFSET(get<T>, {0x26F0, 8, 0, 0})
	CMember(class UCameraAnimInst*)                    AnimInstPool                                                OFFSET(get<T>, {0x26F8, 64, 0, 0})
	CMember(TArray<FPostProcessSettings>)              PostProcessBlendCache                                       OFFSET(get<T>, {0x2738, 16, 0, 0})
	CMember(TArray<class UCameraAnimInst*>)            ActiveAnims                                                 OFFSET(get<T>, {0x2758, 16, 0, 0})
	CMember(TArray<class UCameraAnimInst*>)            FreeAnims                                                   OFFSET(get<T>, {0x2768, 16, 0, 0})
	CMember(class ACameraActor*)                       AnimCameraActor                                             OFFSET(get<T>, {0x2778, 8, 0, 0})
	DMember(bool)                                      bIsOrthographic                                             OFFSET(get<bool>, {0x2780, 1, 1, 0})
	DMember(bool)                                      bDefaultConstrainAspectRatio                                OFFSET(get<bool>, {0x2780, 1, 1, 1})
	DMember(bool)                                      bClientSimulatingViewTarget                                 OFFSET(get<bool>, {0x2780, 1, 1, 6})
	DMember(bool)                                      bUseClientSideCameraUpdates                                 OFFSET(get<bool>, {0x2780, 1, 1, 7})
	DMember(bool)                                      bGameCameraCutThisFrame                                     OFFSET(get<bool>, {0x2781, 1, 1, 2})
	DMember(float)                                     ViewPitchMin                                                OFFSET(get<float>, {0x2784, 4, 0, 0})
	DMember(float)                                     ViewPitchMax                                                OFFSET(get<float>, {0x2788, 4, 0, 0})
	DMember(float)                                     ViewYawMin                                                  OFFSET(get<float>, {0x278C, 4, 0, 0})
	DMember(float)                                     ViewYawMax                                                  OFFSET(get<float>, {0x2790, 4, 0, 0})
	DMember(float)                                     ViewRollMin                                                 OFFSET(get<float>, {0x2794, 4, 0, 0})
	DMember(float)                                     ViewRollMax                                                 OFFSET(get<float>, {0x2798, 4, 0, 0})
	DMember(float)                                     ServerUpdateCameraTimeout                                   OFFSET(get<float>, {0x27A0, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.PlayerCameraManager.SwapPendingViewTargetWhenUsingClientSideCameraUpdates
	// void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();                                                            // [0x33c7a60] Final|Native|Protected 
	// Function /Script/Engine.PlayerCameraManager.StopCameraShake
	// void StopCameraShake(class UCameraShakeBase* ShakeInstance, bool bImmediately);                                          // [0x33c7910] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopCameraFade
	// void StopCameraFade();                                                                                                   // [0x33c78f0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopCameraAnimInst
	// void StopCameraAnimInst(class UCameraAnimInst* AnimInst, bool bImmediate);                                               // [0x33c7820] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllInstancesOfCameraShakeFromSource
	// void StopAllInstancesOfCameraShakeFromSource(class UClass* Shake, class UCameraShakeSourceComponent* SourceComponent, bool bImmediately); // [0x33c7710] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllInstancesOfCameraShake
	// void StopAllInstancesOfCameraShake(class UClass* Shake, bool bImmediately);                                              // [0x33c7640] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim
	// void StopAllInstancesOfCameraAnim(class UCameraAnim* Anim, bool bImmediate);                                             // [0x33c7570] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllCameraShakesFromSource
	// void StopAllCameraShakesFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately);               // [0x33c74a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllCameraShakes
	// void StopAllCameraShakes(bool bImmediately);                                                                             // [0x33c7410] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllCameraAnims
	// void StopAllCameraAnims(bool bImmediate);                                                                                // [0x33c7380] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StartMatineeCameraShakeFromSource
	// class UMatineeCameraShake* StartMatineeCameraShakeFromSource(class UClass* ShakeClass, class UCameraShakeSourceComponent* SourceComponent, float Scale, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot); // [0x33c71a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StartMatineeCameraShake
	// class UMatineeCameraShake* StartMatineeCameraShake(class UClass* ShakeClass, float Scale, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot); // [0x33c7010] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StartCameraShakeFromSource
	// class UCameraShakeBase* StartCameraShakeFromSource(class UClass* ShakeClass, class UCameraShakeSourceComponent* SourceComponent, float Scale, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot); // [0x33c6da0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StartCameraShake
	// class UCameraShakeBase* StartCameraShake(class UClass* ShakeClass, float Scale, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot); // [0x33c6c20] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StartCameraFade
	// void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, FLinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished); // [0x33c6a30] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.SetManualCameraFade
	// void SetManualCameraFade(float InFadeAmount, FLinearColor Color, bool bInFadeAudio);                                     // [0x33c6490] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.SetGameCameraCutThisFrame
	// void SetGameCameraCutThisFrame();                                                                                        // [0x33c6360] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.RemoveCameraModifier
	// bool RemoveCameraModifier(class UCameraModifier* ModifierToRemove);                                                      // [0x33c4d50] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.RemoveCameraLensEffect
	// void RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter);                                                // [0x33c4cc0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.PlayCameraAnim
	// class UCameraAnimInst* PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot); // [0x33c4460] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.PhotographyCameraModify
	// void PhotographyCameraModify(FVector NewCameraLocation, FVector PreviousCameraLocation, FVector OriginalCameraLocation, FVector& ResultCameraLocation); // [0x33c42d0] BlueprintCosmetic|Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographySessionStart
	// void OnPhotographySessionStart();                                                                                        // [0x339ad00] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographySessionEnd
	// void OnPhotographySessionEnd();                                                                                          // [0x15e7d10] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart
	// void OnPhotographyMultiPartCaptureStart();                                                                               // [0x32f0400] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd
	// void OnPhotographyMultiPartCaptureEnd();                                                                                 // [0xc51440] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.GetOwningPlayerController
	// class APlayerController* GetOwningPlayerController();                                                                    // [0x33c3da0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerCameraManager.GetFOVAngle
	// float GetFOVAngle();                                                                                                     // [0x32dcdd0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerCameraManager.GetCameraRotation
	// FRotator GetCameraRotation();                                                                                            // [0x33c29c0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerCameraManager.GetCameraLocation
	// FVector GetCameraLocation();                                                                                             // [0x33c2980] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerCameraManager.FindCameraModifierByClass
	// class UCameraModifier* FindCameraModifierByClass(class UClass* ModifierClass);                                           // [0x33c28e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.ClearCameraLensEffects
	// void ClearCameraLensEffects();                                                                                           // [0x32d9a90] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.BlueprintUpdateCamera
	// bool BlueprintUpdateCamera(class AActor* CameraTarget, FVector& NewCameraLocation, FRotator& NewCameraRotation, float& NewCameraFOV); // [0x198a600] BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.AddNewCameraModifier
	// class UCameraModifier* AddNewCameraModifier(class UClass* ModifierClass);                                                // [0x33bf670] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.AddCameraLensEffect
	// class AEmitterCameraLensEffectBase* AddCameraLensEffect(class UClass* LensEffectEmitterClass);                           // [0x33bf5d0] Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.KeyBind
/// Size: 0x0030 (0x000000 - 0x000030)
class FKeyBind : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FKey)                                      Key                                                         OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FString)                                   Command                                                     OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	DMember(bool)                                      Control                                                     OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(bool)                                      shift                                                       OFFSET(get<bool>, {0x28, 1, 1, 1})
	DMember(bool)                                      Alt                                                         OFFSET(get<bool>, {0x28, 1, 1, 2})
	DMember(bool)                                      Cmd                                                         OFFSET(get<bool>, {0x28, 1, 1, 3})
	DMember(bool)                                      bIgnoreCtrl                                                 OFFSET(get<bool>, {0x28, 1, 1, 4})
	DMember(bool)                                      bIgnoreShift                                                OFFSET(get<bool>, {0x28, 1, 1, 5})
	DMember(bool)                                      bIgnoreAlt                                                  OFFSET(get<bool>, {0x28, 1, 1, 6})
	DMember(bool)                                      bIgnoreCmd                                                  OFFSET(get<bool>, {0x28, 1, 1, 7})
	DMember(bool)                                      bDisabled                                                   OFFSET(get<bool>, {0x29, 1, 1, 0})
};

/// Class /Script/Engine.PlayerInput
/// Size: 0x0380 (0x000028 - 0x0003A8)
class UPlayerInput : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 936;

public:
	CMember(TArray<FKeyBind>)                          DebugExecBindings                                           OFFSET(get<T>, {0x120, 16, 0, 0})
	CMember(TArray<FName>)                             InvertedAxis                                                OFFSET(get<T>, {0x160, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.PlayerInput.SetMouseSensitivity
	// void SetMouseSensitivity(float Sensitivity);                                                                             // [0x33cc9d0] Final|Exec|Native|Public 
	// Function /Script/Engine.PlayerInput.SetBind
	// void SetBind(FName BindName, FString Command);                                                                           // [0x33cc330] Final|Exec|Native|Public 
	// Function /Script/Engine.PlayerInput.InvertAxisKey
	// void InvertAxisKey(FKey AxisKey);                                                                                        // [0x33cc1c0] Final|Exec|Native|Public 
	// Function /Script/Engine.PlayerInput.InvertAxis
	// void InvertAxis(FName AxisName);                                                                                         // [0x33cc130] Final|Exec|Native|Public 
	// Function /Script/Engine.PlayerInput.ClearSmoothing
	// void ClearSmoothing();                                                                                                   // [0x33cbc50] Final|Exec|Native|Public 
};

/// Class /Script/Engine.PlayerStart
/// Size: 0x0008 (0x000248 - 0x000250)
class APlayerStart : public ANavigationObjectBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	SMember(FName)                                     PlayerStartTag                                              OFFSET(getStruct<T>, {0x248, 8, 0, 0})
};

/// Class /Script/Engine.PlayerStartPIE
/// Size: 0x0000 (0x000250 - 0x000250)
class APlayerStartPIE : public APlayerStart
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
};

/// Class /Script/Engine.PlayerState
/// Size: 0x0100 (0x000220 - 0x000320)
class APlayerState : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	DMember(float)                                     Score                                                       OFFSET(get<float>, {0x220, 4, 0, 0})
	DMember(int32_t)                                   PlayerId                                                    OFFSET(get<int32_t>, {0x224, 4, 0, 0})
	DMember(char)                                      Ping                                                        OFFSET(get<char>, {0x228, 1, 0, 0})
	DMember(bool)                                      bShouldUpdateReplicatedPing                                 OFFSET(get<bool>, {0x22A, 1, 1, 0})
	DMember(bool)                                      bIsSpectator                                                OFFSET(get<bool>, {0x22A, 1, 1, 1})
	DMember(bool)                                      bOnlySpectator                                              OFFSET(get<bool>, {0x22A, 1, 1, 2})
	DMember(bool)                                      bIsABot                                                     OFFSET(get<bool>, {0x22A, 1, 1, 3})
	DMember(bool)                                      bIsInactive                                                 OFFSET(get<bool>, {0x22A, 1, 1, 5})
	DMember(bool)                                      bFromPreviousLevel                                          OFFSET(get<bool>, {0x22A, 1, 1, 6})
	DMember(int32_t)                                   StartTime                                                   OFFSET(get<int32_t>, {0x22C, 4, 0, 0})
	CMember(class UClass*)                             EngineMessageClass                                          OFFSET(get<T>, {0x230, 8, 0, 0})
	SMember(FString)                                   SavedNetworkAddress                                         OFFSET(getStruct<T>, {0x240, 16, 0, 0})
	SMember(FUniqueNetIdRepl)                          UniqueId                                                    OFFSET(getStruct<T>, {0x250, 40, 0, 0})
	CMember(class APawn*)                              PawnPrivate                                                 OFFSET(get<T>, {0x280, 8, 0, 0})
	SMember(FString)                                   PlayerNamePrivate                                           OFFSET(getStruct<T>, {0x300, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.PlayerState.ReceiveOverrideWith
	// void ReceiveOverrideWith(class APlayerState* OldPlayerState);                                                            // [0x198a600] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.PlayerState.ReceiveCopyProperties
	// void ReceiveCopyProperties(class APlayerState* NewPlayerState);                                                          // [0x198a600] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.PlayerState.OnRep_UniqueId
	// void OnRep_UniqueId();                                                                                                   // [0x13e1a00] Native|Public        
	// Function /Script/Engine.PlayerState.OnRep_Score
	// void OnRep_Score();                                                                                                      // [0xc51440] Native|Public        
	// Function /Script/Engine.PlayerState.OnRep_PlayerName
	// void OnRep_PlayerName();                                                                                                 // [0x32f0400] Native|Public        
	// Function /Script/Engine.PlayerState.OnRep_PlayerId
	// void OnRep_PlayerId();                                                                                                   // [0x339ad00] Native|Public        
	// Function /Script/Engine.PlayerState.OnRep_bIsInactive
	// void OnRep_bIsInactive();                                                                                                // [0x15e7d10] Native|Public        
	// Function /Script/Engine.PlayerState.GetPlayerName
	// FString GetPlayerName();                                                                                                 // [0x33cc0b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.PluginCommandlet
/// Size: 0x0020 (0x000080 - 0x0000A0)
class UPluginCommandlet : public UCommandlet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
};

/// Class /Script/Engine.PointLight
/// Size: 0x0008 (0x000230 - 0x000238)
class APointLight : public ALight
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(class UPointLightComponent*)               PointLightComponent                                         OFFSET(get<T>, {0x230, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.PointLight.SetRadius
	// void SetRadius(float NewRadius);                                                                                         // [0x33cca60] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLight.SetLightFalloffExponent
	// void SetLightFalloffExponent(float NewLightFalloffExponent);                                                             // [0x33cc8d0] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PointLightComponent
/// Size: 0x0020 (0x000340 - 0x000360)
class UPointLightComponent : public ULocalLightComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	DMember(bool)                                      bUseInverseSquaredFalloff                                   OFFSET(get<bool>, {0x340, 1, 1, 0})
	DMember(float)                                     LightFalloffExponent                                        OFFSET(get<float>, {0x344, 4, 0, 0})
	DMember(float)                                     SourceRadius                                                OFFSET(get<float>, {0x348, 4, 0, 0})
	DMember(float)                                     SoftSourceRadius                                            OFFSET(get<float>, {0x34C, 4, 0, 0})
	DMember(float)                                     SourceLength                                                OFFSET(get<float>, {0x350, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.PointLightComponent.SetSourceRadius
	// void SetSourceRadius(float bNewValue);                                                                                   // [0x33ccbe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLightComponent.SetSourceLength
	// void SetSourceLength(float NewValue);                                                                                    // [0x33ccb60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLightComponent.SetSoftSourceRadius
	// void SetSoftSourceRadius(float bNewValue);                                                                               // [0x33ccae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLightComponent.SetLightFalloffExponent
	// void SetLightFalloffExponent(float NewLightFalloffExponent);                                                             // [0x33cc950] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.Polys
/// Size: 0x0010 (0x000028 - 0x000038)
class UPolys : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.PoseableMeshComponent
/// Size: 0x0160 (0x0006C0 - 0x000820)
class UPoseableMeshComponent : public USkinnedMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2080;

public:


	/// Functions
	// Function /Script/Engine.PoseableMeshComponent.SetBoneTransformByName
	// void SetBoneTransformByName(FName BoneName, FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace);                // [0x33cc770] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.SetBoneScaleByName
	// void SetBoneScaleByName(FName BoneName, FVector InScale3D, TEnumAsByte<EBoneSpaces> BoneSpace);                          // [0x33cc650] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.SetBoneRotationByName
	// void SetBoneRotationByName(FName BoneName, FRotator InRotation, TEnumAsByte<EBoneSpaces> BoneSpace);                     // [0x33cc530] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.SetBoneLocationByName
	// void SetBoneLocationByName(FName BoneName, FVector InLocation, TEnumAsByte<EBoneSpaces> BoneSpace);                      // [0x33cc410] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.ResetBoneTransformByName
	// void ResetBoneTransformByName(FName BoneName);                                                                           // [0x33cc2a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.GetBoneTransformByName
	// FTransform GetBoneTransformByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);                                   // [0x33cbfa0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.GetBoneScaleByName
	// FVector GetBoneScaleByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);                                          // [0x33cbec0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.GetBoneRotationByName
	// FRotator GetBoneRotationByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);                                      // [0x33cbde0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.GetBoneLocationByName
	// FVector GetBoneLocationByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);                                       // [0x33cbd00] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.CopyPoseFromSkeletalComponent
	// void CopyPoseFromSkeletalComponent(class USkeletalMeshComponent* InComponentToCopy);                                     // [0x33cbc70] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.PoseData
/// Size: 0x0070 (0x000000 - 0x000070)
class FPoseData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TArray<FTransform>)                        LocalSpacePose                                              OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TMap<int32_t, int32_t>)                    TrackToBufferIndex                                          OFFSET(get<T>, {0x10, 80, 0, 0})
	CMember(TArray<float>)                             CurveData                                                   OFFSET(get<T>, {0x60, 16, 0, 0})
};

/// Struct /Script/Engine.PoseDataContainer
/// Size: 0x0090 (0x000000 - 0x000090)
class FPoseDataContainer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<FSmartName>)                        PoseNames                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FName>)                             Tracks                                                      OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TMap<FName, int32_t>)                      TrackMap                                                    OFFSET(get<T>, {0x20, 80, 0, 0})
	CMember(TArray<FPoseData>)                         Poses                                                       OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FAnimCurveBase>)                    Curves                                                      OFFSET(get<T>, {0x80, 16, 0, 0})
};

/// Class /Script/Engine.PoseAsset
/// Size: 0x00A0 (0x000080 - 0x000120)
class UPoseAsset : public UAnimationAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	SMember(FPoseDataContainer)                        PoseContainer                                               OFFSET(getStruct<T>, {0x80, 144, 0, 0})
	DMember(bool)                                      bAdditivePose                                               OFFSET(get<bool>, {0x110, 1, 0, 0})
	DMember(int32_t)                                   BasePoseIndex                                               OFFSET(get<int32_t>, {0x114, 4, 0, 0})
	SMember(FName)                                     RetargetSource                                              OFFSET(getStruct<T>, {0x118, 8, 0, 0})
};

/// Class /Script/Engine.PoseWatch
/// Size: 0x0010 (0x000028 - 0x000038)
class UPoseWatch : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UEdGraphNode*)                       Node                                                        OFFSET(get<T>, {0x28, 8, 0, 0})
	SMember(FColor)                                    PoseWatchColour                                             OFFSET(getStruct<T>, {0x30, 4, 0, 0})
};

/// Class /Script/Engine.PostProcessComponent
/// Size: 0x0568 (0x0001F8 - 0x000760)
class UPostProcessComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1888;

public:
	SMember(FPostProcessSettings)                      Settings                                                    OFFSET(getStruct<T>, {0x200, 1360, 0, 0})
	DMember(float)                                     Priority                                                    OFFSET(get<float>, {0x750, 4, 0, 0})
	DMember(float)                                     BlendRadius                                                 OFFSET(get<float>, {0x754, 4, 0, 0})
	DMember(float)                                     BlendWeight                                                 OFFSET(get<float>, {0x758, 4, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x75C, 1, 1, 0})
	DMember(bool)                                      bUnbound                                                    OFFSET(get<bool>, {0x75C, 1, 1, 1})


	/// Functions
	// Function /Script/Engine.PostProcessComponent.AddOrUpdateBlendable
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                    // [0x33cbb00] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PostProcessVolume
/// Size: 0x0568 (0x000258 - 0x0007C0)
class APostProcessVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1984;

public:
	SMember(FPostProcessSettings)                      Settings                                                    OFFSET(getStruct<T>, {0x260, 1360, 0, 0})
	DMember(float)                                     Priority                                                    OFFSET(get<float>, {0x7B0, 4, 0, 0})
	DMember(float)                                     BlendRadius                                                 OFFSET(get<float>, {0x7B4, 4, 0, 0})
	DMember(float)                                     BlendWeight                                                 OFFSET(get<float>, {0x7B8, 4, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x7BC, 1, 1, 0})
	DMember(bool)                                      bUnbound                                                    OFFSET(get<bool>, {0x7BC, 1, 1, 1})


	/// Functions
	// Function /Script/Engine.PostProcessVolume.AddOrUpdateBlendable
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                    // [0x33cb9b0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PrecomputedVisibilityOverrideVolume
/// Size: 0x0030 (0x000258 - 0x000288)
class APrecomputedVisibilityOverrideVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	CMember(TArray<class AActor*>)                     OverrideVisibleActors                                       OFFSET(get<T>, {0x258, 16, 0, 0})
	CMember(TArray<class AActor*>)                     OverrideInvisibleActors                                     OFFSET(get<T>, {0x268, 16, 0, 0})
	CMember(TArray<FName>)                             OverrideInvisibleLevels                                     OFFSET(get<T>, {0x278, 16, 0, 0})
};

/// Class /Script/Engine.PrecomputedVisibilityVolume
/// Size: 0x0000 (0x000258 - 0x000258)
class APrecomputedVisibilityVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
};

/// Class /Script/Engine.PreviewCollectionInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UPreviewCollectionInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Engine.PreviewMeshCollectionEntry
/// Size: 0x0028 (0x000000 - 0x000028)
class FPreviewMeshCollectionEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      SkeletalMesh                                                OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/Engine.PreviewMeshCollection
/// Size: 0x0020 (0x000030 - 0x000050)
class UPreviewMeshCollection : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class USkeleton*)                          Skeleton                                                    OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TArray<FPreviewMeshCollectionEntry>)       SkeletalMeshes                                              OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Struct /Script/Engine.CollectionReference
/// Size: 0x0008 (0x000000 - 0x000008)
class FCollectionReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     CollectionName                                              OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Class /Script/Engine.PrimaryAssetLabel
/// Size: 0x0080 (0x000030 - 0x0000B0)
class UPrimaryAssetLabel : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FName)                                     Describe                                                    OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bCollectDependencies                                        OFFSET(get<bool>, {0x38, 1, 0, 0})
	SMember(FAssetRegistryDependencyOptions)           CollectDependencieOptions                                   OFFSET(getStruct<T>, {0x39, 5, 0, 0})
	SMember(FPrimaryAssetRules)                        Rules                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	DMember(bool)                                      bLabelAssetsInMyDirectory                                   OFFSET(get<bool>, {0x4C, 1, 1, 0})
	CMember(TArray<FDirectoryPath>)                    DirectoriesToAlwaysCook                                     OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FDirectoryPath>)                    IgnoreAssets                                                OFFSET(get<T>, {0x60, 16, 0, 0})
	DMember(bool)                                      bIsRuntimeLabel                                             OFFSET(get<bool>, {0x70, 1, 1, 0})
	CMember(TArray<TWeakObjectPtr<UObject*>>)          ExplicitAssets                                              OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TArray<FName>)                             IgnoreExplicitAssets                                        OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           ExplicitBlueprints                                          OFFSET(get<T>, {0x98, 16, 0, 0})
	SMember(FCollectionReference)                      AssetCollection                                             OFFSET(getStruct<T>, {0xA8, 8, 0, 0})
};

/// Class /Script/Engine.ProjectileMovementComponent
/// Size: 0x00E0 (0x0000F0 - 0x0001D0)
class UProjectileMovementComponent : public UMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	DMember(float)                                     InitialSpeed                                                OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(float)                                     MaxSpeed                                                    OFFSET(get<float>, {0xF4, 4, 0, 0})
	DMember(bool)                                      bRotationFollowsVelocity                                    OFFSET(get<bool>, {0xF8, 1, 1, 0})
	DMember(bool)                                      bRotationRemainsVertical                                    OFFSET(get<bool>, {0xF8, 1, 1, 1})
	DMember(bool)                                      bShouldBounce                                               OFFSET(get<bool>, {0xF8, 1, 1, 2})
	DMember(bool)                                      bInitialVelocityInLocalSpace                                OFFSET(get<bool>, {0xF8, 1, 1, 3})
	DMember(bool)                                      bForceSubStepping                                           OFFSET(get<bool>, {0xF8, 1, 1, 4})
	DMember(bool)                                      bSimulationEnabled                                          OFFSET(get<bool>, {0xF8, 1, 1, 5})
	DMember(bool)                                      bSweepCollision                                             OFFSET(get<bool>, {0xF8, 1, 1, 6})
	DMember(bool)                                      bIsHomingProjectile                                         OFFSET(get<bool>, {0xF8, 1, 1, 7})
	DMember(bool)                                      bBounceAngleAffectsFriction                                 OFFSET(get<bool>, {0xF9, 1, 1, 0})
	DMember(bool)                                      bIsSliding                                                  OFFSET(get<bool>, {0xF9, 1, 1, 1})
	DMember(bool)                                      bInterpMovement                                             OFFSET(get<bool>, {0xF9, 1, 1, 2})
	DMember(bool)                                      bInterpRotation                                             OFFSET(get<bool>, {0xF9, 1, 1, 3})
	DMember(float)                                     PreviousHitTime                                             OFFSET(get<float>, {0xFC, 4, 0, 0})
	SMember(FVector)                                   PreviousHitNormal                                           OFFSET(getStruct<T>, {0x100, 12, 0, 0})
	DMember(float)                                     ProjectileGravityScale                                      OFFSET(get<float>, {0x10C, 4, 0, 0})
	DMember(float)                                     Buoyancy                                                    OFFSET(get<float>, {0x110, 4, 0, 0})
	DMember(float)                                     Bounciness                                                  OFFSET(get<float>, {0x114, 4, 0, 0})
	DMember(float)                                     Friction                                                    OFFSET(get<float>, {0x118, 4, 0, 0})
	DMember(float)                                     BounceVelocityStopSimulatingThreshold                       OFFSET(get<float>, {0x11C, 4, 0, 0})
	DMember(float)                                     MinFrictionFraction                                         OFFSET(get<float>, {0x120, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnProjectileBounce                                          OFFSET(getStruct<T>, {0x128, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnProjectileStop                                            OFFSET(getStruct<T>, {0x138, 16, 0, 0})
	DMember(float)                                     HomingAccelerationMagnitude                                 OFFSET(get<float>, {0x148, 4, 0, 0})
	CMember(TWeakObjectPtr<class USceneComponent*>)    HomingTargetComponent                                       OFFSET(get<T>, {0x14C, 8, 0, 0})
	DMember(float)                                     MaxSimulationTimeStep                                       OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(int32_t)                                   MaxSimulationIterations                                     OFFSET(get<int32_t>, {0x158, 4, 0, 0})
	DMember(int32_t)                                   BounceAdditionalIterations                                  OFFSET(get<int32_t>, {0x15C, 4, 0, 0})
	DMember(float)                                     InterpLocationTime                                          OFFSET(get<float>, {0x160, 4, 0, 0})
	DMember(float)                                     InterpRotationTime                                          OFFSET(get<float>, {0x164, 4, 0, 0})
	DMember(float)                                     InterpLocationMaxLagDistance                                OFFSET(get<float>, {0x168, 4, 0, 0})
	DMember(float)                                     InterpLocationSnapToTargetDistance                          OFFSET(get<float>, {0x16C, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.ProjectileMovementComponent.StopSimulating
	// void StopSimulating(FHitResult& HitResult);                                                                              // [0x33d77b0] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.ProjectileMovementComponent.SetVelocityInLocalSpace
	// void SetVelocityInLocalSpace(FVector NewVelocity);                                                                       // [0x33d7720] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ProjectileMovementComponent.SetInterpolatedComponent
	// void SetInterpolatedComponent(class USceneComponent* Component);                                                         // [0x33d7580] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ProjectileMovementComponent.ResetInterpolation
	// void ResetInterpolation();                                                                                               // [0x32bea10] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature
	// void OnProjectileStopDelegate__DelegateSignature(FHitResult& ImpactResult);                                              // [0x198a600] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature
	// void OnProjectileBounceDelegate__DelegateSignature(FHitResult& ImpactResult, FVector& ImpactVelocity);                   // [0x198a600] MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults 
	// Function /Script/Engine.ProjectileMovementComponent.MoveInterpolationTarget
	// void MoveInterpolationTarget(FVector& NewLocation, FRotator& NewRotation);                                               // [0x33d7310] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ProjectileMovementComponent.LimitVelocity
	// FVector LimitVelocity(FVector NewVelocity);                                                                              // [0x33d7260] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ProjectileMovementComponent.IsVelocityUnderSimulationThreshold
	// bool IsVelocityUnderSimulationThreshold();                                                                               // [0x33d7200] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ProjectileMovementComponent.IsInterpolationComplete
	// bool IsInterpolationComplete();                                                                                          // [0x33d71d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.ProxyLODMeshSimplificationSettings
/// Size: 0x0008 (0x000038 - 0x000040)
class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     ProxyLODMeshReductionModuleName                             OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Engine.RadialForceActor
/// Size: 0x0008 (0x000220 - 0x000228)
class ARadialForceActor : public ARigidBodyBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(class URadialForceComponent*)              ForceComponent                                              OFFSET(get<T>, {0x220, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.RadialForceActor.ToggleForce
	// void ToggleForce();                                                                                                      // [0x339ad00] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceActor.FireImpulse
	// void FireImpulse();                                                                                                      // [0xc51440] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceActor.EnableForce
	// void EnableForce();                                                                                                      // [0x32f0400] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceActor.DisableForce
	// void DisableForce();                                                                                                     // [0x15e7d10] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.RadialForceComponent
/// Size: 0x0038 (0x0001F8 - 0x000230)
class URadialForceComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x1F8, 4, 0, 0})
	CMember(TEnumAsByte<ERadialImpulseFalloff>)        Falloff                                                     OFFSET(get<T>, {0x1FC, 1, 0, 0})
	DMember(float)                                     ImpulseStrength                                             OFFSET(get<float>, {0x200, 4, 0, 0})
	DMember(bool)                                      bImpulseVelChange                                           OFFSET(get<bool>, {0x204, 1, 1, 0})
	DMember(bool)                                      bIgnoreOwningActor                                          OFFSET(get<bool>, {0x204, 1, 1, 1})
	DMember(float)                                     ForceStrength                                               OFFSET(get<float>, {0x208, 4, 0, 0})
	DMember(float)                                     DestructibleDamage                                          OFFSET(get<float>, {0x20C, 4, 0, 0})
	CMember(TArray<TEnumAsByte<EObjectTypeQuery>>)     ObjectTypesToAffect                                         OFFSET(get<T>, {0x210, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.RadialForceComponent.RemoveObjectTypeToAffect
	// void RemoveObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType);                                                 // [0x33d7400] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceComponent.FireImpulse
	// void FireImpulse();                                                                                                      // [0x24fec40] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceComponent.AddObjectTypeToAffect
	// void AddObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType);                                                    // [0x33d7150] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.RectLight
/// Size: 0x0008 (0x000230 - 0x000238)
class ARectLight : public ALight
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(class URectLightComponent*)                RectLightComponent                                          OFFSET(get<T>, {0x230, 8, 0, 0})
};

/// Class /Script/Engine.RectLightComponent
/// Size: 0x0020 (0x000340 - 0x000360)
class URectLightComponent : public ULocalLightComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	DMember(float)                                     SourceWidth                                                 OFFSET(get<float>, {0x340, 4, 0, 0})
	DMember(float)                                     SourceHeight                                                OFFSET(get<float>, {0x344, 4, 0, 0})
	DMember(float)                                     BarnDoorAngle                                               OFFSET(get<float>, {0x348, 4, 0, 0})
	DMember(float)                                     BarnDoorLength                                              OFFSET(get<float>, {0x34C, 4, 0, 0})
	CMember(class UTexture*)                           SourceTexture                                               OFFSET(get<T>, {0x350, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.RectLightComponent.SetSourceWidth
	// void SetSourceWidth(float bNewValue);                                                                                    // [0x33d76a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.RectLightComponent.SetSourceTexture
	// void SetSourceTexture(class UTexture* bNewValue);                                                                        // [0x33d7610] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.RectLightComponent.SetSourceHeight
	// void SetSourceHeight(float NewValue);                                                                                    // [0x33cc950] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.RectLightComponent.SetBarnDoorLength
	// void SetBarnDoorLength(float NewValue);                                                                                  // [0x33d7500] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.RectLightComponent.SetBarnDoorAngle
	// void SetBarnDoorAngle(float NewValue);                                                                                   // [0x33d7480] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.RendererSettings
/// Size: 0x0108 (0x000038 - 0x000140)
class URendererSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	DMember(bool)                                      bMobileDisableVertexFog                                     OFFSET(get<bool>, {0x38, 1, 1, 0})
	DMember(int32_t)                                   MaxMobileCascades                                           OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	CMember(TEnumAsByte<EMobileMSAASampleCount>)       MobileMSAASampleCount                                       OFFSET(get<T>, {0x40, 1, 0, 0})
	DMember(bool)                                      bMobileAllowDitheredLODTransition                           OFFSET(get<bool>, {0x44, 1, 1, 0})
	DMember(bool)                                      bMobileAllowSoftwareOcclusionCulling                        OFFSET(get<bool>, {0x44, 1, 1, 1})
	DMember(bool)                                      bMobileVirtualTextures                                      OFFSET(get<bool>, {0x44, 1, 1, 2})
	DMember(bool)                                      bDiscardUnusedQualityLevels                                 OFFSET(get<bool>, {0x44, 1, 1, 3})
	DMember(bool)                                      bOcclusionCulling                                           OFFSET(get<bool>, {0x44, 1, 1, 4})
	DMember(float)                                     MinScreenRadiusForLights                                    OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     MinScreenRadiusForEarlyZPass                                OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     MinScreenRadiusForCSMdepth                                  OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(bool)                                      bPrecomputedVisibilityWarning                               OFFSET(get<bool>, {0x54, 1, 1, 0})
	DMember(bool)                                      bTextureStreaming                                           OFFSET(get<bool>, {0x54, 1, 1, 1})
	DMember(bool)                                      bUseDXT5NormalMaps                                          OFFSET(get<bool>, {0x54, 1, 1, 2})
	DMember(bool)                                      bVirtualTextures                                            OFFSET(get<bool>, {0x54, 1, 1, 3})
	DMember(bool)                                      bVirtualTexturedLightmaps                                   OFFSET(get<bool>, {0x54, 1, 1, 4})
	DMember(uint32_t)                                  VirtualTextureTileSize                                      OFFSET(get<uint32_t>, {0x58, 4, 0, 0})
	DMember(uint32_t)                                  VirtualTextureTileBorderSize                                OFFSET(get<uint32_t>, {0x5C, 4, 0, 0})
	DMember(uint32_t)                                  VirtualTextureFeedbackFactor                                OFFSET(get<uint32_t>, {0x60, 4, 0, 0})
	DMember(bool)                                      bVirtualTextureEnableCompressZlib                           OFFSET(get<bool>, {0x64, 1, 1, 0})
	DMember(bool)                                      bVirtualTextureEnableCompressCrunch                         OFFSET(get<bool>, {0x64, 1, 1, 1})
	DMember(bool)                                      bClearCoatEnableSecondNormal                                OFFSET(get<bool>, {0x64, 1, 1, 2})
	DMember(int32_t)                                   ReflectionCaptureResolution                                 OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	DMember(bool)                                      bReflectionCaptureCompression                               OFFSET(get<bool>, {0x6C, 1, 1, 0})
	DMember(bool)                                      ReflectionEnvironmentLightmapMixBasedOnRoughness            OFFSET(get<bool>, {0x6C, 1, 1, 1})
	DMember(bool)                                      bForwardShading                                             OFFSET(get<bool>, {0x6C, 1, 1, 2})
	DMember(bool)                                      bVertexFoggingForOpaque                                     OFFSET(get<bool>, {0x6C, 1, 1, 3})
	DMember(bool)                                      bAllowStaticLighting                                        OFFSET(get<bool>, {0x6C, 1, 1, 4})
	DMember(bool)                                      bUseNormalMapsForStaticLighting                             OFFSET(get<bool>, {0x6C, 1, 1, 5})
	DMember(bool)                                      bGenerateMeshDistanceFields                                 OFFSET(get<bool>, {0x6C, 1, 1, 6})
	DMember(bool)                                      bEightBitMeshDistanceFields                                 OFFSET(get<bool>, {0x6C, 1, 1, 7})
	DMember(bool)                                      bGenerateLandscapeGIData                                    OFFSET(get<bool>, {0x6D, 1, 1, 0})
	DMember(bool)                                      bCompressMeshDistanceFields                                 OFFSET(get<bool>, {0x6D, 1, 1, 1})
	DMember(float)                                     TessellationAdaptivePixelsPerTriangle                       OFFSET(get<float>, {0x70, 4, 0, 0})
	DMember(bool)                                      bSeparateTranslucency                                       OFFSET(get<bool>, {0x74, 1, 1, 0})
	CMember(TEnumAsByte<ETranslucentSortPolicy>)       TranslucentSortPolicy                                       OFFSET(get<T>, {0x78, 1, 0, 0})
	SMember(FVector)                                   TranslucentSortAxis                                         OFFSET(getStruct<T>, {0x7C, 12, 0, 0})
	CMember(TEnumAsByte<ECustomDepthStencil>)          CustomDepthStencil                                          OFFSET(get<T>, {0x88, 1, 0, 0})
	DMember(bool)                                      bCustomDepthTaaJitter                                       OFFSET(get<bool>, {0x8C, 1, 1, 0})
	CMember(TEnumAsByte<EAlphaChannelMode>)            bEnableAlphaChannelInPostProcessing                         OFFSET(get<T>, {0x90, 1, 0, 0})
	DMember(bool)                                      bDefaultFeatureBloom                                        OFFSET(get<bool>, {0x94, 1, 1, 0})
	DMember(bool)                                      bDefaultFeatureAmbientOcclusion                             OFFSET(get<bool>, {0x94, 1, 1, 1})
	DMember(bool)                                      bDefaultFeatureAmbientOcclusionStaticFraction               OFFSET(get<bool>, {0x94, 1, 1, 2})
	DMember(bool)                                      bDefaultFeatureAutoExposure                                 OFFSET(get<bool>, {0x94, 1, 1, 3})
	CMember(TEnumAsByte<EAutoExposureMethodUI>)        DefaultFeatureAutoExposure                                  OFFSET(get<T>, {0x98, 1, 0, 0})
	DMember(float)                                     DefaultFeatureAutoExposureBias                              OFFSET(get<float>, {0x9C, 4, 0, 0})
	DMember(bool)                                      bExtendDefaultLuminanceRangeInAutoExposureSettings          OFFSET(get<bool>, {0xA0, 1, 1, 0})
	DMember(bool)                                      bUsePreExposure                                             OFFSET(get<bool>, {0xA0, 1, 1, 1})
	DMember(bool)                                      bEnablePreExposureOnlyInTheEditor                           OFFSET(get<bool>, {0xA0, 1, 1, 2})
	DMember(bool)                                      bDefaultFeatureMotionBlur                                   OFFSET(get<bool>, {0xA0, 1, 1, 3})
	DMember(bool)                                      bDefaultFeatureLensFlare                                    OFFSET(get<bool>, {0xA0, 1, 1, 4})
	DMember(bool)                                      bTemporalUpsampling                                         OFFSET(get<bool>, {0xA0, 1, 1, 5})
	DMember(bool)                                      bSSGI                                                       OFFSET(get<bool>, {0xA0, 1, 1, 6})
	CMember(TEnumAsByte<EAntiAliasingMethod>)          DefaultFeatureAntiAliasing                                  OFFSET(get<T>, {0xA4, 1, 0, 0})
	CMember(ELightUnits)                               DefaultLightUnits                                           OFFSET(get<T>, {0xA5, 1, 0, 0})
	CMember(TEnumAsByte<EDefaultBackBufferPixelFormat>) DefaultBackBufferPixelFormat                               OFFSET(get<T>, {0xA6, 1, 0, 0})
	DMember(bool)                                      bRenderUnbuiltPreviewShadowsInGame                          OFFSET(get<bool>, {0xA8, 1, 1, 0})
	DMember(bool)                                      bStencilForLODDither                                        OFFSET(get<bool>, {0xA8, 1, 1, 1})
	CMember(TEnumAsByte<EEarlyZPass>)                  EarlyZPass                                                  OFFSET(get<T>, {0xAC, 1, 0, 0})
	DMember(bool)                                      bEarlyZPassOnlyMaterialMasking                              OFFSET(get<bool>, {0xB0, 1, 1, 0})
	DMember(bool)                                      bDBuffer                                                    OFFSET(get<bool>, {0xB0, 1, 1, 1})
	CMember(TEnumAsByte<EClearSceneOptions>)           ClearSceneMethod                                            OFFSET(get<T>, {0xB4, 1, 0, 0})
	DMember(bool)                                      bBasePassOutputsVelocity                                    OFFSET(get<bool>, {0xB8, 1, 1, 0})
	DMember(bool)                                      bVertexDeformationOutputsVelocity                           OFFSET(get<bool>, {0xB8, 1, 1, 1})
	DMember(bool)                                      bSelectiveBasePassOutputs                                   OFFSET(get<bool>, {0xB8, 1, 1, 2})
	DMember(bool)                                      bDefaultParticleCutouts                                     OFFSET(get<bool>, {0xB8, 1, 1, 3})
	DMember(int32_t)                                   GPUSimulationTextureSizeX                                   OFFSET(get<int32_t>, {0xBC, 4, 0, 0})
	DMember(int32_t)                                   GPUSimulationTextureSizeY                                   OFFSET(get<int32_t>, {0xC0, 4, 0, 0})
	DMember(bool)                                      bGlobalClipPlane                                            OFFSET(get<bool>, {0xC4, 1, 1, 0})
	CMember(TEnumAsByte<EGBufferFormat>)               GBufferFormat                                               OFFSET(get<T>, {0xC8, 1, 0, 0})
	DMember(bool)                                      bUseGPUMorphTargets                                         OFFSET(get<bool>, {0xCC, 1, 1, 0})
	DMember(bool)                                      bNvidiaAftermathEnabled                                     OFFSET(get<bool>, {0xCC, 1, 1, 1})
	DMember(bool)                                      bMultiView                                                  OFFSET(get<bool>, {0xCC, 1, 1, 2})
	DMember(bool)                                      bMobilePostProcessing                                       OFFSET(get<bool>, {0xCC, 1, 1, 3})
	DMember(bool)                                      bMobileMultiView                                            OFFSET(get<bool>, {0xCC, 1, 1, 4})
	DMember(bool)                                      bMobileUseHWsRGBEncoding                                    OFFSET(get<bool>, {0xCC, 1, 1, 5})
	DMember(bool)                                      bRoundRobinOcclusion                                        OFFSET(get<bool>, {0xCC, 1, 1, 6})
	DMember(bool)                                      bODSCapture                                                 OFFSET(get<bool>, {0xCC, 1, 1, 7})
	DMember(bool)                                      bMeshStreaming                                              OFFSET(get<bool>, {0xCD, 1, 1, 0})
	DMember(float)                                     WireframeCullThreshold                                      OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(bool)                                      bEnableRayTracing                                           OFFSET(get<bool>, {0xD4, 1, 1, 0})
	DMember(bool)                                      bEnableRayTracingTextureLOD                                 OFFSET(get<bool>, {0xD4, 1, 1, 1})
	DMember(bool)                                      bSupportStationarySkylight                                  OFFSET(get<bool>, {0xD4, 1, 1, 2})
	DMember(bool)                                      bSupportLowQualityLightmaps                                 OFFSET(get<bool>, {0xD4, 1, 1, 3})
	DMember(bool)                                      bSupportPointLightWholeSceneShadows                         OFFSET(get<bool>, {0xD4, 1, 1, 4})
	DMember(bool)                                      bSupportAtmosphericFog                                      OFFSET(get<bool>, {0xD4, 1, 1, 5})
	DMember(bool)                                      bSupportSkyAtmosphere                                       OFFSET(get<bool>, {0xD4, 1, 1, 6})
	DMember(bool)                                      bSupportSkyAtmosphereAffectsHeightFog                       OFFSET(get<bool>, {0xD4, 1, 1, 7})
	DMember(bool)                                      bSupportSkinCacheShaders                                    OFFSET(get<bool>, {0xD5, 1, 1, 0})
	CMember(ESkinCacheDefaultBehavior)                 DefaultSkinCacheBehavior                                    OFFSET(get<T>, {0xD8, 1, 0, 0})
	DMember(float)                                     SkinCacheSceneMemoryLimitInMB                               OFFSET(get<float>, {0xDC, 4, 0, 0})
	DMember(bool)                                      bMobileEnableStaticAndCSMShadowReceivers                    OFFSET(get<bool>, {0xE0, 1, 1, 0})
	DMember(bool)                                      bMobileEnableMovableLightCSMShaderCulling                   OFFSET(get<bool>, {0xE0, 1, 1, 1})
	DMember(bool)                                      bMobileAllowDistanceFieldShadows                            OFFSET(get<bool>, {0xE0, 1, 1, 2})
	DMember(bool)                                      bMobileAllowMovableDirectionalLights                        OFFSET(get<bool>, {0xE0, 1, 1, 3})
	DMember(uint32_t)                                  MobileNumDynamicPointLights                                 OFFSET(get<uint32_t>, {0xE4, 4, 0, 0})
	DMember(bool)                                      bMobileDynamicPointLightsUseStaticBranch                    OFFSET(get<bool>, {0xE8, 1, 1, 0})
	DMember(bool)                                      bMobileAllowMovableSpotlights                               OFFSET(get<bool>, {0xE8, 1, 1, 1})
	DMember(bool)                                      bMobileAllowMovableSpotlightShadows                         OFFSET(get<bool>, {0xE8, 1, 1, 2})
	DMember(bool)                                      bSupport16BitBoneIndex                                      OFFSET(get<bool>, {0xE8, 1, 1, 3})
	DMember(bool)                                      bGPUSkinLimit2BoneInfluences                                OFFSET(get<bool>, {0xE8, 1, 1, 4})
	DMember(bool)                                      bSupportDepthOnlyIndexBuffers                               OFFSET(get<bool>, {0xE8, 1, 1, 5})
	DMember(bool)                                      bSupportReversedIndexBuffers                                OFFSET(get<bool>, {0xE8, 1, 1, 6})
	DMember(bool)                                      bLPV                                                        OFFSET(get<bool>, {0xE8, 1, 1, 7})
	DMember(bool)                                      bMobileAmbientOcclusion                                     OFFSET(get<bool>, {0xE9, 1, 1, 0})
	DMember(bool)                                      bUseUnlimitedBoneInfluences                                 OFFSET(get<bool>, {0xE9, 1, 1, 1})
	DMember(int32_t)                                   UnlimitedBonInfluencesThreshold                             OFFSET(get<int32_t>, {0xEC, 4, 0, 0})
	CMember(TEnumAsByte<EMobilePlanarReflectionMode>)  MobilePlanarReflectionMode                                  OFFSET(get<T>, {0xF0, 1, 0, 0})
	SMember(FPerPlatformBool)                          bStreamSkeletalMeshLODs                                     OFFSET(getStruct<T>, {0xF1, 1, 0, 0})
	SMember(FPerPlatformBool)                          bDiscardSkeletalMeshOptionalLODs                            OFFSET(getStruct<T>, {0xF2, 1, 0, 0})
	SMember(FSoftObjectPath)                           VisualizeCalibrationColorMaterialPath                       OFFSET(getStruct<T>, {0xF8, 24, 0, 0})
	SMember(FSoftObjectPath)                           VisualizeCalibrationCustomMaterialPath                      OFFSET(getStruct<T>, {0x110, 24, 0, 0})
	SMember(FSoftObjectPath)                           VisualizeCalibrationGrayscaleMaterialPath                   OFFSET(getStruct<T>, {0x128, 24, 0, 0})
};

/// Class /Script/Engine.RendererOverrideSettings
/// Size: 0x0008 (0x000038 - 0x000040)
class URendererOverrideSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bSupportAllShaderPermutations                               OFFSET(get<bool>, {0x38, 1, 1, 0})
	DMember(bool)                                      bForceRecomputeTangents                                     OFFSET(get<bool>, {0x38, 1, 1, 1})
};

/// Class /Script/Engine.ReplayNetConnection
/// Size: 0x0800 (0x001AF0 - 0x0022F0)
class UReplayNetConnection : public UNetConnection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 8944;

public:
};

/// Class /Script/Engine.ReplaySubsystem
/// Size: 0x0008 (0x000030 - 0x000038)
class UReplaySubsystem : public UGameInstanceSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.ReplicationDriver
/// Size: 0x0000 (0x000028 - 0x000028)
class UReplicationDriver : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ReplicationConnectionDriver
/// Size: 0x0000 (0x000028 - 0x000028)
class UReplicationConnectionDriver : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.ReporterBase
/// Size: 0x0008 (0x000028 - 0x000030)
class UReporterBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Engine.ReporterGraph
/// Size: 0x0078 (0x000030 - 0x0000A8)
class UReporterGraph : public UReporterBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
};

/// Class /Script/Engine.ReverbEffect
/// Size: 0x0038 (0x000028 - 0x000060)
class UReverbEffect : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      bBypassEarlyReflections                                     OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(float)                                     ReflectionsDelay                                            OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     GainHF                                                      OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     ReflectionsGain                                             OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(bool)                                      bBypassLateReflections                                      OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(float)                                     LateDelay                                                   OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     DecayTime                                                   OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     Density                                                     OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     Diffusion                                                   OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     AirAbsorptionGainHF                                         OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     DecayHFRatio                                                OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     LateGain                                                    OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     Gain                                                        OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     RoomRolloffFactor                                           OFFSET(get<float>, {0x5C, 4, 0, 0})
};

/// Struct /Script/Engine.RigTransformConstraint
/// Size: 0x0010 (0x000000 - 0x000010)
class FRigTransformConstraint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TEnumAsByte<EConstraintTransform>)         TranformType                                                OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FName)                                     ParentSpace                                                 OFFSET(getStruct<T>, {0x4, 8, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.TransformBaseConstraint
/// Size: 0x0010 (0x000000 - 0x000010)
class FTransformBaseConstraint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FRigTransformConstraint>)           TransformConstraints                                        OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.TransformBase
/// Size: 0x0028 (0x000000 - 0x000028)
class FTransformBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     Node                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FTransformBaseConstraint)                  Constraints                                                 OFFSET(getStruct<T>, {0x8, 32, 0, 0})
};

/// Struct /Script/Engine.Node
/// Size: 0x0060 (0x000000 - 0x000060)
class FNode : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     ParentName                                                  OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FTransform)                                Transform                                                   OFFSET(getStruct<T>, {0x10, 48, 0, 0})
	SMember(FString)                                   DisplayName                                                 OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	DMember(bool)                                      bAdvanced                                                   OFFSET(get<bool>, {0x50, 1, 0, 0})
};

/// Class /Script/Engine.Rig
/// Size: 0x0028 (0x000028 - 0x000050)
class URig : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<FTransformBase>)                    TransformBases                                              OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FNode>)                             Nodes                                                       OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/Engine.RotatingMovementComponent
/// Size: 0x0020 (0x0000F0 - 0x000110)
class URotatingMovementComponent : public UMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FRotator)                                  RotationRate                                                OFFSET(getStruct<T>, {0xF0, 12, 0, 0})
	SMember(FVector)                                   PivotTranslation                                            OFFSET(getStruct<T>, {0xFC, 12, 0, 0})
	DMember(bool)                                      bRotationInLocalSpace                                       OFFSET(get<bool>, {0x108, 1, 1, 0})
};

/// Class /Script/Engine.RuntimeOptionsBase
/// Size: 0x0010 (0x000028 - 0x000038)
class URuntimeOptionsBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Engine.RuntimeVirtualTexture
/// Size: 0x0078 (0x000028 - 0x0000A0)
class URuntimeVirtualTexture : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	DMember(int32_t)                                   TileCount                                                   OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   TileSize                                                    OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(int32_t)                                   TileBorderSize                                              OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	CMember(ERuntimeVirtualTextureMaterialType)        MaterialType                                                OFFSET(get<T>, {0x34, 1, 0, 0})
	DMember(bool)                                      bCompressTextures                                           OFFSET(get<bool>, {0x35, 1, 0, 0})
	DMember(bool)                                      bClearTextures                                              OFFSET(get<bool>, {0x36, 1, 0, 0})
	DMember(bool)                                      bSinglePhysicalSpace                                        OFFSET(get<bool>, {0x37, 1, 0, 0})
	DMember(bool)                                      bPrivateSpace                                               OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(bool)                                      bAdaptive                                                   OFFSET(get<bool>, {0x39, 1, 0, 0})
	DMember(bool)                                      bContinuousUpdate                                           OFFSET(get<bool>, {0x3A, 1, 0, 0})
	DMember(int32_t)                                   RemoveLowMips                                               OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	CMember(TEnumAsByte<TextureGroup>)                 LODGroup                                                    OFFSET(get<T>, {0x40, 1, 0, 0})
	DMember(int32_t)                                   Size                                                        OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	CMember(class URuntimeVirtualTextureStreamingProxy*) StreamingTexture                                          OFFSET(get<T>, {0x48, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.RuntimeVirtualTexture.GetTileSize
	// int32_t GetTileSize();                                                                                                   // [0x33dafc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.RuntimeVirtualTexture.GetTileCount
	// int32_t GetTileCount();                                                                                                  // [0x33daf60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.RuntimeVirtualTexture.GetTileBorderSize
	// int32_t GetTileBorderSize();                                                                                             // [0x33daf20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.RuntimeVirtualTexture.GetSize
	// int32_t GetSize();                                                                                                       // [0x33dae90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.RuntimeVirtualTexture.GetPageTableSize
	// int32_t GetPageTableSize();                                                                                              // [0x33dae60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.RuntimeVirtualTextureComponent
/// Size: 0x0078 (0x0001F8 - 0x000270)
class URuntimeVirtualTextureComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	CMember(TWeakObjectPtr<class AActor*>)             BoundsAlignActor                                            OFFSET(get<T>, {0x1F8, 8, 0, 0})
	DMember(bool)                                      bSetBoundsButton                                            OFFSET(get<bool>, {0x220, 1, 0, 0})
	DMember(bool)                                      bSnapBoundsToLandscape                                      OFFSET(get<bool>, {0x221, 1, 0, 0})
	CMember(class URuntimeVirtualTexture*)             VirtualTexture                                              OFFSET(get<T>, {0x228, 8, 0, 0})
	DMember(bool)                                      bEnableScalability                                          OFFSET(get<bool>, {0x230, 1, 0, 0})
	DMember(uint32_t)                                  ScalabilityGroup                                            OFFSET(get<uint32_t>, {0x234, 4, 0, 0})
	DMember(bool)                                      bHidePrimitives                                             OFFSET(get<bool>, {0x238, 1, 0, 0})
	CMember(class UVirtualTextureBuilder*)             StreamingTexture                                            OFFSET(get<T>, {0x240, 8, 0, 0})
	DMember(int32_t)                                   StreamLowMips                                               OFFSET(get<int32_t>, {0x248, 4, 0, 0})
	DMember(bool)                                      bBuildStreamingMipsButton                                   OFFSET(get<bool>, {0x24C, 1, 0, 0})
	DMember(bool)                                      bEnableCompressCrunch                                       OFFSET(get<bool>, {0x24D, 1, 0, 0})
	DMember(bool)                                      bUseStreamingLowMipsInEditor                                OFFSET(get<bool>, {0x24E, 1, 0, 0})
	DMember(bool)                                      bBuildDebugStreamingMips                                    OFFSET(get<bool>, {0x24F, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.RuntimeVirtualTextureComponent.Invalidate
	// void Invalidate(FBoxSphereBounds& WorldBounds);                                                                          // [0x33db010] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.RuntimeVirtualTextureVolume
/// Size: 0x0008 (0x000220 - 0x000228)
class ARuntimeVirtualTextureVolume : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(class URuntimeVirtualTextureComponent*)    VirtualTextureComponent                                     OFFSET(get<T>, {0x220, 8, 0, 0})
};

/// Class /Script/Engine.RVOAvoidanceInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class URVOAvoidanceInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.Scene
/// Size: 0x0000 (0x000028 - 0x000028)
class UScene : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.SceneCapture2D
/// Size: 0x0008 (0x000230 - 0x000238)
class ASceneCapture2D : public ASceneCapture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(class USceneCaptureComponent2D*)           CaptureComponent2D                                          OFFSET(get<T>, {0x230, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.SceneCapture2D.OnInterpToggle
	// void OnInterpToggle(bool bEnable);                                                                                       // [0x33bb110] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneCaptureComponentCube
/// Size: 0x0030 (0x0002B0 - 0x0002E0)
class USceneCaptureComponentCube : public USceneCaptureComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	CMember(class UTextureRenderTargetCube*)           TextureTarget                                               OFFSET(get<T>, {0x2B0, 8, 0, 0})
	DMember(bool)                                      bCaptureRotation                                            OFFSET(get<bool>, {0x2B8, 1, 0, 0})
	CMember(class UTextureRenderTargetCube*)           TextureTargetLeft                                           OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(class UTextureRenderTargetCube*)           TextureTargetRight                                          OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(class UTextureRenderTarget2D*)             TextureTargetODS                                            OFFSET(get<T>, {0x2D0, 8, 0, 0})
	DMember(float)                                     IPD                                                         OFFSET(get<float>, {0x2D8, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.SceneCaptureComponentCube.CaptureScene
	// void CaptureScene();                                                                                                     // [0x33df7e0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneCaptureCube
/// Size: 0x0008 (0x000230 - 0x000238)
class ASceneCaptureCube : public ASceneCapture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(class USceneCaptureComponentCube*)         CaptureComponentCube                                        OFFSET(get<T>, {0x230, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.SceneCaptureCube.OnInterpToggle
	// void OnInterpToggle(bool bEnable);                                                                                       // [0x33bb110] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.BPVariableMetaDataEntry
/// Size: 0x0018 (0x000000 - 0x000018)
class FBPVariableMetaDataEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     DataKey                                                     OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FString)                                   DataValue                                                   OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Class /Script/Engine.SCS_Node
/// Size: 0x00B0 (0x000028 - 0x0000D8)
class USCS_Node : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(class UClass*)                             ComponentClass                                              OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UActorComponent*)                    ComponentTemplate                                           OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FBlueprintCookedComponentInstancingData)   CookedComponentInstancingData                               OFFSET(getStruct<T>, {0x38, 72, 0, 0})
	SMember(FName)                                     AttachToName                                                OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	SMember(FName)                                     ParentComponentOrVariableName                               OFFSET(getStruct<T>, {0x88, 8, 0, 0})
	SMember(FName)                                     ParentComponentOwnerClassName                               OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	DMember(bool)                                      bIsParentComponentNative                                    OFFSET(get<bool>, {0x98, 1, 0, 0})
	CMember(TArray<class USCS_Node*>)                  ChildNodes                                                  OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TArray<FBPVariableMetaDataEntry>)          MetaDataArray                                               OFFSET(get<T>, {0xB0, 16, 0, 0})
	SMember(FGuid)                                     VariableGuid                                                OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FName)                                     InternalVariableName                                        OFFSET(getStruct<T>, {0xD0, 8, 0, 0})
};

/// Class /Script/Engine.Selection
/// Size: 0x0078 (0x000028 - 0x0000A0)
class USelection : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
};

/// Class /Script/Engine.ServerStatReplicator
/// Size: 0x00C8 (0x000220 - 0x0002E8)
class AServerStatReplicator : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 744;

public:
	DMember(bool)                                      bUpdateStatNet                                              OFFSET(get<bool>, {0x220, 1, 0, 0})
	DMember(bool)                                      bOverwriteClientStats                                       OFFSET(get<bool>, {0x221, 1, 0, 0})
	DMember(uint32_t)                                  Channels                                                    OFFSET(get<uint32_t>, {0x224, 4, 0, 0})
	DMember(uint32_t)                                  InRate                                                      OFFSET(get<uint32_t>, {0x228, 4, 0, 0})
	DMember(uint32_t)                                  OutRate                                                     OFFSET(get<uint32_t>, {0x22C, 4, 0, 0})
	DMember(uint32_t)                                  MaxPacketOverhead                                           OFFSET(get<uint32_t>, {0x234, 4, 0, 0})
	DMember(uint32_t)                                  InRateClientMax                                             OFFSET(get<uint32_t>, {0x238, 4, 0, 0})
	DMember(uint32_t)                                  InRateClientMin                                             OFFSET(get<uint32_t>, {0x23C, 4, 0, 0})
	DMember(uint32_t)                                  InRateClientAvg                                             OFFSET(get<uint32_t>, {0x240, 4, 0, 0})
	DMember(uint32_t)                                  InPacketsClientMax                                          OFFSET(get<uint32_t>, {0x244, 4, 0, 0})
	DMember(uint32_t)                                  InPacketsClientMin                                          OFFSET(get<uint32_t>, {0x248, 4, 0, 0})
	DMember(uint32_t)                                  InPacketsClientAvg                                          OFFSET(get<uint32_t>, {0x24C, 4, 0, 0})
	DMember(uint32_t)                                  OutRateClientMax                                            OFFSET(get<uint32_t>, {0x250, 4, 0, 0})
	DMember(uint32_t)                                  OutRateClientMin                                            OFFSET(get<uint32_t>, {0x254, 4, 0, 0})
	DMember(uint32_t)                                  OutRateClientAvg                                            OFFSET(get<uint32_t>, {0x258, 4, 0, 0})
	DMember(uint32_t)                                  OutPacketsClientMax                                         OFFSET(get<uint32_t>, {0x25C, 4, 0, 0})
	DMember(uint32_t)                                  OutPacketsClientMin                                         OFFSET(get<uint32_t>, {0x260, 4, 0, 0})
	DMember(uint32_t)                                  OutPacketsClientAvg                                         OFFSET(get<uint32_t>, {0x264, 4, 0, 0})
	DMember(uint32_t)                                  NetNumClients                                               OFFSET(get<uint32_t>, {0x268, 4, 0, 0})
	DMember(uint32_t)                                  InPackets                                                   OFFSET(get<uint32_t>, {0x26C, 4, 0, 0})
	DMember(uint32_t)                                  OutPackets                                                  OFFSET(get<uint32_t>, {0x270, 4, 0, 0})
	DMember(uint32_t)                                  InBunches                                                   OFFSET(get<uint32_t>, {0x274, 4, 0, 0})
	DMember(uint32_t)                                  OutBunches                                                  OFFSET(get<uint32_t>, {0x278, 4, 0, 0})
	DMember(uint32_t)                                  OutLoss                                                     OFFSET(get<uint32_t>, {0x27C, 4, 0, 0})
	DMember(uint32_t)                                  InLoss                                                      OFFSET(get<uint32_t>, {0x280, 4, 0, 0})
	DMember(uint32_t)                                  VoiceBytesSent                                              OFFSET(get<uint32_t>, {0x284, 4, 0, 0})
	DMember(uint32_t)                                  VoiceBytesRecv                                              OFFSET(get<uint32_t>, {0x288, 4, 0, 0})
	DMember(uint32_t)                                  VoicePacketsSent                                            OFFSET(get<uint32_t>, {0x28C, 4, 0, 0})
	DMember(uint32_t)                                  VoicePacketsRecv                                            OFFSET(get<uint32_t>, {0x290, 4, 0, 0})
	DMember(uint32_t)                                  PercentInVoice                                              OFFSET(get<uint32_t>, {0x294, 4, 0, 0})
	DMember(uint32_t)                                  PercentOutVoice                                             OFFSET(get<uint32_t>, {0x298, 4, 0, 0})
	DMember(uint32_t)                                  NumActorChannels                                            OFFSET(get<uint32_t>, {0x29C, 4, 0, 0})
	DMember(uint32_t)                                  NumConsideredActors                                         OFFSET(get<uint32_t>, {0x2A0, 4, 0, 0})
	DMember(uint32_t)                                  PrioritizedActors                                           OFFSET(get<uint32_t>, {0x2A4, 4, 0, 0})
	DMember(uint32_t)                                  NumRelevantActors                                           OFFSET(get<uint32_t>, {0x2A8, 4, 0, 0})
	DMember(uint32_t)                                  NumRelevantDeletedActors                                    OFFSET(get<uint32_t>, {0x2AC, 4, 0, 0})
	DMember(uint32_t)                                  NumReplicatedActorAttempts                                  OFFSET(get<uint32_t>, {0x2B0, 4, 0, 0})
	DMember(uint32_t)                                  NumReplicatedActors                                         OFFSET(get<uint32_t>, {0x2B4, 4, 0, 0})
	DMember(uint32_t)                                  NumActors                                                   OFFSET(get<uint32_t>, {0x2B8, 4, 0, 0})
	DMember(uint32_t)                                  NumNetActors                                                OFFSET(get<uint32_t>, {0x2BC, 4, 0, 0})
	DMember(uint32_t)                                  NumDormantActors                                            OFFSET(get<uint32_t>, {0x2C0, 4, 0, 0})
	DMember(uint32_t)                                  NumInitiallyDormantActors                                   OFFSET(get<uint32_t>, {0x2C4, 4, 0, 0})
	DMember(uint32_t)                                  NumNetGUIDsAckd                                             OFFSET(get<uint32_t>, {0x2C8, 4, 0, 0})
	DMember(uint32_t)                                  NumNetGUIDsPending                                          OFFSET(get<uint32_t>, {0x2CC, 4, 0, 0})
	DMember(uint32_t)                                  NumNetGUIDsUnAckd                                           OFFSET(get<uint32_t>, {0x2D0, 4, 0, 0})
	DMember(uint32_t)                                  ObjPathBytes                                                OFFSET(get<uint32_t>, {0x2D4, 4, 0, 0})
	DMember(uint32_t)                                  NetGUIDOutRate                                              OFFSET(get<uint32_t>, {0x2D8, 4, 0, 0})
	DMember(uint32_t)                                  NetGUIDInRate                                               OFFSET(get<uint32_t>, {0x2DC, 4, 0, 0})
	DMember(uint32_t)                                  NetSaturated                                                OFFSET(get<uint32_t>, {0x2E0, 4, 0, 0})
};

/// Class /Script/Engine.ShadowMapTexture2D
/// Size: 0x0008 (0x000100 - 0x000108)
class UShadowMapTexture2D : public UTexture2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	CMember(TEnumAsByte<EShadowMapFlags>)              ShadowmapFlags                                              OFFSET(get<T>, {0x100, 1, 0, 0})
};

/// Class /Script/Engine.SimpleConstructionScript
/// Size: 0x0078 (0x000028 - 0x0000A0)
class USimpleConstructionScript : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(TArray<class USCS_Node*>)                  RootNodes                                                   OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<class USCS_Node*>)                  AllNodes                                                    OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(class USCS_Node*)                          DefaultSceneRootNode                                        OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/Engine.SkeletalMeshActor
/// Size: 0x0088 (0x000220 - 0x0002A8)
class ASkeletalMeshActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	DMember(bool)                                      bShouldDoAnimNotifies                                       OFFSET(get<bool>, {0x228, 1, 1, 0})
	DMember(bool)                                      bWakeOnLevelStart                                           OFFSET(get<bool>, {0x228, 1, 1, 1})
	CMember(class USkeletalMeshComponent*)             SkeletalMeshComponent                                       OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class USkeletalMesh*)                      ReplicatedMesh                                              OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(class UPhysicsAsset*)                      ReplicatedPhysAsset                                         OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(class UMaterialInterface*)                 ReplicatedMaterial0                                         OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(class UMaterialInterface*)                 ReplicatedMaterial1                                         OFFSET(get<T>, {0x250, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset
	// void OnRep_ReplicatedPhysAsset();                                                                                        // [0x32f0400] Native|Public        
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedMesh
	// void OnRep_ReplicatedMesh();                                                                                             // [0xc51440] Native|Public        
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1
	// void OnRep_ReplicatedMaterial1();                                                                                        // [0x339ad00] Native|Public        
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0
	// void OnRep_ReplicatedMaterial0();                                                                                        // [0x15e7d10] Native|Public        
};

/// Class /Script/Engine.SkeletalMeshEditorData
/// Size: 0x0000 (0x000028 - 0x000028)
class USkeletalMeshEditorData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Engine.BoneFilter
/// Size: 0x000C (0x000000 - 0x00000C)
class FBoneFilter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(bool)                                      bExcludeSelf                                                OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x4, 8, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshLODGroupSettings
/// Size: 0x0080 (0x000000 - 0x000080)
class FSkeletalMeshLODGroupSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FPerPlatformFloat)                         ScreenSize                                                  OFFSET(getStruct<T>, {0x0, 4, 0, 0})
	DMember(float)                                     LODHysteresis                                               OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(EBoneFilterActionOption)                   BoneFilterActionOption                                      OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(TArray<FBoneFilter>)                       BoneList                                                    OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FName>)                             BonesToPrioritize                                           OFFSET(get<T>, {0x20, 16, 0, 0})
	DMember(float)                                     WeightOfPrioritization                                      OFFSET(get<float>, {0x30, 4, 0, 0})
	CMember(class UAnimSequence*)                      BakePose                                                    OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FSkeletalMeshOptimizationSettings)         ReductionSettings                                           OFFSET(getStruct<T>, {0x40, 60, 0, 0})
};

/// Class /Script/Engine.SkeletalMeshLODSettings
/// Size: 0x0020 (0x000030 - 0x000050)
class USkeletalMeshLODSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FPerPlatformInt)                           MinLOD                                                      OFFSET(getStruct<T>, {0x30, 4, 0, 0})
	SMember(FPerPlatformBool)                          DisableBelowMinLodStripping                                 OFFSET(getStruct<T>, {0x34, 1, 0, 0})
	DMember(bool)                                      bOverrideLODStreamingSettings                               OFFSET(get<bool>, {0x35, 1, 0, 0})
	SMember(FPerPlatformBool)                          bSupportLODStreaming                                        OFFSET(getStruct<T>, {0x36, 1, 0, 0})
	SMember(FPerPlatformInt)                           MaxNumStreamedLODs                                          OFFSET(getStruct<T>, {0x38, 4, 0, 0})
	SMember(FPerPlatformInt)                           MaxNumOptionalLODs                                          OFFSET(getStruct<T>, {0x3C, 4, 0, 0})
	CMember(TArray<FSkeletalMeshLODGroupSettings>)     LODGroups                                                   OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/Engine.SkeletalMeshSimplificationSettings
/// Size: 0x0008 (0x000038 - 0x000040)
class USkeletalMeshSimplificationSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     SkeletalMeshReductionModuleName                             OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Engine.SkeletalMeshSocket
/// Size: 0x0038 (0x000028 - 0x000060)
class USkeletalMeshSocket : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FVector)                                   RelativeLocation                                            OFFSET(getStruct<T>, {0x38, 12, 0, 0})
	SMember(FRotator)                                  RelativeRotation                                            OFFSET(getStruct<T>, {0x44, 12, 0, 0})
	SMember(FVector)                                   RelativeScale                                               OFFSET(getStruct<T>, {0x50, 12, 0, 0})
	DMember(bool)                                      bForceAlwaysAnimated                                        OFFSET(get<bool>, {0x5C, 1, 0, 0})


	/// Functions
	// Function /Script/Engine.SkeletalMeshSocket.InitializeSocketFromLocation
	// void InitializeSocketFromLocation(class USkeletalMeshComponent* SkelComp, FVector WorldLocation, FVector WorldNormal);   // [0x33f0d80] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshSocket.GetSocketLocation
	// FVector GetSocketLocation(class USkeletalMeshComponent* SkelComp);                                                       // [0x33f0a40] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.TentDistribution
/// Size: 0x000C (0x000000 - 0x00000C)
class FTentDistribution : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     TipAltitude                                                 OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     TipValue                                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Width                                                       OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/Engine.SkyAtmosphereComponent
/// Size: 0x00D8 (0x0001F8 - 0x0002D0)
class USkyAtmosphereComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	CMember(ESkyAtmosphereTransformMode)               TransformMode                                               OFFSET(get<T>, {0x1F8, 1, 0, 0})
	DMember(float)                                     BottomRadius                                                OFFSET(get<float>, {0x1FC, 4, 0, 0})
	SMember(FColor)                                    GroundAlbedo                                                OFFSET(getStruct<T>, {0x200, 4, 0, 0})
	DMember(float)                                     AtmosphereHeight                                            OFFSET(get<float>, {0x204, 4, 0, 0})
	DMember(float)                                     MultiScatteringFactor                                       OFFSET(get<float>, {0x208, 4, 0, 0})
	DMember(float)                                     TraceSampleCountScale                                       OFFSET(get<float>, {0x20C, 4, 0, 0})
	DMember(float)                                     RayleighScatteringScale                                     OFFSET(get<float>, {0x210, 4, 0, 0})
	SMember(FLinearColor)                              RayleighScattering                                          OFFSET(getStruct<T>, {0x214, 16, 0, 0})
	DMember(float)                                     RayleighExponentialDistribution                             OFFSET(get<float>, {0x224, 4, 0, 0})
	DMember(float)                                     MieScatteringScale                                          OFFSET(get<float>, {0x228, 4, 0, 0})
	SMember(FLinearColor)                              MieScattering                                               OFFSET(getStruct<T>, {0x22C, 16, 0, 0})
	DMember(float)                                     MieAbsorptionScale                                          OFFSET(get<float>, {0x23C, 4, 0, 0})
	SMember(FLinearColor)                              MieAbsorption                                               OFFSET(getStruct<T>, {0x240, 16, 0, 0})
	DMember(float)                                     MieAnisotropy                                               OFFSET(get<float>, {0x250, 4, 0, 0})
	DMember(float)                                     MieExponentialDistribution                                  OFFSET(get<float>, {0x254, 4, 0, 0})
	DMember(float)                                     OtherAbsorptionScale                                        OFFSET(get<float>, {0x258, 4, 0, 0})
	SMember(FLinearColor)                              OtherAbsorption                                             OFFSET(getStruct<T>, {0x25C, 16, 0, 0})
	SMember(FTentDistribution)                         OtherTentDistribution                                       OFFSET(getStruct<T>, {0x26C, 12, 0, 0})
	SMember(FLinearColor)                              SkyLuminanceFactor                                          OFFSET(getStruct<T>, {0x278, 16, 0, 0})
	DMember(float)                                     AerialPespectiveViewDistanceScale                           OFFSET(get<float>, {0x288, 4, 0, 0})
	DMember(float)                                     HeightFogContribution                                       OFFSET(get<float>, {0x28C, 4, 0, 0})
	DMember(float)                                     TransmittanceMinLightElevationAngle                         OFFSET(get<float>, {0x290, 4, 0, 0})
	DMember(float)                                     AerialPerspectiveStartDepth                                 OFFSET(get<float>, {0x294, 4, 0, 0})
	SMember(FGuid)                                     bStaticLightingBuiltGUID                                    OFFSET(getStruct<T>, {0x2BC, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor
	// void SetSkyLuminanceFactor(FLinearColor NewValue);                                                                       // [0x33f59c0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetRayleighScatteringScale
	// void SetRayleighScatteringScale(float NewValue);                                                                         // [0x33f5940] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetRayleighScattering
	// void SetRayleighScattering(FLinearColor NewValue);                                                                       // [0x33f58b0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetRayleighExponentialDistribution
	// void SetRayleighExponentialDistribution(float NewValue);                                                                 // [0x33f5830] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetOtherAbsorptionScale
	// void SetOtherAbsorptionScale(float NewValue);                                                                            // [0x33f57b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetOtherAbsorption
	// void SetOtherAbsorption(FLinearColor NewValue);                                                                          // [0x33f5720] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieScatteringScale
	// void SetMieScatteringScale(float NewValue);                                                                              // [0x33f5490] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieScattering
	// void SetMieScattering(FLinearColor NewValue);                                                                            // [0x33f5400] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieExponentialDistribution
	// void SetMieExponentialDistribution(float NewValue);                                                                      // [0x33f5380] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieAnisotropy
	// void SetMieAnisotropy(float NewValue);                                                                                   // [0x3383750] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieAbsorptionScale
	// void SetMieAbsorptionScale(float NewValue);                                                                              // [0x33f5300] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieAbsorption
	// void SetMieAbsorption(FLinearColor NewValue);                                                                            // [0x33f5270] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetHeightFogContribution
	// void SetHeightFogContribution(float NewValue);                                                                           // [0x3382c20] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetAerialPespectiveViewDistanceScale
	// void SetAerialPespectiveViewDistanceScale(float NewValue);                                                               // [0x33f4e20] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.OverrideAtmosphereLightDirection
	// void OverrideAtmosphereLightDirection(int32_t AtmosphereLightIndex, FVector& LightDirection);                            // [0x33f4d30] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.SkyAtmosphere
/// Size: 0x0008 (0x000220 - 0x000228)
class ASkyAtmosphere : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(class USkyAtmosphereComponent*)            SkyAtmosphereComponent                                      OFFSET(get<T>, {0x220, 8, 0, 0})
};

/// Class /Script/Engine.SkyLightComponent
/// Size: 0x01E8 (0x000228 - 0x000410)
class USkyLightComponent : public ULightComponentBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	DMember(bool)                                      bRealTimeCapture                                            OFFSET(get<bool>, {0x228, 1, 0, 0})
	CMember(TEnumAsByte<ESkyLightSourceType>)          SourceType                                                  OFFSET(get<T>, {0x229, 1, 0, 0})
	CMember(class UTextureCube*)                       Cubemap                                                     OFFSET(get<T>, {0x230, 8, 0, 0})
	DMember(float)                                     SourceCubemapAngle                                          OFFSET(get<float>, {0x238, 4, 0, 0})
	DMember(int32_t)                                   CubemapResolution                                           OFFSET(get<int32_t>, {0x23C, 4, 0, 0})
	DMember(float)                                     SkyDistanceThreshold                                        OFFSET(get<float>, {0x240, 4, 0, 0})
	DMember(bool)                                      bCaptureEmissiveOnly                                        OFFSET(get<bool>, {0x244, 1, 0, 0})
	DMember(bool)                                      bLowerHemisphereIsBlack                                     OFFSET(get<bool>, {0x245, 1, 0, 0})
	SMember(FLinearColor)                              LowerHemisphereColor                                        OFFSET(getStruct<T>, {0x248, 16, 0, 0})
	DMember(float)                                     OcclusionMaxDistance                                        OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(float)                                     Contrast                                                    OFFSET(get<float>, {0x25C, 4, 0, 0})
	DMember(float)                                     OcclusionExponent                                           OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(float)                                     MinOcclusion                                                OFFSET(get<float>, {0x264, 4, 0, 0})
	SMember(FColor)                                    OcclusionTint                                               OFFSET(getStruct<T>, {0x268, 4, 0, 0})
	DMember(bool)                                      bCloudAmbientOcclusion                                      OFFSET(get<bool>, {0x26C, 1, 1, 0})
	DMember(float)                                     CloudAmbientOcclusionStrength                               OFFSET(get<float>, {0x270, 4, 0, 0})
	DMember(float)                                     CloudAmbientOcclusionExtent                                 OFFSET(get<float>, {0x274, 4, 0, 0})
	DMember(float)                                     CloudAmbientOcclusionMapResolutionScale                     OFFSET(get<float>, {0x278, 4, 0, 0})
	DMember(float)                                     CloudAmbientOcclusionApertureScale                          OFFSET(get<float>, {0x27C, 4, 0, 0})
	CMember(TEnumAsByte<EOcclusionCombineMode>)        OcclusionCombineMode                                        OFFSET(get<T>, {0x280, 1, 0, 0})
	CMember(class UTextureCube*)                       BlendDestinationCubemap                                     OFFSET(get<T>, {0x338, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.SkyLightComponent.SetVolumetricScatteringIntensity
	// void SetVolumetricScatteringIntensity(float NewIntensity);                                                               // [0x33f5a50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetOcclusionTint
	// void SetOcclusionTint(FColor& InTint);                                                                                   // [0x33f5690] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetOcclusionExponent
	// void SetOcclusionExponent(float InOcclusionExponent);                                                                    // [0x33f5610] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetOcclusionContrast
	// void SetOcclusionContrast(float InOcclusionContrast);                                                                    // [0x33f5590] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetMinOcclusion
	// void SetMinOcclusion(float InMinOcclusion);                                                                              // [0x33f5510] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetLowerHemisphereColor
	// void SetLowerHemisphereColor(FLinearColor& InLowerHemisphereColor);                                                      // [0x33f51e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetLightColor
	// void SetLightColor(FLinearColor NewLightColor);                                                                          // [0x33f5150] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetIntensity
	// void SetIntensity(float NewIntensity);                                                                                   // [0x33f50d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetIndirectLightingIntensity
	// void SetIndirectLightingIntensity(float NewIntensity);                                                                   // [0x33f5050] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetCubemapBlend
	// void SetCubemapBlend(class UTextureCube* SourceCubemap, class UTextureCube* DestinationCubemap, float InBlendFraction);  // [0x33f4f30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetCubemap
	// void SetCubemap(class UTextureCube* NewCubemap);                                                                         // [0x33f4ea0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.RecaptureSky
	// void RecaptureSky();                                                                                                     // [0x33f4e00] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SlateBrushAsset
/// Size: 0x00D8 (0x000028 - 0x000100)
class USlateBrushAsset : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FSlateBrush)                               Brush                                                       OFFSET(getStruct<T>, {0x30, 208, 0, 0})
};

/// Class /Script/Engine.SlateTextureAtlasInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class USlateTextureAtlasInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.SmokeTestCommandlet
/// Size: 0x0000 (0x000080 - 0x000080)
class USmokeTestCommandlet : public UCommandlet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Engine.SoundAttenuation
/// Size: 0x03A0 (0x000028 - 0x0003C8)
class USoundAttenuation : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 968;

public:
	SMember(FSoundAttenuationSettings)                 Attenuation                                                 OFFSET(getStruct<T>, {0x28, 928, 0, 0})
};

/// Struct /Script/Engine.SoundClassProperties
/// Size: 0x0080 (0x000000 - 0x000080)
class FSoundClassProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	DMember(float)                                     Volume                                                      OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Pitch                                                       OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     LowPassFilterFrequency                                      OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     AttenuationDistanceScale                                    OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     StereoBleed                                                 OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     LFEBleed                                                    OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     VoiceCenterChannelVolume                                    OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     RadioFilterVolume                                           OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     RadioFilterVolumeThreshold                                  OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(bool)                                      bApplyEffects                                               OFFSET(get<bool>, {0x24, 1, 1, 0})
	DMember(bool)                                      bAlwaysPlay                                                 OFFSET(get<bool>, {0x24, 1, 1, 1})
	DMember(bool)                                      bIsUISound                                                  OFFSET(get<bool>, {0x24, 1, 1, 2})
	DMember(bool)                                      bIsMusic                                                    OFFSET(get<bool>, {0x24, 1, 1, 3})
	DMember(bool)                                      bCenterChannelOnly                                          OFFSET(get<bool>, {0x24, 1, 1, 4})
	DMember(bool)                                      bApplyAmbientVolumes                                        OFFSET(get<bool>, {0x24, 1, 1, 5})
	DMember(bool)                                      bReverb                                                     OFFSET(get<bool>, {0x24, 1, 1, 6})
	DMember(float)                                     Default2DReverbSendAmount                                   OFFSET(get<float>, {0x28, 4, 0, 0})
	SMember(FSoundModulationDefaultSettings)           ModulationSettings                                          OFFSET(getStruct<T>, {0x30, 64, 0, 0})
	CMember(TEnumAsByte<EAudioOutputTarget>)           OutputTarget                                                OFFSET(get<T>, {0x70, 1, 0, 0})
	CMember(ESoundWaveLoadingBehavior)                 LoadingBehavior                                             OFFSET(get<T>, {0x71, 1, 0, 0})
	CMember(class USoundSubmix*)                       DefaultSubmix                                               OFFSET(get<T>, {0x78, 8, 0, 0})
};

/// Struct /Script/Engine.PassiveSoundMixModifier
/// Size: 0x0010 (0x000000 - 0x000010)
class FPassiveSoundMixModifier : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class USoundMix*)                          SoundMix                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     MinVolumeThreshold                                          OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     MaxVolumeThreshold                                          OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Class /Script/Engine.SoundClass
/// Size: 0x00A8 (0x000028 - 0x0000D0)
class USoundClass : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FSoundClassProperties)                     Properties                                                  OFFSET(getStruct<T>, {0x28, 128, 0, 0})
	CMember(TArray<class USoundClass*>)                ChildClasses                                                OFFSET(get<T>, {0xA8, 16, 0, 0})
	CMember(TArray<FPassiveSoundMixModifier>)          PassiveSoundMixModifiers                                    OFFSET(get<T>, {0xB8, 16, 0, 0})
	CMember(class USoundClass*)                        ParentClass                                                 OFFSET(get<T>, {0xC8, 8, 0, 0})
};

/// Class /Script/Engine.SoundConcurrency
/// Size: 0x0028 (0x000028 - 0x000050)
class USoundConcurrency : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FSoundConcurrencySettings)                 Concurrency                                                 OFFSET(getStruct<T>, {0x28, 40, 0, 0})
};

/// Class /Script/Engine.SoundCue
/// Size: 0x03D8 (0x0001B8 - 0x000590)
class USoundCue : public USoundBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1424;

public:
	DMember(bool)                                      bPrimeOnLoad                                                OFFSET(get<bool>, {0x1B8, 1, 1, 0})
	CMember(class USoundNode*)                         FirstNode                                                   OFFSET(get<T>, {0x1C0, 8, 0, 0})
	DMember(float)                                     VolumeMultiplier                                            OFFSET(get<float>, {0x1C8, 4, 0, 0})
	DMember(float)                                     PitchMultiplier                                             OFFSET(get<float>, {0x1CC, 4, 0, 0})
	SMember(FSoundAttenuationSettings)                 AttenuationOverrides                                        OFFSET(getStruct<T>, {0x1D0, 928, 0, 0})
	DMember(float)                                     SubtitlePriority                                            OFFSET(get<float>, {0x570, 4, 0, 0})
	DMember(bool)                                      bOverrideAttenuation                                        OFFSET(get<bool>, {0x578, 1, 1, 0})
	DMember(bool)                                      bExcludeFromRandomNodeBranchCulling                         OFFSET(get<bool>, {0x578, 1, 1, 1})
	DMember(int32_t)                                   CookedQualityIndex                                          OFFSET(get<int32_t>, {0x57C, 4, 0, 0})
	DMember(bool)                                      bHasPlayWhenSilent                                          OFFSET(get<bool>, {0x580, 1, 1, 0})
};

/// Struct /Script/Engine.SourceEffectChainEntry
/// Size: 0x0010 (0x000000 - 0x000010)
class FSourceEffectChainEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class USoundEffectSourcePreset*)           Preset                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bBypass                                                     OFFSET(get<bool>, {0x8, 1, 1, 0})
};

/// Class /Script/Engine.SoundEffectSourcePresetChain
/// Size: 0x0018 (0x000028 - 0x000040)
class USoundEffectSourcePresetChain : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FSourceEffectChainEntry>)           Chain                                                       OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(bool)                                      bPlayEffectChainTails                                       OFFSET(get<bool>, {0x38, 1, 1, 0})
};

/// Struct /Script/Engine.SoundGroup
/// Size: 0x0020 (0x000000 - 0x000020)
class FSoundGroup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TEnumAsByte<ESoundGroup>)                  SoundGroup                                                  OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FString)                                   DisplayName                                                 OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	DMember(bool)                                      bAlwaysDecompressOnLoad                                     OFFSET(get<bool>, {0x18, 1, 1, 0})
	DMember(float)                                     DecompressedDuration                                        OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Class /Script/Engine.SoundGroups
/// Size: 0x0060 (0x000028 - 0x000088)
class USoundGroups : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<FSoundGroup>)                       SoundGroupProfiles                                          OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/Engine.AudioEffectParameters
/// Size: 0x0008 (0x000000 - 0x000008)
class FAudioEffectParameters : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.AudioEQEffect
/// Size: 0x0038 (0x000008 - 0x000040)
class FAudioEQEffect : public FAudioEffectParameters
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     FrequencyCenter0                                            OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     Gain0                                                       OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     Bandwidth0                                                  OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     FrequencyCenter1                                            OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     Gain1                                                       OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     Bandwidth1                                                  OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     FrequencyCenter2                                            OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     Gain2                                                       OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     Bandwidth2                                                  OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     FrequencyCenter3                                            OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     Gain3                                                       OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     Bandwidth3                                                  OFFSET(get<float>, {0x3C, 4, 0, 0})
};

/// Struct /Script/Engine.SoundClassAdjuster
/// Size: 0x0020 (0x000000 - 0x000020)
class FSoundClassAdjuster : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class USoundClass*)                        SoundClassObject                                            OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     VolumeAdjuster                                              OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     PitchAdjuster                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     LowPassFilterFrequency                                      OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(bool)                                      bApplyToChildren                                            OFFSET(get<bool>, {0x14, 1, 1, 0})
	DMember(float)                                     VoiceCenterChannelVolumeAdjuster                            OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Class /Script/Engine.SoundMix
/// Size: 0x0068 (0x000028 - 0x000090)
class USoundMix : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	DMember(bool)                                      bApplyEQ                                                    OFFSET(get<bool>, {0x28, 1, 1, 0})
	DMember(float)                                     EQPriority                                                  OFFSET(get<float>, {0x2C, 4, 0, 0})
	SMember(FAudioEQEffect)                            EQSettings                                                  OFFSET(getStruct<T>, {0x30, 64, 0, 0})
	CMember(TArray<FSoundClassAdjuster>)               SoundClassEffects                                           OFFSET(get<T>, {0x70, 16, 0, 0})
	DMember(float)                                     InitialDelay                                                OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(float)                                     FadeInTime                                                  OFFSET(get<float>, {0x84, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x88, 4, 0, 0})
	DMember(float)                                     FadeOutTime                                                 OFFSET(get<float>, {0x8C, 4, 0, 0})
};

/// Class /Script/Engine.SoundNode
/// Size: 0x0020 (0x000028 - 0x000048)
class USoundNode : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<class USoundNode*>)                 ChildNodes                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.SoundNodeAssetReferencer
/// Size: 0x0000 (0x000048 - 0x000048)
class USoundNodeAssetReferencer : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/Engine.SoundNodeAttenuation
/// Size: 0x03B0 (0x000048 - 0x0003F8)
class USoundNodeAttenuation : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1016;

public:
	CMember(class USoundAttenuation*)                  AttenuationSettings                                         OFFSET(get<T>, {0x48, 8, 0, 0})
	SMember(FSoundAttenuationSettings)                 AttenuationOverrides                                        OFFSET(getStruct<T>, {0x50, 928, 0, 0})
	DMember(bool)                                      bOverrideAttenuation                                        OFFSET(get<bool>, {0x3F0, 1, 1, 0})
};

/// Class /Script/Engine.SoundNodeBranch
/// Size: 0x0008 (0x000048 - 0x000050)
class USoundNodeBranch : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     BoolParameterName                                           OFFSET(getStruct<T>, {0x48, 8, 0, 0})
};

/// Class /Script/Engine.SoundNodeConcatenator
/// Size: 0x0010 (0x000048 - 0x000058)
class USoundNodeConcatenator : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<float>)                             InputVolume                                                 OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Class /Script/Engine.SoundNodeDelay
/// Size: 0x0008 (0x000048 - 0x000050)
class USoundNodeDelay : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     DelayMin                                                    OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     DelayMax                                                    OFFSET(get<float>, {0x4C, 4, 0, 0})
};

/// Struct /Script/Engine.DialogueWaveParameter
/// Size: 0x0020 (0x000000 - 0x000020)
class FDialogueWaveParameter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UDialogueWave*)                      DialogueWave                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FDialogueContext)                          Context                                                     OFFSET(getStruct<T>, {0x8, 24, 0, 0})
};

/// Class /Script/Engine.SoundNodeDialoguePlayer
/// Size: 0x0028 (0x000048 - 0x000070)
class USoundNodeDialoguePlayer : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FDialogueWaveParameter)                    DialogueWaveParameter                                       OFFSET(getStruct<T>, {0x48, 32, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x68, 1, 1, 0})
};

/// Struct /Script/Engine.DistanceDatum
/// Size: 0x0014 (0x000000 - 0x000014)
class FDistanceDatum : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     FadeInDistanceStart                                         OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     FadeInDistanceEnd                                           OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     FadeOutDistanceStart                                        OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     FadeOutDistanceEnd                                          OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     Volume                                                      OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Class /Script/Engine.SoundNodeDistanceCrossFade
/// Size: 0x0010 (0x000048 - 0x000058)
class USoundNodeDistanceCrossFade : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<FDistanceDatum>)                    CrossFadeInput                                              OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Class /Script/Engine.SoundNodeDoppler
/// Size: 0x0010 (0x000048 - 0x000058)
class USoundNodeDoppler : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(float)                                     DopplerIntensity                                            OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(bool)                                      bUseSmoothing                                               OFFSET(get<bool>, {0x4C, 1, 0, 0})
	DMember(float)                                     SmoothingInterpSpeed                                        OFFSET(get<float>, {0x50, 4, 0, 0})
};

/// Class /Script/Engine.SoundNodeEnveloper
/// Size: 0x0148 (0x000048 - 0x000190)
class USoundNodeEnveloper : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	DMember(float)                                     LoopStart                                                   OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     LoopEnd                                                     OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     DurationAfterLoop                                           OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(int32_t)                                   LoopCount                                                   OFFSET(get<int32_t>, {0x54, 4, 0, 0})
	DMember(bool)                                      bLoopIndefinitely                                           OFFSET(get<bool>, {0x58, 1, 1, 0})
	DMember(bool)                                      bLoop                                                       OFFSET(get<bool>, {0x58, 1, 1, 1})
	CMember(class UDistributionFloatConstantCurve*)    VolumeInterpCurve                                           OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(class UDistributionFloatConstantCurve*)    PitchInterpCurve                                            OFFSET(get<T>, {0x68, 8, 0, 0})
	SMember(FRuntimeFloatCurve)                        VolumeCurve                                                 OFFSET(getStruct<T>, {0x70, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        PitchCurve                                                  OFFSET(getStruct<T>, {0xF8, 136, 0, 0})
	DMember(float)                                     PitchMin                                                    OFFSET(get<float>, {0x180, 4, 0, 0})
	DMember(float)                                     PitchMax                                                    OFFSET(get<float>, {0x184, 4, 0, 0})
	DMember(float)                                     VolumeMin                                                   OFFSET(get<float>, {0x188, 4, 0, 0})
	DMember(float)                                     VolumeMax                                                   OFFSET(get<float>, {0x18C, 4, 0, 0})
};

/// Class /Script/Engine.SoundNodeGroupControl
/// Size: 0x0010 (0x000048 - 0x000058)
class USoundNodeGroupControl : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<int32_t>)                           GroupSizes                                                  OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Class /Script/Engine.SoundNodeLooping
/// Size: 0x0008 (0x000048 - 0x000050)
class USoundNodeLooping : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(int32_t)                                   LoopCount                                                   OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(bool)                                      bLoopIndefinitely                                           OFFSET(get<bool>, {0x4C, 1, 1, 0})
};

/// Class /Script/Engine.SoundNodeMature
/// Size: 0x0000 (0x000048 - 0x000048)
class USoundNodeMature : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/Engine.SoundNodeMixer
/// Size: 0x0010 (0x000048 - 0x000058)
class USoundNodeMixer : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<float>)                             InputVolume                                                 OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Class /Script/Engine.SoundNodeModulator
/// Size: 0x0010 (0x000048 - 0x000058)
class USoundNodeModulator : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(float)                                     PitchMin                                                    OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     PitchMax                                                    OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     VolumeMin                                                   OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     VolumeMax                                                   OFFSET(get<float>, {0x54, 4, 0, 0})
};

/// Struct /Script/Engine.ModulatorContinuousParams
/// Size: 0x0020 (0x000000 - 0x000020)
class FModulatorContinuousParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Default                                                     OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     MinInput                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     MaxInput                                                    OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     MinOutput                                                   OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     MaxOutput                                                   OFFSET(get<float>, {0x18, 4, 0, 0})
	CMember(TEnumAsByte<ModulationParamMode>)          ParamMode                                                   OFFSET(get<T>, {0x1C, 1, 0, 0})
};

/// Class /Script/Engine.SoundNodeModulatorContinuous
/// Size: 0x0040 (0x000048 - 0x000088)
class USoundNodeModulatorContinuous : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FModulatorContinuousParams)                PitchModulationParams                                       OFFSET(getStruct<T>, {0x48, 32, 0, 0})
	SMember(FModulatorContinuousParams)                VolumeModulationParams                                      OFFSET(getStruct<T>, {0x68, 32, 0, 0})
};

/// Class /Script/Engine.SoundNodeOscillator
/// Size: 0x0028 (0x000048 - 0x000070)
class USoundNodeOscillator : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(bool)                                      bModulateVolume                                             OFFSET(get<bool>, {0x48, 1, 1, 0})
	DMember(bool)                                      bModulatePitch                                              OFFSET(get<bool>, {0x48, 1, 1, 1})
	DMember(float)                                     AmplitudeMin                                                OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     AmplitudeMax                                                OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     FrequencyMin                                                OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     FrequencyMax                                                OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     OffsetMin                                                   OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     OffsetMax                                                   OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     CenterMin                                                   OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     CenterMax                                                   OFFSET(get<float>, {0x68, 4, 0, 0})
};

/// Class /Script/Engine.SoundNodeParamCrossFade
/// Size: 0x0008 (0x000058 - 0x000060)
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FName)                                     ParamName                                                   OFFSET(getStruct<T>, {0x58, 8, 0, 0})
};

/// Class /Script/Engine.SoundNodeQualityLevel
/// Size: 0x0008 (0x000048 - 0x000050)
class USoundNodeQualityLevel : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(int32_t)                                   CookedQualityLevelIndex                                     OFFSET(get<int32_t>, {0x48, 4, 0, 0})
};

/// Class /Script/Engine.SoundNodeRandom
/// Size: 0x0030 (0x000048 - 0x000078)
class USoundNodeRandom : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TArray<float>)                             Weights                                                     OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<bool>)                              HasBeenUsed                                                 OFFSET(get<T>, {0x58, 16, 0, 0})
	DMember(int32_t)                                   NumRandomUsed                                               OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	DMember(int32_t)                                   PreselectAtLevelLoad                                        OFFSET(get<int32_t>, {0x6C, 4, 0, 0})
	DMember(bool)                                      bShouldExcludeFromBranchCulling                             OFFSET(get<bool>, {0x70, 1, 1, 0})
	DMember(bool)                                      bSoundCueExcludedFromBranchCulling                          OFFSET(get<bool>, {0x70, 1, 1, 1})
	DMember(bool)                                      bRandomizeWithoutReplacement                                OFFSET(get<bool>, {0x70, 1, 1, 2})
};

/// Class /Script/Engine.SoundNodeSoundClass
/// Size: 0x0010 (0x000048 - 0x000058)
class USoundNodeSoundClass : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class USoundClass*)                        SoundClassOverride                                          OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/Engine.SoundNodeSwitch
/// Size: 0x0008 (0x000048 - 0x000050)
class USoundNodeSwitch : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     IntParameterName                                            OFFSET(getStruct<T>, {0x48, 8, 0, 0})
};

/// Class /Script/Engine.SoundNodeWaveParam
/// Size: 0x0008 (0x000048 - 0x000050)
class USoundNodeWaveParam : public USoundNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     WaveParameterName                                           OFFSET(getStruct<T>, {0x48, 8, 0, 0})
};

/// Class /Script/Engine.SoundNodeWavePlayer
/// Size: 0x0040 (0x000048 - 0x000088)
class USoundNodeWavePlayer : public USoundNodeAssetReferencer
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TWeakObjectPtr<class USoundWave*>)         SoundWaveAssetPtr                                           OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class USoundWave*)                         SoundWave                                                   OFFSET(get<T>, {0x70, 8, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x80, 1, 1, 0})
};

/// Class /Script/Engine.SoundSourceBus
/// Size: 0x0018 (0x000370 - 0x000388)
class USoundSourceBus : public USoundWave
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 904;

public:
	CMember(ESourceBusChannels)                        SourceBusChannels                                           OFFSET(get<T>, {0x370, 1, 0, 0})
	DMember(float)                                     SourceBusDuration                                           OFFSET(get<float>, {0x374, 4, 0, 0})
	CMember(class UAudioBus*)                          AudioBus                                                    OFFSET(get<T>, {0x378, 8, 0, 0})
	DMember(bool)                                      bAutoDeactivateWhenSilent                                   OFFSET(get<bool>, {0x380, 1, 1, 0})
};

/// Class /Script/Engine.SoundSubmixBase
/// Size: 0x0010 (0x000028 - 0x000038)
class USoundSubmixBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<class USoundSubmixBase*>)           ChildSubmixes                                               OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/Engine.SoundSubmixWithParentBase
/// Size: 0x0008 (0x000038 - 0x000040)
class USoundSubmixWithParentBase : public USoundSubmixBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class USoundSubmixBase*)                   ParentSubmix                                                OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Engine.SoundSubmix
/// Size: 0x0050 (0x000040 - 0x000090)
class USoundSubmix : public USoundSubmixWithParentBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	DMember(bool)                                      bMuteWhenBackgrounded                                       OFFSET(get<bool>, {0x40, 1, 1, 0})
	CMember(TArray<class USoundEffectSubmixPreset*>)   SubmixEffectChain                                           OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(class USoundfieldEncodingSettingsBase*)    AmbisonicsPluginSettings                                    OFFSET(get<T>, {0x58, 8, 0, 0})
	DMember(int32_t)                                   EnvelopeFollowerAttackTime                                  OFFSET(get<int32_t>, {0x60, 4, 0, 0})
	DMember(int32_t)                                   EnvelopeFollowerReleaseTime                                 OFFSET(get<int32_t>, {0x64, 4, 0, 0})
	CMember(EGainParamMode)                            GainMode                                                    OFFSET(get<T>, {0x68, 1, 0, 0})
	DMember(float)                                     OutputVolume                                                OFFSET(get<float>, {0x6C, 4, 0, 0})
	DMember(float)                                     WetLevel                                                    OFFSET(get<float>, {0x70, 4, 0, 0})
	DMember(float)                                     DryLevel                                                    OFFSET(get<float>, {0x74, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSubmixRecordedFileDone                                    OFFSET(getStruct<T>, {0x78, 16, 0, 0})


	/// Functions
	// Function /Script/Engine.SoundSubmix.StopSpectralAnalysis
	// void StopSpectralAnalysis(class UObject* WorldContextObject);                                                            // [0x33fc180] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.StopRecordingOutput
	// void StopRecordingOutput(class UObject* WorldContextObject, EAudioRecordingExportType ExportType, FString Name, FString Path, class USoundWave* ExistingSoundWaveToOverwrite); // [0x33fbf80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.StopEnvelopeFollowing
	// void StopEnvelopeFollowing(class UObject* WorldContextObject);                                                           // [0x33fbef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.StartSpectralAnalysis
	// void StartSpectralAnalysis(class UObject* WorldContextObject, EFFTSize FFTSize, EFFTPeakInterpolationMethod InterpolationMethod, EFFTWindowType WindowType, float HopSize, EAudioSpectrumType SpectrumType); // [0x33fbd10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.StartRecordingOutput
	// void StartRecordingOutput(class UObject* WorldContextObject, float ExpectedDuration);                                    // [0x33fbc40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.StartEnvelopeFollowing
	// void StartEnvelopeFollowing(class UObject* WorldContextObject);                                                          // [0x33fbbb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.SetSubmixOutputVolume
	// void SetSubmixOutputVolume(class UObject* WorldContextObject, float InOutputVolume);                                     // [0x33fbae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.RemoveSpectralAnalysisDelegate
	// void RemoveSpectralAnalysisDelegate(class UObject* WorldContextObject, FDelegateProperty& OnSubmixSpectralAnalysisBP);   // [0x33fb9f0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.AddSpectralAnalysisDelegate
	// void AddSpectralAnalysisDelegate(class UObject* WorldContextObject, TArray<FSoundSubmixSpectralAnalysisBandSettings>& InBandSettings, FDelegateProperty& OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime); // [0x33fb6f0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.AddEnvelopeFollowerDelegate
	// void AddEnvelopeFollowerDelegate(class UObject* WorldContextObject, FDelegateProperty& OnSubmixEnvelopeBP);              // [0x33fb600] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.SoundfieldSubmix
/// Size: 0x0028 (0x000040 - 0x000068)
class USoundfieldSubmix : public USoundSubmixWithParentBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FName)                                     SoundfieldEncodingFormat                                    OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	CMember(class USoundfieldEncodingSettingsBase*)    EncodingSettings                                            OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TArray<class USoundfieldEffectBase*>)      SoundfieldEffectChain                                       OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(class UClass*)                             EncodingSettingsClass                                       OFFSET(get<T>, {0x60, 8, 0, 0})
};

/// Class /Script/Engine.EndpointSubmix
/// Size: 0x0018 (0x000038 - 0x000050)
class UEndpointSubmix : public USoundSubmixBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     EndpointType                                                OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	CMember(class UClass*)                             EndpointSettingsClass                                       OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UAudioEndpointSettingsBase*)         EndpointSettings                                            OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/Engine.SoundfieldEndpointSubmix
/// Size: 0x0038 (0x000038 - 0x000070)
class USoundfieldEndpointSubmix : public USoundSubmixBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FName)                                     SoundfieldEndpointType                                      OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	CMember(class UClass*)                             EndpointSettingsClass                                       OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class USoundfieldEndpointSettingsBase*)    EndpointSettings                                            OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UClass*)                             EncodingSettingsClass                                       OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class USoundfieldEncodingSettingsBase*)    EncodingSettings                                            OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(TArray<class USoundfieldEffectBase*>)      SoundfieldEffectChain                                       OFFSET(get<T>, {0x60, 16, 0, 0})
};

/// Class /Script/Engine.SpectatorPawn
/// Size: 0x0000 (0x0002A8 - 0x0002A8)
class ASpectatorPawn : public ADefaultPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
};

/// Class /Script/Engine.SpectatorPawnMovement
/// Size: 0x0008 (0x000150 - 0x000158)
class USpectatorPawnMovement : public UFloatingPawnMovement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	DMember(bool)                                      bIgnoreTimeDilation                                         OFFSET(get<bool>, {0x150, 1, 1, 0})
};

/// Class /Script/Engine.SphereReflectionCapture
/// Size: 0x0008 (0x000228 - 0x000230)
class ASphereReflectionCapture : public AReflectionCapture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(class UDrawSphereComponent*)               DrawCaptureRadius                                           OFFSET(get<T>, {0x228, 8, 0, 0})
};

/// Class /Script/Engine.SphereReflectionCaptureComponent
/// Size: 0x0018 (0x000278 - 0x000290)
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	DMember(float)                                     InfluenceRadius                                             OFFSET(get<float>, {0x278, 4, 0, 0})
	DMember(float)                                     CaptureDistanceScale                                        OFFSET(get<float>, {0x27C, 4, 0, 0})
	CMember(class UDrawSphereComponent*)               PreviewInfluenceRadius                                      OFFSET(get<T>, {0x280, 8, 0, 0})
};

/// Class /Script/Engine.SplineMetadata
/// Size: 0x0000 (0x000028 - 0x000028)
class USplineMetadata : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.SplineMeshActor
/// Size: 0x0008 (0x000220 - 0x000228)
class ASplineMeshActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(class USplineMeshComponent*)               SplineMeshComponent                                         OFFSET(get<T>, {0x220, 8, 0, 0})
};

/// Struct /Script/Engine.SplineMeshParams
/// Size: 0x0058 (0x000000 - 0x000058)
class FSplineMeshParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FVector)                                   StartPos                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   StartTangent                                                OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FVector2D)                                 StartScale                                                  OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	DMember(float)                                     StartRoll                                                   OFFSET(get<float>, {0x20, 4, 0, 0})
	SMember(FVector2D)                                 StartOffset                                                 OFFSET(getStruct<T>, {0x24, 8, 0, 0})
	SMember(FVector)                                   EndPos                                                      OFFSET(getStruct<T>, {0x2C, 12, 0, 0})
	SMember(FVector2D)                                 EndScale                                                    OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FVector)                                   EndTangent                                                  OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	DMember(float)                                     EndRoll                                                     OFFSET(get<float>, {0x4C, 4, 0, 0})
	SMember(FVector2D)                                 EndOffset                                                   OFFSET(getStruct<T>, {0x50, 8, 0, 0})
};

/// Class /Script/Engine.SplineMeshComponent
/// Size: 0x0098 (0x0004F8 - 0x000590)
class USplineMeshComponent : public UStaticMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1424;

public:
	SMember(FSplineMeshParams)                         SplineParams                                                OFFSET(getStruct<T>, {0x500, 88, 0, 0})
	SMember(FVector)                                   SplineUpDir                                                 OFFSET(getStruct<T>, {0x558, 12, 0, 0})
	DMember(float)                                     SplineBoundaryMin                                           OFFSET(get<float>, {0x564, 4, 0, 0})
	SMember(FGuid)                                     CachedMeshBodySetupGuid                                     OFFSET(getStruct<T>, {0x568, 16, 0, 0})
	CMember(class UBodySetup*)                         BodySetup                                                   OFFSET(get<T>, {0x578, 8, 0, 0})
	DMember(float)                                     SplineBoundaryMax                                           OFFSET(get<float>, {0x580, 4, 0, 0})
	DMember(bool)                                      bAllowSplineEditingPerInstance                              OFFSET(get<bool>, {0x584, 1, 1, 0})
	DMember(bool)                                      bSmoothInterpRollScale                                      OFFSET(get<bool>, {0x584, 1, 1, 1})
	DMember(bool)                                      bMeshDirty                                                  OFFSET(get<bool>, {0x584, 1, 1, 2})
	CMember(TEnumAsByte<ESplineMeshAxis>)              ForwardAxis                                                 OFFSET(get<T>, {0x585, 1, 0, 0})
	DMember(float)                                     VirtualTextureMainPassMaxDrawDistance                       OFFSET(get<float>, {0x588, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.SplineMeshComponent.UpdateMesh
	// void UpdateMesh();                                                                                                       // [0x3407e20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartTangent
	// void SetStartTangent(FVector StartTangent, bool bUpdateMesh);                                                            // [0x3407d40] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartScale
	// void SetStartScale(FVector2D StartScale, bool bUpdateMesh);                                                              // [0x3407c70] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartRoll
	// void SetStartRoll(float StartRoll, bool bUpdateMesh);                                                                    // [0x3407b90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartPosition
	// void SetStartPosition(FVector StartPos, bool bUpdateMesh);                                                               // [0x3407ab0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartOffset
	// void SetStartOffset(FVector2D StartOffset, bool bUpdateMesh);                                                            // [0x34079e0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartAndEnd
	// void SetStartAndEnd(FVector StartPos, FVector StartTangent, FVector EndPos, FVector EndTangent, bool bUpdateMesh);       // [0x3407800] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetSplineUpDir
	// void SetSplineUpDir(FVector& InSplineUpDir, bool bUpdateMesh);                                                           // [0x3407720] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetForwardAxis
	// void SetForwardAxis(TEnumAsByte<ESplineMeshAxis> InForwardAxis, bool bUpdateMesh);                                       // [0x3407450] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndTangent
	// void SetEndTangent(FVector EndTangent, bool bUpdateMesh);                                                                // [0x3407370] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndScale
	// void SetEndScale(FVector2D EndScale, bool bUpdateMesh);                                                                  // [0x34072a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndRoll
	// void SetEndRoll(float EndRoll, bool bUpdateMesh);                                                                        // [0x34071c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndPosition
	// void SetEndPosition(FVector EndPos, bool bUpdateMesh);                                                                   // [0x34070e0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndOffset
	// void SetEndOffset(FVector2D EndOffset, bool bUpdateMesh);                                                                // [0x3407010] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetBoundaryMin
	// void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);                                                              // [0x3406f30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetBoundaryMax
	// void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);                                                              // [0x3406e50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.GetStartTangent
	// FVector GetStartTangent();                                                                                               // [0x3406cd0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetStartScale
	// FVector2D GetStartScale();                                                                                               // [0x3406c90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetStartRoll
	// float GetStartRoll();                                                                                                    // [0x3406c60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetStartPosition
	// FVector GetStartPosition();                                                                                              // [0x3406c20] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetStartOffset
	// FVector2D GetStartOffset();                                                                                              // [0x3406be0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetSplineUpDir
	// FVector GetSplineUpDir();                                                                                                // [0x3406ba0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetForwardAxis
	// TEnumAsByte<ESplineMeshAxis> GetForwardAxis();                                                                           // [0x34067b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndTangent
	// FVector GetEndTangent();                                                                                                 // [0x3406770] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndScale
	// FVector2D GetEndScale();                                                                                                 // [0x3406730] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndRoll
	// float GetEndRoll();                                                                                                      // [0x3406700] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndPosition
	// FVector GetEndPosition();                                                                                                // [0x34066c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndOffset
	// FVector2D GetEndOffset();                                                                                                // [0x3406680] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetBoundaryMin
	// float GetBoundaryMin();                                                                                                  // [0xea9700] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetBoundaryMax
	// float GetBoundaryMax();                                                                                                  // [0x34065b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.SpotLightComponent
/// Size: 0x0008 (0x000358 - 0x000360)
class USpotLightComponent : public UPointLightComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	DMember(float)                                     InnerConeAngle                                              OFFSET(get<float>, {0x358, 4, 0, 0})
	DMember(float)                                     OuterConeAngle                                              OFFSET(get<float>, {0x35C, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.SpotLightComponent.SetOuterConeAngle
	// void SetOuterConeAngle(float NewOuterConeAngle);                                                                         // [0x34076a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SpotLightComponent.SetInnerConeAngle
	// void SetInnerConeAngle(float NewInnerConeAngle);                                                                         // [0x34075a0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.StaticMaterial
/// Size: 0x0030 (0x000000 - 0x000030)
class FStaticMaterial : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UMaterialInterface*)                 MaterialInterface                                           OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     MaterialSlotName                                            OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     ImportedMaterialSlotName                                    OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	SMember(FMeshUVChannelInfo)                        UVChannelData                                               OFFSET(getStruct<T>, {0x18, 20, 0, 0})
};

/// Class /Script/Engine.StaticMesh
/// Size: 0x00F0 (0x000060 - 0x000150)
class UStaticMesh : public UStreamableRenderAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	SMember(FPerPlatformInt)                           MinLOD                                                      OFFSET(getStruct<T>, {0x80, 4, 0, 0})
	DMember(float)                                     LpvBiasMultiplier                                           OFFSET(get<float>, {0x84, 4, 0, 0})
	CMember(TArray<FStaticMaterial>)                   StaticMaterials                                             OFFSET(get<T>, {0x88, 16, 0, 0})
	DMember(float)                                     LightmapUVDensity                                           OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(int32_t)                                   LightMapResolution                                          OFFSET(get<int32_t>, {0x9C, 4, 0, 0})
	DMember(int32_t)                                   LightMapCoordinateIndex                                     OFFSET(get<int32_t>, {0xA0, 4, 0, 0})
	DMember(float)                                     DistanceFieldSelfShadowBias                                 OFFSET(get<float>, {0xA4, 4, 0, 0})
	CMember(class UBodySetup*)                         BodySetup                                                   OFFSET(get<T>, {0xA8, 8, 0, 0})
	DMember(int32_t)                                   LODForCollision                                             OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
	DMember(bool)                                      bGenerateMeshDistanceField                                  OFFSET(get<bool>, {0xB4, 1, 1, 0})
	DMember(bool)                                      bStripComplexCollisionForConsole                            OFFSET(get<bool>, {0xB4, 1, 1, 1})
	DMember(bool)                                      bHasNavigationData                                          OFFSET(get<bool>, {0xB4, 1, 1, 2})
	DMember(bool)                                      bSupportUniformlyDistributedSampling                        OFFSET(get<bool>, {0xB4, 1, 1, 3})
	DMember(bool)                                      bSupportPhysicalMaterialMasks                               OFFSET(get<bool>, {0xB4, 1, 1, 4})
	DMember(bool)                                      bIsBuiltAtRuntime                                           OFFSET(get<bool>, {0xB4, 1, 1, 5})
	DMember(bool)                                      bAllowCPUAccess                                             OFFSET(get<bool>, {0xB4, 1, 1, 7})
	DMember(bool)                                      bSupportGpuUniformlyDistributedSampling                     OFFSET(get<bool>, {0xB5, 1, 1, 0})
	CMember(TArray<class UStaticMeshSocket*>)          Sockets                                                     OFFSET(get<T>, {0xD8, 16, 0, 0})
	SMember(FVector)                                   PositiveBoundsExtension                                     OFFSET(getStruct<T>, {0xF8, 12, 0, 0})
	SMember(FVector)                                   NegativeBoundsExtension                                     OFFSET(getStruct<T>, {0x104, 12, 0, 0})
	SMember(FBoxSphereBounds)                          ExtendedBounds                                              OFFSET(getStruct<T>, {0x110, 28, 0, 0})
	DMember(int32_t)                                   ElementToIgnoreForTexFactor                                 OFFSET(get<int32_t>, {0x12C, 4, 0, 0})
	CMember(TArray<class UAssetUserData*>)             AssetUserData                                               OFFSET(get<T>, {0x130, 16, 0, 0})
	CMember(class UObject*)                            EditableMesh                                                OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(class UNavCollisionBase*)                  NavCollision                                                OFFSET(get<T>, {0x148, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.StaticMesh.RemoveSocket
	// void RemoveSocket(class UStaticMeshSocket* Socket);                                                                      // [0x3406dc0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMesh.GetNumSections
	// int32_t GetNumSections(int32_t InLOD);                                                                                   // [0x3406b00] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetNumLODs
	// int32_t GetNumLODs();                                                                                                    // [0x3406ad0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetMinimumLODForPlatforms
	// void GetMinimumLODForPlatforms(TMap<FName, int32_t>& PlatformMinimumLODs);                                               // [0x34069a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetMinimumLODForPlatform
	// int32_t GetMinimumLODForPlatform(FName& PlatformName);                                                                   // [0x3406920] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetMaterialIndex
	// int32_t GetMaterialIndex(FName MaterialSlotName);                                                                        // [0x3406880] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetMaterial
	// class UMaterialInterface* GetMaterial(int32_t MaterialIndex);                                                            // [0x34067e0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetBounds
	// FBoxSphereBounds GetBounds();                                                                                            // [0x3406630] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetBoundingBox
	// FBox GetBoundingBox();                                                                                                   // [0x34065e0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.FindSocket
	// class UStaticMeshSocket* FindSocket(FName InSocketName);                                                                 // [0x3406510] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.CreateStaticMeshDescription
	// class UStaticMeshDescription* CreateStaticMeshDescription(class UObject* Outer);                                         // [0x3406480] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMesh.BuildFromStaticMeshDescriptions
	// void BuildFromStaticMeshDescriptions(TArray<UStaticMeshDescription*>& StaticMeshDescriptions, bool bBuildSimpleCollision); // [0x3406380] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.StaticMesh.AddSocket
	// void AddSocket(class UStaticMeshSocket* Socket);                                                                         // [0x34062f0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMesh.AddMaterial
	// FName AddMaterial(class UMaterialInterface* Material);                                                                   // [0x3406260] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.StaticMeshSocket
/// Size: 0x0040 (0x000028 - 0x000068)
class UStaticMeshSocket : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	SMember(FVector)                                   RelativeLocation                                            OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	SMember(FRotator)                                  RelativeRotation                                            OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
	SMember(FVector)                                   RelativeScale                                               OFFSET(getStruct<T>, {0x48, 12, 0, 0})
	SMember(FString)                                   Tag                                                         OFFSET(getStruct<T>, {0x58, 16, 0, 0})
};

/// Class /Script/Engine.StereoLayerShape
/// Size: 0x0000 (0x000028 - 0x000028)
class UStereoLayerShape : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.StereoLayerShapeQuad
/// Size: 0x0000 (0x000028 - 0x000028)
class UStereoLayerShapeQuad : public UStereoLayerShape
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.StereoLayerShapeCylinder
/// Size: 0x0010 (0x000028 - 0x000038)
class UStereoLayerShapeCylinder : public UStereoLayerShape
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     OverlayArc                                                  OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(int32_t)                                   Height                                                      OFFSET(get<int32_t>, {0x30, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.StereoLayerShapeCylinder.SetRadius
	// void SetRadius(float InRadius);                                                                                          // [0x340b9f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerShapeCylinder.SetOverlayArc
	// void SetOverlayArc(float InOverlayArc);                                                                                  // [0x340b860] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerShapeCylinder.SetHeight
	// void SetHeight(int32_t InHeight);                                                                                        // [0x340b6c0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.StereoLayerShapeCubemap
/// Size: 0x0000 (0x000028 - 0x000028)
class UStereoLayerShapeCubemap : public UStereoLayerShape
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.StereoLayerShapeEquirect
/// Size: 0x0048 (0x000028 - 0x000070)
class UStereoLayerShapeEquirect : public UStereoLayerShape
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FBox2D)                                    LeftUVRect                                                  OFFSET(getStruct<T>, {0x28, 20, 0, 0})
	SMember(FBox2D)                                    RightUVRect                                                 OFFSET(getStruct<T>, {0x3C, 20, 0, 0})
	SMember(FVector2D)                                 LeftScale                                                   OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	SMember(FVector2D)                                 RightScale                                                  OFFSET(getStruct<T>, {0x58, 8, 0, 0})
	SMember(FVector2D)                                 LeftBias                                                    OFFSET(getStruct<T>, {0x60, 8, 0, 0})
	SMember(FVector2D)                                 RightBias                                                   OFFSET(getStruct<T>, {0x68, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.StereoLayerShapeEquirect.SetEquirectProps
	// void SetEquirectProps(FEquirectProps InScaleBiases);                                                                     // [0x340b4a0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.EquirectProps
/// Size: 0x0048 (0x000000 - 0x000048)
class FEquirectProps : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FBox2D)                                    LeftUVRect                                                  OFFSET(getStruct<T>, {0x0, 20, 0, 0})
	SMember(FBox2D)                                    RightUVRect                                                 OFFSET(getStruct<T>, {0x14, 20, 0, 0})
	SMember(FVector2D)                                 LeftScale                                                   OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	SMember(FVector2D)                                 RightScale                                                  OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FVector2D)                                 LeftBias                                                    OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FVector2D)                                 RightBias                                                   OFFSET(getStruct<T>, {0x40, 8, 0, 0})
};

/// Class /Script/Engine.StereoLayerComponent
/// Size: 0x00E8 (0x0001F8 - 0x0002E0)
class UStereoLayerComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	DMember(bool)                                      bLiveTexture                                                OFFSET(get<bool>, {0x1F8, 1, 1, 0})
	DMember(bool)                                      bSupportsDepth                                              OFFSET(get<bool>, {0x1F8, 1, 1, 1})
	DMember(bool)                                      bNoAlphaChannel                                             OFFSET(get<bool>, {0x1F8, 1, 1, 2})
	CMember(class UTexture*)                           Texture                                                     OFFSET(get<T>, {0x200, 8, 0, 0})
	CMember(class UTexture*)                           LeftTexture                                                 OFFSET(get<T>, {0x208, 8, 0, 0})
	DMember(bool)                                      bQuadPreserveTextureRatio                                   OFFSET(get<bool>, {0x210, 1, 1, 0})
	SMember(FVector2D)                                 QuadSize                                                    OFFSET(getStruct<T>, {0x214, 8, 0, 0})
	SMember(FBox2D)                                    UVRect                                                      OFFSET(getStruct<T>, {0x21C, 20, 0, 0})
	DMember(float)                                     CylinderRadius                                              OFFSET(get<float>, {0x230, 4, 0, 0})
	DMember(float)                                     CylinderOverlayArc                                          OFFSET(get<float>, {0x234, 4, 0, 0})
	DMember(int32_t)                                   CylinderHeight                                              OFFSET(get<int32_t>, {0x238, 4, 0, 0})
	SMember(FEquirectProps)                            EquirectProps                                               OFFSET(getStruct<T>, {0x23C, 72, 0, 0})
	CMember(TEnumAsByte<EStereoLayerType>)             StereoLayerType                                             OFFSET(get<T>, {0x284, 1, 0, 0})
	CMember(TEnumAsByte<EStereoLayerShape>)            StereoLayerShape                                            OFFSET(get<T>, {0x285, 1, 0, 0})
	CMember(class UStereoLayerShape*)                  Shape                                                       OFFSET(get<T>, {0x288, 8, 0, 0})
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0x290, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.StereoLayerComponent.SetUVRect
	// void SetUVRect(FBox2D InUVRect);                                                                                         // [0x340bd50] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetTexture
	// void SetTexture(class UTexture* InTexture);                                                                              // [0x340bcc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetQuadSize
	// void SetQuadSize(FVector2D InQuadSize);                                                                                  // [0x340b970] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetPriority
	// void SetPriority(int32_t InPriority);                                                                                    // [0x340b8e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetLeftTexture
	// void SetLeftTexture(class UTexture* InTexture);                                                                          // [0x340b750] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetEquirectProps
	// void SetEquirectProps(FEquirectProps InScaleBiases);                                                                     // [0x340b3a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.MarkTextureForUpdate
	// void MarkTextureForUpdate();                                                                                             // [0x340b270] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.GetUVRect
	// FBox2D GetUVRect();                                                                                                      // [0x340b240] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StereoLayerComponent.GetTexture
	// class UTexture* GetTexture();                                                                                            // [0x340b220] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StereoLayerComponent.GetQuadSize
	// FVector2D GetQuadSize();                                                                                                 // [0x340b1f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StereoLayerComponent.GetPriority
	// int32_t GetPriority();                                                                                                   // [0x340b1d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StereoLayerComponent.GetLeftTexture
	// class UTexture* GetLeftTexture();                                                                                        // [0x340b0d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.StereoLayerFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.StereoLayerFunctionLibrary.ShowSplashScreen
	// void ShowSplashScreen();                                                                                                 // [0x251a800] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerFunctionLibrary.SetSplashScreen
	// void SetSplashScreen(class UTexture* Texture, FVector2D Scale, FVector Offset, bool bShowLoadingMovie, bool bShowOnSet); // [0x340bb00] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.StereoLayerFunctionLibrary.HideSplashScreen
	// void HideSplashScreen();                                                                                                 // [0x25196a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerFunctionLibrary.EnableAutoLoadingSplashScreen
	// void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);                                                              // [0x340b050] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.StringTable
/// Size: 0x0018 (0x000028 - 0x000040)
class UStringTable : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Struct /Script/Engine.SubsurfaceProfileStruct
/// Size: 0x008C (0x000000 - 0x00008C)
class FSubsurfaceProfileStruct : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 140;

public:
	SMember(FLinearColor)                              SurfaceAlbedo                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FLinearColor)                              MeanFreePathColor                                           OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	DMember(float)                                     MeanFreePathDistance                                        OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     WorldUnitScale                                              OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(bool)                                      bEnableBurley                                               OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(float)                                     ScatterRadius                                               OFFSET(get<float>, {0x2C, 4, 0, 0})
	SMember(FLinearColor)                              SubsurfaceColor                                             OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FLinearColor)                              FalloffColor                                                OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FLinearColor)                              BoundaryColorBleed                                          OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	DMember(float)                                     ExtinctionScale                                             OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     NormalScale                                                 OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     ScatteringDistribution                                      OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     IOR                                                         OFFSET(get<float>, {0x6C, 4, 0, 0})
	DMember(float)                                     Roughness0                                                  OFFSET(get<float>, {0x70, 4, 0, 0})
	DMember(float)                                     Roughness1                                                  OFFSET(get<float>, {0x74, 4, 0, 0})
	DMember(float)                                     LobeMix                                                     OFFSET(get<float>, {0x78, 4, 0, 0})
	SMember(FLinearColor)                              TransmissionTintColor                                       OFFSET(getStruct<T>, {0x7C, 16, 0, 0})
};

/// Class /Script/Engine.SubsurfaceProfile
/// Size: 0x0090 (0x000028 - 0x0000B8)
class USubsurfaceProfile : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FSubsurfaceProfileStruct)                  Settings                                                    OFFSET(getStruct<T>, {0x28, 140, 0, 0})
};

/// Class /Script/Engine.SubsystemBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.SubsystemBlueprintLibrary.GetWorldSubsystem
	// class UWorldSubsystem* GetWorldSubsystem(class UObject* ContextObject, class UClass* Class);                             // [0x340e5f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubSystemFromPlayerController
	// class ULocalPlayerSubsystem* GetLocalPlayerSubSystemFromPlayerController(class APlayerController* PlayerController, class UClass* Class); // [0x340e3d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubsystem
	// class ULocalPlayerSubsystem* GetLocalPlayerSubsystem(class UObject* ContextObject, class UClass* Class);                 // [0x340e4a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.SubsystemBlueprintLibrary.GetGameInstanceSubsystem
	// class UGameInstanceSubsystem* GetGameInstanceSubsystem(class UObject* ContextObject, class UClass* Class);               // [0x340e300] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.SubsystemBlueprintLibrary.GetEngineSubsystem
	// class UEngineSubsystem* GetEngineSubsystem(class UClass* Class);                                                         // [0x340e270] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.SubUVAnimation
/// Size: 0x0040 (0x000028 - 0x000068)
class USubUVAnimation : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(class UTexture2D*)                         SubUVTexture                                                OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(int32_t)                                   SubImages_Horizontal                                        OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   SubImages_Vertical                                          OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	CMember(TEnumAsByte<ESubUVBoundingVertexCount>)    BoundingMode                                                OFFSET(get<T>, {0x38, 1, 0, 0})
	CMember(TEnumAsByte<EOpacitySourceMode>)           OpacitySourceMode                                           OFFSET(get<T>, {0x39, 1, 0, 0})
	DMember(float)                                     AlphaThreshold                                              OFFSET(get<float>, {0x3C, 4, 0, 0})
};

/// Class /Script/Engine.SystemTimeTimecodeProvider
/// Size: 0x0010 (0x000030 - 0x000040)
class USystemTimeTimecodeProvider : public UTimecodeProvider
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FFrameRate)                                FrameRate                                                   OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bGenerateFullFrame                                          OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(bool)                                      bUseHighPerformanceClock                                    OFFSET(get<bool>, {0x39, 1, 0, 0})
};

/// Class /Script/Engine.TargetPoint
/// Size: 0x0000 (0x000220 - 0x000220)
class ATargetPoint : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
};

/// Class /Script/Engine.TextPropertyTestObject
/// Size: 0x0048 (0x000028 - 0x000070)
class UTextPropertyTestObject : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FText)                                     DefaultedText                                               OFFSET(getStruct<T>, {0x28, 24, 0, 0})
	SMember(FText)                                     UndefaultedText                                             OFFSET(getStruct<T>, {0x40, 24, 0, 0})
	SMember(FText)                                     TransientText                                               OFFSET(getStruct<T>, {0x58, 24, 0, 0})
};

/// Class /Script/Engine.TextRenderActor
/// Size: 0x0008 (0x000220 - 0x000228)
class ATextRenderActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(class UTextRenderComponent*)               TextRender                                                  OFFSET(get<T>, {0x220, 8, 0, 0})
};

/// Class /Script/Engine.Texture2DArray
/// Size: 0x0060 (0x0000D8 - 0x000138)
class UTexture2DArray : public UTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	CMember(TEnumAsByte<TextureAddress>)               AddressX                                                    OFFSET(get<T>, {0x130, 1, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               AddressY                                                    OFFSET(get<T>, {0x131, 1, 0, 0})
	CMember(TEnumAsByte<TextureAddress>)               AddressZ                                                    OFFSET(get<T>, {0x132, 1, 0, 0})
};

/// Class /Script/Engine.Texture2DDynamic
/// Size: 0x0018 (0x0000D8 - 0x0000F0)
class UTexture2DDynamic : public UTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	CMember(TEnumAsByte<EPixelFormat>)                 Format                                                      OFFSET(get<T>, {0xE0, 1, 0, 0})
};

/// Class /Script/Engine.TextureLightProfile
/// Size: 0x0008 (0x000100 - 0x000108)
class UTextureLightProfile : public UTexture2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	DMember(float)                                     Brightness                                                  OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     TextureMultiplier                                           OFFSET(get<float>, {0x104, 4, 0, 0})
};

/// Class /Script/Engine.TextureMipDataProviderFactory
/// Size: 0x0000 (0x000028 - 0x000028)
class UTextureMipDataProviderFactory : public UAssetUserData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.TextureRenderTarget2DArray
/// Size: 0x0020 (0x0000E0 - 0x000100)
class UTextureRenderTarget2DArray : public UTextureRenderTarget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	DMember(int32_t)                                   SizeX                                                       OFFSET(get<int32_t>, {0xE0, 4, 0, 0})
	DMember(int32_t)                                   SizeY                                                       OFFSET(get<int32_t>, {0xE4, 4, 0, 0})
	DMember(int32_t)                                   Slices                                                      OFFSET(get<int32_t>, {0xE8, 4, 0, 0})
	SMember(FLinearColor)                              ClearColor                                                  OFFSET(getStruct<T>, {0xEC, 16, 0, 0})
	CMember(TEnumAsByte<EPixelFormat>)                 OverrideFormat                                              OFFSET(get<T>, {0xFC, 1, 0, 0})
	DMember(bool)                                      bHDR                                                        OFFSET(get<bool>, {0xFD, 1, 1, 0})
	DMember(bool)                                      bForceLinearGamma                                           OFFSET(get<bool>, {0xFD, 1, 1, 1})
};

/// Class /Script/Engine.TextureRenderTargetCube
/// Size: 0x0018 (0x0000E0 - 0x0000F8)
class UTextureRenderTargetCube : public UTextureRenderTarget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	DMember(int32_t)                                   SizeX                                                       OFFSET(get<int32_t>, {0xE0, 4, 0, 0})
	SMember(FLinearColor)                              ClearColor                                                  OFFSET(getStruct<T>, {0xE4, 16, 0, 0})
	CMember(TEnumAsByte<EPixelFormat>)                 OverrideFormat                                              OFFSET(get<T>, {0xF4, 1, 0, 0})
	DMember(bool)                                      bHDR                                                        OFFSET(get<bool>, {0xF5, 1, 1, 0})
	DMember(bool)                                      bForceLinearGamma                                           OFFSET(get<bool>, {0xF5, 1, 1, 1})
};

/// Class /Script/Engine.TextureRenderTargetVolume
/// Size: 0x0020 (0x0000E0 - 0x000100)
class UTextureRenderTargetVolume : public UTextureRenderTarget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	DMember(int32_t)                                   SizeX                                                       OFFSET(get<int32_t>, {0xE0, 4, 0, 0})
	DMember(int32_t)                                   SizeY                                                       OFFSET(get<int32_t>, {0xE4, 4, 0, 0})
	DMember(int32_t)                                   SizeZ                                                       OFFSET(get<int32_t>, {0xE8, 4, 0, 0})
	SMember(FLinearColor)                              ClearColor                                                  OFFSET(getStruct<T>, {0xEC, 16, 0, 0})
	CMember(TEnumAsByte<EPixelFormat>)                 OverrideFormat                                              OFFSET(get<T>, {0xFC, 1, 0, 0})
	DMember(bool)                                      bHDR                                                        OFFSET(get<bool>, {0xFD, 1, 1, 0})
	DMember(bool)                                      bForceLinearGamma                                           OFFSET(get<bool>, {0xFD, 1, 1, 1})
};

/// Class /Script/Engine.ThumbnailInfo
/// Size: 0x0000 (0x000028 - 0x000028)
class UThumbnailInfo : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Engine.TimelineEventEntry
/// Size: 0x0014 (0x000000 - 0x000014)
class FTimelineEventEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FDelegateProperty)                         EventFunc                                                   OFFSET(getStruct<T>, {0x4, 16, 0, 0})
};

/// Struct /Script/Engine.TimelineVectorTrack
/// Size: 0x0040 (0x000000 - 0x000040)
class FTimelineVectorTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UCurveVector*)                       VectorCurve                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FDelegateProperty)                         InterpFunc                                                  OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FName)                                     TrackName                                                   OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FName)                                     VectorPropertyName                                          OFFSET(getStruct<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/Engine.TimelineFloatTrack
/// Size: 0x0040 (0x000000 - 0x000040)
class FTimelineFloatTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UCurveFloat*)                        FloatCurve                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FDelegateProperty)                         InterpFunc                                                  OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FName)                                     TrackName                                                   OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FName)                                     FloatPropertyName                                           OFFSET(getStruct<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/Engine.TimelineLinearColorTrack
/// Size: 0x0040 (0x000000 - 0x000040)
class FTimelineLinearColorTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UCurveLinearColor*)                  LinearColorCurve                                            OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FDelegateProperty)                         InterpFunc                                                  OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FName)                                     TrackName                                                   OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FName)                                     LinearColorPropertyName                                     OFFSET(getStruct<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/Engine.Timeline
/// Size: 0x0098 (0x000000 - 0x000098)
class FTimeline : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(TEnumAsByte<ETimelineLengthMode>)          LengthMode                                                  OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(bool)                                      bReversePlayback                                            OFFSET(get<bool>, {0x1, 1, 1, 1})
	DMember(bool)                                      bPlaying                                                    OFFSET(get<bool>, {0x1, 1, 1, 2})
	DMember(float)                                     Length                                                      OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     PlayRate                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     Position                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
	CMember(TArray<FTimelineEventEntry>)               Events                                                      OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FTimelineVectorTrack>)              InterpVectors                                               OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FTimelineFloatTrack>)               InterpFloats                                                OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FTimelineLinearColorTrack>)         InterpLinearColors                                          OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FDelegateProperty)                         TimelinePostUpdateFunc                                      OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	SMember(FDelegateProperty)                         TimelineFinishedFunc                                        OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	CMember(TWeakObjectPtr<class UObject*>)            PropertySetObject                                           OFFSET(get<T>, {0x70, 8, 0, 0})
	SMember(FName)                                     DirectionPropertyName                                       OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Engine.TimelineComponent
/// Size: 0x00A0 (0x0000B0 - 0x000150)
class UTimelineComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	SMember(FTimeline)                                 TheTimeline                                                 OFFSET(getStruct<T>, {0xB0, 152, 0, 0})
	DMember(bool)                                      bIgnoreTimeDilation                                         OFFSET(get<bool>, {0x148, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.TimelineComponent.Stop
	// void Stop();                                                                                                             // [0x3412460] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetVectorCurve
	// void SetVectorCurve(class UCurveVector* NewVectorCurve, FName VectorTrackName);                                          // [0x3412390] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetTimelineLengthMode
	// void SetTimelineLengthMode(TEnumAsByte<ETimelineLengthMode> NewLengthMode);                                              // [0x3412310] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetTimelineLength
	// void SetTimelineLength(float NewLength);                                                                                 // [0x3412290] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetPlayRate
	// void SetPlayRate(float NewRate);                                                                                         // [0x34120f0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetPlaybackPosition
	// void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);                                         // [0x3412170] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetNewTime
	// void SetNewTime(float NewTime);                                                                                          // [0x3412070] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetLooping
	// void SetLooping(bool bNewLooping);                                                                                       // [0x3411fe0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetLinearColorCurve
	// void SetLinearColorCurve(class UCurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);                      // [0x3411f10] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetIgnoreTimeDilation
	// void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);                                                                 // [0x3411e80] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetFloatCurve
	// void SetFloatCurve(class UCurveFloat* NewFloatCurve, FName FloatTrackName);                                              // [0x3411db0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.ReverseFromEnd
	// void ReverseFromEnd();                                                                                                   // [0x3411d90] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.Reverse
	// void Reverse();                                                                                                          // [0x3411d70] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.PlayFromStart
	// void PlayFromStart();                                                                                                    // [0x3411d50] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.Play
	// void Play();                                                                                                             // [0x3411d30] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.OnRep_Timeline
	// void OnRep_Timeline();                                                                                                   // [0x3411d10] Final|Native|Public  
	// Function /Script/Engine.TimelineComponent.IsReversing
	// bool IsReversing();                                                                                                      // [0x3411ce0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.IsPlaying
	// bool IsPlaying();                                                                                                        // [0x3411cb0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.IsLooping
	// bool IsLooping();                                                                                                        // [0x3411c80] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.GetTimelineLength
	// float GetTimelineLength();                                                                                               // [0x3411c50] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.GetPlayRate
	// float GetPlayRate();                                                                                                     // [0x3411b40] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.GetPlaybackPosition
	// float GetPlaybackPosition();                                                                                             // [0x3411b70] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.GetIgnoreTimeDilation
	// bool GetIgnoreTimeDilation();                                                                                            // [0x3411b10] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.TTTrackBase
/// Size: 0x0018 (0x000000 - 0x000018)
class FTTTrackBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     TrackName                                                   OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bIsExternalCurve                                            OFFSET(get<bool>, {0x10, 1, 0, 0})
};

/// Struct /Script/Engine.TTEventTrack
/// Size: 0x0010 (0x000018 - 0x000028)
class FTTEventTrack : public FTTTrackBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     FunctionName                                                OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	CMember(class UCurveFloat*)                        CurveKeys                                                   OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/Engine.TTPropertyTrack
/// Size: 0x0008 (0x000018 - 0x000020)
class FTTPropertyTrack : public FTTTrackBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FName)                                     PropertyName                                                OFFSET(getStruct<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/Engine.TTFloatTrack
/// Size: 0x0008 (0x000020 - 0x000028)
class FTTFloatTrack : public FTTPropertyTrack
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class UCurveFloat*)                        CurveFloat                                                  OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/Engine.TTVectorTrack
/// Size: 0x0008 (0x000020 - 0x000028)
class FTTVectorTrack : public FTTPropertyTrack
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class UCurveVector*)                       CurveVector                                                 OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/Engine.TTLinearColorTrack
/// Size: 0x0008 (0x000020 - 0x000028)
class FTTLinearColorTrack : public FTTPropertyTrack
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class UCurveLinearColor*)                  CurveLinearColor                                            OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Class /Script/Engine.TimelineTemplate
/// Size: 0x0088 (0x000028 - 0x0000B0)
class UTimelineTemplate : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	DMember(float)                                     TimelineLength                                              OFFSET(get<float>, {0x28, 4, 0, 0})
	CMember(TEnumAsByte<ETimelineLengthMode>)          LengthMode                                                  OFFSET(get<T>, {0x2C, 1, 0, 0})
	DMember(bool)                                      bAutoPlay                                                   OFFSET(get<bool>, {0x2D, 1, 1, 0})
	DMember(bool)                                      bLoop                                                       OFFSET(get<bool>, {0x2D, 1, 1, 1})
	DMember(bool)                                      bReplicated                                                 OFFSET(get<bool>, {0x2D, 1, 1, 2})
	DMember(bool)                                      bIgnoreTimeDilation                                         OFFSET(get<bool>, {0x2D, 1, 1, 3})
	CMember(TArray<FTTEventTrack>)                     EventTracks                                                 OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FTTFloatTrack>)                     FloatTracks                                                 OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FTTVectorTrack>)                    VectorTracks                                                OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FTTLinearColorTrack>)               LinearColorTracks                                           OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<FBPVariableMetaDataEntry>)          MetaDataArray                                               OFFSET(get<T>, {0x70, 16, 0, 0})
	SMember(FGuid)                                     TimelineGuid                                                OFFSET(getStruct<T>, {0x80, 16, 0, 0})
	SMember(FName)                                     VariableName                                                OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	SMember(FName)                                     DirectionPropertyName                                       OFFSET(getStruct<T>, {0x98, 8, 0, 0})
	SMember(FName)                                     UpdateFunctionName                                          OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
	SMember(FName)                                     FinishedFunctionName                                        OFFSET(getStruct<T>, {0xA8, 8, 0, 0})
};

/// Class /Script/Engine.TireType
/// Size: 0x0008 (0x000030 - 0x000038)
class UTireType : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     FrictionScale                                               OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Class /Script/Engine.TriggerCapsule
/// Size: 0x0000 (0x000228 - 0x000228)
class ATriggerCapsule : public ATriggerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
};

/// Class /Script/Engine.TriggerSphere
/// Size: 0x0000 (0x000228 - 0x000228)
class ATriggerSphere : public ATriggerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
};

/// Class /Script/Engine.TriggerVolume
/// Size: 0x0000 (0x000258 - 0x000258)
class ATriggerVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
};

/// Class /Script/Engine.TwitterIntegrationBase
/// Size: 0x0000 (0x000038 - 0x000038)
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:


	/// Functions
	// Function /Script/Engine.TwitterIntegrationBase.TwitterRequest
	// bool TwitterRequest(FString URL, TArray<FString>& ParamKeysAndValues, TEnumAsByte<ETwitterRequestMethod> RequestMethod, int32_t AccountIndex); // [0x3416390] Native|Public|HasOutParms 
	// Function /Script/Engine.TwitterIntegrationBase.ShowTweetUI
	// bool ShowTweetUI(FString InitialMessage, FString URL, FString Picture);                                                  // [0x3416230] Native|Public        
	// Function /Script/Engine.TwitterIntegrationBase.Init
	// void Init();                                                                                                             // [0x1635730] Native|Public        
	// Function /Script/Engine.TwitterIntegrationBase.GetNumAccounts
	// int32_t GetNumAccounts();                                                                                                // [0x2b24470] Native|Public        
	// Function /Script/Engine.TwitterIntegrationBase.GetAccountName
	// FString GetAccountName(int32_t AccountIndex);                                                                            // [0x3415610] Native|Public        
	// Function /Script/Engine.TwitterIntegrationBase.CanShowTweetUI
	// bool CanShowTweetUI();                                                                                                   // [0xc8b010] Native|Public        
	// Function /Script/Engine.TwitterIntegrationBase.AuthorizeAccounts
	// bool AuthorizeAccounts();                                                                                                // [0xc8afe0] Native|Public        
};

/// Class /Script/Engine.UserDefinedEnum
/// Size: 0x0050 (0x000060 - 0x0000B0)
class UUserDefinedEnum : public UEnum
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(TMap<FName, FText>)                        DisplayNameMap                                              OFFSET(get<T>, {0x60, 80, 0, 0})
};

/// Class /Script/Engine.UserDefinedStruct
/// Size: 0x0048 (0x0000C0 - 0x000108)
class UUserDefinedStruct : public UScriptStruct
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	CMember(TEnumAsByte<EUserDefinedStructureStatus>)  status                                                      OFFSET(get<T>, {0xC0, 1, 0, 0})
	SMember(FGuid)                                     Guid                                                        OFFSET(getStruct<T>, {0xC4, 16, 0, 0})
};

/// Struct /Script/Engine.HardwareCursorReference
/// Size: 0x0010 (0x000000 - 0x000010)
class FHardwareCursorReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     CursorPath                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FVector2D)                                 HotSpot                                                     OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Class /Script/Engine.UserInterfaceSettings
/// Size: 0x0240 (0x000038 - 0x000278)
class UUserInterfaceSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 632;

public:
	CMember(ERenderFocusRule)                          RenderFocusRule                                             OFFSET(get<T>, {0x38, 1, 0, 0})
	CMember(TMap<TEnumAsByte<EMouseCursor>, FHardwareCursorReference>) HardwareCursors                             OFFSET(get<T>, {0x40, 80, 0, 0})
	DMember(bool)                                      bUseSoftwareCursorOnlyInIOS                                 OFFSET(get<bool>, {0x90, 1, 0, 0})
	CMember(TMap<TEnumAsByte<EMouseCursor>, FSoftClassPath>) SoftwareCursors                                       OFFSET(get<T>, {0x98, 80, 0, 0})
	SMember(FSoftClassPath)                            DefaultCursor                                               OFFSET(getStruct<T>, {0xE8, 24, 0, 0})
	SMember(FSoftClassPath)                            TextEditBeamCursor                                          OFFSET(getStruct<T>, {0x100, 24, 0, 0})
	SMember(FSoftClassPath)                            CrosshairsCursor                                            OFFSET(getStruct<T>, {0x118, 24, 0, 0})
	SMember(FSoftClassPath)                            HandCursor                                                  OFFSET(getStruct<T>, {0x130, 24, 0, 0})
	SMember(FSoftClassPath)                            GrabHandCursor                                              OFFSET(getStruct<T>, {0x148, 24, 0, 0})
	SMember(FSoftClassPath)                            GrabHandClosedCursor                                        OFFSET(getStruct<T>, {0x160, 24, 0, 0})
	SMember(FSoftClassPath)                            SlashedCircleCursor                                         OFFSET(getStruct<T>, {0x178, 24, 0, 0})
	DMember(float)                                     ApplicationScale                                            OFFSET(get<float>, {0x190, 4, 0, 0})
	CMember(EUIScalingRule)                            UIScaleRule                                                 OFFSET(get<T>, {0x194, 1, 0, 0})
	SMember(FSoftClassPath)                            CustomScalingRuleClass                                      OFFSET(getStruct<T>, {0x198, 24, 0, 0})
	SMember(FRuntimeFloatCurve)                        UIScaleCurve                                                OFFSET(getStruct<T>, {0x1B0, 136, 0, 0})
	DMember(bool)                                      bAllowHighDPIInGameMode                                     OFFSET(get<bool>, {0x238, 1, 0, 0})
	SMember(FIntPoint)                                 DesignScreenSize                                            OFFSET(getStruct<T>, {0x23C, 8, 0, 0})
	DMember(bool)                                      bLoadWidgetsOnDedicatedServer                               OFFSET(get<bool>, {0x244, 1, 0, 0})
	CMember(TArray<class UObject*>)                    CursorClasses                                               OFFSET(get<T>, {0x248, 16, 0, 0})
	CMember(class UClass*)                             CustomScalingRuleClassInstance                              OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(class UDPICustomScalingRule*)              CustomScalingRule                                           OFFSET(get<T>, {0x260, 8, 0, 0})
};

/// Class /Script/Engine.VectorField
/// Size: 0x0020 (0x000028 - 0x000048)
class UVectorField : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FBox)                                      Bounds                                                      OFFSET(getStruct<T>, {0x28, 28, 0, 0})
	DMember(float)                                     Intensity                                                   OFFSET(get<float>, {0x44, 4, 0, 0})
};

/// Class /Script/Engine.VectorFieldAnimated
/// Size: 0x0040 (0x000048 - 0x000088)
class UVectorFieldAnimated : public UVectorField
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(class UTexture2D*)                         Texture                                                     OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TEnumAsByte<EVectorFieldConstructionOp>)   ConstructionOp                                              OFFSET(get<T>, {0x50, 1, 0, 0})
	DMember(int32_t)                                   VolumeSizeX                                                 OFFSET(get<int32_t>, {0x54, 4, 0, 0})
	DMember(int32_t)                                   VolumeSizeY                                                 OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	DMember(int32_t)                                   VolumeSizeZ                                                 OFFSET(get<int32_t>, {0x5C, 4, 0, 0})
	DMember(int32_t)                                   SubImagesX                                                  OFFSET(get<int32_t>, {0x60, 4, 0, 0})
	DMember(int32_t)                                   SubImagesY                                                  OFFSET(get<int32_t>, {0x64, 4, 0, 0})
	DMember(int32_t)                                   FrameCount                                                  OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	DMember(float)                                     FramesPerSecond                                             OFFSET(get<float>, {0x6C, 4, 0, 0})
	DMember(bool)                                      bLoop                                                       OFFSET(get<bool>, {0x70, 1, 1, 0})
	CMember(class UVectorFieldStatic*)                 NoiseField                                                  OFFSET(get<T>, {0x78, 8, 0, 0})
	DMember(float)                                     NoiseScale                                                  OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(float)                                     NoiseMax                                                    OFFSET(get<float>, {0x84, 4, 0, 0})
};

/// Class /Script/Engine.VectorFieldComponent
/// Size: 0x0028 (0x000468 - 0x000490)
class UVectorFieldComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1168;

public:
	CMember(class UVectorField*)                       VectorField                                                 OFFSET(get<T>, {0x468, 8, 0, 0})
	DMember(float)                                     Intensity                                                   OFFSET(get<float>, {0x470, 4, 0, 0})
	DMember(float)                                     Tightness                                                   OFFSET(get<float>, {0x474, 4, 0, 0})
	DMember(bool)                                      bPreviewVectorField                                         OFFSET(get<bool>, {0x478, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.VectorFieldComponent.SetIntensity
	// void SetIntensity(float NewIntensity);                                                                                   // [0x34161a0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.VectorFieldStatic
/// Size: 0x0050 (0x000048 - 0x000098)
class UVectorFieldStatic : public UVectorField
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	DMember(int32_t)                                   SizeX                                                       OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(int32_t)                                   SizeY                                                       OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	DMember(int32_t)                                   SizeZ                                                       OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	DMember(bool)                                      bAllowCPUAccess                                             OFFSET(get<bool>, {0x54, 1, 0, 0})
};

/// Class /Script/Engine.VectorFieldVolume
/// Size: 0x0008 (0x000220 - 0x000228)
class AVectorFieldVolume : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(class UVectorFieldComponent*)              VectorFieldComponent                                        OFFSET(get<T>, {0x220, 8, 0, 0})
};

/// Class /Script/Engine.ViewportStatsSubsystem
/// Size: 0x0020 (0x000030 - 0x000050)
class UViewportStatsSubsystem : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:


	/// Functions
	// Function /Script/Engine.ViewportStatsSubsystem.RemoveDisplayDelegate
	// void RemoveDisplayDelegate(int32_t IndexToRemove);                                                                       // [0x3416110] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ViewportStatsSubsystem.AddTimedDisplay
	// void AddTimedDisplay(FText Text, FLinearColor Color, float Duration);                                                    // [0x3415480] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ViewportStatsSubsystem.AddDisplayDelegate
	// int32_t AddDisplayDelegate(FDelegateProperty& Delegate);                                                                 // [0x34153c0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.VirtualTexture
/// Size: 0x0000 (0x000028 - 0x000028)
class UVirtualTexture : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.LightMapVirtualTexture
/// Size: 0x0000 (0x000028 - 0x000028)
class ULightMapVirtualTexture : public UVirtualTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.RuntimeVirtualTextureStreamingProxy
/// Size: 0x0000 (0x000100 - 0x000100)
class URuntimeVirtualTextureStreamingProxy : public UTexture2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
};

/// Struct /Script/Engine.VirtualTextureBuildSettings
/// Size: 0x000C (0x000000 - 0x00000C)
class FVirtualTextureBuildSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   TileSize                                                    OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   TileBorderSize                                              OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(bool)                                      bEnableCompressCrunch                                       OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(bool)                                      bEnableCompressZlib                                         OFFSET(get<bool>, {0x9, 1, 0, 0})
};

/// Class /Script/Engine.VirtualTexture2D
/// Size: 0x0010 (0x000100 - 0x000110)
class UVirtualTexture2D : public UTexture2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FVirtualTextureBuildSettings)              Settings                                                    OFFSET(getStruct<T>, {0x100, 12, 0, 0})
	DMember(bool)                                      bContinuousUpdate                                           OFFSET(get<bool>, {0x10C, 1, 0, 0})
	DMember(bool)                                      bSinglePhysicalSpace                                        OFFSET(get<bool>, {0x10D, 1, 0, 0})
};

/// Class /Script/Engine.VirtualTextureBuilder
/// Size: 0x0010 (0x000028 - 0x000038)
class UVirtualTextureBuilder : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UVirtualTexture2D*)                  Texture                                                     OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(uint64_t)                                  BuildHash                                                   OFFSET(get<uint64_t>, {0x30, 8, 0, 0})
};

/// Struct /Script/Engine.VirtualTextureSpacePoolConfig
/// Size: 0x0028 (0x000000 - 0x000028)
class FVirtualTextureSpacePoolConfig : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(int32_t)                                   MinTileSize                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   MaxTileSize                                                 OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	CMember(TArray<TEnumAsByte<EPixelFormat>>)         Formats                                                     OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   SizeInMegabyte                                              OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(bool)                                      bAllowSizeScale                                             OFFSET(get<bool>, {0x1C, 1, 0, 0})
	DMember(uint32_t)                                  ScalabilityGroup                                            OFFSET(get<uint32_t>, {0x20, 4, 0, 0})
};

/// Class /Script/Engine.VirtualTexturePoolConfig
/// Size: 0x0018 (0x000028 - 0x000040)
class UVirtualTexturePoolConfig : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(int32_t)                                   DefaultSizeInMegabyte                                       OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	CMember(TArray<FVirtualTextureSpacePoolConfig>)    Pools                                                       OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Engine.VisualLoggerAutomationTests
/// Size: 0x0000 (0x000028 - 0x000028)
class UVisualLoggerAutomationTests : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.VisualLoggerDebugSnapshotInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UVisualLoggerDebugSnapshotInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/Engine.VisualLoggerKismetLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.VisualLoggerKismetLibrary.RedirectVislog
	// void RedirectVislog(class UObject* SourceOwner, class UObject* DestinationOwner);                                        // [0x3416050] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.VisualLoggerKismetLibrary.LogText
	// void LogText(class UObject* WorldContextObject, FString Text, FName LogCategory, bool bAddToMessageLog);                 // [0x3415eb0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.VisualLoggerKismetLibrary.LogSegment
	// void LogSegment(class UObject* WorldContextObject, FVector SegmentStart, FVector SegmentEnd, FString Text, FLinearColor ObjectColor, float Thickness, FName CategoryName, bool bAddToMessageLog); // [0x3415bd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.VisualLoggerKismetLibrary.LogLocation
	// void LogLocation(class UObject* WorldContextObject, FVector Location, FString Text, FLinearColor ObjectColor, float Radius, FName LogCategory, bool bAddToMessageLog); // [0x3415940] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.VisualLoggerKismetLibrary.LogBox
	// void LogBox(class UObject* WorldContextObject, FBox BoxShape, FString Text, FLinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog); // [0x34156f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.VisualLoggerKismetLibrary.EnableRecording
	// void EnableRecording(bool bEnabled);                                                                                     // [0x336aef0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.VoiceChannel
/// Size: 0x0010 (0x000070 - 0x000080)
class UVoiceChannel : public UChannel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Struct /Script/Engine.VoiceSettings
/// Size: 0x0018 (0x000000 - 0x000018)
class FVoiceSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class USceneComponent*)                    ComponentToAttachTo                                         OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class USoundAttenuation*)                  AttenuationSettings                                         OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class USoundEffectSourcePresetChain*)      SourceEffectChain                                           OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Class /Script/Engine.VOIPTalker
/// Size: 0x0038 (0x0000B0 - 0x0000E8)
class UVOIPTalker : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FVoiceSettings)                            Settings                                                    OFFSET(getStruct<T>, {0xB0, 24, 0, 0})


	/// Functions
	// Function /Script/Engine.VOIPTalker.RegisterWithPlayerState
	// void RegisterWithPlayerState(class APlayerState* OwningState);                                                           // [0x3419c90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VOIPTalker.GetVoiceLevel
	// float GetVoiceLevel();                                                                                                   // [0x3419c10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VOIPTalker.CreateTalkerForPlayer
	// class UVOIPTalker* CreateTalkerForPlayer(class APlayerState* OwningState);                                               // [0x3419b80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.VOIPTalker.BPOnTalkingEnd
	// void BPOnTalkingEnd();                                                                                                   // [0x3419b60] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.VOIPTalker.BPOnTalkingBegin
	// void BPOnTalkingBegin(class UAudioComponent* AudioComponent);                                                            // [0x3419ad0] Native|Event|Protected|BlueprintEvent 
};

/// Class /Script/Engine.VOIPStatics
/// Size: 0x0000 (0x000028 - 0x000028)
class UVOIPStatics : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/Engine.VOIPStatics.SetMicThreshold
	// void SetMicThreshold(float InThreshold);                                                                                 // [0x3419fb0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.VolumeTexture
/// Size: 0x0058 (0x0000D8 - 0x000130)
class UVolumeTexture : public UTexture
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
};

/// Class /Script/Engine.VolumetricCloudComponent
/// Size: 0x0048 (0x0001F8 - 0x000240)
class UVolumetricCloudComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	DMember(float)                                     LayerBottomAltitude                                         OFFSET(get<float>, {0x1F8, 4, 0, 0})
	DMember(float)                                     LayerHeight                                                 OFFSET(get<float>, {0x1FC, 4, 0, 0})
	DMember(float)                                     TracingStartMaxDistance                                     OFFSET(get<float>, {0x200, 4, 0, 0})
	DMember(float)                                     TracingMaxDistance                                          OFFSET(get<float>, {0x204, 4, 0, 0})
	DMember(float)                                     PlanetRadius                                                OFFSET(get<float>, {0x208, 4, 0, 0})
	SMember(FColor)                                    GroundAlbedo                                                OFFSET(getStruct<T>, {0x20C, 4, 0, 0})
	CMember(class UMaterialInterface*)                 Material                                                    OFFSET(get<T>, {0x210, 8, 0, 0})
	DMember(bool)                                      bUsePerSampleAtmosphericLightTransmittance                  OFFSET(get<bool>, {0x218, 1, 1, 0})
	DMember(float)                                     SkyLightCloudBottomOcclusion                                OFFSET(get<float>, {0x21C, 4, 0, 0})
	DMember(float)                                     ViewSampleCountScale                                        OFFSET(get<float>, {0x220, 4, 0, 0})
	DMember(float)                                     ReflectionSampleCountScale                                  OFFSET(get<float>, {0x224, 4, 0, 0})
	DMember(float)                                     ShadowViewSampleCountScale                                  OFFSET(get<float>, {0x228, 4, 0, 0})
	DMember(float)                                     ShadowReflectionSampleCountScale                            OFFSET(get<float>, {0x22C, 4, 0, 0})
	DMember(float)                                     ShadowTracingDistance                                       OFFSET(get<float>, {0x230, 4, 0, 0})


	/// Functions
	// Function /Script/Engine.VolumetricCloudComponent.SetViewSampleCountScale
	// void SetViewSampleCountScale(float NewValue);                                                                            // [0x341a530] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetTracingStartMaxDistance
	// void SetTracingStartMaxDistance(float NewValue);                                                                         // [0x341a4b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetTracingMaxDistance
	// void SetTracingMaxDistance(float NewValue);                                                                              // [0x341a430] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetSkyLightCloudBottomOcclusion
	// void SetSkyLightCloudBottomOcclusion(float NewValue);                                                                    // [0x341a2b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetShadowViewSampleCountScale
	// void SetShadowViewSampleCountScale(float NewValue);                                                                      // [0x33f5490] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetShadowTracingDistance
	// void SetShadowTracingDistance(float NewValue);                                                                           // [0x341a230] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetShadowReflectionSampleCountScale
	// void SetShadowReflectionSampleCountScale(float NewValue);                                                                // [0x341a1b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetReflectionSampleCountScale
	// void SetReflectionSampleCountScale(float NewValue);                                                                      // [0x33f5830] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetPlanetRadius
	// void SetPlanetRadius(float NewValue);                                                                                    // [0x341a0b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetMaterial
	// void SetMaterial(class UMaterialInterface* NewValue);                                                                    // [0x3419ea0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetLayerHeight
	// void SetLayerHeight(float NewValue);                                                                                     // [0x3419e20] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetLayerBottomAltitude
	// void SetLayerBottomAltitude(float NewValue);                                                                             // [0x3419da0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetGroundAlbedo
	// void SetGroundAlbedo(FColor NewValue);                                                                                   // [0x3419d20] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetbUsePerSampleAtmosphericLightTransmittance
	// void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue);                                                       // [0x341a630] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.VolumetricCloud
/// Size: 0x0008 (0x000220 - 0x000228)
class AVolumetricCloud : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(class UVolumetricCloudComponent*)          VolumetricCloudComponent                                    OFFSET(get<T>, {0x220, 8, 0, 0})
};

/// Class /Script/Engine.VolumetricLightmapDensityVolume
/// Size: 0x0008 (0x000258 - 0x000260)
class AVolumetricLightmapDensityVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
	SMember(FInt32Interval)                            AllowedMipLevelRange                                        OFFSET(getStruct<T>, {0x258, 8, 0, 0})
};

/// Class /Script/Engine.WindDirectionalSource
/// Size: 0x0008 (0x000220 - 0x000228)
class AWindDirectionalSource : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(class UWindDirectionalSourceComponent*)    Component                                                   OFFSET(get<T>, {0x220, 8, 0, 0})
};

/// Class /Script/Engine.WindDirectionalSourceComponent
/// Size: 0x0028 (0x0001F8 - 0x000220)
class UWindDirectionalSourceComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	DMember(float)                                     Strength                                                    OFFSET(get<float>, {0x1F8, 4, 0, 0})
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x1FC, 4, 0, 0})
	DMember(float)                                     MinGustAmount                                               OFFSET(get<float>, {0x200, 4, 0, 0})
	DMember(float)                                     MaxGustAmount                                               OFFSET(get<float>, {0x204, 4, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x208, 4, 0, 0})
	DMember(bool)                                      bPointWind                                                  OFFSET(get<bool>, {0x20C, 1, 1, 0})


	/// Functions
	// Function /Script/Engine.WindDirectionalSourceComponent.SetWindType
	// void SetWindType(EWindSourceType InNewType);                                                                             // [0x341a5b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetStrength
	// void SetStrength(float InNewStrength);                                                                                   // [0x341a3b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetSpeed
	// void SetSpeed(float InNewSpeed);                                                                                         // [0x341a330] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetRadius
	// void SetRadius(float InNewRadius);                                                                                       // [0x341a130] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetMinimumGustAmount
	// void SetMinimumGustAmount(float InNewMinGust);                                                                           // [0x341a030] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetMaximumGustAmount
	// void SetMaximumGustAmount(float InNewMaxGust);                                                                           // [0x3419f30] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.WorldComposition
/// Size: 0x0040 (0x000028 - 0x000068)
class UWorldComposition : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<class ULevelStreaming*>)            TilesStreaming                                              OFFSET(get<T>, {0x48, 16, 0, 0})
	DMember(double)                                    TilesStreamingTimeThreshold                                 OFFSET(get<double>, {0x58, 8, 0, 0})
	DMember(bool)                                      bLoadAllTilesDuringCinematic                                OFFSET(get<bool>, {0x60, 1, 0, 0})
	DMember(bool)                                      bRebaseOriginIn3DSpace                                      OFFSET(get<bool>, {0x61, 1, 0, 0})
	DMember(float)                                     RebaseOriginDistance                                        OFFSET(get<float>, {0x64, 4, 0, 0})
};

/// Struct /Script/Engine.MaterialProxySettings
/// Size: 0x0088 (0x000000 - 0x000088)
class FMaterialProxySettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FIntPoint)                                 TextureSize                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     GutterSpace                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     MetallicConstant                                            OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     RoughnessConstant                                           OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     AnisotropyConstant                                          OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     SpecularConstant                                            OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     OpacityConstant                                             OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     OpacityMaskConstant                                         OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     AmbientOcclusionConstant                                    OFFSET(get<float>, {0x24, 4, 0, 0})
	CMember(TEnumAsByte<ETextureSizingType>)           TextureSizingType                                           OFFSET(get<T>, {0x28, 1, 0, 0})
	CMember(TEnumAsByte<EMaterialMergeType>)           MaterialMergeType                                           OFFSET(get<T>, {0x29, 1, 0, 0})
	CMember(TEnumAsByte<EBlendMode>)                   BlendMode                                                   OFFSET(get<T>, {0x2A, 1, 0, 0})
	DMember(bool)                                      bAllowTwoSidedMaterial                                      OFFSET(get<bool>, {0x2B, 1, 1, 0})
	DMember(bool)                                      bNormalMap                                                  OFFSET(get<bool>, {0x2B, 1, 1, 1})
	DMember(bool)                                      bTangentMap                                                 OFFSET(get<bool>, {0x2B, 1, 1, 2})
	DMember(bool)                                      bMetallicMap                                                OFFSET(get<bool>, {0x2B, 1, 1, 3})
	DMember(bool)                                      bRoughnessMap                                               OFFSET(get<bool>, {0x2B, 1, 1, 4})
	DMember(bool)                                      bAnisotropyMap                                              OFFSET(get<bool>, {0x2B, 1, 1, 5})
	DMember(bool)                                      bSpecularMap                                                OFFSET(get<bool>, {0x2B, 1, 1, 6})
	DMember(bool)                                      bEmissiveMap                                                OFFSET(get<bool>, {0x2B, 1, 1, 7})
	DMember(bool)                                      bOpacityMap                                                 OFFSET(get<bool>, {0x2C, 1, 1, 0})
	DMember(bool)                                      bOpacityMaskMap                                             OFFSET(get<bool>, {0x2C, 1, 1, 1})
	DMember(bool)                                      bAmbientOcclusionMap                                        OFFSET(get<bool>, {0x2C, 1, 1, 2})
	SMember(FIntPoint)                                 DiffuseTextureSize                                          OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FIntPoint)                                 NormalTextureSize                                           OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FIntPoint)                                 TangentTextureSize                                          OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FIntPoint)                                 MetallicTextureSize                                         OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	SMember(FIntPoint)                                 RoughnessTextureSize                                        OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	SMember(FIntPoint)                                 AnisotropyTextureSize                                       OFFSET(getStruct<T>, {0x58, 8, 0, 0})
	SMember(FIntPoint)                                 SpecularTextureSize                                         OFFSET(getStruct<T>, {0x60, 8, 0, 0})
	SMember(FIntPoint)                                 EmissiveTextureSize                                         OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	SMember(FIntPoint)                                 OpacityTextureSize                                          OFFSET(getStruct<T>, {0x70, 8, 0, 0})
	SMember(FIntPoint)                                 OpacityMaskTextureSize                                      OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	SMember(FIntPoint)                                 AmbientOcclusionTextureSize                                 OFFSET(getStruct<T>, {0x80, 8, 0, 0})
};

/// Struct /Script/Engine.MeshProxySettings
/// Size: 0x00A8 (0x000000 - 0x0000A8)
class FMeshProxySettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	DMember(int32_t)                                   ScreenSize                                                  OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(float)                                     VoxelSize                                                   OFFSET(get<float>, {0x4, 4, 0, 0})
	SMember(FMaterialProxySettings)                    MaterialSettings                                            OFFSET(getStruct<T>, {0x8, 136, 0, 0})
	DMember(float)                                     MergeDistance                                               OFFSET(get<float>, {0x90, 4, 0, 0})
	SMember(FColor)                                    UnresolvedGeometryColor                                     OFFSET(getStruct<T>, {0x94, 4, 0, 0})
	DMember(float)                                     MaxRayCastDist                                              OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(float)                                     HardAngleThreshold                                          OFFSET(get<float>, {0x9C, 4, 0, 0})
	DMember(int32_t)                                   LightMapResolution                                          OFFSET(get<int32_t>, {0xA0, 4, 0, 0})
	CMember(TEnumAsByte<EProxyNormalComputationMethod>) NormalCalculationMethod                                    OFFSET(get<T>, {0xA4, 1, 0, 0})
	CMember(TEnumAsByte<ELandscapeCullingPrecision>)   LandscapeCullingPrecision                                   OFFSET(get<T>, {0xA5, 1, 0, 0})
	DMember(bool)                                      bCalculateCorrectLODModel                                   OFFSET(get<bool>, {0xA6, 1, 1, 0})
	DMember(bool)                                      bOverrideVoxelSize                                          OFFSET(get<bool>, {0xA6, 1, 1, 1})
	DMember(bool)                                      bOverrideTransferDistance                                   OFFSET(get<bool>, {0xA6, 1, 1, 2})
	DMember(bool)                                      bUseHardAngleThreshold                                      OFFSET(get<bool>, {0xA6, 1, 1, 3})
	DMember(bool)                                      bComputeLightMapResolution                                  OFFSET(get<bool>, {0xA6, 1, 1, 4})
	DMember(bool)                                      bRecalculateNormals                                         OFFSET(get<bool>, {0xA6, 1, 1, 5})
	DMember(bool)                                      bUseLandscapeCulling                                        OFFSET(get<bool>, {0xA6, 1, 1, 6})
	DMember(bool)                                      bAllowAdjacency                                             OFFSET(get<bool>, {0xA6, 1, 1, 7})
	DMember(bool)                                      bAllowDistanceField                                         OFFSET(get<bool>, {0xA7, 1, 1, 0})
	DMember(bool)                                      bReuseMeshLightmapUVs                                       OFFSET(get<bool>, {0xA7, 1, 1, 1})
	DMember(bool)                                      bCreateCollision                                            OFFSET(get<bool>, {0xA7, 1, 1, 2})
	DMember(bool)                                      bAllowVertexColors                                          OFFSET(get<bool>, {0xA7, 1, 1, 3})
	DMember(bool)                                      bGenerateLightmapUVs                                        OFFSET(get<bool>, {0xA7, 1, 1, 4})
};

/// Struct /Script/Engine.MeshMergingSettings
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FMeshMergingSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	DMember(int32_t)                                   TargetLightMapResolution                                    OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(EUVOutput)                                 OutputUVs                                                   OFFSET(get<T>, {0x4, 8, 0, 0})
	SMember(FMaterialProxySettings)                    MaterialSettings                                            OFFSET(getStruct<T>, {0xC, 136, 0, 0})
	DMember(int32_t)                                   GutterSize                                                  OFFSET(get<int32_t>, {0x94, 4, 0, 0})
	DMember(int32_t)                                   SpecificLOD                                                 OFFSET(get<int32_t>, {0x98, 4, 0, 0})
	CMember(EMeshLODSelectionType)                     LODSelectionType                                            OFFSET(get<T>, {0x9C, 1, 0, 0})
	DMember(bool)                                      bGenerateLightMapUV                                         OFFSET(get<bool>, {0x9D, 1, 1, 0})
	DMember(bool)                                      bComputedLightMapResolution                                 OFFSET(get<bool>, {0x9D, 1, 1, 1})
	DMember(bool)                                      bPivotPointAtZero                                           OFFSET(get<bool>, {0x9D, 1, 1, 2})
	DMember(bool)                                      bMergePhysicsData                                           OFFSET(get<bool>, {0x9D, 1, 1, 3})
	DMember(bool)                                      bMergeMaterials                                             OFFSET(get<bool>, {0x9D, 1, 1, 4})
	DMember(bool)                                      bCreateMergedMaterial                                       OFFSET(get<bool>, {0x9D, 1, 1, 5})
	DMember(bool)                                      bBakeVertexDataToMesh                                       OFFSET(get<bool>, {0x9D, 1, 1, 6})
	DMember(bool)                                      bUseVertexDataForBakingMaterial                             OFFSET(get<bool>, {0x9D, 1, 1, 7})
	DMember(bool)                                      bUseTextureBinning                                          OFFSET(get<bool>, {0x9E, 1, 1, 0})
	DMember(bool)                                      bReuseMeshLightmapUVs                                       OFFSET(get<bool>, {0x9E, 1, 1, 1})
	DMember(bool)                                      bMergeEquivalentMaterials                                   OFFSET(get<bool>, {0x9E, 1, 1, 2})
	DMember(bool)                                      bUseLandscapeCulling                                        OFFSET(get<bool>, {0x9E, 1, 1, 3})
	DMember(bool)                                      bIncludeImposters                                           OFFSET(get<bool>, {0x9E, 1, 1, 4})
	DMember(bool)                                      bAllowDistanceField                                         OFFSET(get<bool>, {0x9E, 1, 1, 5})
};

/// Struct /Script/Engine.HierarchicalSimplification
/// Size: 0x0160 (0x000000 - 0x000160)
class FHierarchicalSimplification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	DMember(float)                                     TransitionScreenSize                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     OverrideDrawDistance                                        OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(bool)                                      bUseOverrideDrawDistance                                    OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      bAllowSpecificExclusion                                     OFFSET(get<bool>, {0x8, 1, 1, 1})
	DMember(bool)                                      bSimplifyMesh                                               OFFSET(get<bool>, {0x8, 1, 1, 2})
	DMember(bool)                                      bOnlyGenerateClustersForVolumes                             OFFSET(get<bool>, {0x8, 1, 1, 3})
	DMember(bool)                                      bReusePreviousLevelClusters                                 OFFSET(get<bool>, {0x8, 1, 1, 4})
	SMember(FMeshProxySettings)                        ProxySetting                                                OFFSET(getStruct<T>, {0xC, 168, 0, 0})
	SMember(FMeshMergingSettings)                      MergeSetting                                                OFFSET(getStruct<T>, {0xB4, 160, 0, 0})
	DMember(float)                                     DesiredBoundRadius                                          OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(float)                                     DesiredFillingPercentage                                    OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(int32_t)                                   MinNumberOfActorsToBuild                                    OFFSET(get<int32_t>, {0x15C, 4, 0, 0})
};

/// Class /Script/Engine.HierarchicalLODSetup
/// Size: 0x0038 (0x000028 - 0x000060)
class UHierarchicalLODSetup : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TArray<FHierarchicalSimplification>)       HierarchicalLODSetup                                        OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TWeakObjectPtr<class UMaterialInterface*>) OverrideBaseMaterial                                        OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Struct /Script/Engine.NetViewer
/// Size: 0x0030 (0x000000 - 0x000030)
class FNetViewer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UNetConnection*)                     Connection                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class AActor*)                             InViewer                                                    OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class AActor*)                             ViewTarget                                                  OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FVector)                                   ViewLocation                                                OFFSET(getStruct<T>, {0x18, 12, 0, 0})
	SMember(FVector)                                   ViewDir                                                     OFFSET(getStruct<T>, {0x24, 12, 0, 0})
};

/// Class /Script/Engine.WorldSettings
/// Size: 0x0180 (0x000220 - 0x0003A0)
class AWorldSettings : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	DMember(int32_t)                                   VisibilityCellSize                                          OFFSET(get<int32_t>, {0x228, 4, 0, 0})
	CMember(TEnumAsByte<EVisibilityAggressiveness>)    VisibilityAggressiveness                                    OFFSET(get<T>, {0x22C, 1, 0, 0})
	DMember(bool)                                      bPrecomputeVisibility                                       OFFSET(get<bool>, {0x22D, 1, 1, 0})
	DMember(bool)                                      bPlaceCellsOnlyAlongCameraTracks                            OFFSET(get<bool>, {0x22D, 1, 1, 1})
	DMember(bool)                                      bEnableWorldBoundsChecks                                    OFFSET(get<bool>, {0x22D, 1, 1, 2})
	DMember(bool)                                      bEnableNavigationSystem                                     OFFSET(get<bool>, {0x22D, 1, 1, 3})
	DMember(bool)                                      bEnableAISystem                                             OFFSET(get<bool>, {0x22D, 1, 1, 4})
	DMember(bool)                                      bEnableWorldComposition                                     OFFSET(get<bool>, {0x22D, 1, 1, 5})
	DMember(bool)                                      bUseClientSideLevelStreamingVolumes                         OFFSET(get<bool>, {0x22D, 1, 1, 6})
	DMember(bool)                                      bEnableWorldOriginRebasing                                  OFFSET(get<bool>, {0x22D, 1, 1, 7})
	DMember(bool)                                      bWorldGravitySet                                            OFFSET(get<bool>, {0x22E, 1, 1, 0})
	DMember(bool)                                      bGlobalGravitySet                                           OFFSET(get<bool>, {0x22E, 1, 1, 1})
	DMember(bool)                                      bMinimizeBSPSections                                        OFFSET(get<bool>, {0x22E, 1, 1, 2})
	DMember(bool)                                      bForceNoPrecomputedLighting                                 OFFSET(get<bool>, {0x22E, 1, 1, 3})
	DMember(bool)                                      bHighPriorityLoading                                        OFFSET(get<bool>, {0x22E, 1, 1, 4})
	DMember(bool)                                      bHighPriorityLoadingLocal                                   OFFSET(get<bool>, {0x22E, 1, 1, 5})
	DMember(bool)                                      bOverrideDefaultBroadphaseSettings                          OFFSET(get<bool>, {0x22E, 1, 1, 6})
	CMember(class UNavigationSystemConfig*)            NavigationSystemConfig                                      OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UNavigationSystemConfig*)            NavigationSystemConfigOverride                              OFFSET(get<T>, {0x238, 8, 0, 0})
	DMember(float)                                     WorldToMeters                                               OFFSET(get<float>, {0x240, 4, 0, 0})
	DMember(float)                                     KillZ                                                       OFFSET(get<float>, {0x244, 4, 0, 0})
	CMember(class UClass*)                             KillZDamageType                                             OFFSET(get<T>, {0x248, 8, 0, 0})
	DMember(float)                                     WorldGravityZ                                               OFFSET(get<float>, {0x250, 4, 0, 0})
	DMember(float)                                     GlobalGravityZ                                              OFFSET(get<float>, {0x254, 4, 0, 0})
	CMember(class UClass*)                             DefaultPhysicsVolumeClass                                   OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(class UClass*)                             PhysicsCollisionHandlerClass                                OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class UClass*)                             DefaultGameMode                                             OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class UClass*)                             GameNetworkManagerClass                                     OFFSET(get<T>, {0x270, 8, 0, 0})
	DMember(int32_t)                                   PackedLightAndShadowMapTextureSize                          OFFSET(get<int32_t>, {0x278, 4, 0, 0})
	SMember(FVector)                                   DefaultColorScale                                           OFFSET(getStruct<T>, {0x27C, 12, 0, 0})
	DMember(float)                                     DefaultMaxDistanceFieldOcclusionDistance                    OFFSET(get<float>, {0x288, 4, 0, 0})
	DMember(float)                                     GlobalDistanceFieldViewDistance                             OFFSET(get<float>, {0x28C, 4, 0, 0})
	DMember(float)                                     DynamicIndirectShadowsSelfShadowingIntensity                OFFSET(get<float>, {0x290, 4, 0, 0})
	SMember(FReverbSettings)                           DefaultReverbSettings                                       OFFSET(getStruct<T>, {0x298, 32, 0, 0})
	SMember(FInteriorSettings)                         DefaultAmbientZoneSettings                                  OFFSET(getStruct<T>, {0x2B8, 36, 0, 0})
	DMember(float)                                     MonoCullingDistance                                         OFFSET(get<float>, {0x2DC, 4, 0, 0})
	CMember(class USoundMix*)                          DefaultBaseSoundMix                                         OFFSET(get<T>, {0x2E0, 8, 0, 0})
	DMember(float)                                     TimeDilation                                                OFFSET(get<float>, {0x2E8, 4, 0, 0})
	DMember(float)                                     MatineeTimeDilation                                         OFFSET(get<float>, {0x2EC, 4, 0, 0})
	DMember(float)                                     DemoPlayTimeDilation                                        OFFSET(get<float>, {0x2F0, 4, 0, 0})
	DMember(float)                                     MinGlobalTimeDilation                                       OFFSET(get<float>, {0x2F4, 4, 0, 0})
	DMember(float)                                     MaxGlobalTimeDilation                                       OFFSET(get<float>, {0x2F8, 4, 0, 0})
	DMember(float)                                     MinUndilatedFrameTime                                       OFFSET(get<float>, {0x2FC, 4, 0, 0})
	DMember(float)                                     MaxUndilatedFrameTime                                       OFFSET(get<float>, {0x300, 4, 0, 0})
	SMember(FBroadphaseSettings)                       BroadphaseSettings                                          OFFSET(getStruct<T>, {0x304, 64, 0, 0})
	CMember(class APlayerState*)                       Pauser                                                      OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(TArray<FNetViewer>)                        ReplicationViewers                                          OFFSET(get<T>, {0x350, 16, 0, 0})
	CMember(TArray<class UAssetUserData*>)             AssetUserData                                               OFFSET(get<T>, {0x360, 16, 0, 0})
	CMember(class APlayerState*)                       PauserPlayerState                                           OFFSET(get<T>, {0x370, 8, 0, 0})
	DMember(int32_t)                                   MaxNumberOfBookmarks                                        OFFSET(get<int32_t>, {0x378, 4, 0, 0})
	CMember(class UClass*)                             DefaultBookmarkClass                                        OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(TArray<class UBookmarkBase*>)              BookmarkArray                                               OFFSET(get<T>, {0x388, 16, 0, 0})
	CMember(class UClass*)                             LastBookmarkClass                                           OFFSET(get<T>, {0x398, 8, 0, 0})


	/// Functions
	// Function /Script/Engine.WorldSettings.OnRep_WorldGravityZ
	// void OnRep_WorldGravityZ();                                                                                              // [0xc51440] Native|Public        
};

/// Struct /Script/Engine.VectorDistribution
/// Size: 0x0020 (0x000000 - 0x000020)
class FVectorDistribution : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FDistributionLookupTable)                  Table                                                       OFFSET(getStruct<T>, {0x0, 32, 0, 0})
};

/// Struct /Script/Engine.Vector4Distribution
/// Size: 0x0020 (0x000000 - 0x000020)
class FVector4Distribution : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FDistributionLookupTable)                  Table                                                       OFFSET(getStruct<T>, {0x0, 32, 0, 0})
};

/// Struct /Script/Engine.FloatRK4SpringInterpolator
/// Size: 0x0008 (0x000000 - 0x000008)
class FFloatRK4SpringInterpolator : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     StiffnessConstant                                           OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     DampeningRatio                                              OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.VectorRK4SpringInterpolator
/// Size: 0x0008 (0x000000 - 0x000008)
class FVectorRK4SpringInterpolator : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     StiffnessConstant                                           OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     DampeningRatio                                              OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.FormatArgumentData
/// Size: 0x0040 (0x000000 - 0x000040)
class FFormatArgumentData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FString)                                   ArgumentName                                                OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TEnumAsByte<EFormatArgumentType>)          ArgumentValueType                                           OFFSET(get<T>, {0x10, 1, 0, 0})
	SMember(FText)                                     ArgumentValue                                               OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	DMember(int32_t)                                   ArgumentValueInt                                            OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(float)                                     ArgumentValueFloat                                          OFFSET(get<float>, {0x34, 4, 0, 0})
	CMember(ETextGender)                               ArgumentValueGender                                         OFFSET(get<T>, {0x38, 1, 0, 0})
};

/// Struct /Script/Engine.ExpressionOutput
/// Size: 0x0008 (0x000000 - 0x000008)
class FExpressionOutput : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     OutputName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.Vector2MaterialInput
/// Size: 0x0000 (0x00000C - 0x00000C)
class FVector2MaterialInput : public FMaterialInput
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/Engine.BranchingPointNotifyPayload
/// Size: 0x0020 (0x000000 - 0x000020)
class FBranchingPointNotifyPayload : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/Engine.PlatformInterfaceData
/// Size: 0x0030 (0x000000 - 0x000030)
class FPlatformInterfaceData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FName)                                     DataName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<EPlatformInterfaceDataType>)   Type                                                        OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(int32_t)                                   IntValue                                                    OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(float)                                     FloatValue                                                  OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FString)                                   StringValue                                                 OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	CMember(class UObject*)                            ObjectValue                                                 OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.PlatformInterfaceDelegateResult
/// Size: 0x0038 (0x000000 - 0x000038)
class FPlatformInterfaceDelegateResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bSuccessful                                                 OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FPlatformInterfaceData)                    Data                                                        OFFSET(getStruct<T>, {0x8, 48, 0, 0})
};

/// Struct /Script/Engine.DebugFloatHistory
/// Size: 0x0020 (0x000000 - 0x000020)
class FDebugFloatHistory : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<float>)                             Samples                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(float)                                     MaxSamples                                                  OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     MinValue                                                    OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     MaxValue                                                    OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(bool)                                      bAutoAdjustMinMax                                           OFFSET(get<bool>, {0x1C, 1, 0, 0})
};

/// Struct /Script/Engine.LatentActionInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FLatentActionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   Linkage                                                     OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   UUID                                                        OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	SMember(FName)                                     ExecutionFunction                                           OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(class UObject*)                            CallbackTarget                                              OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.TimerHandle
/// Size: 0x0008 (0x000000 - 0x000008)
class FTimerHandle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(uint64_t)                                  Handle                                                      OFFSET(get<uint64_t>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.CollisionProfileName
/// Size: 0x0008 (0x000000 - 0x000008)
class FCollisionProfileName : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.GenericStruct
/// Size: 0x0004 (0x000000 - 0x000004)
class FGenericStruct : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   Data                                                        OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.UserActivity
/// Size: 0x0018 (0x000000 - 0x000018)
class FUserActivity : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   ActionName                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.TableRowBase
/// Size: 0x0008 (0x000000 - 0x000008)
class FTableRowBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.AnimNode_Base
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimNode_Base : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.AnimNode_CustomProperty
/// Size: 0x0048 (0x000010 - 0x000058)
class FAnimNode_CustomProperty : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<FName>)                             SourcePropertyNames                                         OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FName>)                             DestPropertyNames                                           OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(class UObject*)                            TargetInstance                                              OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/Engine.PoseLinkBase
/// Size: 0x0010 (0x000000 - 0x000010)
class FPoseLinkBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(int32_t)                                   LinkID                                                      OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/Engine.PoseLink
/// Size: 0x0000 (0x000010 - 0x000010)
class FPoseLink : public FPoseLinkBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.InputRange
/// Size: 0x0008 (0x000000 - 0x000008)
class FInputRange : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Min                                                         OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Max                                                         OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.InputScaleBiasClamp
/// Size: 0x0030 (0x000000 - 0x000030)
class FInputScaleBiasClamp : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      bMapRange                                                   OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bClampResult                                                OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      bInterpResult                                               OFFSET(get<bool>, {0x2, 1, 0, 0})
	SMember(FInputRange)                               InRange                                                     OFFSET(getStruct<T>, {0x4, 8, 0, 0})
	SMember(FInputRange)                               OutRange                                                    OFFSET(getStruct<T>, {0xC, 8, 0, 0})
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     Bias                                                        OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     ClampMin                                                    OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     ClampMax                                                    OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     InterpSpeedIncreasing                                       OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     InterpSpeedDecreasing                                       OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Struct /Script/Engine.InputAlphaBoolBlend
/// Size: 0x0048 (0x000000 - 0x000048)
class FInputAlphaBoolBlend : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     BlendInTime                                                 OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     BlendOutTime                                                OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(EAlphaBlendOption)                         BlendOption                                                 OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(bool)                                      bInitialized                                                OFFSET(get<bool>, {0x9, 1, 0, 0})
	CMember(class UCurveFloat*)                        CustomCurve                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FAlphaBlend)                               AlphaBlend                                                  OFFSET(getStruct<T>, {0x18, 48, 0, 0})
};

/// Struct /Script/Engine.InputScaleBias
/// Size: 0x0008 (0x000000 - 0x000008)
class FInputScaleBias : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Bias                                                        OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.AnimInstanceProxy
/// Size: 0x0760 (0x000000 - 0x000760)
class FAnimInstanceProxy : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1888;

public:
};

/// Struct /Script/Engine.ComponentReference
/// Size: 0x0028 (0x000000 - 0x000028)
class FComponentReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class AActor*)                             OtherActor                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     ComponentProperty                                           OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FString)                                   PathToComponent                                             OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.KeyHandleLookupTable
/// Size: 0x0060 (0x000000 - 0x000060)
class FKeyHandleLookupTable : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Struct /Script/Engine.ComponentSpacePoseLink
/// Size: 0x0000 (0x000010 - 0x000010)
class FComponentSpacePoseLink : public FPoseLinkBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.AnimNode_AssetPlayerBase
/// Size: 0x0028 (0x000010 - 0x000038)
class FAnimNode_AssetPlayerBase : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     GroupName                                                   OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	CMember(TEnumAsByte<EAnimGroupRole>)               GroupRole                                                   OFFSET(get<T>, {0x18, 1, 0, 0})
	CMember(EAnimSyncGroupScope)                       GroupScope                                                  OFFSET(get<T>, {0x19, 1, 0, 0})
	DMember(bool)                                      bIgnoreForRelevancyTest                                     OFFSET(get<bool>, {0x1A, 1, 0, 0})
	DMember(float)                                     BlendWeight                                                 OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     InternalTimeAccumulator                                     OFFSET(get<float>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.PerBoneBlendWeight
/// Size: 0x0008 (0x000000 - 0x000008)
class FPerBoneBlendWeight : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   SourceIndex                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(float)                                     BlendWeight                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.PoseSnapshot
/// Size: 0x0038 (0x000000 - 0x000038)
class FPoseSnapshot : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FTransform>)                        LocalTransforms                                             OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FName>)                             BoneNames                                                   OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FName)                                     SkeletalMeshName                                            OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	SMember(FName)                                     SnapshotName                                                OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      bIsValid                                                    OFFSET(get<bool>, {0x30, 1, 0, 0})
};

/// Struct /Script/Engine.AnimNode_Root
/// Size: 0x0020 (0x000010 - 0x000030)
class FAnimNode_Root : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FPoseLink)                                 Result                                                      OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	SMember(FName)                                     Group                                                       OFFSET(getStruct<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.AnimCurveParam
/// Size: 0x000C (0x000000 - 0x00000C)
class FAnimCurveParam : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.ActorComponentDuplicatedObjectData
/// Size: 0x0010 (0x000000 - 0x000010)
class FActorComponentDuplicatedObjectData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.ActorComponentInstanceData
/// Size: 0x0068 (0x000000 - 0x000068)
class FActorComponentInstanceData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(class UObject*)                            SourceComponentTemplate                                     OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(EComponentCreationMethod)                  SourceComponentCreationMethod                               OFFSET(get<T>, {0x10, 1, 0, 0})
	DMember(int32_t)                                   SourceComponentTypeSerializedIndex                          OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	CMember(TArray<char>)                              SavedProperties                                             OFFSET(get<T>, {0x18, 16, 0, 0})
	SMember(FActorComponentDuplicatedObjectData)       UniqueTransientPackage                                      OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	CMember(TArray<FActorComponentDuplicatedObjectData>) DuplicatedObjects                                         OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<class UObject*>)                    ReferencedObjects                                           OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<FName>)                             ReferencedNames                                             OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Struct /Script/Engine.SceneComponentInstanceData
/// Size: 0x0050 (0x000068 - 0x0000B8)
class FSceneComponentInstanceData : public FActorComponentInstanceData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(TMap<class USceneComponent*, FTransform>)  AttachedInstanceComponents                                  OFFSET(get<T>, {0x68, 80, 0, 0})
};

/// Struct /Script/Engine.AnimationGroupReference
/// Size: 0x000C (0x000000 - 0x00000C)
class FAnimationGroupReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     GroupName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<EAnimGroupRole>)               GroupRole                                                   OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(EAnimSyncGroupScope)                       GroupScope                                                  OFFSET(get<T>, {0x9, 1, 0, 0})
};

/// Struct /Script/Engine.AnimGroupInstance
/// Size: 0x0070 (0x000000 - 0x000070)
class FAnimGroupInstance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Struct /Script/Engine.AnimTickRecord
/// Size: 0x0048 (0x000000 - 0x000048)
class FAnimTickRecord : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UAnimationAsset*)                    SourceAsset                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.MarkerSyncAnimPosition
/// Size: 0x0014 (0x000000 - 0x000014)
class FMarkerSyncAnimPosition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FName)                                     PreviousMarkerName                                          OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     NextMarkerName                                              OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(float)                                     PositionBetweenMarkers                                      OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.BlendFilter
/// Size: 0x0078 (0x000000 - 0x000078)
class FBlendFilter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Struct /Script/Engine.BlendSampleData
/// Size: 0x0040 (0x000000 - 0x000040)
class FBlendSampleData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(int32_t)                                   SampleDataIndex                                             OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(class UAnimSequence*)                      Animation                                                   OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(float)                                     TotalWeight                                                 OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     PreviousTime                                                OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     SamplePlayRate                                              OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Struct /Script/Engine.AnimationRecordingSettings
/// Size: 0x0014 (0x000000 - 0x000014)
class FAnimationRecordingSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(bool)                                      bRecordInWorldSpace                                         OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bRemoveRootAnimation                                        OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      bAutoSaveAsset                                              OFFSET(get<bool>, {0x2, 1, 0, 0})
	DMember(float)                                     SampleRate                                                  OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Length                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
	CMember(TEnumAsByte<ERichCurveInterpMode>)         InterpMode                                                  OFFSET(get<T>, {0xC, 1, 0, 0})
	CMember(TEnumAsByte<ERichCurveTangentMode>)        TangentMode                                                 OFFSET(get<T>, {0xD, 1, 0, 0})
	DMember(bool)                                      bRecordTransforms                                           OFFSET(get<bool>, {0xF, 1, 0, 0})
	DMember(bool)                                      bRecordCurves                                               OFFSET(get<bool>, {0x10, 1, 0, 0})
};

/// Struct /Script/Engine.ComponentSpacePose
/// Size: 0x0020 (0x000000 - 0x000020)
class FComponentSpacePose : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FTransform>)                        Transforms                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FName>)                             Names                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.LocalSpacePose
/// Size: 0x0020 (0x000000 - 0x000020)
class FLocalSpacePose : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FTransform>)                        Transforms                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FName>)                             Names                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.NamedTransform
/// Size: 0x0040 (0x000000 - 0x000040)
class FNamedTransform : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FTransform)                                Value                                                       OFFSET(getStruct<T>, {0x0, 48, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/Engine.NamedColor
/// Size: 0x000C (0x000000 - 0x00000C)
class FNamedColor : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FColor)                                    Value                                                       OFFSET(getStruct<T>, {0x0, 4, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x4, 8, 0, 0})
};

/// Struct /Script/Engine.NamedVector
/// Size: 0x0014 (0x000000 - 0x000014)
class FNamedVector : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FVector)                                   Value                                                       OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0xC, 8, 0, 0})
};

/// Struct /Script/Engine.NamedFloat
/// Size: 0x000C (0x000000 - 0x00000C)
class FNamedFloat : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x4, 8, 0, 0})
};

/// Struct /Script/Engine.AnimParentNodeAssetOverride
/// Size: 0x0018 (0x000000 - 0x000018)
class FAnimParentNodeAssetOverride : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UAnimationAsset*)                    NewAsset                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FGuid)                                     ParentNodeGuid                                              OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.AnimBlueprintDebugData
/// Size: 0x0001 (0x000000 - 0x000001)
class FAnimBlueprintDebugData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.AnimationFrameSnapshot
/// Size: 0x0001 (0x000000 - 0x000001)
class FAnimationFrameSnapshot : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.StateMachineDebugData
/// Size: 0x00B0 (0x000000 - 0x0000B0)
class FStateMachineDebugData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Struct /Script/Engine.StateMachineStateDebugData
/// Size: 0x0010 (0x000000 - 0x000010)
class FStateMachineStateDebugData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.RootMotionExtractionStep
/// Size: 0x0010 (0x000000 - 0x000010)
class FRootMotionExtractionStep : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UAnimSequence*)                      AnimSequence                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     StartPosition                                               OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     EndPosition                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.AnimationErrorStats
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimationErrorStats : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.VectorCurve
/// Size: 0x0180 (0x000018 - 0x000198)
class FVectorCurve : public FAnimCurveBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 408;

public:
	SMember(FRichCurve)                                FloatCurves                                                 OFFSET(getStruct<T>, {0x18, 384, 0, 0})
};

/// Struct /Script/Engine.TransformCurve
/// Size: 0x04C8 (0x000018 - 0x0004E0)
class FTransformCurve : public FAnimCurveBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1248;

public:
	SMember(FVectorCurve)                              TranslationCurve                                            OFFSET(getStruct<T>, {0x18, 408, 0, 0})
	SMember(FVectorCurve)                              RotationCurve                                               OFFSET(getStruct<T>, {0x1B0, 408, 0, 0})
	SMember(FVectorCurve)                              ScaleCurve                                                  OFFSET(getStruct<T>, {0x348, 408, 0, 0})
};

/// Struct /Script/Engine.SlotEvaluationPose
/// Size: 0x00E0 (0x000000 - 0x0000E0)
class FSlotEvaluationPose : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	CMember(TEnumAsByte<EAdditiveAnimationType>)       AdditiveType                                                OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.A2Pose
/// Size: 0x0010 (0x000000 - 0x000010)
class FA2Pose : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FTransform>)                        Bones                                                       OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.A2CSPose
/// Size: 0x0018 (0x000010 - 0x000028)
class FA2CSPose : public FA2Pose
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<char>)                              ComponentSpaceFlags                                         OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Engine.QueuedDrawDebugItem
/// Size: 0x0068 (0x000000 - 0x000068)
class FQueuedDrawDebugItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TEnumAsByte<EDrawDebugItemType>)           ItemType                                                    OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FVector)                                   StartLoc                                                    OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	SMember(FVector)                                   EndLoc                                                      OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	SMember(FVector)                                   Center                                                      OFFSET(getStruct<T>, {0x1C, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x28, 12, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     Size                                                        OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   Segments                                                    OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	SMember(FColor)                                    Color                                                       OFFSET(getStruct<T>, {0x40, 4, 0, 0})
	DMember(bool)                                      bPersistentLines                                            OFFSET(get<bool>, {0x44, 1, 0, 0})
	DMember(float)                                     LifeTime                                                    OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     Thickness                                                   OFFSET(get<float>, {0x4C, 4, 0, 0})
	SMember(FString)                                   Message                                                     OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	SMember(FVector2D)                                 TextScale                                                   OFFSET(getStruct<T>, {0x60, 8, 0, 0})
};

/// Struct /Script/Engine.AnimInstanceSubsystemData
/// Size: 0x0001 (0x000000 - 0x000001)
class FAnimInstanceSubsystemData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.AnimMontageInstance
/// Size: 0x01B0 (0x000000 - 0x0001B0)
class FAnimMontageInstance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	CMember(class UAnimMontage*)                       Montage                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bPlaying                                                    OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(float)                                     DefaultBlendTimeMultiplier                                  OFFSET(get<float>, {0x2C, 4, 0, 0})
	CMember(TArray<int32_t>)                           NextSections                                                OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(TArray<int32_t>)                           PrevSections                                                OFFSET(get<T>, {0xF8, 16, 0, 0})
	CMember(TArray<FAnimNotifyEvent>)                  ActiveStateBranchingPoints                                  OFFSET(get<T>, {0x118, 16, 0, 0})
	DMember(float)                                     Position                                                    OFFSET(get<float>, {0x128, 4, 0, 0})
	DMember(float)                                     PlayRate                                                    OFFSET(get<float>, {0x12C, 4, 0, 0})
	SMember(FAlphaBlend)                               Blend                                                       OFFSET(getStruct<T>, {0x130, 48, 0, 0})
	DMember(int32_t)                                   DisableRootMotionCount                                      OFFSET(get<int32_t>, {0x18C, 4, 0, 0})
};

/// Struct /Script/Engine.AnimNode_ApplyMeshSpaceAdditive
/// Size: 0x00C0 (0x000010 - 0x0000D0)
class FAnimNode_ApplyMeshSpaceAdditive : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FPoseLink)                                 Base                                                        OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FPoseLink)                                 Additive                                                    OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	CMember(EAnimAlphaInputType)                       AlphaInputType                                              OFFSET(get<T>, {0x30, 1, 0, 0})
	DMember(float)                                     Alpha                                                       OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(bool)                                      bAlphaBoolEnabled                                           OFFSET(get<bool>, {0x38, 1, 1, 0})
	SMember(FInputAlphaBoolBlend)                      AlphaBoolBlend                                              OFFSET(getStruct<T>, {0x40, 72, 0, 0})
	SMember(FName)                                     AlphaCurveName                                              OFFSET(getStruct<T>, {0x88, 8, 0, 0})
	SMember(FInputScaleBias)                           AlphaScaleBias                                              OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	SMember(FInputScaleBiasClamp)                      AlphaScaleBiasClamp                                         OFFSET(getStruct<T>, {0x98, 48, 0, 0})
	DMember(int32_t)                                   LODThreshold                                                OFFSET(get<int32_t>, {0xC8, 4, 0, 0})
};

/// Struct /Script/Engine.AnimNode_Inertialization
/// Size: 0x0060 (0x000010 - 0x000070)
class FAnimNode_Inertialization : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FPoseLink)                                 Source                                                      OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.InertializationPoseDiff
/// Size: 0x0028 (0x000000 - 0x000028)
class FInertializationPoseDiff : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Engine.InertializationCurveDiff
/// Size: 0x0008 (0x000000 - 0x000008)
class FInertializationCurveDiff : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.InertializationBoneDiff
/// Size: 0x003C (0x000000 - 0x00003C)
class FInertializationBoneDiff : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 60;

public:
};

/// Struct /Script/Engine.InertializationPose
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FInertializationPose : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
};

/// Struct /Script/Engine.AnimNode_LinkedAnimGraph
/// Size: 0x0048 (0x000058 - 0x0000A0)
class FAnimNode_LinkedAnimGraph : public FAnimNode_CustomProperty
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(TArray<FPoseLink>)                         InputPoses                                                  OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<FName>)                             InputPoseNames                                              OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(class UClass*)                             InstanceClass                                               OFFSET(get<T>, {0x78, 8, 0, 0})
	SMember(FName)                                     Tag                                                         OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	DMember(bool)                                      bReceiveNotifiesFromLinkedInstances                         OFFSET(get<bool>, {0x9C, 1, 1, 0})
	DMember(bool)                                      bPropagateNotifiesToLinkedInstances                         OFFSET(get<bool>, {0x9C, 1, 1, 1})
};

/// Struct /Script/Engine.AnimNode_LinkedAnimLayer
/// Size: 0x0010 (0x0000A0 - 0x0000B0)
class FAnimNode_LinkedAnimLayer : public FAnimNode_LinkedAnimGraph
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(class UClass*)                             Interface                                                   OFFSET(get<T>, {0xA0, 8, 0, 0})
	SMember(FName)                                     Layer                                                       OFFSET(getStruct<T>, {0xA8, 8, 0, 0})
};

/// Struct /Script/Engine.AnimNode_LinkedInputPose
/// Size: 0x0108 (0x000010 - 0x000118)
class FAnimNode_LinkedInputPose : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	SMember(FName)                                     Graph                                                       OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FPoseLink)                                 InputPose                                                   OFFSET(getStruct<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.AnimNode_SaveCachedPose
/// Size: 0x0148 (0x000010 - 0x000158)
class FAnimNode_SaveCachedPose : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	SMember(FPoseLink)                                 Pose                                                        OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FName)                                     CachePoseName                                               OFFSET(getStruct<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/Engine.AnimNode_SequencePlayer
/// Size: 0x0048 (0x000038 - 0x000080)
class FAnimNode_SequencePlayer : public FAnimNode_AssetPlayerBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(class UAnimSequenceBase*)                  Sequence                                                    OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(float)                                     PlayRateBasis                                               OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     PlayRate                                                    OFFSET(get<float>, {0x44, 4, 0, 0})
	SMember(FInputScaleBiasClamp)                      PlayRateScaleBiasClamp                                      OFFSET(getStruct<T>, {0x48, 48, 0, 0})
	DMember(float)                                     StartPosition                                               OFFSET(get<float>, {0x78, 4, 0, 0})
	DMember(bool)                                      bLoopAnimation                                              OFFSET(get<bool>, {0x7C, 1, 0, 0})
};

/// Struct /Script/Engine.AnimNode_StateMachine
/// Size: 0x00A0 (0x000010 - 0x0000B0)
class FAnimNode_StateMachine : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	DMember(int32_t)                                   StateMachineIndexInClass                                    OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   MaxTransitionsPerFrame                                      OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(bool)                                      bSkipFirstUpdateTransition                                  OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(bool)                                      bReinitializeOnBecomingRelevant                             OFFSET(get<bool>, {0x19, 1, 0, 0})
};

/// Struct /Script/Engine.AnimationPotentialTransition
/// Size: 0x0030 (0x000000 - 0x000030)
class FAnimationPotentialTransition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.AnimationActiveTransitionEntry
/// Size: 0x00C8 (0x000000 - 0x0000C8)
class FAnimationActiveTransitionEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(class UBlendProfile*)                      BlendProfile                                                OFFSET(get<T>, {0xB8, 8, 0, 0})
};

/// Struct /Script/Engine.AnimNode_TransitionPoseEvaluator
/// Size: 0x00E8 (0x000010 - 0x0000F8)
class FAnimNode_TransitionPoseEvaluator : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	DMember(int32_t)                                   FramesToCachePose                                           OFFSET(get<int32_t>, {0xE8, 4, 0, 0})
	CMember(TEnumAsByte<EEvaluatorDataSource>)         DataSource                                                  OFFSET(get<T>, {0xF0, 1, 0, 0})
	CMember(TEnumAsByte<EEvaluatorMode>)               EvaluatorMode                                               OFFSET(get<T>, {0xF1, 1, 0, 0})
};

/// Struct /Script/Engine.AnimNode_TransitionResult
/// Size: 0x0018 (0x000010 - 0x000028)
class FAnimNode_TransitionResult : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(bool)                                      bCanEnterTransition                                         OFFSET(get<bool>, {0x10, 1, 0, 0})
};

/// Struct /Script/Engine.AnimNode_UseCachedPose
/// Size: 0x0018 (0x000010 - 0x000028)
class FAnimNode_UseCachedPose : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FPoseLink)                                 LinkToCachingNode                                           OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FName)                                     CachePoseName                                               OFFSET(getStruct<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/Engine.AnimNode_ConvertLocalToComponentSpace
/// Size: 0x0010 (0x000010 - 0x000020)
class FAnimNode_ConvertLocalToComponentSpace : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FPoseLink)                                 LocalPose                                                   OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.AnimNode_ConvertComponentToLocalSpace
/// Size: 0x0010 (0x000010 - 0x000020)
class FAnimNode_ConvertComponentToLocalSpace : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FComponentSpacePoseLink)                   ComponentPose                                               OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.CompressedTrack
/// Size: 0x0038 (0x000000 - 0x000038)
class FCompressedTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<char>)                              ByteStream                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<float>)                             Times                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(float)                                     Mins                                                        OFFSET(get<float>, {0x20, 12, 0, 0})
	DMember(float)                                     Ranges                                                      OFFSET(get<float>, {0x2C, 12, 0, 0})
};

/// Struct /Script/Engine.CurveTrack
/// Size: 0x0018 (0x000000 - 0x000018)
class FCurveTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     CurveName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<float>)                             CurveWeights                                                OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.ScaleTrack
/// Size: 0x0020 (0x000000 - 0x000020)
class FScaleTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FVector>)                           ScaleKeys                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<float>)                             Times                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.RotationTrack
/// Size: 0x0020 (0x000000 - 0x000020)
class FRotationTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FQuat>)                             RotKeys                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<float>)                             Times                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.TranslationTrack
/// Size: 0x0020 (0x000000 - 0x000020)
class FTranslationTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FVector>)                           PosKeys                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<float>)                             Times                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.RawAnimSequenceTrack
/// Size: 0x0030 (0x000000 - 0x000030)
class FRawAnimSequenceTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<FVector>)                           PosKeys                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FQuat>)                             RotKeys                                                     OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FVector>)                           ScaleKeys                                                   OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.AnimSequenceTrackContainer
/// Size: 0x0020 (0x000000 - 0x000020)
class FAnimSequenceTrackContainer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FRawAnimSequenceTrack>)             AnimationTracks                                             OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FName>)                             TrackNames                                                  OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.AnimSingleNodeInstanceProxy
/// Size: 0x0150 (0x000760 - 0x0008B0)
class FAnimSingleNodeInstanceProxy : public FAnimInstanceProxy
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2224;

public:
};

/// Struct /Script/Engine.AnimNode_SingleNode
/// Size: 0x0020 (0x000010 - 0x000030)
class FAnimNode_SingleNode : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FPoseLink)                                 SourcePose                                                  OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.AnimationTransitionRule
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimationTransitionRule : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     RuleToExecute                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      TransitionReturnVal                                         OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(int32_t)                                   TransitionIndex                                             OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.AnimationState
/// Size: 0x0020 (0x000008 - 0x000028)
class FAnimationState : public FAnimationStateBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<FAnimationTransitionRule>)          Transitions                                                 OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   StateRootNodeIndex                                          OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   StartNotify                                                 OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   EndNotify                                                   OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   FullyBlendedNotify                                          OFFSET(get<int32_t>, {0x24, 4, 0, 0})
};

/// Struct /Script/Engine.AnimNotifyTrack
/// Size: 0x0038 (0x000000 - 0x000038)
class FAnimNotifyTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     TrackName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FLinearColor)                              TrackColor                                                  OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.PerBoneBlendWeights
/// Size: 0x0010 (0x000000 - 0x000010)
class FPerBoneBlendWeights : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FPerBoneBlendWeight>)               BoneBlendWeights                                            OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.AssetImportInfo
/// Size: 0x0001 (0x000000 - 0x000001)
class FAssetImportInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.AtmospherePrecomputeInstanceData
/// Size: 0x00A8 (0x0000B8 - 0x000160)
class FAtmospherePrecomputeInstanceData : public FSceneComponentInstanceData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
};

/// Struct /Script/Engine.AudioReverbEffect
/// Size: 0x0040 (0x000008 - 0x000048)
class FAudioReverbEffect : public FAudioEffectParameters
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Struct /Script/Engine.NavAvoidanceData
/// Size: 0x003C (0x000000 - 0x00003C)
class FNavAvoidanceData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 60;

public:
};

/// Struct /Script/Engine.GridBlendSample
/// Size: 0x001C (0x000000 - 0x00001C)
class FGridBlendSample : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FEditorElement)                            GridElement                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(float)                                     BlendWeight                                                 OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.BPEditorBookmarkNode
/// Size: 0x0038 (0x000000 - 0x000038)
class FBPEditorBookmarkNode : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FGuid)                                     NodeGuid                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FGuid)                                     ParentGuid                                                  OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x20, 24, 0, 0})
};

/// Struct /Script/Engine.EditedDocumentInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FEditedDocumentInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FSoftObjectPath)                           EditedObjectPath                                            OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FVector2D)                                 SavedViewOffset                                             OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	DMember(float)                                     SavedZoomAmount                                             OFFSET(get<float>, {0x20, 4, 0, 0})
	CMember(class UObject*)                            EditedObject                                                OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.BPInterfaceDescription
/// Size: 0x0018 (0x000000 - 0x000018)
class FBPInterfaceDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UClass*)                             Interface                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<class UEdGraph*>)                   Graphs                                                      OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.BPVariableDescription
/// Size: 0x00D0 (0x000000 - 0x0000D0)
class FBPVariableDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FName)                                     VarName                                                     OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FGuid)                                     VarGuid                                                     OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FEdGraphPinType)                           VarType                                                     OFFSET(getStruct<T>, {0x18, 88, 0, 0})
	SMember(FString)                                   FriendlyName                                                OFFSET(getStruct<T>, {0x70, 16, 0, 0})
	SMember(FText)                                     Category                                                    OFFSET(getStruct<T>, {0x80, 24, 0, 0})
	DMember(uint64_t)                                  PropertyFlags                                               OFFSET(get<uint64_t>, {0x98, 8, 0, 0})
	SMember(FName)                                     RepNotifyFunc                                               OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
	CMember(TEnumAsByte<ELifetimeCondition>)           ReplicationCondition                                        OFFSET(get<T>, {0xA8, 1, 0, 0})
	CMember(TArray<FBPVariableMetaDataEntry>)          MetaDataArray                                               OFFSET(get<T>, {0xB0, 16, 0, 0})
	SMember(FString)                                   DefaultValue                                                OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
};

/// Struct /Script/Engine.BlueprintMacroCosmeticInfo
/// Size: 0x0001 (0x000000 - 0x000001)
class FBlueprintMacroCosmeticInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.CompilerNativizationOptions
/// Size: 0x0080 (0x000000 - 0x000080)
class FCompilerNativizationOptions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FName)                                     PlatformName                                                OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      ServerOnlyPlatform                                          OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(bool)                                      ClientOnlyPlatform                                          OFFSET(get<bool>, {0x9, 1, 0, 0})
	DMember(bool)                                      bExcludeMonolithicHeaders                                   OFFSET(get<bool>, {0xA, 1, 0, 0})
	CMember(TArray<FName>)                             ExcludedModules                                             OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TSet<FSoftObjectPath>)                     ExcludedAssets                                              OFFSET(get<T>, {0x20, 80, 0, 0})
	CMember(TArray<FString>)                           ExcludedFolderPaths                                         OFFSET(get<T>, {0x70, 16, 0, 0})
};

/// Struct /Script/Engine.EventGraphFastCallPair
/// Size: 0x0010 (0x000000 - 0x000010)
class FEventGraphFastCallPair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UFunction*)                          FunctionToPatch                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   EventGraphCallOffset                                        OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.BlueprintDebugData
/// Size: 0x0001 (0x000000 - 0x000001)
class FBlueprintDebugData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.PointerToUberGraphFrame
/// Size: 0x0008 (0x000000 - 0x000008)
class FPointerToUberGraphFrame : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.DebuggingInfoForSingleFunction
/// Size: 0x0190 (0x000000 - 0x000190)
class FDebuggingInfoForSingleFunction : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
};

/// Struct /Script/Engine.NodeToCodeAssociation
/// Size: 0x0014 (0x000000 - 0x000014)
class FNodeToCodeAssociation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
};

/// Struct /Script/Engine.AnimCurveType
/// Size: 0x0002 (0x000000 - 0x000002)
class FAnimCurveType : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2;

public:
};

/// Struct /Script/Engine.BookmarkBaseJumpToSettings
/// Size: 0x0001 (0x000000 - 0x000001)
class FBookmarkBaseJumpToSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.BookmarkJumpToSettings
/// Size: 0x0000 (0x000001 - 0x000001)
class FBookmarkJumpToSettings : public FBookmarkBaseJumpToSettings
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.Bookmark2DJumpToSettings
/// Size: 0x0001 (0x000000 - 0x000001)
class FBookmark2DJumpToSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.CachedAnimTransitionData
/// Size: 0x0024 (0x000000 - 0x000024)
class FCachedAnimTransitionData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	SMember(FName)                                     StateMachineName                                            OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     FromStateName                                               OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     ToStateName                                                 OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.CachedAnimRelevancyData
/// Size: 0x001C (0x000000 - 0x00001C)
class FCachedAnimRelevancyData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FName)                                     StateMachineName                                            OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     StateName                                                   OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.CachedAnimAssetPlayerData
/// Size: 0x0018 (0x000000 - 0x000018)
class FCachedAnimAssetPlayerData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     StateMachineName                                            OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     StateName                                                   OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.CachedAnimStateData
/// Size: 0x001C (0x000000 - 0x00001C)
class FCachedAnimStateData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FName)                                     StateMachineName                                            OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     StateName                                                   OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.CachedAnimStateArray
/// Size: 0x0018 (0x000000 - 0x000018)
class FCachedAnimStateArray : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FCachedAnimStateData>)              States                                                      OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.CameraShakeDuration
/// Size: 0x0008 (0x000000 - 0x000008)
class FCameraShakeDuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(ECameraShakeDurationType)                  Type                                                        OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Struct /Script/Engine.CameraShakeInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FCameraShakeInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FCameraShakeDuration)                      Duration                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     BlendIn                                                     OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     BlendOut                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.CameraShakeUpdateResult
/// Size: 0x0020 (0x000000 - 0x000020)
class FCameraShakeUpdateResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/Engine.CameraShakeUpdateParams
/// Size: 0x05F0 (0x000000 - 0x0005F0)
class FCameraShakeUpdateParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1520;

public:
};

/// Struct /Script/Engine.DummySpacerCameraTypes
/// Size: 0x0001 (0x000000 - 0x000001)
class FDummySpacerCameraTypes : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Engine.CanvasIcon
/// Size: 0x0018 (0x000000 - 0x000018)
class FCanvasIcon : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UTexture*)                           Texture                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     U                                                           OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     V                                                           OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     UL                                                          OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     VL                                                          OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Struct /Script/Engine.WrappedStringElement
/// Size: 0x0018 (0x000000 - 0x000018)
class FWrappedStringElement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   Value                                                       OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FVector2D)                                 LineExtent                                                  OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.TextSizingParameters
/// Size: 0x0028 (0x000000 - 0x000028)
class FTextSizingParameters : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(float)                                     DrawX                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     DrawY                                                       OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     DrawXL                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     DrawYL                                                      OFFSET(get<float>, {0xC, 4, 0, 0})
	SMember(FVector2D)                                 Scaling                                                     OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	CMember(class UFont*)                              DrawFont                                                    OFFSET(get<T>, {0x18, 8, 0, 0})
	SMember(FVector2D)                                 SpacingAdjust                                               OFFSET(getStruct<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/Engine.CharacterNetworkSerializationPackedBits
/// Size: 0x0098 (0x000000 - 0x000098)
class FCharacterNetworkSerializationPackedBits : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
};

/// Struct /Script/Engine.CharacterMoveResponsePackedBits
/// Size: 0x0000 (0x000098 - 0x000098)
class FCharacterMoveResponsePackedBits : public FCharacterNetworkSerializationPackedBits
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
};

/// Struct /Script/Engine.CharacterServerMovePackedBits
/// Size: 0x0000 (0x000098 - 0x000098)
class FCharacterServerMovePackedBits : public FCharacterNetworkSerializationPackedBits
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
};

/// Struct /Script/Engine.ChildActorAttachedActorInfo
/// Size: 0x0040 (0x000000 - 0x000040)
class FChildActorAttachedActorInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TWeakObjectPtr<class AActor*>)             Actor                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FTransform)                                RelativeTransform                                           OFFSET(getStruct<T>, {0x10, 48, 0, 0})
};

/// Struct /Script/Engine.ChildActorComponentInstanceData
/// Size: 0x0030 (0x0000B8 - 0x0000E8)
class FChildActorComponentInstanceData : public FSceneComponentInstanceData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	CMember(class UClass*)                             ChildActorClass                                             OFFSET(get<T>, {0xB8, 8, 0, 0})
	SMember(FName)                                     ChildActorName                                              OFFSET(getStruct<T>, {0xC0, 8, 0, 0})
	CMember(TArray<FChildActorAttachedActorInfo>)      AttachedActors                                              OFFSET(get<T>, {0xC8, 16, 0, 0})
};

/// Struct /Script/Engine.AutoCompleteNode
/// Size: 0x0028 (0x000000 - 0x000028)
class FAutoCompleteNode : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(int32_t)                                   IndexChar                                                   OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(TArray<int32_t>)                           AutoCompleteListIndices                                     OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.RuntimeCurveLinearColor
/// Size: 0x0208 (0x000000 - 0x000208)
class FRuntimeCurveLinearColor : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 520;

public:
	SMember(FRichCurve)                                ColorCurves                                                 OFFSET(getStruct<T>, {0x0, 512, 0, 0})
	CMember(class UCurveLinearColor*)                  ExternalCurve                                               OFFSET(get<T>, {0x200, 8, 0, 0})
};

/// Struct /Script/Engine.NamedCurveValue
/// Size: 0x000C (0x000000 - 0x00000C)
class FNamedCurveValue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.CurveTableRowHandle
/// Size: 0x0010 (0x000000 - 0x000010)
class FCurveTableRowHandle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UCurveTable*)                        CurveTable                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     RowName                                                     OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.CustomAttribute
/// Size: 0x0030 (0x000000 - 0x000030)
class FCustomAttribute : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   VariantType                                                 OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(TArray<float>)                             Times                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.CustomAttributePerBoneData
/// Size: 0x0018 (0x000000 - 0x000018)
class FCustomAttributePerBoneData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   BoneTreeIndex                                               OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(TArray<FCustomAttribute>)                  Attributes                                                  OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.DataTableCategoryHandle
/// Size: 0x0018 (0x000000 - 0x000018)
class FDataTableCategoryHandle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UDataTable*)                         DataTable                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     ColumnName                                                  OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     RowContents                                                 OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.DataTableRowHandle
/// Size: 0x0010 (0x000000 - 0x000010)
class FDataTableRowHandle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UDataTable*)                         DataTable                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     RowName                                                     OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.GraphReference
/// Size: 0x0020 (0x000000 - 0x000020)
class FGraphReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UEdGraph*)                           MacroGraph                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UBlueprint*)                         GraphBlueprint                                              OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FGuid)                                     GraphGuid                                                   OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.EdGraphPinReference
/// Size: 0x0018 (0x000000 - 0x000018)
class FEdGraphPinReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TWeakObjectPtr<class UEdGraphNode*>)       OwningNode                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FGuid)                                     PinId                                                       OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.EdGraphSchemaAction
/// Size: 0x0100 (0x000000 - 0x000100)
class FEdGraphSchemaAction : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FText)                                     MenuDescription                                             OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	SMember(FText)                                     TooltipDescription                                          OFFSET(getStruct<T>, {0x20, 24, 0, 0})
	SMember(FText)                                     Category                                                    OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	SMember(FText)                                     Keywords                                                    OFFSET(getStruct<T>, {0x50, 24, 0, 0})
	DMember(int32_t)                                   Grouping                                                    OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	DMember(int32_t)                                   SectionID                                                   OFFSET(get<int32_t>, {0x6C, 4, 0, 0})
	CMember(TArray<FString>)                           MenuDescriptionArray                                        OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FString>)                           FullSearchTitlesArray                                       OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<FString>)                           FullSearchKeywordsArray                                     OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<FString>)                           FullSearchCategoryArray                                     OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TArray<FString>)                           LocalizedMenuDescriptionArray                               OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TArray<FString>)                           LocalizedFullSearchTitlesArray                              OFFSET(get<T>, {0xC0, 16, 0, 0})
	CMember(TArray<FString>)                           LocalizedFullSearchKeywordsArray                            OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(TArray<FString>)                           LocalizedFullSearchCategoryArray                            OFFSET(get<T>, {0xE0, 16, 0, 0})
	SMember(FString)                                   SearchText                                                  OFFSET(getStruct<T>, {0xF0, 16, 0, 0})
};

/// Struct /Script/Engine.EdGraphSchemaAction_NewNode
/// Size: 0x0008 (0x000100 - 0x000108)
class FEdGraphSchemaAction_NewNode : public FEdGraphSchemaAction
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	CMember(class UEdGraphNode*)                       NodeTemplate                                                OFFSET(get<T>, {0x100, 8, 0, 0})
};

/// Struct /Script/Engine.ScreenMessageString
/// Size: 0x0030 (0x000000 - 0x000030)
class FScreenMessageString : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(uint64_t)                                  Key                                                         OFFSET(get<uint64_t>, {0x0, 8, 0, 0})
	SMember(FString)                                   ScreenMessage                                               OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FColor)                                    DisplayColor                                                OFFSET(getStruct<T>, {0x18, 4, 0, 0})
	DMember(float)                                     TimeToDisplay                                               OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     CurrentTimeDisplayed                                        OFFSET(get<float>, {0x20, 4, 0, 0})
	SMember(FVector2D)                                 TextScale                                                   OFFSET(getStruct<T>, {0x24, 8, 0, 0})
};

/// Struct /Script/Engine.URL
/// Size: 0x0068 (0x000000 - 0x000068)
class FURL : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FString)                                   Protocol                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   Host                                                        OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	DMember(int32_t)                                   Port                                                        OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   Valid                                                       OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	SMember(FString)                                   Map                                                         OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   RedirectURL                                                 OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	CMember(TArray<FString>)                           Op                                                          OFFSET(get<T>, {0x48, 16, 0, 0})
	SMember(FString)                                   Portal                                                      OFFSET(getStruct<T>, {0x58, 16, 0, 0})
};

/// Struct /Script/Engine.FullyLoadedPackagesInfo
/// Size: 0x0038 (0x000000 - 0x000038)
class FFullyLoadedPackagesInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TEnumAsByte<EFullyLoadPackageType>)        FullyLoadType                                               OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FString)                                   Tag                                                         OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	CMember(TArray<FName>)                             PackagesToLoad                                              OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(TArray<class UObject*>)                    LoadedObjects                                               OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/Engine.LevelStreamingStatus
/// Size: 0x0010 (0x000000 - 0x000010)
class FLevelStreamingStatus : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     PackageName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bShouldBeLoaded                                             OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      bShouldBeVisible                                            OFFSET(get<bool>, {0x8, 1, 1, 1})
	DMember(uint32_t)                                  LODIndex                                                    OFFSET(get<uint32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.NamedNetDriver
/// Size: 0x0010 (0x000000 - 0x000010)
class FNamedNetDriver : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UNetDriver*)                         NetDriver                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.WorldContext
/// Size: 0x0288 (0x000000 - 0x000288)
class FWorldContext : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	SMember(FURL)                                      LastURL                                                     OFFSET(getStruct<T>, {0xD0, 104, 0, 0})
	SMember(FURL)                                      LastRemoteURL                                               OFFSET(getStruct<T>, {0x138, 104, 0, 0})
	CMember(class UPendingNetGame*)                    PendingNetGame                                              OFFSET(get<T>, {0x1A0, 8, 0, 0})
	CMember(TArray<FFullyLoadedPackagesInfo>)          PackagesToFullyLoad                                         OFFSET(get<T>, {0x1A8, 16, 0, 0})
	CMember(TArray<class ULevel*>)                     LoadedLevelsForPendingMapChange                             OFFSET(get<T>, {0x1C8, 16, 0, 0})
	CMember(TArray<class UObjectReferencer*>)          ObjectReferencers                                           OFFSET(get<T>, {0x1F0, 16, 0, 0})
	CMember(TArray<FLevelStreamingStatus>)             PendingLevelStreamingStatusUpdates                          OFFSET(get<T>, {0x200, 16, 0, 0})
	CMember(class UGameViewportClient*)                GameViewport                                                OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(class UGameInstance*)                      OwningGameInstance                                          OFFSET(get<T>, {0x218, 8, 0, 0})
	CMember(TArray<FNamedNetDriver>)                   ActiveNetDrivers                                            OFFSET(get<T>, {0x220, 16, 0, 0})
};

/// Struct /Script/Engine.ExposureSettings
/// Size: 0x0008 (0x000000 - 0x000008)
class FExposureSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     FixedEV100                                                  OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(bool)                                      bFixed                                                      OFFSET(get<bool>, {0x4, 1, 0, 0})
};

/// Struct /Script/Engine.TickPrerequisite
/// Size: 0x0010 (0x000000 - 0x000010)
class FTickPrerequisite : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.CanvasUVTri
/// Size: 0x0060 (0x000000 - 0x000060)
class FCanvasUVTri : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FVector2D)                                 V0_Pos                                                      OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FVector2D)                                 V0_UV                                                       OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FLinearColor)                              V0_Color                                                    OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FVector2D)                                 V1_Pos                                                      OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	SMember(FVector2D)                                 V1_UV                                                       OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	SMember(FLinearColor)                              V1_Color                                                    OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FVector2D)                                 V2_Pos                                                      OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FVector2D)                                 V2_UV                                                       OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	SMember(FLinearColor)                              V2_Color                                                    OFFSET(getStruct<T>, {0x50, 16, 0, 0})
};

/// Struct /Script/Engine.DepthFieldGlowInfo
/// Size: 0x0024 (0x000000 - 0x000024)
class FDepthFieldGlowInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	DMember(bool)                                      bEnableGlow                                                 OFFSET(get<bool>, {0x0, 1, 1, 0})
	SMember(FLinearColor)                              GlowColor                                                   OFFSET(getStruct<T>, {0x4, 16, 0, 0})
	SMember(FVector2D)                                 GlowOuterRadius                                             OFFSET(getStruct<T>, {0x14, 8, 0, 0})
	SMember(FVector2D)                                 GlowInnerRadius                                             OFFSET(getStruct<T>, {0x1C, 8, 0, 0})
};

/// Struct /Script/Engine.FontRenderInfo
/// Size: 0x0028 (0x000000 - 0x000028)
class FFontRenderInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(bool)                                      bClipText                                                   OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bEnableShadow                                               OFFSET(get<bool>, {0x0, 1, 1, 1})
	SMember(FDepthFieldGlowInfo)                       GlowInfo                                                    OFFSET(getStruct<T>, {0x4, 36, 0, 0})
};

/// Struct /Script/Engine.DamageEvent
/// Size: 0x0010 (0x000000 - 0x000010)
class FDamageEvent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UClass*)                             DamageTypeClass                                             OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.RadialDamageParams
/// Size: 0x0014 (0x000000 - 0x000014)
class FRadialDamageParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     BaseDamage                                                  OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     MinimumDamage                                               OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     InnerRadius                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     OuterRadius                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     DamageFalloff                                               OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.RadialDamageEvent
/// Size: 0x0030 (0x000010 - 0x000040)
class FRadialDamageEvent : public FDamageEvent
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FRadialDamageParams)                       Params                                                      OFFSET(getStruct<T>, {0x10, 20, 0, 0})
	SMember(FVector)                                   Origin                                                      OFFSET(getStruct<T>, {0x24, 12, 0, 0})
	CMember(TArray<FHitResult>)                        ComponentHits                                               OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Engine.PointDamageEvent
/// Size: 0x00A0 (0x000010 - 0x0000B0)
class FPointDamageEvent : public FDamageEvent
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	DMember(float)                                     Damage                                                      OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FVector_NetQuantizeNormal)                 ShotDirection                                               OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	SMember(FHitResult)                                HitInfo                                                     OFFSET(getStruct<T>, {0x20, 140, 0, 0})
};

/// Struct /Script/Engine.MeshBuildSettings
/// Size: 0x0030 (0x000000 - 0x000030)
class FMeshBuildSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      bUseMikkTSpace                                              OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bRecomputeNormals                                           OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bRecomputeTangents                                          OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bComputeWeightedNormals                                     OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(bool)                                      bRemoveDegenerates                                          OFFSET(get<bool>, {0x0, 1, 1, 4})
	DMember(bool)                                      bBuildAdjacencyBuffer                                       OFFSET(get<bool>, {0x0, 1, 1, 5})
	DMember(bool)                                      bBuildReversedIndexBuffer                                   OFFSET(get<bool>, {0x0, 1, 1, 6})
	DMember(bool)                                      bUseHighPrecisionTangentBasis                               OFFSET(get<bool>, {0x0, 1, 1, 7})
	DMember(bool)                                      bUseFullPrecisionUVs                                        OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(bool)                                      bGenerateLightmapUVs                                        OFFSET(get<bool>, {0x1, 1, 1, 1})
	DMember(bool)                                      bGenerateDistanceFieldAsIfTwoSided                          OFFSET(get<bool>, {0x1, 1, 1, 2})
	DMember(bool)                                      bSupportFaceRemap                                           OFFSET(get<bool>, {0x1, 1, 1, 3})
	DMember(int32_t)                                   MinLightmapResolution                                       OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   SrcLightmapIndex                                            OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   DstLightmapIndex                                            OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(float)                                     BuildScale                                                  OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FVector)                                   BuildScale3D                                                OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	DMember(float)                                     DistanceFieldResolutionScale                                OFFSET(get<float>, {0x20, 4, 0, 0})
	CMember(class UStaticMesh*)                        DistanceFieldReplacementMesh                                OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.POV
/// Size: 0x001C (0x000000 - 0x00001C)
class FPOV : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	DMember(float)                                     FOV                                                         OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.AnimUpdateRateParameters
/// Size: 0x0088 (0x000000 - 0x000088)
class FAnimUpdateRateParameters : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(EUpdateRateShiftBucket)                    ShiftBucket                                                 OFFSET(get<T>, {0x1, 1, 0, 0})
	DMember(bool)                                      bInterpolateSkippedFrames                                   OFFSET(get<bool>, {0x2, 1, 1, 0})
	DMember(bool)                                      bShouldUseLodMap                                            OFFSET(get<bool>, {0x2, 1, 1, 1})
	DMember(bool)                                      bShouldUseMinLod                                            OFFSET(get<bool>, {0x2, 1, 1, 2})
	DMember(bool)                                      bSkipUpdate                                                 OFFSET(get<bool>, {0x2, 1, 1, 3})
	DMember(bool)                                      bSkipEvaluation                                             OFFSET(get<bool>, {0x2, 1, 1, 4})
	DMember(int32_t)                                   UpdateRate                                                  OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   EvaluationRate                                              OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     TickedPoseOffestTime                                        OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     AdditionalTime                                              OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   BaseNonRenderedUpdateRate                                   OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   MaxEvalRateForInterpolation                                 OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	CMember(TArray<float>)                             BaseVisibleDistanceFactorThesholds                          OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TMap<int32_t, int32_t>)                    LODToFrameSkipMap                                           OFFSET(get<T>, {0x30, 80, 0, 0})
	DMember(int32_t)                                   SkippedUpdateFrames                                         OFFSET(get<int32_t>, {0x80, 4, 0, 0})
	DMember(int32_t)                                   SkippedEvalFrames                                           OFFSET(get<int32_t>, {0x84, 4, 0, 0})
};

/// Struct /Script/Engine.AnimSlotDesc
/// Size: 0x000C (0x000000 - 0x00000C)
class FAnimSlotDesc : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     SlotName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   NumChannels                                                 OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.AnimSlotInfo
/// Size: 0x0018 (0x000000 - 0x000018)
class FAnimSlotInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     SlotName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<float>)                             ChannelWeights                                              OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.MTDResult
/// Size: 0x0010 (0x000000 - 0x000010)
class FMTDResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FVector)                                   Direction                                                   OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(float)                                     Distance                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.OverlapResult
/// Size: 0x0018 (0x000000 - 0x000018)
class FOverlapResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TWeakObjectPtr<class AActor*>)             Actor                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UPrimitiveComponent*>) Component                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bBlockingHit                                                OFFSET(get<bool>, {0x14, 1, 1, 0})
};

/// Struct /Script/Engine.SwarmDebugOptions
/// Size: 0x0004 (0x000000 - 0x000004)
class FSwarmDebugOptions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bDistributionEnabled                                        OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bForceContentExport                                         OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bInitialized                                                OFFSET(get<bool>, {0x0, 1, 1, 2})
};

/// Struct /Script/Engine.LightmassDebugOptions
/// Size: 0x0010 (0x000000 - 0x000010)
class FLightmassDebugOptions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(bool)                                      bDebugMode                                                  OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bStatsEnabled                                               OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bGatherBSPSurfacesAcrossComponents                          OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(float)                                     CoplanarTolerance                                           OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(bool)                                      bUseImmediateImport                                         OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      bImmediateProcessMappings                                   OFFSET(get<bool>, {0x8, 1, 1, 1})
	DMember(bool)                                      bSortMappings                                               OFFSET(get<bool>, {0x8, 1, 1, 2})
	DMember(bool)                                      bDumpBinaryFiles                                            OFFSET(get<bool>, {0x8, 1, 1, 3})
	DMember(bool)                                      bDebugMaterials                                             OFFSET(get<bool>, {0x8, 1, 1, 4})
	DMember(bool)                                      bPadMappings                                                OFFSET(get<bool>, {0x8, 1, 1, 5})
	DMember(bool)                                      bDebugPaddings                                              OFFSET(get<bool>, {0x8, 1, 1, 6})
	DMember(bool)                                      bOnlyCalcDebugTexelMappings                                 OFFSET(get<bool>, {0x8, 1, 1, 7})
	DMember(bool)                                      bUseRandomColors                                            OFFSET(get<bool>, {0x9, 1, 1, 0})
	DMember(bool)                                      bColorBordersGreen                                          OFFSET(get<bool>, {0x9, 1, 1, 1})
	DMember(bool)                                      bColorByExecutionTime                                       OFFSET(get<bool>, {0x9, 1, 1, 2})
	DMember(float)                                     ExecutionTimeDivisor                                        OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.BasedPosition
/// Size: 0x0038 (0x000000 - 0x000038)
class FBasedPosition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class AActor*)                             Base                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	SMember(FVector)                                   CachedBaseLocation                                          OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	SMember(FRotator)                                  CachedBaseRotation                                          OFFSET(getStruct<T>, {0x20, 12, 0, 0})
	SMember(FVector)                                   CachedTransPosition                                         OFFSET(getStruct<T>, {0x2C, 12, 0, 0})
};

/// Struct /Script/Engine.FractureEffect
/// Size: 0x0010 (0x000000 - 0x000010)
class FFractureEffect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UParticleSystem*)                    ParticleSystem                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class USoundBase*)                         Sound                                                       OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.RigidBodyContactInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FRigidBodyContactInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FVector)                                   ContactPosition                                             OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   ContactNormal                                               OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	DMember(float)                                     ContactPenetration                                          OFFSET(get<float>, {0x18, 4, 0, 0})
	CMember(class UPhysicalMaterial*)                  PhysMaterial                                                OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Engine.CollisionImpactData
/// Size: 0x0030 (0x000000 - 0x000030)
class FCollisionImpactData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<FRigidBodyContactInfo>)             ContactInfos                                                OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FVector)                                   TotalNormalImpulse                                          OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	SMember(FVector)                                   TotalFrictionImpulse                                        OFFSET(getStruct<T>, {0x1C, 12, 0, 0})
	DMember(bool)                                      bIsVelocityDeltaUnderThreshold                              OFFSET(get<bool>, {0x28, 1, 0, 0})
};

/// Struct /Script/Engine.RigidBodyState
/// Size: 0x0040 (0x000000 - 0x000040)
class FRigidBodyState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FVector_NetQuantize100)                    Position                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FQuat)                                     Quaternion                                                  OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FVector_NetQuantize100)                    LinVel                                                      OFFSET(getStruct<T>, {0x20, 12, 0, 0})
	SMember(FVector_NetQuantize100)                    AngVel                                                      OFFSET(getStruct<T>, {0x2C, 12, 0, 0})
	DMember(char)                                      Flags                                                       OFFSET(get<char>, {0x38, 1, 0, 0})
};

/// Struct /Script/Engine.ForceFeedbackParameters
/// Size: 0x000C (0x000000 - 0x00000C)
class FForceFeedbackParameters : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     Tag                                                         OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(bool)                                      bIgnoreTimeDilation                                         OFFSET(get<bool>, {0x9, 1, 0, 0})
	DMember(bool)                                      bPlayWhilePaused                                            OFFSET(get<bool>, {0xA, 1, 0, 0})
};

/// Struct /Script/Engine.PredictProjectilePathPointData
/// Size: 0x001C (0x000000 - 0x00001C)
class FPredictProjectilePathPointData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   Velocity                                                    OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.PredictProjectilePathResult
/// Size: 0x00B8 (0x000000 - 0x0000B8)
class FPredictProjectilePathResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(TArray<FPredictProjectilePathPointData>)   PathData                                                    OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FPredictProjectilePathPointData)           LastTraceDestination                                        OFFSET(getStruct<T>, {0x10, 28, 0, 0})
	SMember(FHitResult)                                HitResult                                                   OFFSET(getStruct<T>, {0x2C, 140, 0, 0})
};

/// Struct /Script/Engine.PredictProjectilePathParams
/// Size: 0x0060 (0x000000 - 0x000060)
class FPredictProjectilePathParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FVector)                                   StartLocation                                               OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   LaunchVelocity                                              OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	DMember(bool)                                      bTraceWithCollision                                         OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(float)                                     ProjectileRadius                                            OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     MaxSimTime                                                  OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(bool)                                      bTraceWithChannel                                           OFFSET(get<bool>, {0x24, 1, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            TraceChannel                                                OFFSET(get<T>, {0x25, 1, 0, 0})
	CMember(TArray<TEnumAsByte<EObjectTypeQuery>>)     ObjectTypes                                                 OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<class AActor*>)                     ActorsToIgnore                                              OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(float)                                     SimFrequency                                                OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     OverrideGravityZ                                            OFFSET(get<float>, {0x4C, 4, 0, 0})
	CMember(TEnumAsByte<EDrawDebugTrace>)              DrawDebugType                                               OFFSET(get<T>, {0x50, 1, 0, 0})
	DMember(float)                                     DrawDebugTime                                               OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(bool)                                      bTraceComplex                                               OFFSET(get<bool>, {0x58, 1, 0, 0})
};

/// Struct /Script/Engine.ActiveHapticFeedbackEffect
/// Size: 0x0018 (0x000000 - 0x000018)
class FActiveHapticFeedbackEffect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UHapticFeedbackEffect_Base*)         HapticEffect                                                OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.ClusterNode
/// Size: 0x0040 (0x000000 - 0x000040)
class FClusterNode : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FVector)                                   BoundMin                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(int32_t)                                   FirstChild                                                  OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	SMember(FVector)                                   BoundMax                                                    OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	DMember(int32_t)                                   LastChild                                                   OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   FirstInstance                                               OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   LastInstance                                                OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	SMember(FVector)                                   MinInstanceScale                                            OFFSET(getStruct<T>, {0x28, 12, 0, 0})
	SMember(FVector)                                   MaxInstanceScale                                            OFFSET(getStruct<T>, {0x34, 12, 0, 0})
};

/// Struct /Script/Engine.ClusterNode_DEPRECATED
/// Size: 0x0028 (0x000000 - 0x000028)
class FClusterNode_DEPRECATED : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FVector)                                   BoundMin                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(int32_t)                                   FirstChild                                                  OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	SMember(FVector)                                   BoundMax                                                    OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	DMember(int32_t)                                   LastChild                                                   OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   FirstInstance                                               OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   LastInstance                                                OFFSET(get<int32_t>, {0x24, 4, 0, 0})
};

/// Struct /Script/Engine.HLODISMComponentDesc
/// Size: 0x0020 (0x000000 - 0x000020)
class FHLODISMComponentDesc : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UStaticMesh*)                        StaticMesh                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UMaterialInterface*)                 Material                                                    OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(TArray<FTransform>)                        Instances                                                   OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.ImportanceTexture
/// Size: 0x0050 (0x000000 - 0x000050)
class FImportanceTexture : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FIntPoint)                                 Size                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   NumMips                                                     OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(TArray<float>)                             MarginalCDF                                                 OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<float>)                             ConditionalCDF                                              OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FColor>)                            TextureData                                                 OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         Texture                                                     OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(TEnumAsByte<EImportanceWeight>)            Weighting                                                   OFFSET(get<T>, {0x48, 1, 0, 0})
};

/// Struct /Script/Engine.InstancedStaticMeshLightMapInstanceData
/// Size: 0x0040 (0x000000 - 0x000040)
class FInstancedStaticMeshLightMapInstanceData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FTransform)                                Transform                                                   OFFSET(getStruct<T>, {0x0, 48, 0, 0})
	CMember(TArray<FGuid>)                             MapBuildDataIds                                             OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Engine.InstancedStaticMeshComponentInstanceData
/// Size: 0x0098 (0x0000B8 - 0x000150)
class FInstancedStaticMeshComponentInstanceData : public FSceneComponentInstanceData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	CMember(class UStaticMesh*)                        StaticMesh                                                  OFFSET(get<T>, {0xB8, 8, 0, 0})
	SMember(FInstancedStaticMeshLightMapInstanceData)  CachedStaticLighting                                        OFFSET(getStruct<T>, {0xC0, 64, 0, 0})
	CMember(TArray<FInstancedStaticMeshInstanceData>)  PerInstanceSMData                                           OFFSET(get<T>, {0x100, 16, 0, 0})
	CMember(TArray<float>)                             PerInstanceSMCustomData                                     OFFSET(get<T>, {0x110, 16, 0, 0})
	DMember(int32_t)                                   InstancingRandomSeed                                        OFFSET(get<int32_t>, {0x140, 4, 0, 0})
};

/// Struct /Script/Engine.InterpEdSelKey
/// Size: 0x0018 (0x000000 - 0x000018)
class FInterpEdSelKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UInterpGroup*)                       Group                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UInterpTrack*)                       Track                                                       OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   KeyIndex                                                    OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(float)                                     UnsnappedPosition                                           OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Struct /Script/Engine.CameraPreviewInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FCameraPreviewInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UClass*)                             PawnClass                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UAnimSequence*)                      AnimSeq                                                     OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x1C, 12, 0, 0})
	CMember(class APawn*)                              PawnInst                                                    OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/Engine.SubTrackGroup
/// Size: 0x0028 (0x000000 - 0x000028)
class FSubTrackGroup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FString)                                   GroupName                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<int32_t>)                           TrackIndices                                                OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(bool)                                      bIsCollapsed                                                OFFSET(get<bool>, {0x20, 1, 1, 0})
	DMember(bool)                                      bIsSelected                                                 OFFSET(get<bool>, {0x20, 1, 1, 1})
};

/// Struct /Script/Engine.SupportedSubTrackInfo
/// Size: 0x0020 (0x000000 - 0x000020)
class FSupportedSubTrackInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UClass*)                             SupportedClass                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FString)                                   SubTrackName                                                OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   GroupIndex                                                  OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/Engine.VectorSpringState
/// Size: 0x0018 (0x000000 - 0x000018)
class FVectorSpringState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Engine.FloatSpringState
/// Size: 0x0008 (0x000000 - 0x000008)
class FFloatSpringState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.DrawToRenderTargetContext
/// Size: 0x0010 (0x000000 - 0x000010)
class FDrawToRenderTargetContext : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UTextureRenderTarget2D*)             RenderTarget                                                OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Engine.LatentActionManager
/// Size: 0x0060 (0x000000 - 0x000060)
class FLatentActionManager : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Struct /Script/Engine.LevelSimplificationDetails
/// Size: 0x012C (0x000000 - 0x00012C)
class FLevelSimplificationDetails : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 300;

public:
	DMember(bool)                                      bCreatePackagePerAsset                                      OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     DetailsPercentage                                           OFFSET(get<float>, {0x4, 4, 0, 0})
	SMember(FMaterialProxySettings)                    StaticMeshMaterialSettings                                  OFFSET(getStruct<T>, {0x8, 136, 0, 0})
	DMember(bool)                                      bOverrideLandscapeExportLOD                                 OFFSET(get<bool>, {0x90, 1, 0, 0})
	DMember(int32_t)                                   LandscapeExportLOD                                          OFFSET(get<int32_t>, {0x94, 4, 0, 0})
	SMember(FMaterialProxySettings)                    LandscapeMaterialSettings                                   OFFSET(getStruct<T>, {0x98, 136, 0, 0})
	DMember(bool)                                      bBakeFoliageToLandscape                                     OFFSET(get<bool>, {0x120, 1, 0, 0})
	DMember(bool)                                      bBakeGrassToLandscape                                       OFFSET(get<bool>, {0x121, 1, 0, 0})
	DMember(bool)                                      bGenerateMeshNormalMap                                      OFFSET(get<bool>, {0x122, 1, 0, 0})
	DMember(bool)                                      bGenerateMeshMetallicMap                                    OFFSET(get<bool>, {0x123, 1, 0, 0})
	DMember(bool)                                      bGenerateMeshRoughnessMap                                   OFFSET(get<bool>, {0x124, 1, 0, 0})
	DMember(bool)                                      bGenerateMeshSpecularMap                                    OFFSET(get<bool>, {0x125, 1, 0, 0})
	DMember(bool)                                      bGenerateLandscapeNormalMap                                 OFFSET(get<bool>, {0x126, 1, 0, 0})
	DMember(bool)                                      bGenerateLandscapeMetallicMap                               OFFSET(get<bool>, {0x127, 1, 0, 0})
	DMember(bool)                                      bGenerateLandscapeRoughnessMap                              OFFSET(get<bool>, {0x128, 1, 0, 0})
	DMember(bool)                                      bGenerateLandscapeSpecularMap                               OFFSET(get<bool>, {0x129, 1, 0, 0})
};

/// Struct /Script/Engine.StreamableTextureInstance
/// Size: 0x0028 (0x000000 - 0x000028)
class FStreamableTextureInstance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Engine.DynamicTextureInstance
/// Size: 0x0010 (0x000028 - 0x000038)
class FDynamicTextureInstance : public FStreamableTextureInstance
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UTexture2D*)                         Texture                                                     OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      bAttached                                                   OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(float)                                     OriginalRadius                                              OFFSET(get<float>, {0x34, 4, 0, 0})
};

/// Struct /Script/Engine.PrecomputedLightInstanceData
/// Size: 0x0058 (0x0000B8 - 0x000110)
class FPrecomputedLightInstanceData : public FSceneComponentInstanceData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FTransform)                                Transform                                                   OFFSET(getStruct<T>, {0xC0, 48, 0, 0})
	SMember(FGuid)                                     LightGuid                                                   OFFSET(getStruct<T>, {0xF0, 16, 0, 0})
	DMember(int32_t)                                   PreviewShadowMapChannel                                     OFFSET(get<int32_t>, {0x100, 4, 0, 0})
};

/// Struct /Script/Engine.BatchedPoint
/// Size: 0x0028 (0x000000 - 0x000028)
class FBatchedPoint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FLinearColor)                              Color                                                       OFFSET(getStruct<T>, {0xC, 16, 0, 0})
	DMember(float)                                     PointSize                                                   OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     RemainingLifeTime                                           OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(char)                                      DepthPriority                                               OFFSET(get<char>, {0x24, 1, 0, 0})
};

/// Struct /Script/Engine.BatchedLine
/// Size: 0x0034 (0x000000 - 0x000034)
class FBatchedLine : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 52;

public:
	SMember(FVector)                                   Start                                                       OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   End                                                         OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FLinearColor)                              Color                                                       OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	DMember(float)                                     Thickness                                                   OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     RemainingLifeTime                                           OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(char)                                      DepthPriority                                               OFFSET(get<char>, {0x30, 1, 0, 0})
};

/// Struct /Script/Engine.ClientReceiveData
/// Size: 0x0040 (0x000000 - 0x000040)
class FClientReceiveData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class APlayerController*)                  LocalPC                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     MessageType                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   MessageIndex                                                OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	SMember(FString)                                   MessageString                                               OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	CMember(class APlayerState*)                       RelatedPlayerState                                          OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class APlayerState*)                       RelatedPlayerState1                                         OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UObject*)                            OptionalObject                                              OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Struct /Script/Engine.ParameterGroupData
/// Size: 0x0018 (0x000000 - 0x000018)
class FParameterGroupData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   GroupName                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   GroupSortPriority                                           OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.StaticComponentMaskValue
/// Size: 0x0004 (0x000000 - 0x000004)
class FStaticComponentMaskValue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      R                                                           OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      G                                                           OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      B                                                           OFFSET(get<bool>, {0x2, 1, 0, 0})
	DMember(bool)                                      A                                                           OFFSET(get<bool>, {0x3, 1, 0, 0})
};

/// Struct /Script/Engine.ParameterChannelNames
/// Size: 0x0060 (0x000000 - 0x000060)
class FParameterChannelNames : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FText)                                     R                                                           OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     G                                                           OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	SMember(FText)                                     B                                                           OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	SMember(FText)                                     A                                                           OFFSET(getStruct<T>, {0x48, 24, 0, 0})
};

/// Struct /Script/Engine.FunctionExpressionOutput
/// Size: 0x0020 (0x000000 - 0x000020)
class FFunctionExpressionOutput : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UMaterialExpressionFunctionOutput*)  ExpressionOutput                                            OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FGuid)                                     ExpressionOutputId                                          OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FExpressionOutput)                         Output                                                      OFFSET(getStruct<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/Engine.FunctionExpressionInput
/// Size: 0x0030 (0x000000 - 0x000030)
class FFunctionExpressionInput : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UMaterialExpressionFunctionInput*)   ExpressionInput                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FGuid)                                     ExpressionInputId                                           OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FExpressionInput)                          Input                                                       OFFSET(getStruct<T>, {0x18, 12, 0, 0})
};

/// Struct /Script/Engine.ScalarParameterAtlasInstanceData
/// Size: 0x0058 (0x000000 - 0x000058)
class FScalarParameterAtlasInstanceData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(bool)                                      bIsUsedAsAtlasPosition                                      OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(TWeakObjectPtr<class UCurveLinearColor*>)  Curve                                                       OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UCurveLinearColorAtlas*>) Atlas                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/Engine.MemberReference
/// Size: 0x0038 (0x000000 - 0x000038)
class FMemberReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UObject*)                            MemberParent                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FString)                                   MemberScope                                                 OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FName)                                     MemberName                                                  OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FGuid)                                     MemberGuid                                                  OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	DMember(bool)                                      bSelfContext                                                OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(bool)                                      bWasDeprecated                                              OFFSET(get<bool>, {0x31, 1, 0, 0})
};

/// Struct /Script/Engine.MeshInstancingSettings
/// Size: 0x0018 (0x000000 - 0x000018)
class FMeshInstancingSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UClass*)                             ActorClassToUse                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   InstanceReplacementThreshold                                OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(EMeshInstancingReplacementMethod)          MeshReplacementMethod                                       OFFSET(get<T>, {0xC, 1, 0, 0})
	DMember(bool)                                      bSkipMeshesWithVertexColors                                 OFFSET(get<bool>, {0xD, 1, 0, 0})
	DMember(bool)                                      bUseHLODVolumes                                             OFFSET(get<bool>, {0xE, 1, 0, 0})
	CMember(class UClass*)                             ISMComponentToUse                                           OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.MeshReductionSettings
/// Size: 0x0024 (0x000000 - 0x000024)
class FMeshReductionSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	DMember(float)                                     PercentTriangles                                            OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     PercentVertices                                             OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     MaxDeviation                                                OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     PixelError                                                  OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     WeldingThreshold                                            OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     HardAngleThreshold                                          OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   BaseLODModel                                                OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	CMember(TEnumAsByte<EMeshFeatureImportance>)       SilhouetteImportance                                        OFFSET(get<T>, {0x1C, 1, 0, 0})
	CMember(TEnumAsByte<EMeshFeatureImportance>)       TextureImportance                                           OFFSET(get<T>, {0x1D, 1, 0, 0})
	CMember(TEnumAsByte<EMeshFeatureImportance>)       ShadingImportance                                           OFFSET(get<T>, {0x1E, 1, 0, 0})
	DMember(bool)                                      bRecalculateNormals                                         OFFSET(get<bool>, {0x1F, 1, 1, 0})
	DMember(bool)                                      bGenerateUniqueLightmapUVs                                  OFFSET(get<bool>, {0x1F, 1, 1, 1})
	DMember(bool)                                      bKeepSymmetry                                               OFFSET(get<bool>, {0x1F, 1, 1, 2})
	DMember(bool)                                      bVisibilityAided                                            OFFSET(get<bool>, {0x1F, 1, 1, 3})
	DMember(bool)                                      bCullOccluded                                               OFFSET(get<bool>, {0x1F, 1, 1, 4})
	CMember(EStaticMeshReductionTerimationCriterion)   TerminationCriterion                                        OFFSET(get<T>, {0x20, 1, 0, 0})
	CMember(TEnumAsByte<EMeshFeatureImportance>)       VisibilityAggressiveness                                    OFFSET(get<T>, {0x21, 1, 0, 0})
	CMember(TEnumAsByte<EMeshFeatureImportance>)       VertexColorImportance                                       OFFSET(get<T>, {0x22, 1, 0, 0})
};

/// Struct /Script/Engine.NameCurveKey
/// Size: 0x000C (0x000000 - 0x00000C)
class FNameCurveKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FName)                                     Value                                                       OFFSET(getStruct<T>, {0x4, 8, 0, 0})
};

/// Struct /Script/Engine.NameCurve
/// Size: 0x0010 (0x000068 - 0x000078)
class FNameCurve : public FIndexedCurve
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TArray<FNameCurveKey>)                     Keys                                                        OFFSET(get<T>, {0x68, 16, 0, 0})
};

/// Struct /Script/Engine.NavDataConfig
/// Size: 0x0048 (0x000030 - 0x000078)
class FNavDataConfig : public FNavAgentProperties
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FColor)                                    Color                                                       OFFSET(getStruct<T>, {0x38, 4, 0, 0})
	SMember(FVector)                                   DefaultQueryExtent                                          OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
	CMember(class UClass*)                             NavigationDataClass                                         OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             NavDataClass                                                OFFSET(get<T>, {0x50, 40, 0, 0})
};

/// Struct /Script/Engine.PacketSimulationSettings
/// Size: 0x0034 (0x000000 - 0x000034)
class FPacketSimulationSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 52;

public:
	DMember(int32_t)                                   PktLoss                                                     OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   PktLossMaxSize                                              OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   PktLossMinSize                                              OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   PktOrder                                                    OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   PktDup                                                      OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   PktLag                                                      OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   PktLagVariance                                              OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   PktLagMin                                                   OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   PktLagMax                                                   OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   PktIncomingLagMin                                           OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   PktIncomingLagMax                                           OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   PktIncomingLoss                                             OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(int32_t)                                   PktJitter                                                   OFFSET(get<int32_t>, {0x30, 4, 0, 0})
};

/// Struct /Script/Engine.FastArraySerializer
/// Size: 0x0108 (0x000000 - 0x000108)
class FFastArraySerializer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	DMember(int32_t)                                   ArrayReplicationKey                                         OFFSET(get<int32_t>, {0x54, 4, 0, 0})
	CMember(EFastArraySerializerDeltaFlags)            DeltaFlags                                                  OFFSET(get<T>, {0x100, 1, 0, 0})
};

/// Struct /Script/Engine.FastArraySerializerItem
/// Size: 0x000C (0x000000 - 0x00000C)
class FFastArraySerializerItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   ReplicationID                                               OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   ReplicationKey                                              OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   MostRecentArrayReplicationKey                               OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.ParticleCurvePair
/// Size: 0x0018 (0x000000 - 0x000018)
class FParticleCurvePair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   CurveName                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(class UObject*)                            CurveObject                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Engine.BeamTargetData
/// Size: 0x000C (0x000000 - 0x00000C)
class FBeamTargetData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     TargetName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     TargetPercentage                                            OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.ParticleSystemWorldManagerTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
class FParticleSystemWorldManagerTickFunction : public FTickFunction
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.ParticleSystemReplayFrame
/// Size: 0x0010 (0x000000 - 0x000010)
class FParticleSystemReplayFrame : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.ParticleEmitterReplayFrame
/// Size: 0x0010 (0x000000 - 0x000010)
class FParticleEmitterReplayFrame : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Engine.FreezablePerPlatformInt
/// Size: 0x0004 (0x000000 - 0x000004)
class FFreezablePerPlatformInt : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
};

/// Struct /Script/Engine.ViewTargetTransitionParams
/// Size: 0x0010 (0x000000 - 0x000010)
class FViewTargetTransitionParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     BlendTime                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<EViewTargetBlendFunction>)     BlendFunction                                               OFFSET(get<T>, {0x4, 1, 0, 0})
	DMember(float)                                     BlendExp                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      bLockOutgoing                                               OFFSET(get<bool>, {0xC, 1, 1, 0})
};

/// Struct /Script/Engine.UpdateLevelStreamingLevelStatus
/// Size: 0x0010 (0x000000 - 0x000010)
class FUpdateLevelStreamingLevelStatus : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     PackageName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   LODIndex                                                    OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(bool)                                      bNewShouldBeLoaded                                          OFFSET(get<bool>, {0xC, 1, 1, 0})
	DMember(bool)                                      bNewShouldBeVisible                                         OFFSET(get<bool>, {0xC, 1, 1, 1})
	DMember(bool)                                      bNewShouldBlockOnLoad                                       OFFSET(get<bool>, {0xC, 1, 1, 2})
};

/// Struct /Script/Engine.PlayerMuteList
/// Size: 0x0038 (0x000000 - 0x000038)
class FPlayerMuteList : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bHasVoiceHandshakeCompleted                                 OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(int32_t)                                   VoiceChannelIdx                                             OFFSET(get<int32_t>, {0x34, 4, 0, 0})
};

/// Struct /Script/Engine.PreviewAttachedObjectPair
/// Size: 0x0038 (0x000000 - 0x000038)
class FPreviewAttachedObjectPair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TWeakObjectPtr<class UObject*>)            AttachedObject                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UObject*)                            Object                                                      OFFSET(get<T>, {0x28, 8, 0, 0})
	SMember(FName)                                     AttachedTo                                                  OFFSET(getStruct<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/Engine.PreviewAssetAttachContainer
/// Size: 0x0010 (0x000000 - 0x000010)
class FPreviewAssetAttachContainer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FPreviewAttachedObjectPair>)        AttachedObjects                                             OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.PrimitiveComponentInstanceData
/// Size: 0x0048 (0x0000B8 - 0x000100)
class FPrimitiveComponentInstanceData : public FSceneComponentInstanceData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FTransform)                                ComponentTransform                                          OFFSET(getStruct<T>, {0xC0, 48, 0, 0})
	DMember(int32_t)                                   VisibilityId                                                OFFSET(get<int32_t>, {0xF0, 4, 0, 0})
	CMember(class UPrimitiveComponent*)                LODParent                                                   OFFSET(get<T>, {0xF8, 8, 0, 0})
};

/// Struct /Script/Engine.SpriteCategoryInfo
/// Size: 0x0038 (0x000000 - 0x000038)
class FSpriteCategoryInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     Category                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x20, 24, 0, 0})
};

/// Struct /Script/Engine.QuartzPulseOverrideStep
/// Size: 0x0008 (0x000000 - 0x000008)
class FQuartzPulseOverrideStep : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   NumberOfPulses                                              OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(EQuartzCommandQuantization)                PulseDuration                                               OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Struct /Script/Engine.QuartzTimeSignature
/// Size: 0x0018 (0x000000 - 0x000018)
class FQuartzTimeSignature : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   NumBeats                                                    OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(EQuartzTimeSignatureQuantization)          BeatType                                                    OFFSET(get<T>, {0x4, 1, 0, 0})
	CMember(TArray<FQuartzPulseOverrideStep>)          OptionalPulseOverride                                       OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.QuartzClockSettings
/// Size: 0x0020 (0x000000 - 0x000020)
class FQuartzClockSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FQuartzTimeSignature)                      TimeSignature                                               OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(bool)                                      bIgnoreLevelChange                                          OFFSET(get<bool>, {0x18, 1, 0, 0})
};

/// Struct /Script/Engine.QuartzQuantizationBoundary
/// Size: 0x000C (0x000000 - 0x00000C)
class FQuartzQuantizationBoundary : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	CMember(EQuartzCommandQuantization)                Quantization                                                OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     Multiplier                                                  OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(EQuarztQuantizationReference)              CountingReferencePoint                                      OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/Engine.QuartzTransportTimeStamp
/// Size: 0x000C (0x000000 - 0x00000C)
class FQuartzTransportTimeStamp : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/Engine.LevelNameAndTime
/// Size: 0x0018 (0x000000 - 0x000018)
class FLevelNameAndTime : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   LevelName                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(uint32_t)                                  LevelChangeTimeInMS                                         OFFSET(get<uint32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.CompressedRichCurve
/// Size: 0x0018 (0x000000 - 0x000018)
class FCompressedRichCurve : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Engine.RootMotionSourceStatus
/// Size: 0x0001 (0x000000 - 0x000001)
class FRootMotionSourceStatus : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(char)                                      Flags                                                       OFFSET(get<char>, {0x0, 1, 0, 0})
};

/// Struct /Script/Engine.RootMotionFinishVelocitySettings
/// Size: 0x0014 (0x000000 - 0x000014)
class FRootMotionFinishVelocitySettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	CMember(ERootMotionFinishVelocityMode)             Mode                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FVector)                                   SetVelocity                                                 OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	DMember(float)                                     ClampVelocity                                               OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.RootMotionSource
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FRootMotionSource : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	DMember(uint16_t)                                  Priority                                                    OFFSET(get<uint16_t>, {0x10, 2, 0, 0})
	DMember(uint16_t)                                  LocalID                                                     OFFSET(get<uint16_t>, {0x12, 2, 0, 0})
	CMember(ERootMotionAccumulateMode)                 AccumulateMode                                              OFFSET(get<T>, {0x14, 1, 0, 0})
	SMember(FName)                                     InstanceName                                                OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	DMember(float)                                     StartTime                                                   OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     CurrentTime                                                 OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     PreviousTime                                                OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x2C, 4, 0, 0})
	SMember(FRootMotionSourceStatus)                   status                                                      OFFSET(getStruct<T>, {0x30, 1, 0, 0})
	SMember(FRootMotionSourceSettings)                 Settings                                                    OFFSET(getStruct<T>, {0x31, 1, 0, 0})
	DMember(bool)                                      bInLocalSpace                                               OFFSET(get<bool>, {0x32, 1, 0, 0})
	SMember(FRootMotionMovementParams)                 RootMotionParams                                            OFFSET(getStruct<T>, {0x40, 64, 0, 0})
	SMember(FRootMotionFinishVelocitySettings)         FinishVelocityParams                                        OFFSET(getStruct<T>, {0x80, 20, 0, 0})
};

/// Struct /Script/Engine.RootMotionSource_JumpForce
/// Size: 0x0038 (0x000098 - 0x0000D0)
class FRootMotionSource_JumpForce : public FRootMotionSource
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x98, 12, 0, 0})
	DMember(float)                                     Distance                                                    OFFSET(get<float>, {0xA4, 4, 0, 0})
	DMember(float)                                     Height                                                      OFFSET(get<float>, {0xA8, 4, 0, 0})
	DMember(bool)                                      bDisableTimeout                                             OFFSET(get<bool>, {0xAC, 1, 0, 0})
	CMember(class UCurveVector*)                       PathOffsetCurve                                             OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UCurveFloat*)                        TimeMappingCurve                                            OFFSET(get<T>, {0xB8, 8, 0, 0})
};

/// Struct /Script/Engine.RootMotionSource_MoveToDynamicForce
/// Size: 0x0038 (0x000098 - 0x0000D0)
class FRootMotionSource_MoveToDynamicForce : public FRootMotionSource
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FVector)                                   StartLocation                                               OFFSET(getStruct<T>, {0x98, 12, 0, 0})
	SMember(FVector)                                   InitialTargetLocation                                       OFFSET(getStruct<T>, {0xA4, 12, 0, 0})
	SMember(FVector)                                   TargetLocation                                              OFFSET(getStruct<T>, {0xB0, 12, 0, 0})
	DMember(bool)                                      bRestrictSpeedToExpected                                    OFFSET(get<bool>, {0xBC, 1, 0, 0})
	CMember(class UCurveVector*)                       PathOffsetCurve                                             OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(class UCurveFloat*)                        TimeMappingCurve                                            OFFSET(get<T>, {0xC8, 8, 0, 0})
};

/// Struct /Script/Engine.RootMotionSource_MoveToForce
/// Size: 0x0028 (0x000098 - 0x0000C0)
class FRootMotionSource_MoveToForce : public FRootMotionSource
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FVector)                                   StartLocation                                               OFFSET(getStruct<T>, {0x98, 12, 0, 0})
	SMember(FVector)                                   TargetLocation                                              OFFSET(getStruct<T>, {0xA4, 12, 0, 0})
	DMember(bool)                                      bRestrictSpeedToExpected                                    OFFSET(get<bool>, {0xB0, 1, 0, 0})
	CMember(class UCurveVector*)                       PathOffsetCurve                                             OFFSET(get<T>, {0xB8, 8, 0, 0})
};

/// Struct /Script/Engine.RootMotionSource_RadialForce
/// Size: 0x0048 (0x000098 - 0x0000E0)
class FRootMotionSource_RadialForce : public FRootMotionSource
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x98, 12, 0, 0})
	CMember(class AActor*)                             LocationActor                                               OFFSET(get<T>, {0xA8, 8, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(float)                                     Strength                                                    OFFSET(get<float>, {0xB4, 4, 0, 0})
	DMember(bool)                                      bIsPush                                                     OFFSET(get<bool>, {0xB8, 1, 0, 0})
	DMember(bool)                                      bNoZForce                                                   OFFSET(get<bool>, {0xB9, 1, 0, 0})
	CMember(class UCurveFloat*)                        StrengthDistanceFalloff                                     OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(class UCurveFloat*)                        StrengthOverTime                                            OFFSET(get<T>, {0xC8, 8, 0, 0})
	DMember(bool)                                      bUseFixedWorldDirection                                     OFFSET(get<bool>, {0xD0, 1, 0, 0})
	SMember(FRotator)                                  FixedWorldDirection                                         OFFSET(getStruct<T>, {0xD4, 12, 0, 0})
};

/// Struct /Script/Engine.RootMotionSource_ConstantForce
/// Size: 0x0018 (0x000098 - 0x0000B0)
class FRootMotionSource_ConstantForce : public FRootMotionSource
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FVector)                                   Force                                                       OFFSET(getStruct<T>, {0x98, 12, 0, 0})
	CMember(class UCurveFloat*)                        StrengthOverTime                                            OFFSET(get<T>, {0xA8, 8, 0, 0})
};

/// Struct /Script/Engine.CameraExposureSettings
/// Size: 0x0040 (0x000000 - 0x000040)
class FCameraExposureSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TEnumAsByte<EAutoExposureMethod>)          method                                                      OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     LowPercent                                                  OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     HighPercent                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     MinBrightness                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     MaxBrightness                                               OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     SpeedUp                                                     OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     SpeedDown                                                   OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     Bias                                                        OFFSET(get<float>, {0x1C, 4, 0, 0})
	CMember(class UCurveFloat*)                        BiasCurve                                                   OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UTexture*)                           MeterMask                                                   OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(float)                                     HistogramLogMin                                             OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     HistogramLogMax                                             OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     CalibrationConstant                                         OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(bool)                                      ApplyPhysicalCameraExposure                                 OFFSET(get<bool>, {0x3C, 1, 1, 0})
};

/// Struct /Script/Engine.GaussianSumBloomSettings
/// Size: 0x0084 (0x000000 - 0x000084)
class FGaussianSumBloomSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 132;

public:
	DMember(float)                                     Intensity                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Threshold                                                   OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     SizeScale                                                   OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     Filter1Size                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     Filter2Size                                                 OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     Filter3Size                                                 OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     Filter4Size                                                 OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     Filter5Size                                                 OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     Filter6Size                                                 OFFSET(get<float>, {0x20, 4, 0, 0})
	SMember(FLinearColor)                              Filter1Tint                                                 OFFSET(getStruct<T>, {0x24, 16, 0, 0})
	SMember(FLinearColor)                              Filter2Tint                                                 OFFSET(getStruct<T>, {0x34, 16, 0, 0})
	SMember(FLinearColor)                              Filter3Tint                                                 OFFSET(getStruct<T>, {0x44, 16, 0, 0})
	SMember(FLinearColor)                              Filter4Tint                                                 OFFSET(getStruct<T>, {0x54, 16, 0, 0})
	SMember(FLinearColor)                              Filter5Tint                                                 OFFSET(getStruct<T>, {0x64, 16, 0, 0})
	SMember(FLinearColor)                              Filter6Tint                                                 OFFSET(getStruct<T>, {0x74, 16, 0, 0})
};

/// Struct /Script/Engine.ConvolutionBloomSettings
/// Size: 0x0028 (0x000000 - 0x000028)
class FConvolutionBloomSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class UTexture2D*)                         Texture                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Size                                                        OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FVector2D)                                 CenterUV                                                    OFFSET(getStruct<T>, {0xC, 8, 0, 0})
	DMember(float)                                     PreFilterMin                                                OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     PreFilterMax                                                OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     PreFilterMult                                               OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     BufferScale                                                 OFFSET(get<float>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.LensBloomSettings
/// Size: 0x00B8 (0x000000 - 0x0000B8)
class FLensBloomSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FGaussianSumBloomSettings)                 GaussianSum                                                 OFFSET(getStruct<T>, {0x0, 132, 0, 0})
	SMember(FConvolutionBloomSettings)                 Convolution                                                 OFFSET(getStruct<T>, {0x88, 40, 0, 0})
	CMember(TEnumAsByte<EBloomMethod>)                 method                                                      OFFSET(get<T>, {0xB0, 1, 0, 0})
};

/// Struct /Script/Engine.LensImperfectionSettings
/// Size: 0x0020 (0x000000 - 0x000020)
class FLensImperfectionSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UTexture*)                           DirtMask                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     DirtMaskIntensity                                           OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FLinearColor)                              DirtMaskTint                                                OFFSET(getStruct<T>, {0xC, 16, 0, 0})
};

/// Struct /Script/Engine.LensSettings
/// Size: 0x00E0 (0x000000 - 0x0000E0)
class FLensSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FLensBloomSettings)                        Bloom                                                       OFFSET(getStruct<T>, {0x0, 184, 0, 0})
	SMember(FLensImperfectionSettings)                 Imperfections                                               OFFSET(getStruct<T>, {0xB8, 32, 0, 0})
	DMember(float)                                     ChromaticAberration                                         OFFSET(get<float>, {0xD8, 4, 0, 0})
};

/// Struct /Script/Engine.FilmStockSettings
/// Size: 0x0014 (0x000000 - 0x000014)
class FFilmStockSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     Slope                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Toe                                                         OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Shoulder                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     BlackClip                                                   OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     WhiteClip                                                   OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Engine.ColorGradePerRangeSettings
/// Size: 0x0050 (0x000000 - 0x000050)
class FColorGradePerRangeSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FVector4)                                  Saturation                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FVector4)                                  Contrast                                                    OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FVector4)                                  Gamma                                                       OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FVector4)                                  Gain                                                        OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FVector4)                                  Offset                                                      OFFSET(getStruct<T>, {0x40, 16, 0, 0})
};

/// Struct /Script/Engine.ColorGradingSettings
/// Size: 0x0150 (0x000000 - 0x000150)
class FColorGradingSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	SMember(FColorGradePerRangeSettings)               Global                                                      OFFSET(getStruct<T>, {0x0, 80, 0, 0})
	SMember(FColorGradePerRangeSettings)               Shadows                                                     OFFSET(getStruct<T>, {0x50, 80, 0, 0})
	SMember(FColorGradePerRangeSettings)               Midtones                                                    OFFSET(getStruct<T>, {0xA0, 80, 0, 0})
	SMember(FColorGradePerRangeSettings)               Highlights                                                  OFFSET(getStruct<T>, {0xF0, 80, 0, 0})
	DMember(float)                                     ShadowsMax                                                  OFFSET(get<float>, {0x140, 4, 0, 0})
	DMember(float)                                     HighlightsMin                                               OFFSET(get<float>, {0x144, 4, 0, 0})
};

/// Struct /Script/Engine.SceneViewExtensionIsActiveFunctor
/// Size: 0x0050 (0x000000 - 0x000050)
class FSceneViewExtensionIsActiveFunctor : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Struct /Script/Engine.ClothPhysicsProperties_Legacy
/// Size: 0x0050 (0x000000 - 0x000050)
class FClothPhysicsProperties_Legacy : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     VerticalResistance                                          OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     HorizontalResistance                                        OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     BendResistance                                              OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     ShearResistance                                             OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     Friction                                                    OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     Damping                                                     OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     TetherStiffness                                             OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     TetherLimit                                                 OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     Drag                                                        OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     StiffnessFrequency                                          OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     GravityScale                                                OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     MassScale                                                   OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     InertiaBlend                                                OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     SelfCollisionThickness                                      OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     SelfCollisionSquashScale                                    OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     SelfCollisionStiffness                                      OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     SolverFrequency                                             OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     FiberCompression                                            OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     FiberExpansion                                              OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     FiberResistance                                             OFFSET(get<float>, {0x4C, 4, 0, 0})
};

/// Struct /Script/Engine.ClothingAssetData_Legacy
/// Size: 0x0078 (0x000000 - 0x000078)
class FClothingAssetData_Legacy : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FName)                                     AssetName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FString)                                   ApexFileName                                                OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	DMember(bool)                                      bClothPropertiesChanged                                     OFFSET(get<bool>, {0x18, 1, 0, 0})
	SMember(FClothPhysicsProperties_Legacy)            PhysicsProperties                                           OFFSET(getStruct<T>, {0x1C, 80, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshClothBuildParams
/// Size: 0x0058 (0x000000 - 0x000058)
class FSkeletalMeshClothBuildParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TWeakObjectPtr<class UClothingAssetBase*>) TargetAsset                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   TargetLod                                                   OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(bool)                                      bRemapParameters                                            OFFSET(get<bool>, {0xC, 1, 0, 0})
	SMember(FString)                                   AssetName                                                   OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	DMember(int32_t)                                   LODIndex                                                    OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   SourceSection                                               OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(bool)                                      bRemoveFromMesh                                             OFFSET(get<bool>, {0x28, 1, 0, 0})
	CMember(TWeakObjectPtr<class UPhysicsAsset*>)      PhysicsAsset                                                OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/Engine.BoneMirrorExport
/// Size: 0x0014 (0x000000 - 0x000014)
class FBoneMirrorExport : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     SourceBoneName                                              OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(TEnumAsByte<EAxis>)                        BoneFlipAxis                                                OFFSET(get<T>, {0x10, 1, 0, 0})
};

/// Struct /Script/Engine.SkeletalMeshComponentClothTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
class FSkeletalMeshComponentClothTickFunction : public FTickFunction
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.SkeletalMeshComponentEndPhysicsTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
class FSkeletalMeshComponentEndPhysicsTickFunction : public FTickFunction
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.NameMapping
/// Size: 0x0010 (0x000000 - 0x000010)
class FNameMapping : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     NodeName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.RigConfiguration
/// Size: 0x0018 (0x000000 - 0x000018)
class FRigConfiguration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class URig*)                               Rig                                                         OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<FNameMapping>)                      BoneMappingTable                                            OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.BoneReductionSetting
/// Size: 0x0010 (0x000000 - 0x000010)
class FBoneReductionSetting : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FName>)                             BonesToRemove                                               OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Engine.ReferencePose
/// Size: 0x0018 (0x000000 - 0x000018)
class FReferencePose : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     PoseName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<FTransform>)                        ReferencePose                                               OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.SkeletonToMeshLinkup
/// Size: 0x0020 (0x000000 - 0x000020)
class FSkeletonToMeshLinkup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<int32_t>)                           SkeletonToMeshTable                                         OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<int32_t>)                           MeshToSkeletonTable                                         OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.SkelMeshSkinWeightInfo
/// Size: 0x003C (0x000000 - 0x00003C)
class FSkelMeshSkinWeightInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 60;

public:
	DMember(int32_t)                                   Bones                                                       OFFSET(get<int32_t>, {0x0, 48, 0, 0})
	DMember(char)                                      Weights                                                     OFFSET(get<char>, {0x30, 12, 0, 0})
};

/// Struct /Script/Engine.SkinWeightProfileManagerTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
class FSkinWeightProfileManagerTickFunction : public FTickFunction
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.PrecomputedSkyLightInstanceData
/// Size: 0x00B8 (0x0000B8 - 0x000170)
class FPrecomputedSkyLightInstanceData : public FSceneComponentInstanceData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	SMember(FGuid)                                     LightGuid                                                   OFFSET(getStruct<T>, {0xB8, 16, 0, 0})
	DMember(float)                                     AverageBrightness                                           OFFSET(get<float>, {0xC8, 4, 0, 0})
};

/// Struct /Script/Engine.SmartNameMapping
/// Size: 0x0070 (0x000000 - 0x000070)
class FSmartNameMapping : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Struct /Script/Engine.CurveMetaData
/// Size: 0x0018 (0x000000 - 0x000018)
class FCurveMetaData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Engine.SoundClassEditorData
/// Size: 0x0008 (0x000000 - 0x000008)
class FSoundClassEditorData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.SoundNodeEditorData
/// Size: 0x0008 (0x000000 - 0x000008)
class FSoundNodeEditorData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Engine.SoundSubmixSpectralAnalysisBandSettings
/// Size: 0x0010 (0x000000 - 0x000010)
class FSoundSubmixSpectralAnalysisBandSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     BandFrequency                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   AttackTimeMsec                                              OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   ReleaseTimeMsec                                             OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     QFactor                                                     OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Engine.SoundWaveEnvelopeDataPerSound
/// Size: 0x0010 (0x000000 - 0x000010)
class FSoundWaveEnvelopeDataPerSound : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Envelope                                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     PlaybackTime                                                OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(class USoundWave*)                         SoundWave                                                   OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Engine.SoundWaveSpectralData
/// Size: 0x000C (0x000000 - 0x00000C)
class FSoundWaveSpectralData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     FrequencyHz                                                 OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Magnitude                                                   OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     NormalizedMagnitude                                         OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Engine.SoundWaveSpectralDataPerSound
/// Size: 0x0020 (0x000000 - 0x000020)
class FSoundWaveSpectralDataPerSound : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FSoundWaveSpectralData>)            SpectralData                                                OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(float)                                     PlaybackTime                                                OFFSET(get<float>, {0x10, 4, 0, 0})
	CMember(class USoundWave*)                         SoundWave                                                   OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/Engine.StreamedAudioPlatformData
/// Size: 0x0020 (0x000000 - 0x000020)
class FStreamedAudioPlatformData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/Engine.SplineInstanceData
/// Size: 0x00E8 (0x0000B8 - 0x0001A0)
class FSplineInstanceData : public FSceneComponentInstanceData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	DMember(bool)                                      bSplineHasBeenEdited                                        OFFSET(get<bool>, {0xB8, 1, 0, 0})
	SMember(FSplineCurves)                             SplineCurves                                                OFFSET(getStruct<T>, {0xC0, 112, 0, 0})
	SMember(FSplineCurves)                             SplineCurvesPreUCS                                          OFFSET(getStruct<T>, {0x130, 112, 0, 0})
};

/// Struct /Script/Engine.SplinePoint
/// Size: 0x0044 (0x000000 - 0x000044)
class FSplinePoint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 68;

public:
	DMember(float)                                     InputKey                                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	SMember(FVector)                                   ArriveTangent                                               OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	SMember(FVector)                                   LeaveTangent                                                OFFSET(getStruct<T>, {0x1C, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x28, 12, 0, 0})
	SMember(FVector)                                   Scale                                                       OFFSET(getStruct<T>, {0x34, 12, 0, 0})
	CMember(TEnumAsByte<ESplinePointType>)             Type                                                        OFFSET(get<T>, {0x40, 1, 0, 0})
};

/// Struct /Script/Engine.SplineMeshInstanceData
/// Size: 0x0030 (0x0000B8 - 0x0000E8)
class FSplineMeshInstanceData : public FSceneComponentInstanceData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FVector)                                   StartPos                                                    OFFSET(getStruct<T>, {0xB8, 12, 0, 0})
	SMember(FVector)                                   EndPos                                                      OFFSET(getStruct<T>, {0xC4, 12, 0, 0})
	SMember(FVector)                                   StartTangent                                                OFFSET(getStruct<T>, {0xD0, 12, 0, 0})
	SMember(FVector)                                   EndTangent                                                  OFFSET(getStruct<T>, {0xDC, 12, 0, 0})
};

/// Struct /Script/Engine.MaterialRemapIndex
/// Size: 0x0018 (0x000000 - 0x000018)
class FMaterialRemapIndex : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(uint32_t)                                  ImportVersionKey                                            OFFSET(get<uint32_t>, {0x0, 4, 0, 0})
	CMember(TArray<int32_t>)                           MaterialRemap                                               OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Engine.AssetEditorOrbitCameraPosition
/// Size: 0x0028 (0x000000 - 0x000028)
class FAssetEditorOrbitCameraPosition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(bool)                                      bIsSet                                                      OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FVector)                                   CamOrbitPoint                                               OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	SMember(FVector)                                   CamOrbitZoom                                                OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	SMember(FRotator)                                  CamOrbitRotation                                            OFFSET(getStruct<T>, {0x1C, 12, 0, 0})
};

/// Struct /Script/Engine.MeshSectionInfo
/// Size: 0x0008 (0x000000 - 0x000008)
class FMeshSectionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   MaterialIndex                                               OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(bool)                                      bEnableCollision                                            OFFSET(get<bool>, {0x4, 1, 0, 0})
	DMember(bool)                                      bCastShadow                                                 OFFSET(get<bool>, {0x5, 1, 0, 0})
	DMember(bool)                                      bVisibleInRayTracing                                        OFFSET(get<bool>, {0x6, 1, 0, 0})
	DMember(bool)                                      bForceOpaque                                                OFFSET(get<bool>, {0x7, 1, 0, 0})
};

/// Struct /Script/Engine.MeshSectionInfoMap
/// Size: 0x0050 (0x000000 - 0x000050)
class FMeshSectionInfoMap : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TMap<uint32_t, FMeshSectionInfo>)          Map                                                         OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/Engine.StaticMeshSourceModel
/// Size: 0x0070 (0x000000 - 0x000070)
class FStaticMeshSourceModel : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FMeshBuildSettings)                        BuildSettings                                               OFFSET(getStruct<T>, {0x0, 48, 0, 0})
	SMember(FMeshReductionSettings)                    ReductionSettings                                           OFFSET(getStruct<T>, {0x30, 36, 0, 0})
	DMember(float)                                     LODDistance                                                 OFFSET(get<float>, {0x54, 4, 0, 0})
	SMember(FPerPlatformFloat)                         ScreenSize                                                  OFFSET(getStruct<T>, {0x58, 4, 0, 0})
	SMember(FString)                                   SourceImportFilename                                        OFFSET(getStruct<T>, {0x60, 16, 0, 0})
};

/// Struct /Script/Engine.StaticMeshOptimizationSettings
/// Size: 0x001C (0x000000 - 0x00001C)
class FStaticMeshOptimizationSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	CMember(TEnumAsByte<EOptimizationType>)            ReductionMethod                                             OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     NumOfTrianglesPercentage                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     MaxDeviationPercentage                                      OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     WeldingThreshold                                            OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(bool)                                      bRecalcNormals                                              OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(float)                                     NormalsThreshold                                            OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(char)                                      SilhouetteImportance                                        OFFSET(get<char>, {0x18, 1, 0, 0})
	DMember(char)                                      TextureImportance                                           OFFSET(get<char>, {0x19, 1, 0, 0})
	DMember(char)                                      ShadingImportance                                           OFFSET(get<char>, {0x1A, 1, 0, 0})
};

/// Struct /Script/Engine.PaintedVertex
/// Size: 0x0020 (0x000000 - 0x000020)
class FPaintedVertex : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FColor)                                    Color                                                       OFFSET(getStruct<T>, {0xC, 4, 0, 0})
	SMember(FVector4)                                  Normal                                                      OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Engine.StaticMeshVertexColorLODData
/// Size: 0x0028 (0x000000 - 0x000028)
class FStaticMeshVertexColorLODData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<FPaintedVertex>)                    PaintedVertices                                             OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FColor>)                            VertexBufferColors                                          OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(uint32_t)                                  LODIndex                                                    OFFSET(get<uint32_t>, {0x20, 4, 0, 0})
};

/// Struct /Script/Engine.StaticMeshComponentInstanceData
/// Size: 0x0040 (0x000100 - 0x000140)
class FStaticMeshComponentInstanceData : public FPrimitiveComponentInstanceData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	CMember(class UStaticMesh*)                        StaticMesh                                                  OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(TArray<FStaticMeshVertexColorLODData>)     VertexColorLODs                                             OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(TArray<FGuid>)                             CachedStaticLighting                                        OFFSET(get<T>, {0x118, 16, 0, 0})
	CMember(TArray<FStreamingTextureBuildInfo>)        StreamingTextureData                                        OFFSET(get<T>, {0x128, 16, 0, 0})
};

/// Struct /Script/Engine.TextureFormatSettings
/// Size: 0x0002 (0x000000 - 0x000002)
class FTextureFormatSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2;

public:
	CMember(TEnumAsByte<TextureCompressionSettings>)   CompressionSettings                                         OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(bool)                                      CompressionNoAlpha                                          OFFSET(get<bool>, {0x1, 1, 1, 0})
	DMember(bool)                                      CompressionNone                                             OFFSET(get<bool>, {0x1, 1, 1, 1})
	DMember(bool)                                      CompressionYCoCg                                            OFFSET(get<bool>, {0x1, 1, 1, 2})
	DMember(bool)                                      SRGB                                                        OFFSET(get<bool>, {0x1, 1, 1, 3})
};

/// Struct /Script/Engine.TexturePlatformData
/// Size: 0x0030 (0x000000 - 0x000030)
class FTexturePlatformData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.TextureSource
/// Size: 0x0038 (0x000000 - 0x000038)
class FTextureSource : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Struct /Script/Engine.TextureSourceBlock
/// Size: 0x0018 (0x000000 - 0x000018)
class FTextureSourceBlock : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   BlockX                                                      OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   BlockY                                                      OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   SizeX                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   SizeY                                                       OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   NumSlices                                                   OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   NumMips                                                     OFFSET(get<int32_t>, {0x14, 4, 0, 0})
};

/// Struct /Script/Engine.StreamingRenderAssetPrimitiveInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FStreamingRenderAssetPrimitiveInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UStreamableRenderAsset*)             RenderAsset                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FBoxSphereBounds)                          Bounds                                                      OFFSET(getStruct<T>, {0x8, 28, 0, 0})
	DMember(float)                                     TexelFactor                                                 OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(uint32_t)                                  PackedRelativeBox                                           OFFSET(get<uint32_t>, {0x28, 4, 0, 0})
	DMember(bool)                                      bAllowInvalidTexelFactorWhenUnregistered                    OFFSET(get<bool>, {0x2C, 1, 1, 0})
};

/// Struct /Script/Engine.TTTrackId
/// Size: 0x0008 (0x000000 - 0x000008)
class FTTTrackId : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   TrackType                                                   OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   TrackIndex                                                  OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/Engine.TimeStretchCurveInstance
/// Size: 0x0030 (0x000000 - 0x000030)
class FTimeStretchCurveInstance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      bHasValidData                                               OFFSET(get<bool>, {0x0, 1, 0, 0})
};

/// Struct /Script/Engine.UpdateLevelVisibilityLevelInfo
/// Size: 0x0014 (0x000000 - 0x000014)
class FUpdateLevelVisibilityLevelInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FName)                                     PackageName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     Filename                                                    OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bIsVisible                                                  OFFSET(get<bool>, {0x10, 1, 1, 0})
};

/// Struct /Script/Engine.EndPhysicsTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
class FEndPhysicsTickFunction : public FTickFunction
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.StartPhysicsTickFunction
/// Size: 0x0008 (0x000028 - 0x000030)
class FStartPhysicsTickFunction : public FTickFunction
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Engine.LevelViewportInfo
/// Size: 0x0020 (0x000000 - 0x000020)
class FLevelViewportInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FVector)                                   CamPosition                                                 OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FRotator)                                  CamRotation                                                 OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	DMember(float)                                     CamOrthoZoom                                                OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(bool)                                      CamUpdated                                                  OFFSET(get<bool>, {0x1C, 1, 0, 0})
};

/// Struct /Script/Engine.LightmassWorldInfoSettings
/// Size: 0x004C (0x000000 - 0x00004C)
class FLightmassWorldInfoSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 76;

public:
	DMember(float)                                     StaticLightingLevelScale                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   NumIndirectLightingBounces                                  OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   NumSkyLightingBounces                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     IndirectLightingQuality                                     OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     IndirectLightingSmoothness                                  OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FColor)                                    EnvironmentColor                                            OFFSET(getStruct<T>, {0x14, 4, 0, 0})
	DMember(float)                                     EnvironmentIntensity                                        OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     EmissiveBoost                                               OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     DiffuseBoost                                                OFFSET(get<float>, {0x20, 4, 0, 0})
	CMember(TEnumAsByte<EVolumeLightingMethod>)        VolumeLightingMethod                                        OFFSET(get<T>, {0x24, 1, 0, 0})
	DMember(bool)                                      bUseAmbientOcclusion                                        OFFSET(get<bool>, {0x25, 1, 1, 0})
	DMember(bool)                                      bGenerateAmbientOcclusionMaterialMask                       OFFSET(get<bool>, {0x25, 1, 1, 1})
	DMember(bool)                                      bVisualizeMaterialDiffuse                                   OFFSET(get<bool>, {0x25, 1, 1, 2})
	DMember(bool)                                      bVisualizeAmbientOcclusion                                  OFFSET(get<bool>, {0x25, 1, 1, 3})
	DMember(bool)                                      bCompressLightmaps                                          OFFSET(get<bool>, {0x25, 1, 1, 4})
	DMember(bool)                                      bCompressHighQualityASTCLightmaps                           OFFSET(get<bool>, {0x25, 1, 1, 5})
	DMember(float)                                     VolumetricLightmapDetailCellSize                            OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     VolumetricLightmapMaximumBrickMemoryMb                      OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     VolumetricLightmapSphericalHarmonicSmoothing                OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     VolumeLightSamplePlacementScale                             OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     DirectIlluminationOcclusionFraction                         OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     IndirectIlluminationOcclusionFraction                       OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     OcclusionExponent                                           OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     FullyOccludedSamplesFraction                                OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     MaxOcclusionDistance                                        OFFSET(get<float>, {0x48, 4, 0, 0})
};

/// Class /Script/UMG.Visual
/// Size: 0x0000 (0x000028 - 0x000028)
class UVisual : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/UMG.WidgetTransform
/// Size: 0x001C (0x000000 - 0x00001C)
class FWidgetTransform : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FVector2D)                                 Translation                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FVector2D)                                 Scale                                                       OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FVector2D)                                 Shear                                                       OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	DMember(float)                                     Angle                                                       OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/UMG.WidgetVertexEffect
/// Size: 0x001C (0x000000 - 0x00001C)
class FWidgetVertexEffect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	CMember(EWidgetVertexEffectType)                   EffectType                                                  OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FVector2D)                                 VertexEffectPivot                                           OFFSET(getStruct<T>, {0x4, 8, 0, 0})
	SMember(FVector2D)                                 Anchor0                                                     OFFSET(getStruct<T>, {0xC, 8, 0, 0})
	SMember(FVector2D)                                 Anchor1                                                     OFFSET(getStruct<T>, {0x14, 8, 0, 0})
};

/// Class /Script/UMG.Widget
/// Size: 0x0100 (0x000028 - 0x000128)
class UWidget : public UVisual
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	CMember(class UPanelSlot*)                         Slot                                                        OFFSET(get<T>, {0x28, 8, 0, 0})
	SMember(FDelegateProperty)                         bIsEnabledDelegate                                          OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FText)                                     ToolTipText                                                 OFFSET(getStruct<T>, {0x40, 24, 0, 0})
	SMember(FDelegateProperty)                         ToolTipTextDelegate                                         OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	CMember(class UWidget*)                            ToolTipWidget                                               OFFSET(get<T>, {0x68, 8, 0, 0})
	SMember(FDelegateProperty)                         ToolTipWidgetDelegate                                       OFFSET(getStruct<T>, {0x70, 16, 0, 0})
	SMember(FDelegateProperty)                         VisibilityDelegate                                          OFFSET(getStruct<T>, {0x80, 16, 0, 0})
	SMember(FWidgetTransform)                          RenderTransform                                             OFFSET(getStruct<T>, {0x90, 28, 0, 0})
	SMember(FVector2D)                                 RenderTransformPivot                                        OFFSET(getStruct<T>, {0xAC, 8, 0, 0})
	SMember(FWidgetVertexEffect)                       VertexEffect                                                OFFSET(getStruct<T>, {0xB4, 28, 0, 0})
	DMember(bool)                                      bIsVariable                                                 OFFSET(get<bool>, {0xD0, 1, 1, 0})
	DMember(bool)                                      bCreatedByConstructionScript                                OFFSET(get<bool>, {0xD0, 1, 1, 1})
	DMember(bool)                                      bIsEnabled                                                  OFFSET(get<bool>, {0xD0, 1, 1, 2})
	DMember(bool)                                      bOverride_Cursor                                            OFFSET(get<bool>, {0xD0, 1, 1, 3})
	CMember(class USlateAccessibleWidgetData*)         AccessibleWidgetData                                        OFFSET(get<T>, {0xD8, 8, 0, 0})
	DMember(bool)                                      bIsVolatile                                                 OFFSET(get<bool>, {0xE0, 1, 1, 0})
	CMember(TEnumAsByte<EMouseCursor>)                 Cursor                                                      OFFSET(get<T>, {0xE1, 1, 0, 0})
	CMember(EWidgetClipping)                           Clipping                                                    OFFSET(get<T>, {0xE2, 1, 0, 0})
	CMember(ESlateVisibility)                          Visibility                                                  OFFSET(get<T>, {0xE3, 1, 0, 0})
	DMember(float)                                     RenderOpacity                                               OFFSET(get<float>, {0xE4, 4, 0, 0})
	CMember(class UWidgetNavigation*)                  Navigation                                                  OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(EFlowDirectionPreference)                  FlowDirectionPreference                                     OFFSET(get<T>, {0xF0, 1, 0, 0})
	CMember(TArray<class UPropertyBinding*>)           NativeBindings                                              OFFSET(get<T>, {0x118, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.Widget.SetVisibility
	// void SetVisibility(ESlateVisibility InVisibility);                                                                       // [0x29f4af0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetUserFocus
	// void SetUserFocus(class APlayerController* PlayerController);                                                            // [0x29f48c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetToolTipText
	// void SetToolTipText(FText& InToolTipText);                                                                               // [0x29f47f0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.Widget.SetToolTip
	// void SetToolTip(class UWidget* Widget);                                                                                  // [0x29f4760] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetRenderTranslation
	// void SetRenderTranslation(FVector2D Translation);                                                                        // [0x29f4650] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Widget.SetRenderTransformPivot
	// void SetRenderTransformPivot(FVector2D Pivot);                                                                           // [0x29f45d0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Widget.SetRenderTransformAngle
	// void SetRenderTransformAngle(float Angle);                                                                               // [0x29f4550] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetRenderTransform
	// void SetRenderTransform(FWidgetTransform InTransform);                                                                   // [0x29f4470] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetRenderShear
	// void SetRenderShear(FVector2D Shear);                                                                                    // [0x29f43f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Widget.SetRenderScale
	// void SetRenderScale(FVector2D Scale);                                                                                    // [0x29f4370] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Widget.SetRenderOpacity
	// void SetRenderOpacity(float InOpacity);                                                                                  // [0x29f42f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetNavigationRuleExplicit
	// void SetNavigationRuleExplicit(EUINavigation Direction, class UWidget* InWidget);                                        // [0x29f4190] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetNavigationRuleCustomBoundary
	// void SetNavigationRuleCustomBoundary(EUINavigation Direction, FDelegateProperty InCustomDelegate);                       // [0x29f40a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetNavigationRuleCustom
	// void SetNavigationRuleCustom(EUINavigation Direction, FDelegateProperty InCustomDelegate);                               // [0x29f3fb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetNavigationRuleBase
	// void SetNavigationRuleBase(EUINavigation Direction, EUINavigationRule Rule);                                             // [0x29f3ee0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetNavigationRule
	// void SetNavigationRule(EUINavigation Direction, EUINavigationRule Rule, FName WidgetToFocus);                            // [0x29f3dd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetKeyboardFocus
	// void SetKeyboardFocus();                                                                                                 // [0x29f3db0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetIsEnabled
	// void SetIsEnabled(bool bInIsEnabled);                                                                                    // [0x1224110] Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetFocus
	// void SetFocus();                                                                                                         // [0x29f3d10] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetCursor
	// void SetCursor(TEnumAsByte<EMouseCursor> InCursor);                                                                      // [0x29f3c90] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetClipping
	// void SetClipping(EWidgetClipping InClipping);                                                                            // [0x29f3c10] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetAllNavigationRules
	// void SetAllNavigationRules(EUINavigationRule Rule, FName WidgetToFocus);                                                 // [0x29f3b40] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.ResetCursor
	// void ResetCursor();                                                                                                      // [0x29f3b20] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.RemoveFromParent
	// void RemoveFromParent();                                                                                                 // [0xc8b130] Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.OnReply__DelegateSignature
	// FEventReply OnReply__DelegateSignature();                                                                                // [0x198a600] Public|Delegate      
	// Function /Script/UMG.Widget.OnPointerEvent__DelegateSignature
	// FEventReply OnPointerEvent__DelegateSignature(FGeometry MyGeometry, FPointerEvent& MouseEvent);                          // [0x198a600] Public|Delegate|HasOutParms 
	// Function /Script/UMG.Widget.IsVisible
	// bool IsVisible();                                                                                                        // [0x29f3af0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.IsHovered
	// bool IsHovered();                                                                                                        // [0xc8b010] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.InvalidateLayoutAndVolatility
	// void InvalidateLayoutAndVolatility();                                                                                    // [0x29f3ad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.HasUserFocusedDescendants
	// bool HasUserFocusedDescendants(class APlayerController* PlayerController);                                               // [0x29f3a30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.HasUserFocus
	// bool HasUserFocus(class APlayerController* PlayerController);                                                            // [0x29f3990] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.HasMouseCaptureByUser
	// bool HasMouseCaptureByUser(int32_t UserIndex, int32_t PointerIndex);                                                     // [0x29f38c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.HasMouseCapture
	// bool HasMouseCapture();                                                                                                  // [0x29f3890] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.HasKeyboardFocus
	// bool HasKeyboardFocus();                                                                                                 // [0x29f3860] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.HasFocusedDescendants
	// bool HasFocusedDescendants();                                                                                            // [0x29f3830] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.HasAnyUserFocus
	// bool HasAnyUserFocus();                                                                                                  // [0x29f3800] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetWidget__DelegateSignature
	// class UWidget* GetWidget__DelegateSignature();                                                                           // [0x198a600] Public|Delegate      
	// Function /Script/UMG.Widget.GetVisibility
	// ESlateVisibility GetVisibility();                                                                                        // [0x29f37d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetTickSpaceGeometry
	// FGeometry GetTickSpaceGeometry();                                                                                        // [0x29f36b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetText__DelegateSignature
	// FText GetText__DelegateSignature();                                                                                      // [0x198a600] Public|Delegate      
	// Function /Script/UMG.Widget.GetSlateVisibility__DelegateSignature
	// ESlateVisibility GetSlateVisibility__DelegateSignature();                                                                // [0x198a600] Public|Delegate      
	// Function /Script/UMG.Widget.GetSlateColor__DelegateSignature
	// FSlateColor GetSlateColor__DelegateSignature();                                                                          // [0x198a600] Public|Delegate      
	// Function /Script/UMG.Widget.GetSlateBrush__DelegateSignature
	// FSlateBrush GetSlateBrush__DelegateSignature();                                                                          // [0x198a600] Public|Delegate      
	// Function /Script/UMG.Widget.GetRenderTransformAngle
	// float GetRenderTransformAngle();                                                                                         // [0x29f3650] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetRenderOpacity
	// float GetRenderOpacity();                                                                                                // [0x29f3620] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetParent
	// class UPanelWidget* GetParent();                                                                                         // [0x29f35f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetPaintSpaceGeometry
	// FGeometry GetPaintSpaceGeometry();                                                                                       // [0x29f35b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetOwningPlayer
	// class APlayerController* GetOwningPlayer();                                                                              // [0x29f3580] BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetOwningLocalPlayer
	// class ULocalPlayer* GetOwningLocalPlayer();                                                                              // [0x29f3550] BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetMouseCursor__DelegateSignature
	// TEnumAsByte<EMouseCursor> GetMouseCursor__DelegateSignature();                                                           // [0x198a600] Public|Delegate      
	// Function /Script/UMG.Widget.GetLinearColor__DelegateSignature
	// FLinearColor GetLinearColor__DelegateSignature();                                                                        // [0x198a600] Public|Delegate|HasDefaults 
	// Function /Script/UMG.Widget.GetIsEnabled
	// bool GetIsEnabled();                                                                                                     // [0x29f3520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetInt32__DelegateSignature
	// int32_t GetInt32__DelegateSignature();                                                                                   // [0x198a600] Public|Delegate      
	// Function /Script/UMG.Widget.GetGameInstance
	// class UGameInstance* GetGameInstance();                                                                                  // [0x29f34f0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetFloat__DelegateSignature
	// float GetFloat__DelegateSignature();                                                                                     // [0x198a600] Public|Delegate      
	// Function /Script/UMG.Widget.GetDesiredSize
	// FVector2D GetDesiredSize();                                                                                              // [0x29f3480] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetClipping
	// EWidgetClipping GetClipping();                                                                                           // [0x29f3450] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetCheckBoxState__DelegateSignature
	// ECheckBoxState GetCheckBoxState__DelegateSignature();                                                                    // [0x198a600] Public|Delegate      
	// Function /Script/UMG.Widget.GetCachedGeometry
	// FGeometry GetCachedGeometry();                                                                                           // [0x29f3410] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetBool__DelegateSignature
	// bool GetBool__DelegateSignature();                                                                                       // [0x198a600] Public|Delegate      
	// Function /Script/UMG.Widget.GetAccessibleText
	// FText GetAccessibleText();                                                                                               // [0x29f3370] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetAccessibleSummaryText
	// FText GetAccessibleSummaryText();                                                                                        // [0x29f32d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GenerateWidgetForString__DelegateSignature
	// class UWidget* GenerateWidgetForString__DelegateSignature(FString Item);                                                 // [0x198a600] Public|Delegate      
	// Function /Script/UMG.Widget.GenerateWidgetForObject__DelegateSignature
	// class UWidget* GenerateWidgetForObject__DelegateSignature(class UObject* Item);                                          // [0x198a600] Public|Delegate      
	// Function /Script/UMG.Widget.ForceVolatile
	// void ForceVolatile(bool bForce);                                                                                         // [0x29f3240] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.ForceLayoutPrepass
	// void ForceLayoutPrepass();                                                                                               // [0x29f3220] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.PanelWidget
/// Size: 0x0018 (0x000128 - 0x000140)
class UPanelWidget : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	CMember(TArray<class UPanelSlot*>)                 Slots                                                       OFFSET(get<T>, {0x128, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.PanelWidget.RemoveChildAt
	// bool RemoveChildAt(int32_t Index);                                                                                       // [0x29e0280] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.PanelWidget.RemoveChild
	// bool RemoveChild(class UWidget* Content);                                                                                // [0x29e01e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.PanelWidget.HasChild
	// bool HasChild(class UWidget* Content);                                                                                   // [0x29e0050] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.PanelWidget.HasAnyChildren
	// bool HasAnyChildren();                                                                                                   // [0x29e0020] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.PanelWidget.GetChildrenCount
	// int32_t GetChildrenCount();                                                                                              // [0x29dfca0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.PanelWidget.GetChildIndex
	// int32_t GetChildIndex(class UWidget* Content);                                                                           // [0x29dfc00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.PanelWidget.GetChildAt
	// class UWidget* GetChildAt(int32_t Index);                                                                                // [0x29dfb60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.PanelWidget.GetAllChildren
	// TArray<UWidget*> GetAllChildren();                                                                                       // [0x29dfae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.PanelWidget.ClearChildren
	// void ClearChildren();                                                                                                    // [0x1602830] Native|Public|BlueprintCallable 
	// Function /Script/UMG.PanelWidget.AddChild
	// class UPanelSlot* AddChild(class UWidget* Content);                                                                      // [0x29df8f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ContentWidget
/// Size: 0x0000 (0x000140 - 0x000140)
class UContentWidget : public UPanelWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:


	/// Functions
	// Function /Script/UMG.ContentWidget.SetContent
	// class UPanelSlot* SetContent(class UWidget* Content);                                                                    // [0x29d73b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ContentWidget.GetContentSlot
	// class UPanelSlot* GetContentSlot();                                                                                      // [0x29d6cd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ContentWidget.GetContent
	// class UWidget* GetContent();                                                                                             // [0x29d6ca0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.Button
/// Size: 0x0450 (0x000140 - 0x000590)
class UButton : public UContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1424;

public:
	CMember(class USlateWidgetStyleAsset*)             Style                                                       OFFSET(get<T>, {0x140, 8, 0, 0})
	SMember(FButtonStyle)                              WidgetStyle                                                 OFFSET(getStruct<T>, {0x150, 928, 0, 0})
	SMember(FLinearColor)                              ColorAndOpacity                                             OFFSET(getStruct<T>, {0x4F0, 16, 0, 0})
	SMember(FLinearColor)                              BackgroundColor                                             OFFSET(getStruct<T>, {0x500, 16, 0, 0})
	CMember(TEnumAsByte<EButtonClickMethod>)           ClickMethod                                                 OFFSET(get<T>, {0x510, 1, 0, 0})
	CMember(TEnumAsByte<EButtonTouchMethod>)           TouchMethod                                                 OFFSET(get<T>, {0x511, 1, 0, 0})
	CMember(TEnumAsByte<EButtonPressMethod>)           PressMethod                                                 OFFSET(get<T>, {0x512, 1, 0, 0})
	DMember(bool)                                      IsFocusable                                                 OFFSET(get<bool>, {0x513, 1, 0, 0})
	SMember(FMargin)                                   HitMargin                                                   OFFSET(getStruct<T>, {0x514, 16, 0, 0})
	DMember(bool)                                      bCustomHittestArea                                          OFFSET(get<bool>, {0x524, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnClicked                                                   OFFSET(getStruct<T>, {0x528, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPressed                                                   OFFSET(getStruct<T>, {0x538, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnReleased                                                  OFFSET(getStruct<T>, {0x548, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHovered                                                   OFFSET(getStruct<T>, {0x558, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnUnhovered                                                 OFFSET(getStruct<T>, {0x568, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.Button.SetTouchMethod
	// void SetTouchMethod(TEnumAsByte<EButtonTouchMethod> InTouchMethod);                                                      // [0x29d4250] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Button.SetStyle
	// void SetStyle(FButtonStyle& InStyle);                                                                                    // [0x29d4170] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.Button.SetPressMethod
	// void SetPressMethod(TEnumAsByte<EButtonPressMethod> InPressMethod);                                                      // [0x29d3f70] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Button.SetColorAndOpacity
	// void SetColorAndOpacity(FLinearColor InColorAndOpacity);                                                                 // [0x29d3370] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Button.SetClickMethod
	// void SetClickMethod(TEnumAsByte<EButtonClickMethod> InClickMethod);                                                      // [0x29d3270] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Button.SetBackgroundColor
	// void SetBackgroundColor(FLinearColor InBackgroundColor);                                                                 // [0x29d2cc0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Button.IsPressed
	// bool IsPressed();                                                                                                        // [0x29d2a30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.CanvasPanel
/// Size: 0x0010 (0x000140 - 0x000150)
class UCanvasPanel : public UPanelWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:


	/// Functions
	// Function /Script/UMG.CanvasPanel.AddChildToCanvas
	// class UCanvasPanelSlot* AddChildToCanvas(class UWidget* Content);                                                        // [0x29d2360] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.RetainerBox
/// Size: 0x0030 (0x000140 - 0x000170)
class URetainerBox : public UContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	DMember(bool)                                      bRetainRender                                               OFFSET(get<bool>, {0x140, 1, 0, 0})
	DMember(bool)                                      RenderOnInvalidation                                        OFFSET(get<bool>, {0x141, 1, 0, 0})
	DMember(bool)                                      RenderOnPhase                                               OFFSET(get<bool>, {0x142, 1, 0, 0})
	DMember(int32_t)                                   Phase                                                       OFFSET(get<int32_t>, {0x144, 4, 0, 0})
	DMember(int32_t)                                   PhaseCount                                                  OFFSET(get<int32_t>, {0x148, 4, 0, 0})
	DMember(bool)                                      FixedSizeRT                                                 OFFSET(get<bool>, {0x14C, 1, 0, 0})
	CMember(class UMaterialInterface*)                 EffectMaterial                                              OFFSET(get<T>, {0x150, 8, 0, 0})
	SMember(FName)                                     TextureParameter                                            OFFSET(getStruct<T>, {0x158, 8, 0, 0})


	/// Functions
	// Function /Script/UMG.RetainerBox.SetTextureParameter
	// void SetTextureParameter(FName TextureParameter);                                                                        // [0x29e0e90] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RetainerBox.SetRetainRendering
	// void SetRetainRendering(bool bInRetainRendering);                                                                        // [0x29e0b90] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RetainerBox.SetRenderingPhase
	// void SetRenderingPhase(int32_t RenderPhase, int32_t TotalPhases);                                                        // [0x29e0ac0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RetainerBox.SetEffectMaterial
	// void SetEffectMaterial(class UMaterialInterface* EffectMaterial);                                                        // [0x29e0340] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RetainerBox.RequestRender
	// void RequestRender();                                                                                                    // [0x29e0320] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RetainerBox.GetRenderTarget
	// class UTextureRenderTarget2D* GetRenderTarget();                                                                         // [0x29dfe80] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RetainerBox.GetEffectMaterial
	// class UMaterialInstanceDynamic* GetEffectMaterial();                                                                     // [0x29dfcd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.Overlay
/// Size: 0x0010 (0x000140 - 0x000150)
class UOverlay : public UPanelWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:


	/// Functions
	// Function /Script/UMG.Overlay.AddChildToOverlay
	// class UOverlaySlot* AddChildToOverlay(class UWidget* Content);                                                           // [0x29df990] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/UMG.ShapedTextOptions
/// Size: 0x0003 (0x000000 - 0x000003)
class FShapedTextOptions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 3;

public:
	DMember(bool)                                      bOverride_TextShapingMethod                                 OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bOverride_TextFlowDirection                                 OFFSET(get<bool>, {0x0, 1, 1, 1})
	CMember(ETextShapingMethod)                        TextShapingMethod                                           OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(ETextFlowDirection)                        TextFlowDirection                                           OFFSET(get<T>, {0x2, 1, 0, 0})
};

/// Class /Script/UMG.TextLayoutWidget
/// Size: 0x0020 (0x000128 - 0x000148)
class UTextLayoutWidget : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	SMember(FShapedTextOptions)                        ShapedTextOptions                                           OFFSET(getStruct<T>, {0x128, 3, 0, 0})
	CMember(TEnumAsByte<ETextJustify>)                 Justification                                               OFFSET(get<T>, {0x12B, 1, 0, 0})
	CMember(ETextWrappingPolicy)                       WrappingPolicy                                              OFFSET(get<T>, {0x12C, 1, 0, 0})
	DMember(bool)                                      AutoWrapText                                                OFFSET(get<bool>, {0x12D, 1, 1, 0})
	DMember(float)                                     WrapTextAt                                                  OFFSET(get<float>, {0x130, 4, 0, 0})
	SMember(FMargin)                                   Margin                                                      OFFSET(getStruct<T>, {0x134, 16, 0, 0})
	DMember(float)                                     LineHeightPercentage                                        OFFSET(get<float>, {0x144, 4, 0, 0})


	/// Functions
	// Function /Script/UMG.TextLayoutWidget.SetJustification
	// void SetJustification(TEnumAsByte<ETextJustify> InJustification);                                                        // [0x29e97c0] Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.TextBlock
/// Size: 0x01C8 (0x000148 - 0x000310)
class UTextBlock : public UTextLayoutWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x148, 24, 0, 0})
	SMember(FDelegateProperty)                         TextDelegate                                                OFFSET(getStruct<T>, {0x160, 16, 0, 0})
	SMember(FSlateColor)                               ColorAndOpacity                                             OFFSET(getStruct<T>, {0x170, 40, 0, 0})
	SMember(FDelegateProperty)                         ColorAndOpacityDelegate                                     OFFSET(getStruct<T>, {0x198, 16, 0, 0})
	SMember(FSlateFontInfo)                            Font                                                        OFFSET(getStruct<T>, {0x1A8, 88, 0, 0})
	SMember(FSlateBrush)                               StrikeBrush                                                 OFFSET(getStruct<T>, {0x200, 208, 0, 0})
	SMember(FVector2D)                                 ShadowOffset                                                OFFSET(getStruct<T>, {0x2D0, 8, 0, 0})
	SMember(FLinearColor)                              ShadowColorAndOpacity                                       OFFSET(getStruct<T>, {0x2D8, 16, 0, 0})
	SMember(FDelegateProperty)                         ShadowColorAndOpacityDelegate                               OFFSET(getStruct<T>, {0x2E8, 16, 0, 0})
	DMember(float)                                     MinDesiredWidth                                             OFFSET(get<float>, {0x2F8, 4, 0, 0})
	DMember(bool)                                      bWrapWithInvalidationPanel                                  OFFSET(get<bool>, {0x2FC, 1, 0, 0})
	DMember(bool)                                      bAutoWrapText                                               OFFSET(get<bool>, {0x2FD, 1, 0, 0})
	CMember(ETextTransformPolicy)                      TextTransformPolicy                                         OFFSET(get<T>, {0x2FE, 1, 0, 0})
	DMember(bool)                                      bSimpleTextMode                                             OFFSET(get<bool>, {0x2FF, 1, 0, 0})


	/// Functions
	// Function /Script/UMG.TextBlock.SetTextTransformPolicy
	// void SetTextTransformPolicy(ETextTransformPolicy InTransformPolicy);                                                     // [0x29ea480] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TextBlock.SetText
	// void SetText(FText InText);                                                                                              // [0x29ea390] Native|Public|BlueprintCallable 
	// Function /Script/UMG.TextBlock.SetStrikeBrush
	// void SetStrikeBrush(FSlateBrush InStrikeBrush);                                                                          // [0x29ea1b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TextBlock.SetShadowOffset
	// void SetShadowOffset(FVector2D InShadowOffset);                                                                          // [0x29e9f10] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.TextBlock.SetShadowColorAndOpacity
	// void SetShadowColorAndOpacity(FLinearColor InShadowColorAndOpacity);                                                     // [0x29e9e80] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.TextBlock.SetOpacity
	// void SetOpacity(float InOpacity);                                                                                        // [0x29e9e00] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TextBlock.SetMinDesiredWidth
	// void SetMinDesiredWidth(float InMinDesiredWidth);                                                                        // [0x29e9ae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TextBlock.SetFont
	// void SetFont(FSlateFontInfo InFontInfo);                                                                                 // [0x29e9520] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TextBlock.SetColorAndOpacity
	// void SetColorAndOpacity(FSlateColor InColorAndOpacity);                                                                  // [0x29e92b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TextBlock.SetAutoWrapText
	// void SetAutoWrapText(bool InAutoTextWrap);                                                                               // [0x29e9220] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TextBlock.GetText
	// FText GetText();                                                                                                         // [0x29e8e40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.TextBlock.GetDynamicOutlineMaterial
	// class UMaterialInstanceDynamic* GetDynamicOutlineMaterial();                                                             // [0x29e8c00] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TextBlock.GetDynamicFontMaterial
	// class UMaterialInstanceDynamic* GetDynamicFontMaterial();                                                                // [0x29e8bd0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.WidgetSwitcher
/// Size: 0x0018 (0x000140 - 0x000158)
class UWidgetSwitcher : public UPanelWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	DMember(int32_t)                                   ActiveWidgetIndex                                           OFFSET(get<int32_t>, {0x140, 4, 0, 0})


	/// Functions
	// Function /Script/UMG.WidgetSwitcher.SetActiveWidgetIndex
	// void SetActiveWidgetIndex(int32_t Index);                                                                                // [0x29fef90] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetSwitcher.SetActiveWidget
	// void SetActiveWidget(class UWidget* Widget);                                                                             // [0x29db7c0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetSwitcher.GetWidgetAtIndex
	// class UWidget* GetWidgetAtIndex(int32_t Index);                                                                          // [0x29fe570] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetSwitcher.GetNumWidgets
	// int32_t GetNumWidgets();                                                                                                 // [0x29fe2a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetSwitcher.GetActiveWidgetIndex
	// int32_t GetActiveWidgetIndex();                                                                                          // [0x29fdfc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetSwitcher.GetActiveWidget
	// class UWidget* GetActiveWidget();                                                                                        // [0x29fdf90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/UMG.SlateChildSize
/// Size: 0x0008 (0x000000 - 0x000008)
class FSlateChildSize : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<ESlateSizeRule>)               SizeRule                                                    OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Struct /Script/UMG.RadialBoxSettings
/// Size: 0x000C (0x000000 - 0x00000C)
class FRadialBoxSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(bool)                                      bDistributeItemsEvenly                                      OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     AngleBetweenItems                                           OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     StartingAngle                                               OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/UMG.UserWidgetPool
/// Size: 0x0080 (0x000000 - 0x000080)
class FUserWidgetPool : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TArray<class UUserWidget*>)                ActiveWidgets                                               OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<class UUserWidget*>)                InactiveWidgets                                             OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Class /Script/UMG.DynamicEntryBoxBase
/// Size: 0x00D0 (0x000128 - 0x0001F8)
class UDynamicEntryBoxBase : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 504;

public:
	CMember(EDynamicBoxType)                           EntryBoxType                                                OFFSET(get<T>, {0x128, 1, 0, 0})
	SMember(FVector2D)                                 EntrySpacing                                                OFFSET(getStruct<T>, {0x12C, 8, 0, 0})
	CMember(TArray<FVector2D>)                         SpacingPattern                                              OFFSET(get<T>, {0x138, 16, 0, 0})
	SMember(FSlateChildSize)                           EntrySizeRule                                               OFFSET(getStruct<T>, {0x148, 8, 0, 0})
	CMember(TEnumAsByte<EHorizontalAlignment>)         EntryHorizontalAlignment                                    OFFSET(get<T>, {0x150, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           EntryVerticalAlignment                                      OFFSET(get<T>, {0x151, 1, 0, 0})
	DMember(int32_t)                                   MaxElementSize                                              OFFSET(get<int32_t>, {0x154, 4, 0, 0})
	SMember(FRadialBoxSettings)                        RadialBoxSettings                                           OFFSET(getStruct<T>, {0x158, 12, 0, 0})
	SMember(FUserWidgetPool)                           EntryWidgetPool                                             OFFSET(getStruct<T>, {0x178, 128, 0, 0})


	/// Functions
	// Function /Script/UMG.DynamicEntryBoxBase.SetRadialSettings
	// void SetRadialSettings(FRadialBoxSettings& InSettings);                                                                  // [0x29d7be0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.DynamicEntryBoxBase.SetEntrySpacing
	// void SetEntrySpacing(FVector2D& InEntrySpacing);                                                                         // [0x29d7450] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.DynamicEntryBoxBase.GetNumEntries
	// int32_t GetNumEntries();                                                                                                 // [0x29d6d30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.DynamicEntryBoxBase.GetAllEntries
	// TArray<UUserWidget*> GetAllEntries();                                                                                    // [0x29d6c10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/UMG.NamedSlotBinding
/// Size: 0x0010 (0x000000 - 0x000010)
class FNamedSlotBinding : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(class UWidget*)                            Content                                                     OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/UMG.AnimationEventBinding
/// Size: 0x0028 (0x000000 - 0x000028)
class FAnimationEventBinding : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class UWidgetAnimation*)                   Animation                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FDelegateProperty)                         Delegate                                                    OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	CMember(EWidgetAnimationEvent)                     AnimationEvent                                              OFFSET(get<T>, {0x18, 1, 0, 0})
	SMember(FName)                                     UserTag                                                     OFFSET(getStruct<T>, {0x1C, 8, 0, 0})
};

/// Class /Script/UMG.UserWidget
/// Size: 0x0158 (0x000128 - 0x000280)
class UUserWidget : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	SMember(FLinearColor)                              ColorAndOpacity                                             OFFSET(getStruct<T>, {0x130, 16, 0, 0})
	SMember(FDelegateProperty)                         ColorAndOpacityDelegate                                     OFFSET(getStruct<T>, {0x140, 16, 0, 0})
	SMember(FSlateColor)                               ForegroundColor                                             OFFSET(getStruct<T>, {0x150, 40, 0, 0})
	SMember(FDelegateProperty)                         ForegroundColorDelegate                                     OFFSET(getStruct<T>, {0x178, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnVisibilityChanged                                         OFFSET(getStruct<T>, {0x188, 16, 0, 0})
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x1B0, 16, 0, 0})
	CMember(TArray<class UUMGSequencePlayer*>)         ActiveSequencePlayers                                       OFFSET(get<T>, {0x1C0, 16, 0, 0})
	CMember(class UUMGSequenceTickManager*)            AnimationTickManager                                        OFFSET(get<T>, {0x1D0, 8, 0, 0})
	CMember(TArray<class UUMGSequencePlayer*>)         StoppedSequencePlayers                                      OFFSET(get<T>, {0x1D8, 16, 0, 0})
	CMember(TArray<FNamedSlotBinding>)                 NamedSlotBindings                                           OFFSET(get<T>, {0x1E8, 16, 0, 0})
	CMember(class UWidgetTree*)                        WidgetTree                                                  OFFSET(get<T>, {0x1F8, 8, 0, 0})
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0x200, 4, 0, 0})
	DMember(bool)                                      bSupportsKeyboardFocus                                      OFFSET(get<bool>, {0x204, 1, 1, 0})
	DMember(bool)                                      bIsFocusable                                                OFFSET(get<bool>, {0x204, 1, 1, 1})
	DMember(bool)                                      bStopAction                                                 OFFSET(get<bool>, {0x204, 1, 1, 2})
	DMember(bool)                                      bHasScriptImplementedTick                                   OFFSET(get<bool>, {0x204, 1, 1, 3})
	DMember(bool)                                      bHasScriptImplementedPaint                                  OFFSET(get<bool>, {0x204, 1, 1, 4})
	CMember(EWidgetTickFrequency)                      TickFrequency                                               OFFSET(get<T>, {0x210, 1, 0, 0})
	CMember(class UInputComponent*)                    InputComponent                                              OFFSET(get<T>, {0x218, 8, 0, 0})
	CMember(TArray<FAnimationEventBinding>)            AnimationCallbacks                                          OFFSET(get<T>, {0x220, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.UserWidget.UnregisterInputComponent
	// void UnregisterInputComponent();                                                                                         // [0x29f1370] Final|Native|Protected|BlueprintCallable 
	// Function /Script/UMG.UserWidget.UnbindFromAnimationStarted
	// void UnbindFromAnimationStarted(class UWidgetAnimation* Animation, FDelegateProperty Delegate);                          // [0x29f1290] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.UnbindFromAnimationFinished
	// void UnbindFromAnimationFinished(class UWidgetAnimation* Animation, FDelegateProperty Delegate);                         // [0x29f11b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.UnbindAllFromAnimationStarted
	// void UnbindAllFromAnimationStarted(class UWidgetAnimation* Animation);                                                   // [0x29f1120] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.UnbindAllFromAnimationFinished
	// void UnbindAllFromAnimationFinished(class UWidgetAnimation* Animation);                                                  // [0x29f1090] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.Tick
	// void Tick(FGeometry MyGeometry, float InDeltaTime);                                                                      // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.StopListeningForInputAction
	// void StopListeningForInputAction(FName ActionName, TEnumAsByte<EInputEvent> EventType);                                  // [0x29f0fc0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/UMG.UserWidget.StopListeningForAllInputActions
	// void StopListeningForAllInputActions();                                                                                  // [0x29f0fa0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/UMG.UserWidget.StopAnimationsAndLatentActions
	// void StopAnimationsAndLatentActions();                                                                                   // [0x29f0f80] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.StopAnimation
	// void StopAnimation(class UWidgetAnimation* InAnimation);                                                                 // [0x29f0ef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.StopAllAnimations
	// void StopAllAnimations();                                                                                                // [0x29f0ed0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetPositionInViewport
	// void SetPositionInViewport(FVector2D Position, bool bRemoveDPIScale);                                                    // [0x29f0bd0] Final|BlueprintCosmetic|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetPlaybackSpeed
	// void SetPlaybackSpeed(class UWidgetAnimation* InAnimation, float PlaybackSpeed);                                         // [0x29f0b00] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x29f0a70] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetOwningPlayer
	// void SetOwningPlayer(class APlayerController* LocalPlayerController);                                                    // [0x29f09e0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetNumLoopsToPlay
	// void SetNumLoopsToPlay(class UWidgetAnimation* InAnimation, int32_t NumLoopsToPlay);                                     // [0x29f0910] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetInputActionPriority
	// void SetInputActionPriority(int32_t NewPriority);                                                                        // [0x29f06b0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetInputActionBlocking
	// void SetInputActionBlocking(bool bShouldBlock);                                                                          // [0x29f0620] Final|Native|Protected|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetForegroundColor
	// void SetForegroundColor(FSlateColor InForegroundColor);                                                                  // [0x29f04b0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetDesiredSizeInViewport
	// void SetDesiredSizeInViewport(FVector2D Size);                                                                           // [0x29f0430] Final|BlueprintCosmetic|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetColorAndOpacity
	// void SetColorAndOpacity(FLinearColor InColorAndOpacity);                                                                 // [0x29f0310] Final|BlueprintCosmetic|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetAnimationCurrentTime
	// void SetAnimationCurrentTime(class UWidgetAnimation* InAnimation, float InTime);                                         // [0x29f0240] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetAnchorsInViewport
	// void SetAnchorsInViewport(FAnchors Anchors);                                                                             // [0x29f01b0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetAlignmentInViewport
	// void SetAlignmentInViewport(FVector2D Alignment);                                                                        // [0x29f0130] Final|BlueprintCosmetic|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.UserWidget.ReverseAnimation
	// void ReverseAnimation(class UWidgetAnimation* InAnimation);                                                              // [0x29f00a0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.RemoveFromViewport
	// void RemoveFromViewport();                                                                                               // [0xfc11b0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.RegisterInputComponent
	// void RegisterInputComponent();                                                                                           // [0x29f0080] Final|Native|Protected|BlueprintCallable 
	// Function /Script/UMG.UserWidget.PreConstruct
	// void PreConstruct(bool IsDesignTime);                                                                                    // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.PlaySound
	// void PlaySound(class USoundBase* SoundToPlay);                                                                           // [0x29efff0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.PlayAnimationTimeRange
	// class UUMGSequencePlayer* PlayAnimationTimeRange(class UWidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int32_t NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode> PlayMode, float PlaybackSpeed, bool bRestoreState); // [0x29efdd0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.PlayAnimationReverse
	// class UUMGSequencePlayer* PlayAnimationReverse(class UWidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState); // [0x29efcb0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.PlayAnimationForward
	// class UUMGSequencePlayer* PlayAnimationForward(class UWidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState); // [0x29efb90] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.PlayAnimation
	// class UUMGSequencePlayer* PlayAnimation(class UWidgetAnimation* InAnimation, float StartAtTime, int32_t NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode> PlayMode, float PlaybackSpeed, bool bRestoreState); // [0x29ef9c0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.PauseAnimation
	// float PauseAnimation(class UWidgetAnimation* InAnimation);                                                               // [0x29ef920] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.OnTouchStarted
	// FEventReply OnTouchStarted(FGeometry MyGeometry, FPointerEvent& InTouchEvent);                                           // [0x198a600] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnTouchMoved
	// FEventReply OnTouchMoved(FGeometry MyGeometry, FPointerEvent& InTouchEvent);                                             // [0x198a600] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnTouchGesture
	// FEventReply OnTouchGesture(FGeometry MyGeometry, FPointerEvent& GestureEvent);                                           // [0x198a600] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnTouchForceChanged
	// FEventReply OnTouchForceChanged(FGeometry MyGeometry, FPointerEvent& InTouchEvent);                                      // [0x198a600] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnTouchEnded
	// FEventReply OnTouchEnded(FGeometry MyGeometry, FPointerEvent& InTouchEvent);                                             // [0x198a600] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnRemovedFromFocusPath
	// void OnRemovedFromFocusPath(FFocusEvent InFocusEvent);                                                                   // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnPreviewMouseButtonDown
	// FEventReply OnPreviewMouseButtonDown(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                   // [0x198a600] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnPreviewKeyDown
	// FEventReply OnPreviewKeyDown(FGeometry MyGeometry, FKeyEvent InKeyEvent);                                                // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnPaint
	// void OnPaint(FPaintContext& Context);                                                                                    // [0x198a600] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent|Const 
	// Function /Script/UMG.UserWidget.OnMouseWheel
	// FEventReply OnMouseWheel(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                               // [0x198a600] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnMouseMove
	// FEventReply OnMouseMove(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                                // [0x198a600] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnMouseLeave
	// void OnMouseLeave(FPointerEvent& MouseEvent);                                                                            // [0x198a600] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnMouseEnter
	// void OnMouseEnter(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                                      // [0x198a600] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnMouseCaptureLost
	// void OnMouseCaptureLost();                                                                                               // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnMouseButtonUp
	// FEventReply OnMouseButtonUp(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                            // [0x198a600] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnMouseButtonDown
	// FEventReply OnMouseButtonDown(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                          // [0x198a600] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnMouseButtonDoubleClick
	// FEventReply OnMouseButtonDoubleClick(FGeometry InMyGeometry, FPointerEvent& InMouseEvent);                               // [0x198a600] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnMotionDetected
	// FEventReply OnMotionDetected(FGeometry MyGeometry, FMotionEvent InMotionEvent);                                          // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnKeyUp
	// FEventReply OnKeyUp(FGeometry MyGeometry, FKeyEvent InKeyEvent);                                                         // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnKeyDown
	// FEventReply OnKeyDown(FGeometry MyGeometry, FKeyEvent InKeyEvent);                                                       // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnKeyChar
	// FEventReply OnKeyChar(FGeometry MyGeometry, FCharacterEvent InCharacterEvent);                                           // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnInitialized
	// void OnInitialized();                                                                                                    // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnFocusReceived
	// FEventReply OnFocusReceived(FGeometry MyGeometry, FFocusEvent InFocusEvent);                                             // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnFocusLost
	// void OnFocusLost(FFocusEvent InFocusEvent);                                                                              // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnDrop
	// bool OnDrop(FGeometry MyGeometry, FPointerEvent PointerEvent, class UDragDropOperation* Operation);                      // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnDragOver
	// bool OnDragOver(FGeometry MyGeometry, FPointerEvent PointerEvent, class UDragDropOperation* Operation);                  // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnDragLeave
	// void OnDragLeave(FPointerEvent PointerEvent, class UDragDropOperation* Operation);                                       // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnDragEnter
	// void OnDragEnter(FGeometry MyGeometry, FPointerEvent PointerEvent, class UDragDropOperation* Operation);                 // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnDragDetected
	// void OnDragDetected(FGeometry MyGeometry, FPointerEvent& PointerEvent, class UDragDropOperation*& Operation);            // [0x198a600] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnDragCancelled
	// void OnDragCancelled(FPointerEvent& PointerEvent, class UDragDropOperation* Operation);                                  // [0x198a600] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnAnimationStarted
	// void OnAnimationStarted(class UWidgetAnimation* Animation);                                                              // [0x29ef890] BlueprintCosmetic|Native|Event|Protected|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnAnimationFinished
	// void OnAnimationFinished(class UWidgetAnimation* Animation);                                                             // [0x1647520] BlueprintCosmetic|Native|Event|Protected|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnAnalogValueChanged
	// FEventReply OnAnalogValueChanged(FGeometry MyGeometry, FAnalogInputEvent InAnalogInputEvent);                            // [0x198a600] Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnAddedToFocusPath
	// void OnAddedToFocusPath(FFocusEvent InFocusEvent);                                                                       // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.ListenForInputAction
	// void ListenForInputAction(FName ActionName, TEnumAsByte<EInputEvent> EventType, bool bConsume, FDelegateProperty callback); // [0x29ef700] Final|Native|Protected|BlueprintCallable 
	// Function /Script/UMG.UserWidget.IsPlayingAnimation
	// bool IsPlayingAnimation();                                                                                               // [0x29ef6d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.UserWidget.IsListeningForInputAction
	// bool IsListeningForInputAction(FName ActionName);                                                                        // [0x29ef630] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.UserWidget.IsInViewport
	// bool IsInViewport();                                                                                                     // [0x29ef410] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.UserWidget.IsInteractable
	// bool IsInteractable();                                                                                                   // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent|Const 
	// Function /Script/UMG.UserWidget.IsAnyAnimationPlaying
	// bool IsAnyAnimationPlaying();                                                                                            // [0x29ef600] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.UserWidget.IsAnimationPlayingForward
	// bool IsAnimationPlayingForward(class UWidgetAnimation* InAnimation);                                                     // [0x29ef560] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.IsAnimationPlaying
	// bool IsAnimationPlaying(class UWidgetAnimation* InAnimation);                                                            // [0x29ef4c0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.UserWidget.GetOwningPlayerPawn
	// class APawn* GetOwningPlayerPawn();                                                                                      // [0x29ef470] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.UserWidget.GetOwningPlayerCameraManager
	// class APlayerCameraManager* GetOwningPlayerCameraManager();                                                              // [0x29ef440] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.UserWidget.GetIsVisible
	// bool GetIsVisible();                                                                                                     // [0x29ef410] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.UserWidget.GetAnimationCurrentTime
	// float GetAnimationCurrentTime(class UWidgetAnimation* InAnimation);                                                      // [0x29ef370] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.UserWidget.GetAnchorsInViewport
	// FAnchors GetAnchorsInViewport();                                                                                         // [0x29ef330] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.UserWidget.GetAlignmentInViewport
	// FVector2D GetAlignmentInViewport();                                                                                      // [0x29ef2f0] Final|BlueprintCosmetic|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.UserWidget.FlushAnimations
	// void FlushAnimations();                                                                                                  // [0x29ef2d0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.Destruct
	// void Destruct();                                                                                                         // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.Construct
	// void Construct();                                                                                                        // [0x198a600] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.CancelLatentActions
	// void CancelLatentActions();                                                                                              // [0x29ef270] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.BindToAnimationStarted
	// void BindToAnimationStarted(class UWidgetAnimation* Animation, FDelegateProperty Delegate);                              // [0x29ef190] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.BindToAnimationFinished
	// void BindToAnimationFinished(class UWidgetAnimation* Animation, FDelegateProperty Delegate);                             // [0x29ef0b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.BindToAnimationEvent
	// void BindToAnimationEvent(class UWidgetAnimation* Animation, FDelegateProperty Delegate, EWidgetAnimationEvent AnimationEvent, FName UserTag); // [0x29eef30] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.AddToViewport
	// void AddToViewport(int32_t ZOrder);                                                                                      // [0x29eeea0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.AddToPlayerScreen
	// bool AddToPlayerScreen(int32_t ZOrder);                                                                                  // [0x29eee00] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.PanelSlot
/// Size: 0x0010 (0x000028 - 0x000038)
class UPanelSlot : public UVisual
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UPanelWidget*)                       Parent                                                      OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UWidget*)                            Content                                                     OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/UMG.RichTextBlockDecorator
/// Size: 0x0000 (0x000028 - 0x000028)
class URichTextBlockDecorator : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/UMG.ListViewBase
/// Size: 0x0888 (0x000128 - 0x0009B0)
class UListViewBase : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2480;

public:
	SMember(FScrollBarStyle)                           WidgetBarStyle                                              OFFSET(getStruct<T>, {0x130, 1888, 0, 0})
	DMember(float)                                     ScrollBarSize                                               OFFSET(get<float>, {0x890, 4, 0, 0})
	CMember(ESlateVisibility)                          ScrollBarVisibility                                         OFFSET(get<T>, {0x894, 1, 0, 0})
	DMember(bool)                                      bAllowOverscroll                                            OFFSET(get<bool>, {0x895, 1, 0, 0})
	DMember(bool)                                      bStopScrollIfFits                                           OFFSET(get<bool>, {0x896, 1, 0, 0})
	CMember(class UClass*)                             EntryWidgetClass                                            OFFSET(get<T>, {0x898, 8, 0, 0})
	DMember(float)                                     WheelScrollMultiplier                                       OFFSET(get<float>, {0x8A0, 4, 0, 0})
	DMember(bool)                                      bEnableScrollAnimation                                      OFFSET(get<bool>, {0x8A4, 1, 0, 0})
	DMember(bool)                                      bEnableFixedLineOffset                                      OFFSET(get<bool>, {0x8A5, 1, 0, 0})
	DMember(float)                                     FixedLineScrollOffset                                       OFFSET(get<float>, {0x8A8, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  BP_OnEntryGenerated                                         OFFSET(getStruct<T>, {0x8B0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  BP_OnEntryReleased                                          OFFSET(getStruct<T>, {0x8C0, 16, 0, 0})
	SMember(FUserWidgetPool)                           EntryWidgetPool                                             OFFSET(getStruct<T>, {0x8D0, 128, 0, 0})


	/// Functions
	// Function /Script/UMG.ListViewBase.SetWheelScrollMultiplier
	// void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);                                                           // [0x29dcd20] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListViewBase.SetScrollOffset
	// void SetScrollOffset(float InScrollOffset);                                                                              // [0x29dc810] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListViewBase.SetScrollbarVisibility
	// void SetScrollbarVisibility(ESlateVisibility InVisibility);                                                              // [0x29dc890] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListViewBase.ScrollToTop
	// void ScrollToTop();                                                                                                      // [0x29db330] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListViewBase.ScrollToBottom
	// void ScrollToBottom();                                                                                                   // [0x29db310] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListViewBase.RequestRefresh
	// void RequestRefresh();                                                                                                   // [0x29db260] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListViewBase.RegenerateAllEntries
	// void RegenerateAllEntries();                                                                                             // [0x29db1b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListViewBase.GetDisplayedEntryWidgets
	// TArray<UUserWidget*> GetDisplayedEntryWidgets();                                                                         // [0x29daa00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.ListView
/// Size: 0x0150 (0x0009B0 - 0x000B00)
class UListView : public UListViewBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2816;

public:
	CMember(TEnumAsByte<EOrientation>)                 Orientation                                                 OFFSET(get<T>, {0xA68, 1, 0, 0})
	CMember(TEnumAsByte<ESelectionMode>)               SelectionMode                                               OFFSET(get<T>, {0xA69, 1, 0, 0})
	CMember(EConsumeMouseWheel)                        ConsumeMouseWheel                                           OFFSET(get<T>, {0xA6A, 1, 0, 0})
	DMember(bool)                                      bClearSelectionOnClick                                      OFFSET(get<bool>, {0xA6B, 1, 0, 0})
	DMember(bool)                                      bIsFocusable                                                OFFSET(get<bool>, {0xA6C, 1, 0, 0})
	DMember(float)                                     EntrySpacing                                                OFFSET(get<float>, {0xA70, 4, 0, 0})
	DMember(bool)                                      bReturnFocusToSelection                                     OFFSET(get<bool>, {0xA74, 1, 0, 0})
	CMember(TArray<class UObject*>)                    ListItems                                                   OFFSET(get<T>, {0xA78, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  BP_OnEntryInitialized                                       OFFSET(getStruct<T>, {0xA98, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  BP_OnItemClicked                                            OFFSET(getStruct<T>, {0xAA8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  BP_OnItemDoubleClicked                                      OFFSET(getStruct<T>, {0xAB8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  BP_OnItemIsHoveredChanged                                   OFFSET(getStruct<T>, {0xAC8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  BP_OnItemSelectionChanged                                   OFFSET(getStruct<T>, {0xAD8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  BP_OnItemScrolledIntoView                                   OFFSET(getStruct<T>, {0xAE8, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.ListView.SetSelectionMode
	// void SetSelectionMode(TEnumAsByte<ESelectionMode> SelectionMode);                                                        // [0x29dca90] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListView.SetSelectedIndex
	// void SetSelectedIndex(int32_t Index);                                                                                    // [0x29dc910] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListView.ScrollIndexIntoView
	// void ScrollIndexIntoView(int32_t Index);                                                                                 // [0x29db280] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListView.RemoveItem
	// void RemoveItem(class UObject* Item);                                                                                    // [0x29db1d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListView.NavigateToIndex
	// void NavigateToIndex(int32_t Index);                                                                                     // [0x29db120] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListView.IsRefreshPending
	// bool IsRefreshPending();                                                                                                 // [0x29db0f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ListView.InitItem
	// void InitItem(class UClass* InClass, int32_t Num, bool IsReset);                                                         // [0x29daea0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListView.GetNumItems
	// int32_t GetNumItems();                                                                                                   // [0x29dada0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ListView.GetListItems
	// TArray<UObject*> GetListItems();                                                                                         // [0x29dad70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ListView.GetItemAt
	// class UObject* GetItemAt(int32_t Index);                                                                                 // [0x29dac30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ListView.GetIndexForItem
	// int32_t GetIndexForItem(class UObject* Item);                                                                            // [0x29dab60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ListView.GetIndexForEntry
	// int32_t GetIndexForEntry(class UUserWidget* EntryWidget);                                                                // [0x29daac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ListView.ClearListItems
	// void ClearListItems();                                                                                                   // [0x29da9b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListView.BP_SetSelectedItem
	// void BP_SetSelectedItem(class UObject* Item);                                                                            // [0x29da920] Final|Native|Private|BlueprintCallable 
	// Function /Script/UMG.ListView.BP_SetListItems
	// void BP_SetListItems(TArray<UObject*>& InListItems);                                                                     // [0x29da870] Final|Native|Private|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.ListView.BP_SetItemSelection
	// void BP_SetItemSelection(class UObject* Item, bool bSelected);                                                           // [0x29da7a0] Final|Native|Private|BlueprintCallable 
	// Function /Script/UMG.ListView.BP_ScrollItemIntoView
	// void BP_ScrollItemIntoView(class UObject* Item);                                                                         // [0x29da710] Final|Native|Private|BlueprintCallable 
	// Function /Script/UMG.ListView.BP_NavigateToItem
	// void BP_NavigateToItem(class UObject* Item);                                                                             // [0x29da680] Final|Native|Private|BlueprintCallable 
	// Function /Script/UMG.ListView.BP_IsItemVisible
	// bool BP_IsItemVisible(class UObject* Item);                                                                              // [0x29da5e0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ListView.BP_GetSelectedItems
	// bool BP_GetSelectedItems(TArray<UObject*>& Items);                                                                       // [0x29da520] Final|Native|Private|HasOutParms|BlueprintCallable|Const 
	// Function /Script/UMG.ListView.BP_GetSelectedItem
	// class UObject* BP_GetSelectedItem();                                                                                     // [0x29da4f0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ListView.BP_GetNumItemsSelected
	// int32_t BP_GetNumItemsSelected();                                                                                        // [0x29da4c0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ListView.BP_ClearSelection
	// void BP_ClearSelection();                                                                                                // [0x29da4a0] Final|Native|Private|BlueprintCallable 
	// Function /Script/UMG.ListView.BP_CancelScrollIntoView
	// void BP_CancelScrollIntoView();                                                                                          // [0x29da480] Final|Native|Private|BlueprintCallable 
	// Function /Script/UMG.ListView.AddItem
	// void AddItem(class UObject* Item);                                                                                       // [0x29da3f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.SafeZone
/// Size: 0x0018 (0x000140 - 0x000158)
class USafeZone : public UContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	DMember(bool)                                      PadLeft                                                     OFFSET(get<bool>, {0x140, 1, 0, 0})
	DMember(bool)                                      PadRight                                                    OFFSET(get<bool>, {0x141, 1, 0, 0})
	DMember(bool)                                      PadTop                                                      OFFSET(get<bool>, {0x142, 1, 0, 0})
	DMember(bool)                                      PadBottom                                                   OFFSET(get<bool>, {0x143, 1, 0, 0})


	/// Functions
	// Function /Script/UMG.SafeZone.SetSidesToPad
	// void SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom);                                    // [0x29e5cd0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ScrollBox
/// Size: 0x0B20 (0x000140 - 0x000C60)
class UScrollBox : public UPanelWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3168;

public:
	SMember(FScrollBoxStyle)                           WidgetStyle                                                 OFFSET(getStruct<T>, {0x140, 848, 0, 0})
	SMember(FScrollBarStyle)                           WidgetBarStyle                                              OFFSET(getStruct<T>, {0x490, 1888, 0, 0})
	CMember(class USlateWidgetStyleAsset*)             Style                                                       OFFSET(get<T>, {0xBF0, 8, 0, 0})
	CMember(class USlateWidgetStyleAsset*)             BarStyle                                                    OFFSET(get<T>, {0xBF8, 8, 0, 0})
	CMember(TEnumAsByte<EOrientation>)                 Orientation                                                 OFFSET(get<T>, {0xC00, 1, 0, 0})
	CMember(ESlateVisibility)                          ScrollBarVisibility                                         OFFSET(get<T>, {0xC01, 1, 0, 0})
	CMember(EConsumeMouseWheel)                        ConsumeMouseWheel                                           OFFSET(get<T>, {0xC02, 1, 0, 0})
	SMember(FVector2D)                                 ScrollbarThickness                                          OFFSET(getStruct<T>, {0xC04, 8, 0, 0})
	SMember(FMargin)                                   ScrollbarPadding                                            OFFSET(getStruct<T>, {0xC0C, 16, 0, 0})
	DMember(bool)                                      AlwaysShowScrollbar                                         OFFSET(get<bool>, {0xC1C, 1, 0, 0})
	DMember(bool)                                      AlwaysShowScrollbarTrack                                    OFFSET(get<bool>, {0xC1D, 1, 0, 0})
	DMember(bool)                                      AllowOverscroll                                             OFFSET(get<bool>, {0xC1E, 1, 0, 0})
	DMember(bool)                                      bAnimateWheelScrolling                                      OFFSET(get<bool>, {0xC1F, 1, 0, 0})
	CMember(EDescendantScrollDestination)              NavigationDestination                                       OFFSET(get<T>, {0xC20, 1, 0, 0})
	DMember(float)                                     NavigationScrollPadding                                     OFFSET(get<float>, {0xC24, 4, 0, 0})
	CMember(EScrollWhenFocusChanges)                   ScrollWhenFocusChanges                                      OFFSET(get<T>, {0xC28, 1, 0, 0})
	DMember(bool)                                      bAllowRightClickDragScrolling                               OFFSET(get<bool>, {0xC29, 1, 0, 0})
	DMember(float)                                     WheelScrollMultiplier                                       OFFSET(get<float>, {0xC2C, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnUserScrolled                                              OFFSET(getStruct<T>, {0xC30, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.ScrollBox.SetWheelScrollMultiplier
	// void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);                                                           // [0x29e6380] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.SetScrollOffset
	// void SetScrollOffset(float NewScrollOffset);                                                                             // [0x29e5b20] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.SetScrollbarVisibility
	// void SetScrollbarVisibility(ESlateVisibility NewScrollBarVisibility);                                                    // [0x29e5aa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.SetScrollbarThickness
	// void SetScrollbarThickness(FVector2D& NewScrollbarThickness);                                                            // [0x29e5c40] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.SetScrollbarPadding
	// void SetScrollbarPadding(FMargin& NewScrollbarPadding);                                                                  // [0x29e5ba0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.SetOrientation
	// void SetOrientation(TEnumAsByte<EOrientation> NewOrientation);                                                           // [0x29e5870] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.SetConsumeMouseWheel
	// void SetConsumeMouseWheel(EConsumeMouseWheel NewConsumeMouseWheel);                                                      // [0x29e4d40] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.SetAnimateWheelScrolling
	// void SetAnimateWheelScrolling(bool bShouldAnimateWheelScrolling);                                                        // [0x29e4c20] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.SetAlwaysShowScrollbar
	// void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);                                                                // [0x29e4b90] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.SetAllowOverscroll
	// void SetAllowOverscroll(bool NewAllowOverscroll);                                                                        // [0x29e4b00] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.ScrollWidgetIntoView
	// void ScrollWidgetIntoView(class UWidget* WidgetToFind, bool AnimateScroll, EDescendantScrollDestination ScrollDestination, float Padding); // [0x29e49a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.ScrollToStart
	// void ScrollToStart();                                                                                                    // [0x29e4980] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.ScrollToEnd
	// void ScrollToEnd();                                                                                                      // [0x29e4960] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.GetViewOffsetFraction
	// float GetViewOffsetFraction();                                                                                           // [0x29e40e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ScrollBox.GetScrollOffsetOfEnd
	// float GetScrollOffsetOfEnd();                                                                                            // [0x29e4010] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ScrollBox.GetScrollOffset
	// float GetScrollOffset();                                                                                                 // [0x29e3fe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ScrollBox.EndInertialScrolling
	// void EndInertialScrolling();                                                                                             // [0x29e3930] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.WidgetComponent
/// Size: 0x0130 (0x000490 - 0x0005C0)
class UWidgetComponent : public UMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1472;

public:
	CMember(EWidgetSpace)                              Space                                                       OFFSET(get<T>, {0x490, 1, 0, 0})
	CMember(EWidgetTimingPolicy)                       TimingPolicy                                                OFFSET(get<T>, {0x491, 1, 0, 0})
	CMember(class UClass*)                             WidgetClass                                                 OFFSET(get<T>, {0x498, 8, 0, 0})
	SMember(FIntPoint)                                 DrawSize                                                    OFFSET(getStruct<T>, {0x4A0, 8, 0, 0})
	DMember(bool)                                      bManuallyRedraw                                             OFFSET(get<bool>, {0x4A8, 1, 0, 0})
	DMember(bool)                                      bRedrawRequested                                            OFFSET(get<bool>, {0x4A9, 1, 0, 0})
	DMember(float)                                     RedrawTime                                                  OFFSET(get<float>, {0x4AC, 4, 0, 0})
	SMember(FIntPoint)                                 CurrentDrawSize                                             OFFSET(getStruct<T>, {0x4B8, 8, 0, 0})
	DMember(bool)                                      bDrawAtDesiredSize                                          OFFSET(get<bool>, {0x4C0, 1, 0, 0})
	SMember(FVector2D)                                 Pivot                                                       OFFSET(getStruct<T>, {0x4C4, 8, 0, 0})
	DMember(bool)                                      bReceiveHardwareInput                                       OFFSET(get<bool>, {0x4CC, 1, 0, 0})
	DMember(bool)                                      bWindowFocusable                                            OFFSET(get<bool>, {0x4CD, 1, 0, 0})
	CMember(EWindowVisibility)                         WindowVisibility                                            OFFSET(get<T>, {0x4CE, 1, 0, 0})
	DMember(bool)                                      bApplyGammaCorrection                                       OFFSET(get<bool>, {0x4CF, 1, 0, 0})
	CMember(class ULocalPlayer*)                       OwnerPlayer                                                 OFFSET(get<T>, {0x4D0, 8, 0, 0})
	SMember(FLinearColor)                              BackgroundColor                                             OFFSET(getStruct<T>, {0x4D8, 16, 0, 0})
	SMember(FLinearColor)                              TintColorAndOpacity                                         OFFSET(getStruct<T>, {0x4E8, 16, 0, 0})
	DMember(float)                                     OpacityFromTexture                                          OFFSET(get<float>, {0x4F8, 4, 0, 0})
	CMember(EWidgetBlendMode)                          BlendMode                                                   OFFSET(get<T>, {0x4FC, 1, 0, 0})
	DMember(bool)                                      bIsTwoSided                                                 OFFSET(get<bool>, {0x4FD, 1, 0, 0})
	DMember(bool)                                      TickWhenOffscreen                                           OFFSET(get<bool>, {0x4FE, 1, 0, 0})
	CMember(class UBodySetup*)                         BodySetup                                                   OFFSET(get<T>, {0x500, 8, 0, 0})
	CMember(class UMaterialInterface*)                 TranslucentMaterial                                         OFFSET(get<T>, {0x508, 8, 0, 0})
	CMember(class UMaterialInterface*)                 TranslucentMaterial_OneSided                                OFFSET(get<T>, {0x510, 8, 0, 0})
	CMember(class UMaterialInterface*)                 OpaqueMaterial                                              OFFSET(get<T>, {0x518, 8, 0, 0})
	CMember(class UMaterialInterface*)                 OpaqueMaterial_OneSided                                     OFFSET(get<T>, {0x520, 8, 0, 0})
	CMember(class UMaterialInterface*)                 MaskedMaterial                                              OFFSET(get<T>, {0x528, 8, 0, 0})
	CMember(class UMaterialInterface*)                 MaskedMaterial_OneSided                                     OFFSET(get<T>, {0x530, 8, 0, 0})
	CMember(class UTextureRenderTarget2D*)             RenderTarget                                                OFFSET(get<T>, {0x538, 8, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           MaterialInstance                                            OFFSET(get<T>, {0x540, 8, 0, 0})
	DMember(bool)                                      bAddedToScreen                                              OFFSET(get<bool>, {0x548, 1, 0, 0})
	DMember(bool)                                      bEditTimeUsable                                             OFFSET(get<bool>, {0x549, 1, 0, 0})
	SMember(FName)                                     SharedLayerName                                             OFFSET(getStruct<T>, {0x54C, 8, 0, 0})
	DMember(int32_t)                                   LayerZOrder                                                 OFFSET(get<int32_t>, {0x554, 4, 0, 0})
	CMember(EWidgetGeometryMode)                       GeometryMode                                                OFFSET(get<T>, {0x558, 1, 0, 0})
	DMember(float)                                     CylinderArcAngle                                            OFFSET(get<float>, {0x55C, 4, 0, 0})
	CMember(ETickMode)                                 TickMode                                                    OFFSET(get<T>, {0x560, 1, 0, 0})
	CMember(class UUserWidget*)                        Widget                                                      OFFSET(get<T>, {0x588, 8, 0, 0})


	/// Functions
	// Function /Script/UMG.WidgetComponent.SetWindowVisibility
	// void SetWindowVisibility(EWindowVisibility InVisibility);                                                                // [0x29fc000] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetWindowFocusable
	// void SetWindowFocusable(bool bInWindowFocusable);                                                                        // [0x29fbcc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetWidgetSpace
	// void SetWidgetSpace(EWidgetSpace NewSpace);                                                                              // [0x29fbc40] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetWidget
	// void SetWidget(class UUserWidget* Widget);                                                                               // [0x29fbbb0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetTwoSided
	// void SetTwoSided(bool bWantTwoSided);                                                                                    // [0x29fbb20] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetTintColorAndOpacity
	// void SetTintColorAndOpacity(FLinearColor NewTintColorAndOpacity);                                                        // [0x29fba90] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetTickWhenOffscreen
	// void SetTickWhenOffscreen(bool bWantTickWhenOffscreen);                                                                  // [0x29fba00] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetTickMode
	// void SetTickMode(ETickMode InTickMode);                                                                                  // [0x29fb980] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetRedrawTime
	// void SetRedrawTime(float InRedrawTime);                                                                                  // [0x29fb900] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetPivot
	// void SetPivot(FVector2D& InPivot);                                                                                       // [0x29fb870] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetOwnerPlayer
	// void SetOwnerPlayer(class ULocalPlayer* LocalPlayer);                                                                    // [0x29fb7e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetManuallyRedraw
	// void SetManuallyRedraw(bool bUseManualRedraw);                                                                           // [0x29fb620] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetGeometryMode
	// void SetGeometryMode(EWidgetGeometryMode InGeometryMode);                                                                // [0x29faf30] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetDrawSize
	// void SetDrawSize(FVector2D Size);                                                                                        // [0x29fae90] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetDrawAtDesiredSize
	// void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);                                                                    // [0x29fae00] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetCylinderArcAngle
	// void SetCylinderArcAngle(float InCylinderArcAngle);                                                                      // [0x29fad80] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetBackgroundColor
	// void SetBackgroundColor(FLinearColor NewBackgroundColor);                                                                // [0x29fa980] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.RequestRedraw
	// void RequestRedraw();                                                                                                    // [0x29fa940] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.IsWidgetVisible
	// bool IsWidgetVisible();                                                                                                  // [0x29fa350] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetWindowVisiblility
	// EWindowVisibility GetWindowVisiblility();                                                                                // [0x29fa290] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetWindowFocusable
	// bool GetWindowFocusable();                                                                                               // [0x29fa270] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetWidgetSpace
	// EWidgetSpace GetWidgetSpace();                                                                                           // [0x29fa250] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetWidget
	// class UUserWidget* GetWidget();                                                                                          // [0x29fa220] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetUserWidgetObject
	// class UUserWidget* GetUserWidgetObject();                                                                                // [0x29fa1c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetTwoSided
	// bool GetTwoSided();                                                                                                      // [0x29fa1a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetTickWhenOffscreen
	// bool GetTickWhenOffscreen();                                                                                             // [0x29fa180] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetRenderTarget
	// class UTextureRenderTarget2D* GetRenderTarget();                                                                         // [0x29f9fd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetRedrawTime
	// float GetRedrawTime();                                                                                                   // [0x29f9fb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetPivot
	// FVector2D GetPivot();                                                                                                    // [0x29f9f80] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetOwnerPlayer
	// class ULocalPlayer* GetOwnerPlayer();                                                                                    // [0x29f9f50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetMaterialInstance
	// class UMaterialInstanceDynamic* GetMaterialInstance();                                                                   // [0x29f9f20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetManuallyRedraw
	// bool GetManuallyRedraw();                                                                                                // [0x24dde10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetGeometryMode
	// EWidgetGeometryMode GetGeometryMode();                                                                                   // [0x29f9950] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetDrawSize
	// FVector2D GetDrawSize();                                                                                                 // [0x29f9740] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetDrawAtDesiredSize
	// bool GetDrawAtDesiredSize();                                                                                             // [0x29f9720] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetCylinderArcAngle
	// float GetCylinderArcAngle();                                                                                             // [0x29f96d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetCurrentDrawSize
	// FVector2D GetCurrentDrawSize();                                                                                          // [0x29f9690] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.AsyncTaskDownloadImage
/// Size: 0x0020 (0x000030 - 0x000050)
class UAsyncTaskDownloadImage : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FMulticastInlineDelegate)                  OnSuccess                                                   OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFail                                                      OFFSET(getStruct<T>, {0x40, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.AsyncTaskDownloadImage.DownloadImage
	// class UAsyncTaskDownloadImage* DownloadImage(FString URL);                                                               // [0x29d2400] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/UMG.BackgroundBlur
/// Size: 0x0100 (0x000140 - 0x000240)
class UBackgroundBlur : public UContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x140, 16, 0, 0})
	CMember(TEnumAsByte<EHorizontalAlignment>)         HorizontalAlignment                                         OFFSET(get<T>, {0x150, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           VerticalAlignment                                           OFFSET(get<T>, {0x151, 1, 0, 0})
	DMember(bool)                                      bApplyAlphaToBlur                                           OFFSET(get<bool>, {0x152, 1, 0, 0})
	DMember(float)                                     BlurStrength                                                OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(bool)                                      bOverrideAutoRadiusCalculation                              OFFSET(get<bool>, {0x158, 1, 0, 0})
	DMember(int32_t)                                   BlurRadius                                                  OFFSET(get<int32_t>, {0x15C, 4, 0, 0})
	SMember(FSlateBrush)                               LowQualityFallbackBrush                                     OFFSET(getStruct<T>, {0x160, 208, 0, 0})


	/// Functions
	// Function /Script/UMG.BackgroundBlur.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x29d4350] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.BackgroundBlur.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x29d3c30] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.BackgroundBlur.SetLowQualityFallbackBrush
	// void SetLowQualityFallbackBrush(FSlateBrush& InBrush);                                                                   // [0x29d3840] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.BackgroundBlur.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x29d3510] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.BackgroundBlur.SetBlurStrength
	// void SetBlurStrength(float InStrength);                                                                                  // [0x29d2de0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.BackgroundBlur.SetBlurRadius
	// void SetBlurRadius(int32_t InBlurRadius);                                                                                // [0x29d2d50] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.BackgroundBlur.SetApplyAlphaToBlur
	// void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);                                                                      // [0x29d2ba0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.BackgroundBlurSlot
/// Size: 0x0028 (0x000038 - 0x000060)
class UBackgroundBlurSlot : public UPanelSlot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	CMember(TEnumAsByte<EHorizontalAlignment>)         HorizontalAlignment                                         OFFSET(get<T>, {0x48, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           VerticalAlignment                                           OFFSET(get<T>, {0x49, 1, 0, 0})


	/// Functions
	// Function /Script/UMG.BackgroundBlurSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x29d43d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.BackgroundBlurSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x29d3cc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.BackgroundBlurSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x29d3590] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/UMG.DynamicPropertyPath
/// Size: 0x0000 (0x000028 - 0x000028)
class FDynamicPropertyPath : public FCachedPropertyPath
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/UMG.PropertyBinding
/// Size: 0x0038 (0x000028 - 0x000060)
class UPropertyBinding : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TWeakObjectPtr<class UObject*>)            SourceObject                                                OFFSET(get<T>, {0x28, 8, 0, 0})
	SMember(FDynamicPropertyPath)                      SourcePath                                                  OFFSET(getStruct<T>, {0x30, 40, 0, 0})
	SMember(FName)                                     DestinationProperty                                         OFFSET(getStruct<T>, {0x58, 8, 0, 0})
};

/// Class /Script/UMG.BoolBinding
/// Size: 0x0000 (0x000060 - 0x000060)
class UBoolBinding : public UPropertyBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:


	/// Functions
	// Function /Script/UMG.BoolBinding.GetValue
	// bool GetValue();                                                                                                         // [0x29d27c0] Final|Native|Public|Const 
};

/// Class /Script/UMG.Border
/// Size: 0x01A0 (0x000140 - 0x0002E0)
class UBorder : public UContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	CMember(TEnumAsByte<EHorizontalAlignment>)         HorizontalAlignment                                         OFFSET(get<T>, {0x140, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           VerticalAlignment                                           OFFSET(get<T>, {0x141, 1, 0, 0})
	DMember(bool)                                      bShowEffectWhenDisabled                                     OFFSET(get<bool>, {0x142, 1, 1, 0})
	SMember(FLinearColor)                              ContentColorAndOpacity                                      OFFSET(getStruct<T>, {0x144, 16, 0, 0})
	SMember(FDelegateProperty)                         ContentColorAndOpacityDelegate                              OFFSET(getStruct<T>, {0x154, 16, 0, 0})
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x164, 16, 0, 0})
	SMember(FSlateBrush)                               Background                                                  OFFSET(getStruct<T>, {0x180, 208, 0, 0})
	SMember(FDelegateProperty)                         BackgroundDelegate                                          OFFSET(getStruct<T>, {0x250, 16, 0, 0})
	SMember(FLinearColor)                              BrushColor                                                  OFFSET(getStruct<T>, {0x260, 16, 0, 0})
	SMember(FDelegateProperty)                         BrushColorDelegate                                          OFFSET(getStruct<T>, {0x270, 16, 0, 0})
	SMember(FVector2D)                                 DesiredSizeScale                                            OFFSET(getStruct<T>, {0x280, 8, 0, 0})
	DMember(bool)                                      bFlipForRightToLeftFlowDirection                            OFFSET(get<bool>, {0x288, 1, 0, 0})
	SMember(FDelegateProperty)                         OnMouseButtonDownEvent                                      OFFSET(getStruct<T>, {0x28C, 16, 0, 0})
	SMember(FDelegateProperty)                         OnMouseButtonUpEvent                                        OFFSET(getStruct<T>, {0x29C, 16, 0, 0})
	SMember(FDelegateProperty)                         OnMouseMoveEvent                                            OFFSET(getStruct<T>, {0x2AC, 16, 0, 0})
	SMember(FDelegateProperty)                         OnMouseDoubleClickEvent                                     OFFSET(getStruct<T>, {0x2BC, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.Border.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x29d4450] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Border.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x29d3d50] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Border.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x29d3610] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Border.SetDesiredSizeScale
	// void SetDesiredSizeScale(FVector2D InScale);                                                                             // [0x29d3490] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Border.SetContentColorAndOpacity
	// void SetContentColorAndOpacity(FLinearColor InContentColorAndOpacity);                                                   // [0x29d3400] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Border.SetBrushFromTexture
	// void SetBrushFromTexture(class UTexture2D* Texture);                                                                     // [0x29d3160] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Border.SetBrushFromMaterial
	// void SetBrushFromMaterial(class UMaterialInterface* Material);                                                           // [0x29d3160] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Border.SetBrushFromAsset
	// void SetBrushFromAsset(class USlateBrushAsset* Asset);                                                                   // [0x29d30d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Border.SetBrushColor
	// void SetBrushColor(FLinearColor InBrushColor);                                                                           // [0x29d3040] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Border.SetBrush
	// void SetBrush(FSlateBrush& InBrush);                                                                                     // [0x29d2e70] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.Border.GetDynamicMaterial
	// class UMaterialInstanceDynamic* GetDynamicMaterial();                                                                    // [0x29d25d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.BorderSlot
/// Size: 0x0028 (0x000038 - 0x000060)
class UBorderSlot : public UPanelSlot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	CMember(TEnumAsByte<EHorizontalAlignment>)         HorizontalAlignment                                         OFFSET(get<T>, {0x48, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           VerticalAlignment                                           OFFSET(get<T>, {0x49, 1, 0, 0})


	/// Functions
	// Function /Script/UMG.BorderSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x29d44d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.BorderSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x29d3de0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.BorderSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x29d3690] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.BrushBinding
/// Size: 0x0008 (0x000060 - 0x000068)
class UBrushBinding : public UPropertyBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:


	/// Functions
	// Function /Script/UMG.BrushBinding.GetValue
	// FSlateBrush GetValue();                                                                                                  // [0x29d27f0] Final|Native|Public|Const 
};

/// Class /Script/UMG.ButtonSlot
/// Size: 0x0028 (0x000038 - 0x000060)
class UButtonSlot : public UPanelSlot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	CMember(TEnumAsByte<EHorizontalAlignment>)         HorizontalAlignment                                         OFFSET(get<T>, {0x48, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           VerticalAlignment                                           OFFSET(get<T>, {0x49, 1, 0, 0})


	/// Functions
	// Function /Script/UMG.ButtonSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0xf162b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ButtonSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0xf16220] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ButtonSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0xf161a0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/UMG.AnchorData
/// Size: 0x0028 (0x000000 - 0x000028)
class FAnchorData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FMargin)                                   Offsets                                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FAnchors)                                  Anchors                                                     OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FVector2D)                                 Alignment                                                   OFFSET(getStruct<T>, {0x20, 8, 0, 0})
};

/// Class /Script/UMG.CanvasPanelSlot
/// Size: 0x0038 (0x000038 - 0x000070)
class UCanvasPanelSlot : public UPanelSlot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FAnchorData)                               LayoutData                                                  OFFSET(getStruct<T>, {0x38, 40, 0, 0})
	DMember(bool)                                      bAutoSize                                                   OFFSET(get<bool>, {0x60, 1, 0, 0})
	DMember(int32_t)                                   ZOrder                                                      OFFSET(get<int32_t>, {0x64, 4, 0, 0})


	/// Functions
	// Function /Script/UMG.CanvasPanelSlot.SetZOrder
	// void SetZOrder(int32_t InZOrder);                                                                                        // [0x29d4550] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.CanvasPanelSlot.SetSize
	// void SetSize(FVector2D InSize);                                                                                          // [0x29d40f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.CanvasPanelSlot.SetPosition
	// void SetPosition(FVector2D InPosition);                                                                                  // [0x29d3ef0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.CanvasPanelSlot.SetOffsets
	// void SetOffsets(FMargin InOffset);                                                                                       // [0x29d3ba0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.CanvasPanelSlot.SetMinimum
	// void SetMinimum(FVector2D InMinimumAnchors);                                                                             // [0x29d3a90] Final|Native|Public|HasDefaults 
	// Function /Script/UMG.CanvasPanelSlot.SetMaximum
	// void SetMaximum(FVector2D InMaximumAnchors);                                                                             // [0x29d3a10] Final|Native|Public|HasDefaults 
	// Function /Script/UMG.CanvasPanelSlot.SetLayout
	// void SetLayout(FAnchorData& InLayoutData);                                                                               // [0x29d37a0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.CanvasPanelSlot.SetAutoSize
	// void SetAutoSize(bool InbAutoSize);                                                                                      // [0x29d2c30] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.CanvasPanelSlot.SetAnchors
	// void SetAnchors(FAnchors InAnchors);                                                                                     // [0x29d2b10] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.CanvasPanelSlot.SetAlignment
	// void SetAlignment(FVector2D InAlignment);                                                                                // [0x29d2a90] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.CanvasPanelSlot.GetZOrder
	// int32_t GetZOrder();                                                                                                     // [0x29d29d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.CanvasPanelSlot.GetSize
	// FVector2D GetSize();                                                                                                     // [0x29d2710] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.CanvasPanelSlot.GetPosition
	// FVector2D GetPosition();                                                                                                 // [0x29d26d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.CanvasPanelSlot.GetOffsets
	// FMargin GetOffsets();                                                                                                    // [0x29d2690] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.CanvasPanelSlot.GetLayout
	// FAnchorData GetLayout();                                                                                                 // [0x29d2600] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.CanvasPanelSlot.GetAutoSize
	// bool GetAutoSize();                                                                                                      // [0x29d2570] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.CanvasPanelSlot.GetAnchors
	// FAnchors GetAnchors();                                                                                                   // [0x29d2530] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.CanvasPanelSlot.GetAlignment
	// FVector2D GetAlignment();                                                                                                // [0x29d24f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.CheckBox
/// Size: 0x08F0 (0x000140 - 0x000A30)
class UCheckBox : public UContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2608;

public:
	CMember(ECheckBoxState)                            CheckedState                                                OFFSET(get<T>, {0x140, 1, 0, 0})
	SMember(FDelegateProperty)                         CheckedStateDelegate                                        OFFSET(getStruct<T>, {0x144, 16, 0, 0})
	SMember(FCheckBoxStyle)                            WidgetStyle                                                 OFFSET(getStruct<T>, {0x160, 2064, 0, 0})
	CMember(class USlateWidgetStyleAsset*)             Style                                                       OFFSET(get<T>, {0x970, 8, 0, 0})
	CMember(class USlateBrushAsset*)                   UncheckedImage                                              OFFSET(get<T>, {0x978, 8, 0, 0})
	CMember(class USlateBrushAsset*)                   UncheckedHoveredImage                                       OFFSET(get<T>, {0x980, 8, 0, 0})
	CMember(class USlateBrushAsset*)                   UncheckedPressedImage                                       OFFSET(get<T>, {0x988, 8, 0, 0})
	CMember(class USlateBrushAsset*)                   CheckedImage                                                OFFSET(get<T>, {0x990, 8, 0, 0})
	CMember(class USlateBrushAsset*)                   CheckedHoveredImage                                         OFFSET(get<T>, {0x998, 8, 0, 0})
	CMember(class USlateBrushAsset*)                   CheckedPressedImage                                         OFFSET(get<T>, {0x9A0, 8, 0, 0})
	CMember(class USlateBrushAsset*)                   UndeterminedImage                                           OFFSET(get<T>, {0x9A8, 8, 0, 0})
	CMember(class USlateBrushAsset*)                   UndeterminedHoveredImage                                    OFFSET(get<T>, {0x9B0, 8, 0, 0})
	CMember(class USlateBrushAsset*)                   UndeterminedPressedImage                                    OFFSET(get<T>, {0x9B8, 8, 0, 0})
	CMember(TEnumAsByte<EHorizontalAlignment>)         HorizontalAlignment                                         OFFSET(get<T>, {0x9C0, 1, 0, 0})
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x9C4, 16, 0, 0})
	SMember(FSlateColor)                               BorderBackgroundColor                                       OFFSET(getStruct<T>, {0x9D8, 40, 0, 0})
	CMember(TEnumAsByte<EButtonClickMethod>)           ClickMethod                                                 OFFSET(get<T>, {0xA00, 1, 0, 0})
	CMember(TEnumAsByte<EButtonTouchMethod>)           TouchMethod                                                 OFFSET(get<T>, {0xA01, 1, 0, 0})
	CMember(TEnumAsByte<EButtonPressMethod>)           PressMethod                                                 OFFSET(get<T>, {0xA02, 1, 0, 0})
	DMember(bool)                                      IsFocusable                                                 OFFSET(get<bool>, {0xA03, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCheckStateChanged                                         OFFSET(getStruct<T>, {0xA08, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.CheckBox.SetTouchMethod
	// void SetTouchMethod(TEnumAsByte<EButtonTouchMethod> InTouchMethod);                                                      // [0x29d42d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.CheckBox.SetPressMethod
	// void SetPressMethod(TEnumAsByte<EButtonPressMethod> InPressMethod);                                                      // [0x29d3ff0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.CheckBox.SetIsChecked
	// void SetIsChecked(bool InIsChecked);                                                                                     // [0x29d3710] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.CheckBox.SetClickMethod
	// void SetClickMethod(TEnumAsByte<EButtonClickMethod> InClickMethod);                                                      // [0x29d32f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.CheckBox.SetCheckedState
	// void SetCheckedState(ECheckBoxState InCheckedState);                                                                     // [0x29d31f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.CheckBox.IsPressed
	// bool IsPressed();                                                                                                        // [0x29d2a60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.CheckBox.IsChecked
	// bool IsChecked();                                                                                                        // [0x29d2a00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.CheckBox.GetCheckedState
	// ECheckBoxState GetCheckedState();                                                                                        // [0x29d25a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.CheckedStateBinding
/// Size: 0x0008 (0x000060 - 0x000068)
class UCheckedStateBinding : public UPropertyBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:


	/// Functions
	// Function /Script/UMG.CheckedStateBinding.GetValue
	// ECheckBoxState GetValue();                                                                                               // [0x29d29a0] Final|Native|Public|Const 
};

/// Class /Script/UMG.CircularThrobber
/// Size: 0x0108 (0x000128 - 0x000230)
class UCircularThrobber : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	DMember(int32_t)                                   NumberOfPieces                                              OFFSET(get<int32_t>, {0x128, 4, 0, 0})
	DMember(float)                                     Period                                                      OFFSET(get<float>, {0x12C, 4, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x130, 4, 0, 0})
	CMember(class USlateBrushAsset*)                   PieceImage                                                  OFFSET(get<T>, {0x138, 8, 0, 0})
	SMember(FSlateBrush)                               Image                                                       OFFSET(getStruct<T>, {0x140, 208, 0, 0})
	DMember(bool)                                      bEnableRadius                                               OFFSET(get<bool>, {0x210, 1, 0, 0})


	/// Functions
	// Function /Script/UMG.CircularThrobber.SetRadius
	// void SetRadius(float InRadius);                                                                                          // [0x29d4070] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.CircularThrobber.SetPeriod
	// void SetPeriod(float InPeriod);                                                                                          // [0x29d3e70] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.CircularThrobber.SetNumberOfPieces
	// void SetNumberOfPieces(int32_t InNumberOfPieces);                                                                        // [0x29d3b10] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ColorBinding
/// Size: 0x0008 (0x000060 - 0x000068)
class UColorBinding : public UPropertyBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:


	/// Functions
	// Function /Script/UMG.ColorBinding.GetSlateValue
	// FSlateColor GetSlateValue();                                                                                             // [0x29d2750] Final|Native|Public|Const 
	// Function /Script/UMG.ColorBinding.GetLinearValue
	// FLinearColor GetLinearValue();                                                                                           // [0x29d2650] Final|Native|Public|HasDefaults|Const 
};

/// Class /Script/UMG.ComboBox
/// Size: 0x0038 (0x000128 - 0x000160)
class UComboBox : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(TArray<class UObject*>)                    Items                                                       OFFSET(get<T>, {0x128, 16, 0, 0})
	SMember(FDelegateProperty)                         OnGenerateWidgetEvent                                       OFFSET(getStruct<T>, {0x138, 16, 0, 0})
	DMember(bool)                                      bIsFocusable                                                OFFSET(get<bool>, {0x148, 1, 0, 0})
};

/// Class /Script/UMG.ComboBoxString
/// Size: 0x12C8 (0x000128 - 0x0013F0)
class UComboBoxString : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 5104;

public:
	CMember(TArray<FString>)                           DefaultOptions                                              OFFSET(get<T>, {0x128, 16, 0, 0})
	SMember(FString)                                   SelectedOption                                              OFFSET(getStruct<T>, {0x138, 16, 0, 0})
	SMember(FComboBoxStyle)                            WidgetStyle                                                 OFFSET(getStruct<T>, {0x150, 1472, 0, 0})
	SMember(FTableRowStyle)                            ItemStyle                                                   OFFSET(getStruct<T>, {0x710, 3008, 0, 0})
	SMember(FMargin)                                   ContentPadding                                              OFFSET(getStruct<T>, {0x12D0, 16, 0, 0})
	DMember(float)                                     MaxListHeight                                               OFFSET(get<float>, {0x12E0, 4, 0, 0})
	DMember(bool)                                      HasDownArrow                                                OFFSET(get<bool>, {0x12E4, 1, 0, 0})
	DMember(bool)                                      EnableGamepadNavigationMode                                 OFFSET(get<bool>, {0x12E5, 1, 0, 0})
	SMember(FSlateFontInfo)                            Font                                                        OFFSET(getStruct<T>, {0x12E8, 88, 0, 0})
	SMember(FSlateColor)                               ForegroundColor                                             OFFSET(getStruct<T>, {0x1340, 40, 0, 0})
	DMember(bool)                                      bIsFocusable                                                OFFSET(get<bool>, {0x1368, 1, 0, 0})
	SMember(FDelegateProperty)                         OnGenerateWidgetEvent                                       OFFSET(getStruct<T>, {0x136C, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSelectionChanged                                          OFFSET(getStruct<T>, {0x1380, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOpening                                                   OFFSET(getStruct<T>, {0x1390, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.ComboBoxString.SetSelectedOption
	// void SetSelectedOption(FString Option);                                                                                  // [0x29d7de0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ComboBoxString.SetSelectedIndex
	// void SetSelectedIndex(int32_t Index);                                                                                    // [0x29d7d50] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ComboBoxString.RemoveOption
	// bool RemoveOption(FString Option);                                                                                       // [0x29d71a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ComboBoxString.RefreshOptions
	// void RefreshOptions();                                                                                                   // [0x29d70f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ComboBoxString.OnSelectionChangedEvent__DelegateSignature
	// void OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, TEnumAsByte<ESelectInfo> SelectionType);           // [0x198a600] MulticastDelegate|Public|Delegate 
	// Function /Script/UMG.ComboBoxString.OnOpeningEvent__DelegateSignature
	// void OnOpeningEvent__DelegateSignature();                                                                                // [0x198a600] MulticastDelegate|Public|Delegate 
	// Function /Script/UMG.ComboBoxString.IsOpen
	// bool IsOpen();                                                                                                           // [0x29d70c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ComboBoxString.GetSelectedOption
	// FString GetSelectedOption();                                                                                             // [0x29d6ea0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ComboBoxString.GetSelectedIndex
	// int32_t GetSelectedIndex();                                                                                              // [0x29d6e70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ComboBoxString.GetOptionCount
	// int32_t GetOptionCount();                                                                                                // [0x29d6e40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ComboBoxString.GetOptionAtIndex
	// FString GetOptionAtIndex(int32_t Index);                                                                                 // [0x29d6d60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ComboBoxString.FindOptionIndex
	// int32_t FindOptionIndex(FString Option);                                                                                 // [0x29d6b60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ComboBoxString.ClearSelection
	// void ClearSelection();                                                                                                   // [0x29d67b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ComboBoxString.ClearOptions
	// void ClearOptions();                                                                                                     // [0x29d6790] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ComboBoxString.AddOption
	// void AddOption(FString Option);                                                                                          // [0x29d6600] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.DragDropOperation
/// Size: 0x0060 (0x000028 - 0x000088)
class UDragDropOperation : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FString)                                   Tag                                                         OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	CMember(class UObject*)                            Payload                                                     OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UWidget*)                            DefaultDragVisual                                           OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(EDragPivot)                                Pivot                                                       OFFSET(get<T>, {0x48, 1, 0, 0})
	SMember(FVector2D)                                 Offset                                                      OFFSET(getStruct<T>, {0x4C, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDrop                                                      OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDragCancelled                                             OFFSET(getStruct<T>, {0x68, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDragged                                                   OFFSET(getStruct<T>, {0x78, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.DragDropOperation.Drop
	// void Drop(FPointerEvent& PointerEvent);                                                                                  // [0x29d6a30] Native|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.DragDropOperation.Dragged
	// void Dragged(FPointerEvent& PointerEvent);                                                                               // [0x29d6900] Native|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.DragDropOperation.DragCancelled
	// void DragCancelled(FPointerEvent& PointerEvent);                                                                         // [0x29d67d0] Native|Event|Public|HasOutParms|BlueprintEvent 
};

/// Class /Script/UMG.DynamicEntryBox
/// Size: 0x0008 (0x0001F8 - 0x000200)
class UDynamicEntryBox : public UDynamicEntryBoxBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
	CMember(class UClass*)                             EntryWidgetClass                                            OFFSET(get<T>, {0x1F8, 8, 0, 0})


	/// Functions
	// Function /Script/UMG.DynamicEntryBox.Reset
	// void Reset(bool bDeleteWidgets);                                                                                         // [0x29d7250] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.DynamicEntryBox.RemoveEntry
	// void RemoveEntry(class UUserWidget* EntryWidget);                                                                        // [0x29d7110] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.DynamicEntryBox.BP_CreateEntryOfClass
	// class UUserWidget* BP_CreateEntryOfClass(class UClass* EntryClass);                                                      // [0x29d66d0] Final|Native|Private|BlueprintCallable 
	// Function /Script/UMG.DynamicEntryBox.BP_CreateEntry
	// class UUserWidget* BP_CreateEntry();                                                                                     // [0x29d66a0] Final|Native|Private|BlueprintCallable 
};

/// Class /Script/UMG.EditableText
/// Size: 0x0448 (0x000128 - 0x000570)
class UEditableText : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1392;

public:
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x128, 24, 0, 0})
	SMember(FDelegateProperty)                         TextDelegate                                                OFFSET(getStruct<T>, {0x140, 16, 0, 0})
	SMember(FText)                                     HintText                                                    OFFSET(getStruct<T>, {0x150, 24, 0, 0})
	SMember(FDelegateProperty)                         HintTextDelegate                                            OFFSET(getStruct<T>, {0x168, 16, 0, 0})
	SMember(FEditableTextStyle)                        WidgetStyle                                                 OFFSET(getStruct<T>, {0x180, 768, 0, 0})
	CMember(class USlateWidgetStyleAsset*)             Style                                                       OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(class USlateBrushAsset*)                   BackgroundImageSelected                                     OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(class USlateBrushAsset*)                   BackgroundImageComposing                                    OFFSET(get<T>, {0x490, 8, 0, 0})
	CMember(class USlateBrushAsset*)                   CaretImage                                                  OFFSET(get<T>, {0x498, 8, 0, 0})
	SMember(FSlateFontInfo)                            Font                                                        OFFSET(getStruct<T>, {0x4A0, 88, 0, 0})
	SMember(FSlateColor)                               ColorAndOpacity                                             OFFSET(getStruct<T>, {0x4F8, 40, 0, 0})
	DMember(bool)                                      IsReadOnly                                                  OFFSET(get<bool>, {0x520, 1, 0, 0})
	DMember(bool)                                      IsPassword                                                  OFFSET(get<bool>, {0x521, 1, 0, 0})
	DMember(float)                                     MinimumDesiredWidth                                         OFFSET(get<float>, {0x524, 4, 0, 0})
	DMember(bool)                                      IsCaretMovedWhenGainFocus                                   OFFSET(get<bool>, {0x528, 1, 0, 0})
	DMember(bool)                                      SelectAllTextWhenFocused                                    OFFSET(get<bool>, {0x529, 1, 0, 0})
	DMember(bool)                                      RevertTextOnEscape                                          OFFSET(get<bool>, {0x52A, 1, 0, 0})
	DMember(bool)                                      ClearKeyboardFocusOnCommit                                  OFFSET(get<bool>, {0x52B, 1, 0, 0})
	DMember(bool)                                      SelectAllTextOnCommit                                       OFFSET(get<bool>, {0x52C, 1, 0, 0})
	DMember(bool)                                      AllowContextMenu                                            OFFSET(get<bool>, {0x52D, 1, 0, 0})
	CMember(TEnumAsByte<EVirtualKeyboardType>)         KeyboardType                                                OFFSET(get<T>, {0x52E, 1, 0, 0})
	SMember(FVirtualKeyboardOptions)                   VirtualKeyboardOptions                                      OFFSET(getStruct<T>, {0x52F, 1, 0, 0})
	CMember(EVirtualKeyboardTrigger)                   VirtualKeyboardTrigger                                      OFFSET(get<T>, {0x530, 1, 0, 0})
	CMember(EVirtualKeyboardDismissAction)             VirtualKeyboardDismissAction                                OFFSET(get<T>, {0x531, 1, 0, 0})
	CMember(TEnumAsByte<ETextJustify>)                 Justification                                               OFFSET(get<T>, {0x532, 1, 0, 0})
	SMember(FShapedTextOptions)                        ShapedTextOptions                                           OFFSET(getStruct<T>, {0x533, 3, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTextChanged                                               OFFSET(getStruct<T>, {0x538, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTextCommitted                                             OFFSET(getStruct<T>, {0x548, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.EditableText.SetText
	// void SetText(FText InText);                                                                                              // [0x29d7ed0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.EditableText.SetJustification
	// void SetJustification(TEnumAsByte<ETextJustify> InJustification);                                                        // [0x29d7ae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.EditableText.SetIsReadOnly
	// void SetIsReadOnly(bool InbIsReadyOnly);                                                                                 // [0x29d79c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.EditableText.SetIsPassword
	// void SetIsPassword(bool InbIsPassword);                                                                                  // [0x29d78a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.EditableText.SetHintText
	// void SetHintText(FText InHintText);                                                                                      // [0x29d75c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.EditableText.OnEditableTextCommittedEvent__DelegateSignature
	// void OnEditableTextCommittedEvent__DelegateSignature(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                // [0x198a600] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/UMG.EditableText.OnEditableTextChangedEvent__DelegateSignature
	// void OnEditableTextChangedEvent__DelegateSignature(FText& Text);                                                         // [0x198a600] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/UMG.EditableText.GetText
	// FText GetText();                                                                                                         // [0x29d6f20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.EditableTextBox
/// Size: 0x0DC8 (0x000128 - 0x000EF0)
class UEditableTextBox : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3824;

public:
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x128, 24, 0, 0})
	SMember(FDelegateProperty)                         TextDelegate                                                OFFSET(getStruct<T>, {0x140, 16, 0, 0})
	SMember(FEditableTextBoxStyle)                     WidgetStyle                                                 OFFSET(getStruct<T>, {0x150, 2992, 0, 0})
	CMember(class USlateWidgetStyleAsset*)             Style                                                       OFFSET(get<T>, {0xD00, 8, 0, 0})
	SMember(FText)                                     HintText                                                    OFFSET(getStruct<T>, {0xD08, 24, 0, 0})
	SMember(FDelegateProperty)                         HintTextDelegate                                            OFFSET(getStruct<T>, {0xD20, 16, 0, 0})
	SMember(FSlateFontInfo)                            Font                                                        OFFSET(getStruct<T>, {0xD30, 88, 0, 0})
	SMember(FLinearColor)                              ForegroundColor                                             OFFSET(getStruct<T>, {0xD88, 16, 0, 0})
	SMember(FLinearColor)                              BackgroundColor                                             OFFSET(getStruct<T>, {0xD98, 16, 0, 0})
	SMember(FLinearColor)                              ReadOnlyForegroundColor                                     OFFSET(getStruct<T>, {0xDA8, 16, 0, 0})
	DMember(bool)                                      IsReadOnly                                                  OFFSET(get<bool>, {0xDB8, 1, 0, 0})
	DMember(bool)                                      IsPassword                                                  OFFSET(get<bool>, {0xDB9, 1, 0, 0})
	DMember(float)                                     MinimumDesiredWidth                                         OFFSET(get<float>, {0xDBC, 4, 0, 0})
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0xDC0, 16, 0, 0})
	DMember(bool)                                      IsCaretMovedWhenGainFocus                                   OFFSET(get<bool>, {0xDD0, 1, 0, 0})
	DMember(bool)                                      SelectAllTextWhenFocused                                    OFFSET(get<bool>, {0xDD1, 1, 0, 0})
	DMember(bool)                                      RevertTextOnEscape                                          OFFSET(get<bool>, {0xDD2, 1, 0, 0})
	DMember(bool)                                      ClearKeyboardFocusOnCommit                                  OFFSET(get<bool>, {0xDD3, 1, 0, 0})
	DMember(bool)                                      SelectAllTextOnCommit                                       OFFSET(get<bool>, {0xDD4, 1, 0, 0})
	DMember(bool)                                      AllowContextMenu                                            OFFSET(get<bool>, {0xDD5, 1, 0, 0})
	CMember(TEnumAsByte<EVirtualKeyboardType>)         KeyboardType                                                OFFSET(get<T>, {0xDD6, 1, 0, 0})
	SMember(FVirtualKeyboardOptions)                   VirtualKeyboardOptions                                      OFFSET(getStruct<T>, {0xDD7, 1, 0, 0})
	CMember(EVirtualKeyboardTrigger)                   VirtualKeyboardTrigger                                      OFFSET(get<T>, {0xDD8, 1, 0, 0})
	CMember(EVirtualKeyboardDismissAction)             VirtualKeyboardDismissAction                                OFFSET(get<T>, {0xDD9, 1, 0, 0})
	CMember(TEnumAsByte<ETextJustify>)                 Justification                                               OFFSET(get<T>, {0xDDA, 1, 0, 0})
	SMember(FShapedTextOptions)                        ShapedTextOptions                                           OFFSET(getStruct<T>, {0xDDB, 3, 0, 0})
	SMember(FSlateBrush)                               CaretImageBrush                                             OFFSET(getStruct<T>, {0xDE0, 208, 0, 0})
	SMember(FVector2D)                                 CaretOffset                                                 OFFSET(getStruct<T>, {0xEB0, 8, 0, 0})
	SMember(FVector2D)                                 CaretExtraSize                                              OFFSET(getStruct<T>, {0xEB8, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTextChanged                                               OFFSET(getStruct<T>, {0xEC0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTextCommitted                                             OFFSET(getStruct<T>, {0xED0, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.EditableTextBox.SetText
	// void SetText(FText InText);                                                                                              // [0x29d7fb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.EditableTextBox.SetJustification
	// void SetJustification(TEnumAsByte<ETextJustify> InJustification);                                                        // [0x29d7b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.EditableTextBox.SetIsReadOnly
	// void SetIsReadOnly(bool bReadOnly);                                                                                      // [0x29d7a50] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.EditableTextBox.SetIsPassword
	// void SetIsPassword(bool bIsPassword);                                                                                    // [0x29d7930] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.EditableTextBox.SetHintText
	// void SetHintText(FText InText);                                                                                          // [0x29d76a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.EditableTextBox.SetError
	// void SetError(FText InError);                                                                                            // [0x29d74e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.EditableTextBox.OnEditableTextBoxCommittedEvent__DelegateSignature
	// void OnEditableTextBoxCommittedEvent__DelegateSignature(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);             // [0x198a600] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/UMG.EditableTextBox.OnEditableTextBoxChangedEvent__DelegateSignature
	// void OnEditableTextBoxChangedEvent__DelegateSignature(FText& Text);                                                      // [0x198a600] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/UMG.EditableTextBox.HasError
	// bool HasError();                                                                                                         // [0x29d7090] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.EditableTextBox.GetText
	// FText GetText();                                                                                                         // [0x29d6fc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.EditableTextBox.ClearError
	// void ClearError();                                                                                                       // [0x29d6770] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ExpandableArea
/// Size: 0x0318 (0x000128 - 0x000440)
class UExpandableArea : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1088;

public:
	SMember(FExpandableAreaStyle)                      Style                                                       OFFSET(getStruct<T>, {0x130, 448, 0, 0})
	SMember(FSlateBrush)                               BorderBrush                                                 OFFSET(getStruct<T>, {0x2F0, 208, 0, 0})
	SMember(FSlateColor)                               BorderColor                                                 OFFSET(getStruct<T>, {0x3C0, 40, 0, 0})
	DMember(bool)                                      bIsExpanded                                                 OFFSET(get<bool>, {0x3E8, 1, 0, 0})
	DMember(float)                                     MaxHeight                                                   OFFSET(get<float>, {0x3EC, 4, 0, 0})
	SMember(FMargin)                                   HeaderPadding                                               OFFSET(getStruct<T>, {0x3F0, 16, 0, 0})
	SMember(FMargin)                                   AreaPadding                                                 OFFSET(getStruct<T>, {0x400, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnExpansionChanged                                          OFFSET(getStruct<T>, {0x410, 16, 0, 0})
	CMember(class UWidget*)                            HeaderContent                                               OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(class UWidget*)                            BodyContent                                                 OFFSET(get<T>, {0x428, 8, 0, 0})


	/// Functions
	// Function /Script/UMG.ExpandableArea.SetIsExpanded_Animated
	// void SetIsExpanded_Animated(bool IsExpanded);                                                                            // [0x29d7810] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ExpandableArea.SetIsExpanded
	// void SetIsExpanded(bool IsExpanded);                                                                                     // [0x29d7780] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ExpandableArea.GetIsExpanded
	// bool GetIsExpanded();                                                                                                    // [0x29d6d00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.FloatBinding
/// Size: 0x0000 (0x000060 - 0x000060)
class UFloatBinding : public UPropertyBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:


	/// Functions
	// Function /Script/UMG.FloatBinding.GetValue
	// float GetValue();                                                                                                        // [0x29d7060] Final|Native|Public|Const 
};

/// Class /Script/UMG.GridPanel
/// Size: 0x0030 (0x000140 - 0x000170)
class UGridPanel : public UPanelWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	CMember(TArray<float>)                             ColumnFill                                                  OFFSET(get<T>, {0x140, 16, 0, 0})
	CMember(TArray<float>)                             RowFill                                                     OFFSET(get<T>, {0x150, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.GridPanel.SetRowFill
	// void SetRowFill(int32_t ColumnIndex, float Coefficient);                                                                 // [0x29d7c80] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.GridPanel.SetColumnFill
	// void SetColumnFill(int32_t ColumnIndex, float Coefficient);                                                              // [0x29d72e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.GridPanel.AddChildToGrid
	// class UGridSlot* AddChildToGrid(class UWidget* Content, int32_t InRow, int32_t InColumn);                                // [0x29d64f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.GridSlot
/// Size: 0x0038 (0x000038 - 0x000070)
class UGridSlot : public UPanelSlot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	CMember(TEnumAsByte<EHorizontalAlignment>)         HorizontalAlignment                                         OFFSET(get<T>, {0x48, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           VerticalAlignment                                           OFFSET(get<T>, {0x49, 1, 0, 0})
	DMember(int32_t)                                   Row                                                         OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	DMember(int32_t)                                   RowSpan                                                     OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	DMember(int32_t)                                   Column                                                      OFFSET(get<int32_t>, {0x54, 4, 0, 0})
	DMember(int32_t)                                   ColumnSpan                                                  OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	DMember(int32_t)                                   Layer                                                       OFFSET(get<int32_t>, {0x5C, 4, 0, 0})
	SMember(FVector2D)                                 Nudge                                                       OFFSET(getStruct<T>, {0x60, 8, 0, 0})


	/// Functions
	// Function /Script/UMG.GridSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x29dcc20] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.GridSlot.SetRowSpan
	// void SetRowSpan(int32_t InRowSpan);                                                                                      // [0x29dc780] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.GridSlot.SetRow
	// void SetRow(int32_t InRow);                                                                                              // [0x29dc6f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.GridSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x29dc5d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.GridSlot.SetNudge
	// void SetNudge(FVector2D InNudge);                                                                                        // [0x29dc4d0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.GridSlot.SetLayer
	// void SetLayer(int32_t InLayer);                                                                                          // [0x29dc360] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.GridSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x29dc180] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.GridSlot.SetColumnSpan
	// void SetColumnSpan(int32_t InColumnSpan);                                                                                // [0x29dc000] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.GridSlot.SetColumn
	// void SetColumn(int32_t InColumn);                                                                                        // [0x29dbf70] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.HorizontalBox
/// Size: 0x0010 (0x000140 - 0x000150)
class UHorizontalBox : public UPanelWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:


	/// Functions
	// Function /Script/UMG.HorizontalBox.AddChildToHorizontalBox
	// class UHorizontalBoxSlot* AddChildToHorizontalBox(class UWidget* Content);                                               // [0x29da350] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.HorizontalBoxSlot
/// Size: 0x0028 (0x000038 - 0x000060)
class UHorizontalBoxSlot : public UPanelSlot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FSlateChildSize)                           Size                                                        OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	CMember(TEnumAsByte<EHorizontalAlignment>)         HorizontalAlignment                                         OFFSET(get<T>, {0x58, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           VerticalAlignment                                           OFFSET(get<T>, {0x59, 1, 0, 0})


	/// Functions
	// Function /Script/UMG.HorizontalBoxSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x29dcca0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.HorizontalBoxSlot.SetSize
	// void SetSize(FSlateChildSize InSize);                                                                                    // [0x29dcb10] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.HorizontalBoxSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x29dc660] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.HorizontalBoxSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x29dc200] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.Image
/// Size: 0x0158 (0x000128 - 0x000280)
class UImage : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	SMember(FSlateBrush)                               Brush                                                       OFFSET(getStruct<T>, {0x130, 208, 0, 0})
	SMember(FDelegateProperty)                         BrushDelegate                                               OFFSET(getStruct<T>, {0x200, 16, 0, 0})
	SMember(FLinearColor)                              ColorAndOpacity                                             OFFSET(getStruct<T>, {0x210, 16, 0, 0})
	SMember(FDelegateProperty)                         ColorAndOpacityDelegate                                     OFFSET(getStruct<T>, {0x220, 16, 0, 0})
	DMember(bool)                                      bFlipForRightToLeftFlowDirection                            OFFSET(get<bool>, {0x230, 1, 0, 0})
	SMember(FDelegateProperty)                         OnMouseButtonDownEvent                                      OFFSET(getStruct<T>, {0x234, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.Image.SetOpacity
	// void SetOpacity(float InOpacity);                                                                                        // [0x29dc550] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Image.SetColorAndOpacity
	// void SetColorAndOpacity(FLinearColor InColorAndOpacity);                                                                 // [0x29dbee0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Image.SetBrushTintColor
	// void SetBrushTintColor(FSlateColor TintColor);                                                                           // [0x29dbd60] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Image.SetBrushSize
	// void SetBrushSize(FVector2D DesiredSize);                                                                                // [0x29dbce0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Image.SetBrushResourceObject
	// void SetBrushResourceObject(class UObject* ResourceObject);                                                              // [0x29dbc50] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Image.SetBrushFromTextureDynamic
	// void SetBrushFromTextureDynamic(class UTexture2DDynamic* Texture, bool bMatchSize);                                      // [0x29dbb80] Native|Public|BlueprintCallable 
	// Function /Script/UMG.Image.SetBrushFromTexture
	// void SetBrushFromTexture(class UTexture2D* Texture, bool bMatchSize);                                                    // [0x29dbab0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.Image.SetBrushFromSoftTexture
	// void SetBrushFromSoftTexture(TWeakObjectPtr<UTexture2D*> SoftTexture, bool bMatchSize);                                  // [0x29db960] Native|Public|BlueprintCallable 
	// Function /Script/UMG.Image.SetBrushFromSoftMaterial
	// void SetBrushFromSoftMaterial(TWeakObjectPtr<UMaterialInterface*> SoftMaterial);                                         // [0x29db850] Native|Public|BlueprintCallable 
	// Function /Script/UMG.Image.SetBrushFromMaterial
	// void SetBrushFromMaterial(class UMaterialInterface* Material);                                                           // [0x29db7c0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.Image.SetBrushFromAtlasInterface
	// void SetBrushFromAtlasInterface(TScriptInterface<Class> AtlasRegion, bool bMatchSize);                                   // [0x29db6d0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.Image.SetBrushFromAsset
	// void SetBrushFromAsset(class USlateBrushAsset* Asset);                                                                   // [0x29db640] Native|Public|BlueprintCallable 
	// Function /Script/UMG.Image.SetBrush
	// void SetBrush(FSlateBrush& InBrush);                                                                                     // [0x29db470] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.Image.GetDynamicMaterial
	// class UMaterialInstanceDynamic* GetDynamicMaterial();                                                                    // [0x29daa90] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.InputKeySelector
/// Size: 0x0818 (0x000128 - 0x000940)
class UInputKeySelector : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2368;

public:
	SMember(FButtonStyle)                              WidgetStyle                                                 OFFSET(getStruct<T>, {0x130, 928, 0, 0})
	SMember(FTextBlockStyle)                           TextStyle                                                   OFFSET(getStruct<T>, {0x4D0, 864, 0, 0})
	SMember(FInputChord)                               SelectedKey                                                 OFFSET(getStruct<T>, {0x830, 32, 0, 0})
	SMember(FSlateFontInfo)                            Font                                                        OFFSET(getStruct<T>, {0x850, 88, 0, 0})
	SMember(FMargin)                                   Margin                                                      OFFSET(getStruct<T>, {0x8A8, 16, 0, 0})
	SMember(FLinearColor)                              ColorAndOpacity                                             OFFSET(getStruct<T>, {0x8B8, 16, 0, 0})
	SMember(FText)                                     KeySelectionText                                            OFFSET(getStruct<T>, {0x8C8, 24, 0, 0})
	SMember(FText)                                     NoKeySpecifiedText                                          OFFSET(getStruct<T>, {0x8E0, 24, 0, 0})
	DMember(bool)                                      bAllowModifierKeys                                          OFFSET(get<bool>, {0x8F8, 1, 0, 0})
	DMember(bool)                                      bAllowGamepadKeys                                           OFFSET(get<bool>, {0x8F9, 1, 0, 0})
	CMember(TArray<FKey>)                              EscapeKeys                                                  OFFSET(get<T>, {0x900, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnKeySelected                                               OFFSET(getStruct<T>, {0x910, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnIsSelectingKeyChanged                                     OFFSET(getStruct<T>, {0x920, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.InputKeySelector.SetTextBlockVisibility
	// void SetTextBlockVisibility(ESlateVisibility InVisibility);                                                              // [0x29dcba0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.InputKeySelector.SetSelectedKey
	// void SetSelectedKey(FInputChord& InSelectedKey);                                                                         // [0x29dc9a0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.InputKeySelector.SetNoKeySpecifiedText
	// void SetNoKeySpecifiedText(FText InNoKeySpecifiedText);                                                                  // [0x29dc3f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.InputKeySelector.SetKeySelectionText
	// void SetKeySelectionText(FText InKeySelectionText);                                                                      // [0x29dc280] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.InputKeySelector.SetEscapeKeys
	// void SetEscapeKeys(TArray<FKey>& InKeys);                                                                                // [0x29dc090] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.InputKeySelector.SetAllowModifierKeys
	// void SetAllowModifierKeys(bool bInAllowModifierKeys);                                                                    // [0x29db3e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.InputKeySelector.SetAllowGamepadKeys
	// void SetAllowGamepadKeys(bool bInAllowGamepadKeys);                                                                      // [0x29db350] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.InputKeySelector.OnKeySelected__DelegateSignature
	// void OnKeySelected__DelegateSignature(FInputChord SelectedKey);                                                          // [0x198a600] MulticastDelegate|Public|Delegate 
	// Function /Script/UMG.InputKeySelector.OnIsSelectingKeyChanged__DelegateSignature
	// void OnIsSelectingKeyChanged__DelegateSignature();                                                                       // [0x198a600] MulticastDelegate|Public|Delegate 
	// Function /Script/UMG.InputKeySelector.GetIsSelectingKey
	// bool GetIsSelectingKey();                                                                                                // [0x29dac00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.Int32Binding
/// Size: 0x0000 (0x000060 - 0x000060)
class UInt32Binding : public UPropertyBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:


	/// Functions
	// Function /Script/UMG.Int32Binding.GetValue
	// int32_t GetValue();                                                                                                      // [0x29dae70] Final|Native|Public|Const 
};

/// Class /Script/UMG.InvalidationBox
/// Size: 0x0018 (0x000140 - 0x000158)
class UInvalidationBox : public UContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	DMember(bool)                                      bCanCache                                                   OFFSET(get<bool>, {0x140, 1, 0, 0})
	DMember(bool)                                      CacheRelativeTransforms                                     OFFSET(get<bool>, {0x141, 1, 0, 0})


	/// Functions
	// Function /Script/UMG.InvalidationBox.SetCanCache
	// void SetCanCache(bool CanCache);                                                                                         // [0x29dbe50] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.InvalidationBox.InvalidateCache
	// void InvalidateCache();                                                                                                  // [0x9a7970] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.InvalidationBox.GetCanCache
	// bool GetCanCache();                                                                                                      // [0x29da9d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.UserListEntry
/// Size: 0x0000 (0x000028 - 0x000028)
class UUserListEntry : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/UMG.UserListEntry.BP_OnItemSelectionChanged
	// void BP_OnItemSelectionChanged(bool bIsSelected);                                                                        // [0x198a600] Event|Protected|BlueprintEvent 
	// Function /Script/UMG.UserListEntry.BP_OnItemExpansionChanged
	// void BP_OnItemExpansionChanged(bool bIsExpanded);                                                                        // [0x198a600] Event|Protected|BlueprintEvent 
	// Function /Script/UMG.UserListEntry.BP_OnEntryReleased
	// void BP_OnEntryReleased();                                                                                               // [0x198a600] Event|Protected|BlueprintEvent 
};

/// Class /Script/UMG.UserListEntryLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UUserListEntryLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/UMG.UserListEntryLibrary.IsListItemSelected
	// bool IsListItemSelected(TScriptInterface<Class> UserListEntry);                                                          // [0x29db050] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.UserListEntryLibrary.IsListItemExpanded
	// bool IsListItemExpanded(TScriptInterface<Class> UserListEntry);                                                          // [0x29dafb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.UserListEntryLibrary.GetOwningListView
	// class UListViewBase* GetOwningListView(TScriptInterface<Class> UserListEntry);                                           // [0x29dadd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/UMG.UserObjectListEntry
/// Size: 0x0000 (0x000028 - 0x000028)
class UUserObjectListEntry : public UUserListEntry
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/UMG.UserObjectListEntry.OnListItemObjectSet
	// void OnListItemObjectSet(class UObject* ListItemObject);                                                                 // [0x198a600] Event|Protected|BlueprintEvent 
};

/// Class /Script/UMG.UserObjectListEntryLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UUserObjectListEntryLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/UMG.UserObjectListEntryLibrary.GetListItemObject
	// class UObject* GetListItemObject(TScriptInterface<Class> UserObjectListEntry);                                           // [0x29dacd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/UMG.ListViewDesignerPreviewItem
/// Size: 0x0000 (0x000028 - 0x000028)
class UListViewDesignerPreviewItem : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/UMG.MenuAnchor
/// Size: 0x0050 (0x000140 - 0x000190)
class UMenuAnchor : public UContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	CMember(class UClass*)                             MenuClass                                                   OFFSET(get<T>, {0x140, 8, 0, 0})
	SMember(FDelegateProperty)                         OnGetMenuContentEvent                                       OFFSET(getStruct<T>, {0x148, 16, 0, 0})
	SMember(FDelegateProperty)                         OnGetUserMenuContentEvent                                   OFFSET(getStruct<T>, {0x158, 16, 0, 0})
	CMember(TEnumAsByte<EMenuPlacement>)               Placement                                                   OFFSET(get<T>, {0x168, 1, 0, 0})
	DMember(bool)                                      bFitInWindow                                                OFFSET(get<bool>, {0x169, 1, 0, 0})
	DMember(bool)                                      ShouldDeferPaintingAfterWindowContent                       OFFSET(get<bool>, {0x16A, 1, 0, 0})
	DMember(bool)                                      UseApplicationMenuStack                                     OFFSET(get<bool>, {0x16B, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMenuOpenChanged                                           OFFSET(getStruct<T>, {0x170, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.MenuAnchor.ToggleOpen
	// void ToggleOpen(bool bFocusOnOpen);                                                                                      // [0x29e1080] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.MenuAnchor.ShouldOpenDueToClick
	// bool ShouldOpenDueToClick();                                                                                             // [0x29e1050] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.MenuAnchor.SetPlacement
	// void SetPlacement(TEnumAsByte<EMenuPlacement> InPlacement);                                                              // [0x29e0a40] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.MenuAnchor.Open
	// void Open(bool bFocusMenu);                                                                                              // [0x29e0150] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.MenuAnchor.IsOpen
	// bool IsOpen();                                                                                                           // [0x29e0120] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.MenuAnchor.HasOpenSubMenus
	// bool HasOpenSubMenus();                                                                                                  // [0x29e00f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.MenuAnchor.GetUserWidget__DelegateSignature
	// class UUserWidget* GetUserWidget__DelegateSignature();                                                                   // [0x198a600] Public|Delegate      
	// Function /Script/UMG.MenuAnchor.GetMenuPosition
	// FVector2D GetMenuPosition();                                                                                             // [0x29dfe40] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.MenuAnchor.FitInWindow
	// void FitInWindow(bool bFit);                                                                                             // [0x29dfa50] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.MenuAnchor.Close
	// void Close();                                                                                                            // [0x29dfa30] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.MouseCursorBinding
/// Size: 0x0000 (0x000060 - 0x000060)
class UMouseCursorBinding : public UPropertyBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:


	/// Functions
	// Function /Script/UMG.MouseCursorBinding.GetValue
	// TEnumAsByte<EMouseCursor> GetValue();                                                                                    // [0x29dfff0] Final|Native|Public|Const 
};

/// Class /Script/MovieScene.MovieSceneEntitySystem
/// Size: 0x0018 (0x000028 - 0x000040)
class UMovieSceneEntitySystem : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UMovieSceneEntitySystemLinker*)      Linker                                                      OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieScenePropertySystem
/// Size: 0x0010 (0x000040 - 0x000050)
class UMovieScenePropertySystem : public UMovieSceneEntitySystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UMovieScenePropertyInstantiatorSystem*) InstantiatorSystem                                       OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/UMG.MovieScene2DTransformPropertySystem
/// Size: 0x0000 (0x000050 - 0x000050)
class UMovieScene2DTransformPropertySystem : public UMovieScenePropertySystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/MovieScene.MovieSceneSignedObject
/// Size: 0x0028 (0x000028 - 0x000050)
class UMovieSceneSignedObject : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FGuid)                                     Signature                                                   OFFSET(getStruct<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneSectionEvalOptions
/// Size: 0x0002 (0x000000 - 0x000002)
class FMovieSceneSectionEvalOptions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2;

public:
	DMember(bool)                                      bCanEditCompletionMode                                      OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(EMovieSceneCompletionMode)                 CompletionMode                                              OFFSET(get<T>, {0x1, 1, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneEasingSettings
/// Size: 0x0038 (0x000000 - 0x000038)
class FMovieSceneEasingSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(int32_t)                                   AutoEaseInDuration                                          OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   AutoEaseOutDuration                                         OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	CMember(TScriptInterface<Class>)                   EaseIn                                                      OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(bool)                                      bManualEaseIn                                               OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(int32_t)                                   ManualEaseInDuration                                        OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	CMember(TScriptInterface<Class>)                   EaseOut                                                     OFFSET(get<T>, {0x20, 16, 0, 0})
	DMember(bool)                                      bManualEaseOut                                              OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(int32_t)                                   ManualEaseOutDuration                                       OFFSET(get<int32_t>, {0x34, 4, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneFrameRange
/// Size: 0x0010 (0x000000 - 0x000010)
class FMovieSceneFrameRange : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/MovieScene.OptionalMovieSceneBlendType
/// Size: 0x0002 (0x000000 - 0x000002)
class FOptionalMovieSceneBlendType : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2;

public:
	CMember(EMovieSceneBlendType)                      BlendType                                                   OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(bool)                                      bIsValid                                                    OFFSET(get<bool>, {0x1, 1, 0, 0})
};

/// Class /Script/MovieScene.MovieSceneSection
/// Size: 0x0098 (0x000050 - 0x0000E8)
class UMovieSceneSection : public UMovieSceneSignedObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FMovieSceneSectionEvalOptions)             EvalOptions                                                 OFFSET(getStruct<T>, {0x50, 2, 0, 0})
	SMember(FMovieSceneEasingSettings)                 Easing                                                      OFFSET(getStruct<T>, {0x58, 56, 0, 0})
	SMember(FMovieSceneFrameRange)                     SectionRange                                                OFFSET(getStruct<T>, {0x90, 16, 0, 0})
	SMember(FFrameNumber)                              PreRollFrames                                               OFFSET(getStruct<T>, {0xA0, 4, 0, 0})
	SMember(FFrameNumber)                              PostRollFrames                                              OFFSET(getStruct<T>, {0xA4, 4, 0, 0})
	DMember(int32_t)                                   RowIndex                                                    OFFSET(get<int32_t>, {0xA8, 4, 0, 0})
	DMember(int32_t)                                   OverlapPriority                                             OFFSET(get<int32_t>, {0xAC, 4, 0, 0})
	DMember(bool)                                      bIsActive                                                   OFFSET(get<bool>, {0xB0, 1, 1, 0})
	DMember(bool)                                      bIsLocked                                                   OFFSET(get<bool>, {0xB0, 1, 1, 1})
	DMember(float)                                     StartTime                                                   OFFSET(get<float>, {0xB4, 4, 0, 0})
	DMember(float)                                     EndTime                                                     OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(float)                                     PrerollTime                                                 OFFSET(get<float>, {0xBC, 4, 0, 0})
	DMember(float)                                     PostrollTime                                                OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(bool)                                      bIsInfinite                                                 OFFSET(get<bool>, {0xC4, 1, 1, 0})
	DMember(bool)                                      bSupportsInfiniteRange                                      OFFSET(get<bool>, {0xC8, 1, 0, 0})
	SMember(FOptionalMovieSceneBlendType)              BlendType                                                   OFFSET(getStruct<T>, {0xC9, 2, 0, 0})


	/// Functions
	// Function /Script/MovieScene.MovieSceneSection.SetRowIndex
	// void SetRowIndex(int32_t NewRowIndex);                                                                                   // [0x27fca50] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSection.SetPreRollFrames
	// void SetPreRollFrames(int32_t InPreRollFrames);                                                                          // [0x27fc9c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSection.SetPostRollFrames
	// void SetPostRollFrames(int32_t InPostRollFrames);                                                                        // [0x27fc930] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSection.SetOverlapPriority
	// void SetOverlapPriority(int32_t NewPriority);                                                                            // [0x27fc700] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSection.SetIsLocked
	// void SetIsLocked(bool bInIsLocked);                                                                                      // [0x27fc670] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSection.SetIsActive
	// void SetIsActive(bool bInIsActive);                                                                                      // [0x27fc5e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSection.SetCompletionMode
	// void SetCompletionMode(EMovieSceneCompletionMode InCompletionMode);                                                      // [0x27fc330] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSection.SetBlendType
	// void SetBlendType(EMovieSceneBlendType InBlendType);                                                                     // [0x27fc2b0] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSection.IsLocked
	// bool IsLocked();                                                                                                         // [0x27fb6f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSection.IsActive
	// bool IsActive();                                                                                                         // [0x27fb6c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSection.GetRowIndex
	// int32_t GetRowIndex();                                                                                                   // [0x1449880] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSection.GetPreRollFrames
	// int32_t GetPreRollFrames();                                                                                              // [0x27fb630] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSection.GetPostRollFrames
	// int32_t GetPostRollFrames();                                                                                             // [0x27fb610] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSection.GetOverlapPriority
	// int32_t GetOverlapPriority();                                                                                            // [0x27fb5c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSection.GetCompletionMode
	// EMovieSceneCompletionMode GetCompletionMode();                                                                           // [0x27fb360] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSection.GetBlendType
	// FOptionalMovieSceneBlendType GetBlendType();                                                                             // [0x27fb220] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/UMG.MovieScene2DTransformMask
/// Size: 0x0004 (0x000000 - 0x000004)
class FMovieScene2DTransformMask : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(uint32_t)                                  Mask                                                        OFFSET(get<uint32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneChannel
/// Size: 0x0008 (0x000000 - 0x000008)
class FMovieSceneChannel : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/MovieScene.MovieSceneTangentData
/// Size: 0x0014 (0x000000 - 0x000014)
class FMovieSceneTangentData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     ArriveTangent                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     LeaveTangent                                                OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     ArriveTangentWeight                                         OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     LeaveTangentWeight                                          OFFSET(get<float>, {0xC, 4, 0, 0})
	CMember(TEnumAsByte<ERichCurveTangentWeightMode>)  TangentWeightMode                                           OFFSET(get<T>, {0x10, 1, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneFloatValue
/// Size: 0x001C (0x000000 - 0x00001C)
class FMovieSceneFloatValue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FMovieSceneTangentData)                    Tangent                                                     OFFSET(getStruct<T>, {0x4, 20, 0, 0})
	CMember(TEnumAsByte<ERichCurveInterpMode>)         InterpMode                                                  OFFSET(get<T>, {0x18, 1, 0, 0})
	CMember(TEnumAsByte<ERichCurveTangentMode>)        TangentMode                                                 OFFSET(get<T>, {0x19, 1, 0, 0})
	DMember(char)                                      PaddingByte                                                 OFFSET(get<char>, {0x1A, 1, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneKeyHandleMap
/// Size: 0x0000 (0x000060 - 0x000060)
class FMovieSceneKeyHandleMap : public FKeyHandleLookupTable
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Struct /Script/MovieScene.MovieSceneFloatChannel
/// Size: 0x0098 (0x000008 - 0x0000A0)
class FMovieSceneFloatChannel : public FMovieSceneChannel
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(TEnumAsByte<ERichCurveExtrapolation>)      PreInfinityExtrap                                           OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(TEnumAsByte<ERichCurveExtrapolation>)      PostInfinityExtrap                                          OFFSET(get<T>, {0x9, 1, 0, 0})
	CMember(TArray<FFrameNumber>)                      Times                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FMovieSceneFloatValue>)             Values                                                      OFFSET(get<T>, {0x20, 16, 0, 0})
	DMember(float)                                     DefaultValue                                                OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(bool)                                      bHasDefaultValue                                            OFFSET(get<bool>, {0x34, 1, 0, 0})
	SMember(FMovieSceneKeyHandleMap)                   KeyHandles                                                  OFFSET(getStruct<T>, {0x38, 96, 0, 0})
	SMember(FFrameRate)                                TickResolution                                              OFFSET(getStruct<T>, {0x98, 8, 0, 0})
};

/// Class /Script/UMG.MovieScene2DTransformSection
/// Size: 0x0470 (0x0000E8 - 0x000558)
class UMovieScene2DTransformSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1368;

public:
	SMember(FMovieScene2DTransformMask)                TransformMask                                               OFFSET(getStruct<T>, {0xF0, 4, 0, 0})
	SMember(FMovieSceneFloatChannel)                   Translation                                                 OFFSET(getStruct<T>, {0xF8, 320, 0, 0})
	SMember(FMovieSceneFloatChannel)                   Rotation                                                    OFFSET(getStruct<T>, {0x238, 160, 0, 0})
	SMember(FMovieSceneFloatChannel)                   Scale                                                       OFFSET(getStruct<T>, {0x2D8, 320, 0, 0})
	SMember(FMovieSceneFloatChannel)                   Shear                                                       OFFSET(getStruct<T>, {0x418, 320, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneTrackEvalOptions
/// Size: 0x0004 (0x000000 - 0x000004)
class FMovieSceneTrackEvalOptions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bCanEvaluateNearestSection                                  OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bEvalNearestSection                                         OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bEvaluateInPreroll                                          OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bEvaluateInPostroll                                         OFFSET(get<bool>, {0x0, 1, 1, 3})
	DMember(bool)                                      bEvaluateNearestSection                                     OFFSET(get<bool>, {0x0, 1, 1, 4})
};

/// Struct /Script/MovieScene.MovieSceneTrackEvaluationFieldEntry
/// Size: 0x0020 (0x000000 - 0x000020)
class FMovieSceneTrackEvaluationFieldEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UMovieSceneSection*)                 Section                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FFrameNumberRange)                         Range                                                       OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FFrameNumber)                              ForcedTime                                                  OFFSET(getStruct<T>, {0x18, 4, 0, 0})
	CMember(ESectionEvaluationFlags)                   Flags                                                       OFFSET(get<T>, {0x1C, 1, 0, 0})
	DMember(int16_t)                                   LegacySortOrder                                             OFFSET(get<int16_t>, {0x1E, 2, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneTrackEvaluationField
/// Size: 0x0010 (0x000000 - 0x000010)
class FMovieSceneTrackEvaluationField : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FMovieSceneTrackEvaluationFieldEntry>) Entries                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/MovieScene.MovieSceneTrack
/// Size: 0x0028 (0x000050 - 0x000078)
class UMovieSceneTrack : public UMovieSceneSignedObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FMovieSceneTrackEvalOptions)               EvalOptions                                                 OFFSET(getStruct<T>, {0x50, 4, 0, 0})
	DMember(bool)                                      bIsEvalDisabled                                             OFFSET(get<bool>, {0x55, 1, 0, 0})
	SMember(FGuid)                                     EvaluationFieldGuid                                         OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	SMember(FMovieSceneTrackEvaluationField)           EvaluationField                                             OFFSET(getStruct<T>, {0x68, 16, 0, 0})
};

/// Class /Script/MovieScene.MovieSceneNameableTrack
/// Size: 0x0000 (0x000078 - 0x000078)
class UMovieSceneNameableTrack : public UMovieSceneTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Struct /Script/MovieScene.MovieScenePropertyBinding
/// Size: 0x0014 (0x000000 - 0x000014)
class FMovieScenePropertyBinding : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FName)                                     PropertyName                                                OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     PropertyPath                                                OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bCanUseClassLookup                                          OFFSET(get<bool>, {0x10, 1, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieScenePropertyTrack
/// Size: 0x0030 (0x000078 - 0x0000A8)
class UMovieScenePropertyTrack : public UMovieSceneNameableTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(class UMovieSceneSection*)                 SectionToKey                                                OFFSET(get<T>, {0x78, 8, 0, 0})
	SMember(FMovieScenePropertyBinding)                PropertyBinding                                             OFFSET(getStruct<T>, {0x80, 20, 0, 0})
	CMember(TArray<class UMovieSceneSection*>)         Sections                                                    OFFSET(get<T>, {0x98, 16, 0, 0})
};

/// Class /Script/UMG.MovieScene2DTransformTrack
/// Size: 0x0000 (0x0000A8 - 0x0000A8)
class UMovieScene2DTransformTrack : public UMovieScenePropertyTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
};

/// Class /Script/UMG.MovieSceneMarginSection
/// Size: 0x0280 (0x0000E8 - 0x000368)
class UMovieSceneMarginSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	SMember(FMovieSceneFloatChannel)                   TopCurve                                                    OFFSET(getStruct<T>, {0xE8, 160, 0, 0})
	SMember(FMovieSceneFloatChannel)                   LeftCurve                                                   OFFSET(getStruct<T>, {0x188, 160, 0, 0})
	SMember(FMovieSceneFloatChannel)                   RightCurve                                                  OFFSET(getStruct<T>, {0x228, 160, 0, 0})
	SMember(FMovieSceneFloatChannel)                   BottomCurve                                                 OFFSET(getStruct<T>, {0x2C8, 160, 0, 0})
};

/// Class /Script/UMG.MovieSceneMarginTrack
/// Size: 0x0008 (0x0000A8 - 0x0000B0)
class UMovieSceneMarginTrack : public UMovieScenePropertyTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneMaterialTrack
/// Size: 0x0010 (0x000078 - 0x000088)
class UMovieSceneMaterialTrack : public UMovieSceneNameableTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<class UMovieSceneSection*>)         Sections                                                    OFFSET(get<T>, {0x78, 16, 0, 0})
};

/// Class /Script/UMG.MovieSceneWidgetMaterialTrack
/// Size: 0x0020 (0x000088 - 0x0000A8)
class UMovieSceneWidgetMaterialTrack : public UMovieSceneMaterialTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TArray<FName>)                             BrushPropertyNamePath                                       OFFSET(get<T>, {0x90, 16, 0, 0})
	SMember(FName)                                     TrackName                                                   OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
};

/// Class /Script/UMG.MultiLineEditableText
/// Size: 0x0448 (0x000148 - 0x000590)
class UMultiLineEditableText : public UTextLayoutWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1424;

public:
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x148, 24, 0, 0})
	SMember(FText)                                     HintText                                                    OFFSET(getStruct<T>, {0x160, 24, 0, 0})
	SMember(FDelegateProperty)                         HintTextDelegate                                            OFFSET(getStruct<T>, {0x178, 16, 0, 0})
	SMember(FTextBlockStyle)                           WidgetStyle                                                 OFFSET(getStruct<T>, {0x190, 864, 0, 0})
	DMember(bool)                                      bIsReadOnly                                                 OFFSET(get<bool>, {0x4F0, 1, 0, 0})
	DMember(bool)                                      bAllowMultiLine                                             OFFSET(get<bool>, {0x4F1, 1, 0, 0})
	SMember(FSlateFontInfo)                            Font                                                        OFFSET(getStruct<T>, {0x4F8, 88, 0, 0})
	DMember(bool)                                      SelectAllTextWhenFocused                                    OFFSET(get<bool>, {0x550, 1, 0, 0})
	DMember(bool)                                      ClearTextSelectionOnFocusLoss                               OFFSET(get<bool>, {0x551, 1, 0, 0})
	DMember(bool)                                      RevertTextOnEscape                                          OFFSET(get<bool>, {0x552, 1, 0, 0})
	DMember(bool)                                      ClearKeyboardFocusOnCommit                                  OFFSET(get<bool>, {0x553, 1, 0, 0})
	DMember(bool)                                      AllowContextMenu                                            OFFSET(get<bool>, {0x554, 1, 0, 0})
	SMember(FVirtualKeyboardOptions)                   VirtualKeyboardOptions                                      OFFSET(getStruct<T>, {0x555, 1, 0, 0})
	CMember(EVirtualKeyboardDismissAction)             VirtualKeyboardDismissAction                                OFFSET(get<T>, {0x556, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTextChanged                                               OFFSET(getStruct<T>, {0x558, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTextCommitted                                             OFFSET(getStruct<T>, {0x568, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.MultiLineEditableText.SetWidgetStyle
	// void SetWidgetStyle(FTextBlockStyle& InWidgetStyle);                                                                     // [0x29e0fa0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.MultiLineEditableText.SetText
	// void SetText(FText InText);                                                                                              // [0x29e0c20] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.MultiLineEditableText.SetIsReadOnly
	// void SetIsReadOnly(bool bReadOnly);                                                                                      // [0x29e0810] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.MultiLineEditableText.SetHintText
	// void SetHintText(FText InHintText);                                                                                      // [0x29e0540] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.MultiLineEditableText.OnMultiLineEditableTextCommittedEvent__DelegateSignature
	// void OnMultiLineEditableTextCommittedEvent__DelegateSignature(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);       // [0x198a600] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/UMG.MultiLineEditableText.OnMultiLineEditableTextChangedEvent__DelegateSignature
	// void OnMultiLineEditableTextChangedEvent__DelegateSignature(FText& Text);                                                // [0x198a600] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/UMG.MultiLineEditableText.GetText
	// FText GetText();                                                                                                         // [0x29dfeb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.MultiLineEditableText.GetHintText
	// FText GetHintText();                                                                                                     // [0x29dfd00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.MultiLineEditableTextBox
/// Size: 0x1028 (0x000148 - 0x001170)
class UMultiLineEditableTextBox : public UTextLayoutWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 4464;

public:
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x148, 24, 0, 0})
	SMember(FText)                                     HintText                                                    OFFSET(getStruct<T>, {0x160, 24, 0, 0})
	SMember(FDelegateProperty)                         HintTextDelegate                                            OFFSET(getStruct<T>, {0x178, 16, 0, 0})
	SMember(FEditableTextBoxStyle)                     WidgetStyle                                                 OFFSET(getStruct<T>, {0x190, 2992, 0, 0})
	SMember(FTextBlockStyle)                           TextStyle                                                   OFFSET(getStruct<T>, {0xD40, 864, 0, 0})
	DMember(bool)                                      bIsReadOnly                                                 OFFSET(get<bool>, {0x10A0, 1, 0, 0})
	DMember(bool)                                      bAllowMultiLine                                             OFFSET(get<bool>, {0x10A1, 1, 0, 0})
	DMember(bool)                                      AllowContextMenu                                            OFFSET(get<bool>, {0x10A2, 1, 0, 0})
	SMember(FVirtualKeyboardOptions)                   VirtualKeyboardOptions                                      OFFSET(getStruct<T>, {0x10A3, 1, 0, 0})
	CMember(EVirtualKeyboardDismissAction)             VirtualKeyboardDismissAction                                OFFSET(get<T>, {0x10A4, 1, 0, 0})
	CMember(class USlateWidgetStyleAsset*)             Style                                                       OFFSET(get<T>, {0x10A8, 8, 0, 0})
	SMember(FSlateFontInfo)                            Font                                                        OFFSET(getStruct<T>, {0x10B0, 88, 0, 0})
	SMember(FLinearColor)                              ForegroundColor                                             OFFSET(getStruct<T>, {0x1108, 16, 0, 0})
	SMember(FLinearColor)                              BackgroundColor                                             OFFSET(getStruct<T>, {0x1118, 16, 0, 0})
	SMember(FLinearColor)                              ReadOnlyForegroundColor                                     OFFSET(getStruct<T>, {0x1128, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTextChanged                                               OFFSET(getStruct<T>, {0x1138, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTextCommitted                                             OFFSET(getStruct<T>, {0x1148, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.MultiLineEditableTextBox.SetTextStyle
	// void SetTextStyle(FTextBlockStyle& InTextStyle);                                                                         // [0x29e0de0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.MultiLineEditableTextBox.SetText
	// void SetText(FText InText);                                                                                              // [0x29e0d00] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.MultiLineEditableTextBox.SetIsReadOnly
	// void SetIsReadOnly(bool bReadOnly);                                                                                      // [0x29e08a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.MultiLineEditableTextBox.SetHintText
	// void SetHintText(FText InHintText);                                                                                      // [0x29e0620] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.MultiLineEditableTextBox.SetError
	// void SetError(FText InError);                                                                                            // [0x29e03d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.MultiLineEditableTextBox.OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature
	// void OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);    // [0x198a600] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/UMG.MultiLineEditableTextBox.OnMultiLineEditableTextBoxChangedEvent__DelegateSignature
	// void OnMultiLineEditableTextBoxChangedEvent__DelegateSignature(FText& Text);                                             // [0x198a600] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/UMG.MultiLineEditableTextBox.GetText
	// FText GetText();                                                                                                         // [0x29dff50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.MultiLineEditableTextBox.GetHintText
	// FText GetHintText();                                                                                                     // [0x29dfda0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.NamedSlot
/// Size: 0x0010 (0x000140 - 0x000150)
class UNamedSlot : public UContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
};

/// Class /Script/UMG.NamedSlotInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UNamedSlotInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/UMG.NativeWidgetHost
/// Size: 0x0010 (0x000128 - 0x000138)
class UNativeWidgetHost : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
};

/// Class /Script/UMG.OverlaySlot
/// Size: 0x0020 (0x000038 - 0x000058)
class UOverlaySlot : public UPanelSlot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(TEnumAsByte<EHorizontalAlignment>)         HorizontalAlignment                                         OFFSET(get<T>, {0x50, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           VerticalAlignment                                           OFFSET(get<T>, {0x51, 1, 0, 0})


	/// Functions
	// Function /Script/UMG.OverlaySlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x29e0f20] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.OverlaySlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x29e0930] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.OverlaySlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x29e0700] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ProgressBar
/// Size: 0x02F8 (0x000128 - 0x000420)
class UProgressBar : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1056;

public:
	SMember(FProgressBarStyle)                         WidgetStyle                                                 OFFSET(getStruct<T>, {0x130, 640, 0, 0})
	CMember(class USlateWidgetStyleAsset*)             Style                                                       OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class USlateBrushAsset*)                   BackgroundImage                                             OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class USlateBrushAsset*)                   FillImage                                                   OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class USlateBrushAsset*)                   MarqueeImage                                                OFFSET(get<T>, {0x3C8, 8, 0, 0})
	DMember(float)                                     Percent                                                     OFFSET(get<float>, {0x3D0, 4, 0, 0})
	CMember(TEnumAsByte<EProgressBarFillType>)         BarFillType                                                 OFFSET(get<T>, {0x3D4, 1, 0, 0})
	DMember(bool)                                      bIsMarquee                                                  OFFSET(get<bool>, {0x3D5, 1, 0, 0})
	SMember(FVector2D)                                 BorderPadding                                               OFFSET(getStruct<T>, {0x3D8, 8, 0, 0})
	SMember(FDelegateProperty)                         PercentDelegate                                             OFFSET(getStruct<T>, {0x3E0, 16, 0, 0})
	SMember(FLinearColor)                              FillColorAndOpacity                                         OFFSET(getStruct<T>, {0x3F0, 16, 0, 0})
	SMember(FDelegateProperty)                         FillColorAndOpacityDelegate                                 OFFSET(getStruct<T>, {0x400, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.ProgressBar.SetPercent
	// void SetPercent(float InPercent);                                                                                        // [0x29e09c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ProgressBar.SetIsMarquee
	// void SetIsMarquee(bool InbIsMarquee);                                                                                    // [0x29e0780] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ProgressBar.SetFillColorAndOpacity
	// void SetFillColorAndOpacity(FLinearColor InColor);                                                                       // [0x29e04b0] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/UMG.RichTextBlock
/// Size: 0x0738 (0x000148 - 0x000880)
class URichTextBlock : public UTextLayoutWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2176;

public:
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x148, 24, 0, 0})
	CMember(class UDataTable*)                         TextStyleSet                                                OFFSET(get<T>, {0x160, 8, 0, 0})
	CMember(TArray<class UClass*>)                     DecoratorClasses                                            OFFSET(get<T>, {0x168, 16, 0, 0})
	DMember(bool)                                      bOverrideDefaultStyle                                       OFFSET(get<bool>, {0x178, 1, 0, 0})
	SMember(FTextBlockStyle)                           DefaultTextStyleOverride                                    OFFSET(getStruct<T>, {0x180, 864, 0, 0})
	DMember(float)                                     MinDesiredWidth                                             OFFSET(get<float>, {0x4E0, 4, 0, 0})
	CMember(ETextTransformPolicy)                      TextTransformPolicy                                         OFFSET(get<T>, {0x4E4, 1, 0, 0})
	SMember(FTextBlockStyle)                           DefaultTextStyle                                            OFFSET(getStruct<T>, {0x4F0, 864, 0, 0})
	CMember(TArray<class URichTextBlockDecorator*>)    InstanceDecorators                                          OFFSET(get<T>, {0x850, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.RichTextBlock.SetTextTransformPolicy
	// void SetTextTransformPolicy(ETextTransformPolicy InTransformPolicy);                                                     // [0x29e6180] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.SetTextStyleSet
	// void SetTextStyleSet(class UDataTable* NewTextStyleSet);                                                                 // [0x29e60f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.SetText
	// void SetText(FText& InText);                                                                                             // [0x29e6020] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.SetMinDesiredWidth
	// void SetMinDesiredWidth(float InMinDesiredWidth);                                                                        // [0x29e5770] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.SetDefaultTextStyle
	// void SetDefaultTextStyle(FTextBlockStyle& InDefaultTextStyle);                                                           // [0x29e5230] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.SetDefaultStrikeBrush
	// void SetDefaultStrikeBrush(FSlateBrush& InStrikeBrush);                                                                  // [0x29e5060] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.SetDefaultShadowOffset
	// void SetDefaultShadowOffset(FVector2D InShadowOffset);                                                                   // [0x15ee140] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.SetDefaultShadowColorAndOpacity
	// void SetDefaultShadowColorAndOpacity(FLinearColor InShadowColorAndOpacity);                                              // [0x15ee0b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.SetDefaultFont
	// void SetDefaultFont(FSlateFontInfo InFontInfo);                                                                          // [0x29e4f40] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.SetDefaultColorAndOpacity
	// void SetDefaultColorAndOpacity(FSlateColor InColorAndOpacity);                                                           // [0x29e4e50] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.SetAutoWrapText
	// void SetAutoWrapText(bool InAutoTextWrap);                                                                               // [0x29e4cb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.GetText
	// FText GetText();                                                                                                         // [0x29e4040] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.RichTextBlock.GetDecoratorByClass
	// class URichTextBlockDecorator* GetDecoratorByClass(class UClass* DecoratorClass);                                        // [0x29e3da0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.ClearAllDefaultStyleOverrides
	// void ClearAllDefaultStyleOverrides();                                                                                    // [0x15ebb80] Final|Native|Public  
};

/// Class /Script/UMG.RichTextBlockImageDecorator
/// Size: 0x0008 (0x000028 - 0x000030)
class URichTextBlockImageDecorator : public URichTextBlockDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UDataTable*)                         ImageSet                                                    OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/UMG.SafeZoneSlot
/// Size: 0x0028 (0x000038 - 0x000060)
class USafeZoneSlot : public UPanelSlot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      bIsTitleSafe                                                OFFSET(get<bool>, {0x38, 1, 0, 0})
	SMember(FMargin)                                   SafeAreaScale                                               OFFSET(getStruct<T>, {0x3C, 16, 0, 0})
	CMember(TEnumAsByte<EHorizontalAlignment>)         HAlign                                                      OFFSET(get<T>, {0x4C, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           VAlign                                                      OFFSET(get<T>, {0x4D, 1, 0, 0})
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x50, 16, 0, 0})
};

/// Class /Script/UMG.ScaleBox
/// Size: 0x0020 (0x000140 - 0x000160)
class UScaleBox : public UContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(TEnumAsByte<EStretch>)                     Stretch                                                     OFFSET(get<T>, {0x140, 1, 0, 0})
	CMember(TEnumAsByte<EStretchDirection>)            StretchDirection                                            OFFSET(get<T>, {0x141, 1, 0, 0})
	DMember(float)                                     UserSpecifiedScale                                          OFFSET(get<float>, {0x144, 4, 0, 0})
	DMember(bool)                                      IgnoreInheritedScale                                        OFFSET(get<bool>, {0x148, 1, 0, 0})


	/// Functions
	// Function /Script/UMG.ScaleBox.SetUserSpecifiedScale
	// void SetUserSpecifiedScale(float InUserSpecifiedScale);                                                                  // [0x29e6200] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScaleBox.SetStretchDirection
	// void SetStretchDirection(TEnumAsByte<EStretchDirection> InStretchDirection);                                             // [0x29e5fa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScaleBox.SetStretch
	// void SetStretch(TEnumAsByte<EStretch> InStretch);                                                                        // [0x29e5f20] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScaleBox.SetIgnoreInheritedScale
	// void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);                                                              // [0x29e5460] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ScaleBoxSlot
/// Size: 0x0028 (0x000038 - 0x000060)
class UScaleBoxSlot : public UPanelSlot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	CMember(TEnumAsByte<EHorizontalAlignment>)         HorizontalAlignment                                         OFFSET(get<T>, {0x48, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           VerticalAlignment                                           OFFSET(get<T>, {0x49, 1, 0, 0})


	/// Functions
	// Function /Script/UMG.ScaleBoxSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0xf162b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScaleBoxSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x29e58f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScaleBoxSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0xf161a0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ScrollBar
/// Size: 0x07A8 (0x000128 - 0x0008D0)
class UScrollBar : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2256;

public:
	SMember(FScrollBarStyle)                           WidgetStyle                                                 OFFSET(getStruct<T>, {0x130, 1888, 0, 0})
	CMember(class USlateWidgetStyleAsset*)             Style                                                       OFFSET(get<T>, {0x890, 8, 0, 0})
	DMember(bool)                                      bAlwaysShowScrollbar                                        OFFSET(get<bool>, {0x898, 1, 0, 0})
	DMember(bool)                                      bAlwaysShowScrollbarTrack                                   OFFSET(get<bool>, {0x899, 1, 0, 0})
	CMember(TEnumAsByte<EOrientation>)                 Orientation                                                 OFFSET(get<T>, {0x89A, 1, 0, 0})
	SMember(FVector2D)                                 Thickness                                                   OFFSET(getStruct<T>, {0x89C, 8, 0, 0})
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x8A4, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.ScrollBar.SetState
	// void SetState(float InOffsetFraction, float InThumbSizeFraction);                                                        // [0x29e5e50] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ScrollBoxSlot
/// Size: 0x0020 (0x000038 - 0x000058)
class UScrollBoxSlot : public UPanelSlot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	CMember(TEnumAsByte<EHorizontalAlignment>)         HorizontalAlignment                                         OFFSET(get<T>, {0x48, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           VerticalAlignment                                           OFFSET(get<T>, {0x49, 1, 0, 0})


	/// Functions
	// Function /Script/UMG.ScrollBoxSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x29e6280] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBoxSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x29e5980] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBoxSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x29e5360] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.SizeBox
/// Size: 0x0040 (0x000140 - 0x000180)
class USizeBox : public UContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	DMember(float)                                     WidthOverride                                               OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     HeightOverride                                              OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(float)                                     MinDesiredWidth                                             OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(float)                                     MinDesiredHeight                                            OFFSET(get<float>, {0x15C, 4, 0, 0})
	DMember(float)                                     MaxDesiredWidth                                             OFFSET(get<float>, {0x160, 4, 0, 0})
	DMember(float)                                     MaxDesiredHeight                                            OFFSET(get<float>, {0x164, 4, 0, 0})
	DMember(float)                                     MinAspectRatio                                              OFFSET(get<float>, {0x168, 4, 0, 0})
	DMember(float)                                     MaxAspectRatio                                              OFFSET(get<float>, {0x16C, 4, 0, 0})
	DMember(bool)                                      bOverride_WidthOverride                                     OFFSET(get<bool>, {0x170, 1, 1, 0})
	DMember(bool)                                      bOverride_HeightOverride                                    OFFSET(get<bool>, {0x170, 1, 1, 1})
	DMember(bool)                                      bOverride_MinDesiredWidth                                   OFFSET(get<bool>, {0x170, 1, 1, 2})
	DMember(bool)                                      bOverride_MinDesiredHeight                                  OFFSET(get<bool>, {0x170, 1, 1, 3})
	DMember(bool)                                      bOverride_MaxDesiredWidth                                   OFFSET(get<bool>, {0x170, 1, 1, 4})
	DMember(bool)                                      bOverride_MaxDesiredHeight                                  OFFSET(get<bool>, {0x170, 1, 1, 5})
	DMember(bool)                                      bOverride_MinAspectRatio                                    OFFSET(get<bool>, {0x170, 1, 1, 6})
	DMember(bool)                                      bOverride_MaxAspectRatio                                    OFFSET(get<bool>, {0x170, 1, 1, 7})
	SMember(FVector2D)                                 OptionContentAnchor                                         OFFSET(getStruct<T>, {0x174, 8, 0, 0})


	/// Functions
	// Function /Script/UMG.SizeBox.SetWidthOverride
	// void SetWidthOverride(float InWidthOverride);                                                                            // [0x29e6400] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.SetMinDesiredWidth
	// void SetMinDesiredWidth(float InMinDesiredWidth);                                                                        // [0x29e57f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.SetMinDesiredHeight
	// void SetMinDesiredHeight(float InMinDesiredHeight);                                                                      // [0x29e56f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.SetMinAspectRatio
	// void SetMinAspectRatio(float InMinAspectRatio);                                                                          // [0x29e5670] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.SetMaxDesiredWidth
	// void SetMaxDesiredWidth(float InMaxDesiredWidth);                                                                        // [0x29e55f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.SetMaxDesiredHeight
	// void SetMaxDesiredHeight(float InMaxDesiredHeight);                                                                      // [0x29e5570] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.SetMaxAspectRatio
	// void SetMaxAspectRatio(float InMaxAspectRatio);                                                                          // [0x29e54f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.SetHeightOverride
	// void SetHeightOverride(float InHeightOverride);                                                                          // [0x29e52e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.SetContentAnchor
	// void SetContentAnchor(FVector2D& Anchor);                                                                                // [0x29e4dc0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.SizeBox.ClearWidthOverride
	// void ClearWidthOverride();                                                                                               // [0x29e3910] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.ClearMinDesiredWidth
	// void ClearMinDesiredWidth();                                                                                             // [0x29e38f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.ClearMinDesiredHeight
	// void ClearMinDesiredHeight();                                                                                            // [0x29e38d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.ClearMinAspectRatio
	// void ClearMinAspectRatio();                                                                                              // [0x29e38b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.ClearMaxDesiredWidth
	// void ClearMaxDesiredWidth();                                                                                             // [0x29e3890] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.ClearMaxDesiredHeight
	// void ClearMaxDesiredHeight();                                                                                            // [0x29e3870] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.ClearMaxAspectRatio
	// void ClearMaxAspectRatio();                                                                                              // [0x29e3850] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.ClearHeightOverride
	// void ClearHeightOverride();                                                                                              // [0x29e3830] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.SizeBoxSlot
/// Size: 0x0028 (0x000038 - 0x000060)
class USizeBoxSlot : public UPanelSlot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	CMember(TEnumAsByte<EHorizontalAlignment>)         HorizontalAlignment                                         OFFSET(get<T>, {0x58, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           VerticalAlignment                                           OFFSET(get<T>, {0x59, 1, 0, 0})


	/// Functions
	// Function /Script/UMG.SizeBoxSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x29e6300] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBoxSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x29e5a10] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBoxSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x29e53e0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.SlateBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class USlateBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/UMG.SlateBlueprintLibrary.TransformVectorLocalToAbsolute
	// FVector2D TransformVectorLocalToAbsolute(FGeometry& Geometry, FVector2D LocalVector);                                    // [0x29e67b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.TransformVectorAbsoluteToLocal
	// FVector2D TransformVectorAbsoluteToLocal(FGeometry& Geometry, FVector2D AbsoluteVector);                                 // [0x29e66a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.TransformScalarLocalToAbsolute
	// float TransformScalarLocalToAbsolute(FGeometry& Geometry, float LocalScalar);                                            // [0x29e6590] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.TransformScalarAbsoluteToLocal
	// float TransformScalarAbsoluteToLocal(FGeometry& Geometry, float AbsoluteScalar);                                         // [0x29e6480] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.ScreenToWidgetLocal
	// void ScreenToWidgetLocal(class UObject* WorldContextObject, FGeometry& Geometry, FVector2D ScreenPosition, FVector2D& LocalCoordinate, bool bIncludeWindowPosition); // [0x29e4780] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/UMG.SlateBlueprintLibrary.ScreenToWidgetAbsolute
	// void ScreenToWidgetAbsolute(class UObject* WorldContextObject, FVector2D ScreenPosition, FVector2D& AbsoluteCoordinate, bool bIncludeWindowPosition); // [0x29e4620] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/UMG.SlateBlueprintLibrary.ScreenToViewport
	// void ScreenToViewport(class UObject* WorldContextObject, FVector2D ScreenPosition, FVector2D& ViewportPosition);         // [0x29e4520] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/UMG.SlateBlueprintLibrary.LocalToViewport
	// void LocalToViewport(class UObject* WorldContextObject, FGeometry& Geometry, FVector2D LocalCoordinate, FVector2D& PixelPosition, FVector2D& ViewportPosition); // [0x29e4330] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.LocalToAbsolute
	// FVector2D LocalToAbsolute(FGeometry& Geometry, FVector2D LocalCoordinate);                                               // [0x29e4220] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.IsUnderLocation
	// bool IsUnderLocation(FGeometry& Geometry, FVector2D& AbsoluteCoordinate);                                                // [0x29e4110] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.GetLocalTopLeft
	// FVector2D GetLocalTopLeft(FGeometry& Geometry);                                                                          // [0x29e3f10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.GetLocalSize
	// FVector2D GetLocalSize(FGeometry& Geometry);                                                                             // [0x29e3e40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.GetAbsoluteSize
	// FVector2D GetAbsoluteSize(FGeometry& Geometry);                                                                          // [0x29e3cd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.EqualEqual_SlateBrush
	// bool EqualEqual_SlateBrush(FSlateBrush& A, FSlateBrush& B);                                                              // [0x29e3950] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.AbsoluteToViewport
	// void AbsoluteToViewport(class UObject* WorldContextObject, FVector2D AbsoluteDesktopCoordinate, FVector2D& PixelPosition, FVector2D& ViewportPosition); // [0x29e36d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.AbsoluteToLocal
	// FVector2D AbsoluteToLocal(FGeometry& Geometry, FVector2D AbsoluteCoordinate);                                            // [0x29e35c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
};

/// Struct /Script/UMG.SlateMeshVertex
/// Size: 0x003C (0x000000 - 0x00003C)
class FSlateMeshVertex : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 60;

public:
	SMember(FVector2D)                                 Position                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FColor)                                    Color                                                       OFFSET(getStruct<T>, {0x8, 4, 0, 0})
	SMember(FVector2D)                                 UV0                                                         OFFSET(getStruct<T>, {0xC, 8, 0, 0})
	SMember(FVector2D)                                 UV1                                                         OFFSET(getStruct<T>, {0x14, 8, 0, 0})
	SMember(FVector2D)                                 UV2                                                         OFFSET(getStruct<T>, {0x1C, 8, 0, 0})
	SMember(FVector2D)                                 UV3                                                         OFFSET(getStruct<T>, {0x24, 8, 0, 0})
	SMember(FVector2D)                                 UV4                                                         OFFSET(getStruct<T>, {0x2C, 8, 0, 0})
	SMember(FVector2D)                                 UV5                                                         OFFSET(getStruct<T>, {0x34, 8, 0, 0})
};

/// Class /Script/UMG.SlateVectorArtData
/// Size: 0x0038 (0x000028 - 0x000060)
class USlateVectorArtData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TArray<FSlateMeshVertex>)                  VertexData                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<uint32_t>)                          IndexData                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(class UMaterialInterface*)                 Material                                                    OFFSET(get<T>, {0x48, 8, 0, 0})
	SMember(FVector2D)                                 ExtentMin                                                   OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	SMember(FVector2D)                                 ExtentMax                                                   OFFSET(getStruct<T>, {0x58, 8, 0, 0})
};

/// Class /Script/UMG.SlateAccessibleWidgetData
/// Size: 0x0058 (0x000028 - 0x000080)
class USlateAccessibleWidgetData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	DMember(bool)                                      bCanChildrenBeAccessible                                    OFFSET(get<bool>, {0x28, 1, 0, 0})
	CMember(ESlateAccessibleBehavior)                  AccessibleBehavior                                          OFFSET(get<T>, {0x29, 1, 0, 0})
	CMember(ESlateAccessibleBehavior)                  AccessibleSummaryBehavior                                   OFFSET(get<T>, {0x2A, 1, 0, 0})
	SMember(FText)                                     AccessibleText                                              OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	SMember(FDelegateProperty)                         AccessibleTextDelegate                                      OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FText)                                     AccessibleSummaryText                                       OFFSET(getStruct<T>, {0x58, 24, 0, 0})
	SMember(FDelegateProperty)                         AccessibleSummaryTextDelegate                               OFFSET(getStruct<T>, {0x70, 16, 0, 0})
};

/// Class /Script/UMG.Slider
/// Size: 0x05B8 (0x000128 - 0x0006E0)
class USlider : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1760;

public:
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x128, 4, 0, 0})
	SMember(FDelegateProperty)                         ValueDelegate                                               OFFSET(getStruct<T>, {0x12C, 16, 0, 0})
	DMember(float)                                     MinValue                                                    OFFSET(get<float>, {0x13C, 4, 0, 0})
	DMember(float)                                     MaxValue                                                    OFFSET(get<float>, {0x140, 4, 0, 0})
	SMember(FSliderStyle)                              WidgetStyle                                                 OFFSET(getStruct<T>, {0x150, 1280, 0, 0})
	CMember(TEnumAsByte<EOrientation>)                 Orientation                                                 OFFSET(get<T>, {0x650, 1, 0, 0})
	SMember(FLinearColor)                              SliderBarColor                                              OFFSET(getStruct<T>, {0x654, 16, 0, 0})
	SMember(FLinearColor)                              SliderHandleColor                                           OFFSET(getStruct<T>, {0x664, 16, 0, 0})
	DMember(bool)                                      IndentHandle                                                OFFSET(get<bool>, {0x674, 1, 0, 0})
	DMember(bool)                                      Locked                                                      OFFSET(get<bool>, {0x675, 1, 0, 0})
	DMember(bool)                                      MouseUsesStep                                               OFFSET(get<bool>, {0x676, 1, 0, 0})
	DMember(bool)                                      RequiresControllerLock                                      OFFSET(get<bool>, {0x677, 1, 0, 0})
	DMember(float)                                     StepSize                                                    OFFSET(get<float>, {0x678, 4, 0, 0})
	DMember(bool)                                      IsFocusable                                                 OFFSET(get<bool>, {0x67C, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMouseCaptureBegin                                         OFFSET(getStruct<T>, {0x680, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMouseCaptureEnd                                           OFFSET(getStruct<T>, {0x690, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnControllerCaptureBegin                                    OFFSET(getStruct<T>, {0x6A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnControllerCaptureEnd                                      OFFSET(getStruct<T>, {0x6B0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnValueChanged                                              OFFSET(getStruct<T>, {0x6C0, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.Slider.SetValue
	// void SetValue(float InValue);                                                                                            // [0x29ea500] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Slider.SetStepSize
	// void SetStepSize(float InValue);                                                                                         // [0x29ea130] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Slider.SetSliderHandleColor
	// void SetSliderHandleColor(FLinearColor InValue);                                                                         // [0x29ea0a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Slider.SetSliderBarColor
	// void SetSliderBarColor(FLinearColor InValue);                                                                            // [0x29ea010] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Slider.SetMinValue
	// void SetMinValue(float InValue);                                                                                         // [0x29e9c70] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Slider.SetMaxValue
	// void SetMaxValue(float InValue);                                                                                         // [0x29e99e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Slider.SetLocked
	// void SetLocked(bool InValue);                                                                                            // [0x29e9840] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Slider.SetIndentHandle
	// void SetIndentHandle(bool InValue);                                                                                      // [0x29e9730] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Slider.GetValue
	// float GetValue();                                                                                                        // [0x29e8f80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Slider.GetNormalizedValue
	// float GetNormalizedValue();                                                                                              // [0x29e8d90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.Spacer
/// Size: 0x0018 (0x000128 - 0x000140)
class USpacer : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	SMember(FVector2D)                                 Size                                                        OFFSET(getStruct<T>, {0x128, 8, 0, 0})


	/// Functions
	// Function /Script/UMG.Spacer.SetSize
	// void SetSize(FVector2D InSize);                                                                                          // [0x29e9f90] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/UMG.SpinBox
/// Size: 0x0598 (0x000128 - 0x0006C0)
class USpinBox : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1728;

public:
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x128, 4, 0, 0})
	SMember(FDelegateProperty)                         ValueDelegate                                               OFFSET(getStruct<T>, {0x12C, 16, 0, 0})
	SMember(FSpinBoxStyle)                             WidgetStyle                                                 OFFSET(getStruct<T>, {0x140, 1120, 0, 0})
	CMember(class USlateWidgetStyleAsset*)             Style                                                       OFFSET(get<T>, {0x5A0, 8, 0, 0})
	DMember(int32_t)                                   MinFractionalDigits                                         OFFSET(get<int32_t>, {0x5A8, 4, 0, 0})
	DMember(int32_t)                                   MaxFractionalDigits                                         OFFSET(get<int32_t>, {0x5AC, 4, 0, 0})
	DMember(bool)                                      bAlwaysUsesDeltaSnap                                        OFFSET(get<bool>, {0x5B0, 1, 0, 0})
	DMember(float)                                     Delta                                                       OFFSET(get<float>, {0x5B4, 4, 0, 0})
	DMember(float)                                     SliderExponent                                              OFFSET(get<float>, {0x5B8, 4, 0, 0})
	SMember(FSlateFontInfo)                            Font                                                        OFFSET(getStruct<T>, {0x5C0, 88, 0, 0})
	CMember(TEnumAsByte<ETextJustify>)                 Justification                                               OFFSET(get<T>, {0x618, 1, 0, 0})
	DMember(float)                                     MinDesiredWidth                                             OFFSET(get<float>, {0x61C, 4, 0, 0})
	DMember(bool)                                      ClearKeyboardFocusOnCommit                                  OFFSET(get<bool>, {0x620, 1, 0, 0})
	DMember(bool)                                      SelectAllTextOnCommit                                       OFFSET(get<bool>, {0x621, 1, 0, 0})
	SMember(FSlateColor)                               ForegroundColor                                             OFFSET(getStruct<T>, {0x628, 40, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnValueChanged                                              OFFSET(getStruct<T>, {0x650, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnValueCommitted                                            OFFSET(getStruct<T>, {0x660, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnBeginSliderMovement                                       OFFSET(getStruct<T>, {0x670, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEndSliderMovement                                         OFFSET(getStruct<T>, {0x680, 16, 0, 0})
	DMember(bool)                                      bOverride_MinValue                                          OFFSET(get<bool>, {0x690, 1, 1, 0})
	DMember(bool)                                      bOverride_MaxValue                                          OFFSET(get<bool>, {0x690, 1, 1, 1})
	DMember(bool)                                      bOverride_MinSliderValue                                    OFFSET(get<bool>, {0x690, 1, 1, 2})
	DMember(bool)                                      bOverride_MaxSliderValue                                    OFFSET(get<bool>, {0x690, 1, 1, 3})
	DMember(float)                                     MinValue                                                    OFFSET(get<float>, {0x694, 4, 0, 0})
	DMember(float)                                     MaxValue                                                    OFFSET(get<float>, {0x698, 4, 0, 0})
	DMember(float)                                     MinSliderValue                                              OFFSET(get<float>, {0x69C, 4, 0, 0})
	DMember(float)                                     MaxSliderValue                                              OFFSET(get<float>, {0x6A0, 4, 0, 0})


	/// Functions
	// Function /Script/UMG.SpinBox.SetValue
	// void SetValue(float NewValue);                                                                                           // [0x29ea580] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.SetMinValue
	// void SetMinValue(float NewValue);                                                                                        // [0x29e9cf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.SetMinSliderValue
	// void SetMinSliderValue(float NewValue);                                                                                  // [0x29e9bf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.SetMinFractionalDigits
	// void SetMinFractionalDigits(int32_t NewValue);                                                                           // [0x29e9b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.SetMaxValue
	// void SetMaxValue(float NewValue);                                                                                        // [0x29e9a60] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.SetMaxSliderValue
	// void SetMaxSliderValue(float NewValue);                                                                                  // [0x29e9960] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.SetMaxFractionalDigits
	// void SetMaxFractionalDigits(int32_t NewValue);                                                                           // [0x29e98d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.SetForegroundColor
	// void SetForegroundColor(FSlateColor InForegroundColor);                                                                  // [0x29e9640] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.SetDelta
	// void SetDelta(float NewValue);                                                                                           // [0x29e93a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.SetAlwaysUsesDeltaSnap
	// void SetAlwaysUsesDeltaSnap(bool bNewValue);                                                                             // [0x29e8fe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.OnSpinBoxValueCommittedEvent__DelegateSignature
	// void OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, TEnumAsByte<ETextCommit> CommitMethod);              // [0x198a600] MulticastDelegate|Public|Delegate 
	// Function /Script/UMG.SpinBox.OnSpinBoxValueChangedEvent__DelegateSignature
	// void OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);                                                       // [0x198a600] MulticastDelegate|Public|Delegate 
	// Function /Script/UMG.SpinBox.OnSpinBoxBeginSliderMovement__DelegateSignature
	// void OnSpinBoxBeginSliderMovement__DelegateSignature();                                                                  // [0x198a600] MulticastDelegate|Public|Delegate 
	// Function /Script/UMG.SpinBox.GetValue
	// float GetValue();                                                                                                        // [0x29e8fb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.SpinBox.GetMinValue
	// float GetMinValue();                                                                                                     // [0x29e8d60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.SpinBox.GetMinSliderValue
	// float GetMinSliderValue();                                                                                               // [0x29e8d30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.SpinBox.GetMinFractionalDigits
	// int32_t GetMinFractionalDigits();                                                                                        // [0x29e8d00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.SpinBox.GetMaxValue
	// float GetMaxValue();                                                                                                     // [0x29e8cd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.SpinBox.GetMaxSliderValue
	// float GetMaxSliderValue();                                                                                               // [0x29e8ca0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.SpinBox.GetMaxFractionalDigits
	// int32_t GetMaxFractionalDigits();                                                                                        // [0x29e8c70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.SpinBox.GetDelta
	// float GetDelta();                                                                                                        // [0x29e8ba0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.SpinBox.GetAlwaysUsesDeltaSnap
	// bool GetAlwaysUsesDeltaSnap();                                                                                           // [0x29e8b70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.SpinBox.ClearMinValue
	// void ClearMinValue();                                                                                                    // [0x29e8b50] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.ClearMinSliderValue
	// void ClearMinSliderValue();                                                                                              // [0x29e8b30] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.ClearMaxValue
	// void ClearMaxValue();                                                                                                    // [0x29e8b10] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.ClearMaxSliderValue
	// void ClearMaxSliderValue();                                                                                              // [0x29e8af0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.TextBinding
/// Size: 0x0008 (0x000060 - 0x000068)
class UTextBinding : public UPropertyBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:


	/// Functions
	// Function /Script/UMG.TextBinding.GetTextValue
	// FText GetTextValue();                                                                                                    // [0x29e8ee0] Final|Native|Public|Const 
	// Function /Script/UMG.TextBinding.GetStringValue
	// FString GetStringValue();                                                                                                // [0x29e8dc0] Final|Native|Public|Const 
};

/// Class /Script/UMG.Throbber
/// Size: 0x00F8 (0x000128 - 0x000220)
class UThrobber : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	DMember(int32_t)                                   NumberOfPieces                                              OFFSET(get<int32_t>, {0x128, 4, 0, 0})
	DMember(bool)                                      bAnimateHorizontally                                        OFFSET(get<bool>, {0x12C, 1, 0, 0})
	DMember(bool)                                      bAnimateVertically                                          OFFSET(get<bool>, {0x12D, 1, 0, 0})
	DMember(bool)                                      bAnimateOpacity                                             OFFSET(get<bool>, {0x12E, 1, 0, 0})
	CMember(class USlateBrushAsset*)                   PieceImage                                                  OFFSET(get<T>, {0x130, 8, 0, 0})
	SMember(FSlateBrush)                               Image                                                       OFFSET(getStruct<T>, {0x140, 208, 0, 0})


	/// Functions
	// Function /Script/UMG.Throbber.SetNumberOfPieces
	// void SetNumberOfPieces(int32_t InNumberOfPieces);                                                                        // [0x29e9d70] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Throbber.SetAnimateVertically
	// void SetAnimateVertically(bool bInAnimateVertically);                                                                    // [0x29e9190] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Throbber.SetAnimateOpacity
	// void SetAnimateOpacity(bool bInAnimateOpacity);                                                                          // [0x29e9100] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Throbber.SetAnimateHorizontally
	// void SetAnimateHorizontally(bool bInAnimateHorizontally);                                                                // [0x29e9070] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.TileView
/// Size: 0x0028 (0x000AF8 - 0x000B20)
class UTileView : public UListView
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2848;

public:
	DMember(float)                                     EntryHeight                                                 OFFSET(get<float>, {0xAF8, 4, 0, 0})
	DMember(float)                                     EntryWidth                                                  OFFSET(get<float>, {0xAFC, 4, 0, 0})
	CMember(EListItemAlignment)                        TileAlignment                                               OFFSET(get<T>, {0xB00, 1, 0, 0})
	DMember(bool)                                      bWrapHorizontalNavigation                                   OFFSET(get<bool>, {0xB01, 1, 0, 0})


	/// Functions
	// Function /Script/UMG.TileView.SetEntryWidth
	// void SetEntryWidth(float NewWidth);                                                                                      // [0x29e94a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TileView.SetEntryHeight
	// void SetEntryHeight(float NewHeight);                                                                                    // [0x29e9420] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TileView.GetEntryWidth
	// float GetEntryWidth();                                                                                                   // [0x29e8c50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.TileView.GetEntryHeight
	// float GetEntryHeight();                                                                                                  // [0x29e8c30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.TreeView
/// Size: 0x0058 (0x000AF8 - 0x000B50)
class UTreeView : public UListView
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2896;

public:
	SMember(FDelegateProperty)                         BP_OnGetItemChildren                                        OFFSET(getStruct<T>, {0xB08, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  BP_OnItemExpansionChanged                                   OFFSET(getStruct<T>, {0xB18, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.TreeView.SetItemExpansion
	// void SetItemExpansion(class UObject* Item, bool bExpandItem);                                                            // [0x29f0740] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TreeView.ExpandAll
	// void ExpandAll();                                                                                                        // [0x29ef2b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TreeView.CollapseAll
	// void CollapseAll();                                                                                                      // [0x29ef290] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/MovieScene.MovieSceneSequenceID
/// Size: 0x0004 (0x000000 - 0x000004)
class FMovieSceneSequenceID : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(uint32_t)                                  Value                                                       OFFSET(get<uint32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneRootEvaluationTemplateInstance
/// Size: 0x00E8 (0x000000 - 0x0000E8)
class FMovieSceneRootEvaluationTemplateInstance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	CMember(TWeakObjectPtr<class UMovieSceneSequence*>) WeakRootSequence                                           OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UMovieSceneCompiledDataManager*)     CompiledDataManager                                         OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UMovieSceneEntitySystemLinker*)      EntitySystemLinker                                          OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(TMap<FMovieSceneSequenceID, class UObject*>) DirectorInstances                                         OFFSET(get<T>, {0x90, 80, 0, 0})
};

/// Class /Script/UMG.UMGSequencePlayer
/// Size: 0x0550 (0x000028 - 0x000578)
class UUMGSequencePlayer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1400;

public:
	CMember(class UWidgetAnimation*)                   Animation                                                   OFFSET(get<T>, {0x410, 8, 0, 0})
	SMember(FMovieSceneRootEvaluationTemplateInstance) RootTemplateInstance                                        OFFSET(getStruct<T>, {0x420, 232, 0, 0})


	/// Functions
	// Function /Script/UMG.UMGSequencePlayer.SetUserTag
	// void SetUserTag(FName InUserTag);                                                                                        // [0x29f0dc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UMGSequencePlayer.GetUserTag
	// FName GetUserTag();                                                                                                      // [0x29ef4a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.UMGSequenceTickManager
/// Size: 0x00F8 (0x000028 - 0x000120)
class UUMGSequenceTickManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	CMember(TSet<TWeakObjectPtr<UUserWidget*>>)        WeakUserWidgets                                             OFFSET(get<T>, {0x28, 80, 0, 0})
	CMember(class UMovieSceneEntitySystemLinker*)      Linker                                                      OFFSET(get<T>, {0x78, 8, 0, 0})
};

/// Class /Script/UMG.UniformGridPanel
/// Size: 0x0028 (0x000140 - 0x000168)
class UUniformGridPanel : public UPanelWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	SMember(FMargin)                                   SlotPadding                                                 OFFSET(getStruct<T>, {0x140, 16, 0, 0})
	DMember(float)                                     MinDesiredSlotWidth                                         OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     MinDesiredSlotHeight                                        OFFSET(get<float>, {0x154, 4, 0, 0})


	/// Functions
	// Function /Script/UMG.UniformGridPanel.SetSlotPadding
	// void SetSlotPadding(FMargin InSlotPadding);                                                                              // [0x29f0d30] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UniformGridPanel.SetMinDesiredSlotWidth
	// void SetMinDesiredSlotWidth(float InMinDesiredSlotWidth);                                                                // [0x29f0890] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UniformGridPanel.SetMinDesiredSlotHeight
	// void SetMinDesiredSlotHeight(float InMinDesiredSlotHeight);                                                              // [0x29f0810] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UniformGridPanel.AddChildToUniformGrid
	// class UUniformGridSlot* AddChildToUniformGrid(class UWidget* Content, int32_t InRow, int32_t InColumn);                  // [0x29eecf0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.UniformGridSlot
/// Size: 0x0018 (0x000038 - 0x000050)
class UUniformGridSlot : public UPanelSlot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TEnumAsByte<EHorizontalAlignment>)         HorizontalAlignment                                         OFFSET(get<T>, {0x38, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           VerticalAlignment                                           OFFSET(get<T>, {0x39, 1, 0, 0})
	DMember(int32_t)                                   Row                                                         OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(int32_t)                                   Column                                                      OFFSET(get<int32_t>, {0x40, 4, 0, 0})


	/// Functions
	// Function /Script/UMG.UniformGridSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x29f0e50] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UniformGridSlot.SetRow
	// void SetRow(int32_t InRow);                                                                                              // [0x29f0ca0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UniformGridSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x29f05a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UniformGridSlot.SetColumn
	// void SetColumn(int32_t InColumn);                                                                                        // [0x29f03a0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.VerticalBox
/// Size: 0x0010 (0x000140 - 0x000150)
class UVerticalBox : public UPanelWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:


	/// Functions
	// Function /Script/UMG.VerticalBox.AddChildToVerticalBox
	// class UVerticalBoxSlot* AddChildToVerticalBox(class UWidget* Content);                                                   // [0x29f2fc0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.VerticalBoxSlot
/// Size: 0x0028 (0x000038 - 0x000060)
class UVerticalBoxSlot : public UPanelSlot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FSlateChildSize)                           Size                                                        OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(TEnumAsByte<EHorizontalAlignment>)         HorizontalAlignment                                         OFFSET(get<T>, {0x58, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           VerticalAlignment                                           OFFSET(get<T>, {0x59, 1, 0, 0})


	/// Functions
	// Function /Script/UMG.VerticalBoxSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x29f4950] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.VerticalBoxSlot.SetSize
	// void SetSize(FSlateChildSize InSize);                                                                                    // [0x29f46d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.VerticalBoxSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x29f4260] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.VerticalBoxSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x29f3d30] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.Viewport
/// Size: 0x0048 (0x000140 - 0x000188)
class UViewport : public UContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	SMember(FLinearColor)                              BackgroundColor                                             OFFSET(getStruct<T>, {0x140, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.Viewport.Spawn
	// class AActor* Spawn(class UClass* ActorClass);                                                                           // [0x29f4b70] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Viewport.SetViewRotation
	// void SetViewRotation(FRotator Rotation);                                                                                 // [0x29f4a60] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Viewport.SetViewLocation
	// void SetViewLocation(FVector Location);                                                                                  // [0x29f49d0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Viewport.GetViewRotation
	// FRotator GetViewRotation();                                                                                              // [0x29f3760] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Viewport.GetViewportWorld
	// class UWorld* GetViewportWorld();                                                                                        // [0x29f37a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Viewport.GetViewLocation
	// FVector GetViewLocation();                                                                                               // [0x29f3720] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.VisibilityBinding
/// Size: 0x0000 (0x000060 - 0x000060)
class UVisibilityBinding : public UPropertyBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:


	/// Functions
	// Function /Script/UMG.VisibilityBinding.GetValue
	// ESlateVisibility GetValue();                                                                                             // [0x29f36f0] Final|Native|Public|Const 
};

/// Class /Script/MovieScene.MovieSceneSequence
/// Size: 0x0010 (0x000050 - 0x000060)
class UMovieSceneSequence : public UMovieSceneSignedObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UMovieSceneCompiledData*)            CompiledData                                                OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(EMovieSceneCompletionMode)                 DefaultCompletionMode                                       OFFSET(get<T>, {0x58, 1, 0, 0})
	DMember(bool)                                      bParentContextsAreSignificant                               OFFSET(get<bool>, {0x59, 1, 0, 0})
	DMember(bool)                                      bPlayableDirectly                                           OFFSET(get<bool>, {0x5A, 1, 0, 0})
	CMember(EMovieSceneSequenceFlags)                  SequenceFlags                                               OFFSET(get<T>, {0x5B, 1, 0, 0})


	/// Functions
	// Function /Script/MovieScene.MovieSceneSequence.FindBindingsByTag
	// TArray<FMovieSceneObjectBindingID> FindBindingsByTag(FName InBindingName);                                               // [0x27fb140] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequence.FindBindingByTag
	// FMovieSceneObjectBindingID FindBindingByTag(FName InBindingName);                                                        // [0x27fb090] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/UMG.WidgetAnimationBinding
/// Size: 0x0024 (0x000000 - 0x000024)
class FWidgetAnimationBinding : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	SMember(FName)                                     WidgetName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     SlotWidgetName                                              OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FGuid)                                     AnimationGuid                                               OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	DMember(bool)                                      bIsRootWidget                                               OFFSET(get<bool>, {0x20, 1, 0, 0})
};

/// Class /Script/UMG.WidgetAnimation
/// Size: 0x0030 (0x000060 - 0x000090)
class UWidgetAnimation : public UMovieSceneSequence
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(class UMovieScene*)                        MovieScene                                                  OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(TArray<FWidgetAnimationBinding>)           AnimationBindings                                           OFFSET(get<T>, {0x68, 16, 0, 0})
	DMember(bool)                                      bLegacyFinishOnStop                                         OFFSET(get<bool>, {0x78, 1, 0, 0})
	SMember(FString)                                   DisplayLabel                                                OFFSET(getStruct<T>, {0x80, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.WidgetAnimation.UnbindFromAnimationStarted
	// void UnbindFromAnimationStarted(class UUserWidget* Widget, FDelegateProperty Delegate);                                  // [0x29f4e10] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetAnimation.UnbindFromAnimationFinished
	// void UnbindFromAnimationFinished(class UUserWidget* Widget, FDelegateProperty Delegate);                                 // [0x29f4d30] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetAnimation.UnbindAllFromAnimationStarted
	// void UnbindAllFromAnimationStarted(class UUserWidget* Widget);                                                           // [0x29f4ca0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetAnimation.UnbindAllFromAnimationFinished
	// void UnbindAllFromAnimationFinished(class UUserWidget* Widget);                                                          // [0x29f4c10] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetAnimation.GetStartTime
	// float GetStartTime();                                                                                                    // [0x29f3680] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetAnimation.GetEndTime
	// float GetEndTime();                                                                                                      // [0x29f34c0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetAnimation.BindToAnimationStarted
	// void BindToAnimationStarted(class UUserWidget* Widget, FDelegateProperty Delegate);                                      // [0x29f3140] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetAnimation.BindToAnimationFinished
	// void BindToAnimationFinished(class UUserWidget* Widget, FDelegateProperty Delegate);                                     // [0x29f3060] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/UMG.BlueprintWidgetAnimationDelegateBinding
/// Size: 0x001C (0x000000 - 0x00001C)
class FBlueprintWidgetAnimationDelegateBinding : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	CMember(EWidgetAnimationEvent)                     Action                                                      OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FName)                                     AnimationToBind                                             OFFSET(getStruct<T>, {0x4, 8, 0, 0})
	SMember(FName)                                     FunctionNameToBind                                          OFFSET(getStruct<T>, {0xC, 8, 0, 0})
	SMember(FName)                                     UserTag                                                     OFFSET(getStruct<T>, {0x14, 8, 0, 0})
};

/// Class /Script/UMG.WidgetAnimationDelegateBinding
/// Size: 0x0010 (0x000028 - 0x000038)
class UWidgetAnimationDelegateBinding : public UDynamicBlueprintBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<FBlueprintWidgetAnimationDelegateBinding>) WidgetAnimationDelegateBindings                      OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/UMG.WidgetAnimationPlayCallbackProxy
/// Size: 0x0020 (0x000028 - 0x000048)
class UWidgetAnimationPlayCallbackProxy : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FMulticastInlineDelegate)                  Finished                                                    OFFSET(getStruct<T>, {0x28, 16, 0, 0})


	/// Functions
	// Function /Script/UMG.WidgetAnimationPlayCallbackProxy.CreatePlayAnimationTimeRangeProxyObject
	// class UWidgetAnimationPlayCallbackProxy* CreatePlayAnimationTimeRangeProxyObject(class UUMGSequencePlayer*& Result, class UUserWidget* Widget, class UWidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int32_t NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode> PlayMode, float PlaybackSpeed); // [0x29f7ce0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.WidgetAnimationPlayCallbackProxy.CreatePlayAnimationProxyObject
	// class UWidgetAnimationPlayCallbackProxy* CreatePlayAnimationProxyObject(class UUMGSequencePlayer*& Result, class UUserWidget* Widget, class UWidgetAnimation* InAnimation, float StartAtTime, int32_t NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode> PlayMode, float PlaybackSpeed); // [0x29f7ac0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/UMG.WidgetBinding
/// Size: 0x0000 (0x000060 - 0x000060)
class UWidgetBinding : public UPropertyBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:


	/// Functions
	// Function /Script/UMG.WidgetBinding.GetValue
	// class UWidget* GetValue();                                                                                               // [0x29fa1f0] Final|Native|Public|Const 
};

/// Struct /Script/UMG.DelegateRuntimeBinding
/// Size: 0x0050 (0x000000 - 0x000050)
class FDelegateRuntimeBinding : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FString)                                   ObjectName                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FName)                                     PropertyName                                                OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	SMember(FName)                                     FunctionName                                                OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FDynamicPropertyPath)                      SourcePath                                                  OFFSET(getStruct<T>, {0x20, 40, 0, 0})
	CMember(EBindingKind)                              Kind                                                        OFFSET(get<T>, {0x48, 1, 0, 0})
};

/// Class /Script/UMG.WidgetBlueprintGeneratedClass
/// Size: 0x0040 (0x000328 - 0x000368)
class UWidgetBlueprintGeneratedClass : public UBlueprintGeneratedClass
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	CMember(class UWidgetTree*)                        WidgetTree                                                  OFFSET(get<T>, {0x328, 8, 0, 0})
	DMember(bool)                                      bClassRequiresNativeTick                                    OFFSET(get<bool>, {0x330, 1, 1, 0})
	CMember(TArray<FDelegateRuntimeBinding>)           Bindings                                                    OFFSET(get<T>, {0x338, 16, 0, 0})
	CMember(TArray<class UWidgetAnimation*>)           Animations                                                  OFFSET(get<T>, {0x348, 16, 0, 0})
	CMember(TArray<FName>)                             NamedSlots                                                  OFFSET(get<T>, {0x358, 16, 0, 0})
};

/// Class /Script/UMG.WidgetBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UWidgetBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/UMG.WidgetBlueprintLibrary.UnlockMouse
	// FEventReply UnlockMouse(FEventReply& Reply);                                                                             // [0x29fc0f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.Unhandled
	// FEventReply Unhandled();                                                                                                 // [0x29fc080] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetWindowTitleBarState
	// void SetWindowTitleBarState(class UWidget* TitleBarContent, EWindowTitleBarMode Mode, bool bTitleBarDragEnabled, bool bWindowButtonsVisible, bool bTitleBarVisible); // [0x29fbe60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetWindowTitleBarOnCloseClickedDelegate
	// void SetWindowTitleBarOnCloseClickedDelegate(FDelegateProperty Delegate);                                                // [0x29fbdd0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetWindowTitleBarCloseButtonActive
	// void SetWindowTitleBarCloseButtonActive(bool bActive);                                                                   // [0x29fbd50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetUserFocus
	// FEventReply SetUserFocus(FEventReply& Reply, class UWidget* FocusWidget, bool bInAllUsers);                              // [0x29f7560] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetMousePosition
	// FEventReply SetMousePosition(FEventReply& Reply, FVector2D NewMousePosition);                                            // [0x29fb6b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetInputMode_UIOnlyEx
	// void SetInputMode_UIOnlyEx(class APlayerController* PlayerController, class UWidget* InWidgetToFocus, EMouseLockMode InMouseLockMode); // [0x29fb520] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetInputMode_UIOnly
	// void SetInputMode_UIOnly(class APlayerController* Target, class UWidget* InWidgetToFocus, bool bLockMouseToViewport);    // [0x29fb420] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetInputMode_GameOnly
	// void SetInputMode_GameOnly(class APlayerController* PlayerController);                                                   // [0x29fb3a0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetInputMode_GameAndUIEx
	// void SetInputMode_GameAndUIEx(class APlayerController* PlayerController, class UWidget* InWidgetToFocus, EMouseLockMode InMouseLockMode, bool bHideCursorDuringCapture); // [0x29fb250] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetInputMode_GameAndUI
	// void SetInputMode_GameAndUI(class APlayerController* Target, class UWidget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture); // [0x29fb0f0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetHardwareCursor
	// bool SetHardwareCursor(class UObject* WorldContextObject, TEnumAsByte<EMouseCursor> CursorShape, FName CursorName, FVector2D HotSpot); // [0x29fafb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetFocusToGameViewport
	// void SetFocusToGameViewport();                                                                                           // [0x29faf10] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetColorVisionDeficiencyType
	// void SetColorVisionDeficiencyType(EColorVisionDeficiency Type, float Severity, bool CorrectDeficiency, bool ShowCorrectionWithDeficiency); // [0x29fac20] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetBrushResourceToTexture
	// void SetBrushResourceToTexture(FSlateBrush& Brush, class UTexture2D* Texture);                                           // [0x29faa10] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetBrushResourceToMaterial
	// void SetBrushResourceToMaterial(FSlateBrush& Brush, class UMaterialInterface* Material);                                 // [0x29faa10] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.RestorePreviousWindowTitleBarState
	// void RestorePreviousWindowTitleBarState();                                                                               // [0x29fa960] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.ReleaseMouseCapture
	// FEventReply ReleaseMouseCapture(FEventReply& Reply);                                                                     // [0x29fa850] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.ReleaseJoystickCapture
	// FEventReply ReleaseJoystickCapture(FEventReply& Reply, bool bInAllJoysticks);                                            // [0x29f7800] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.OnGameWindowCloseButtonClickedDelegate__DelegateSignature
	// void OnGameWindowCloseButtonClickedDelegate__DelegateSignature();                                                        // [0x198a600] Public|Delegate      
	// Function /Script/UMG.WidgetBlueprintLibrary.NoResourceBrush
	// FSlateBrush NoResourceBrush();                                                                                           // [0x29fa800] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.MakeBrushFromTexture
	// FSlateBrush MakeBrushFromTexture(class UTexture2D* Texture, int32_t Width, int32_t Height);                              // [0x29fa6b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.MakeBrushFromMaterial
	// FSlateBrush MakeBrushFromMaterial(class UMaterialInterface* Material, int32_t Width, int32_t Height);                    // [0x29fa560] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.MakeBrushFromAsset
	// FSlateBrush MakeBrushFromAsset(class USlateBrushAsset* BrushAsset);                                                      // [0x29fa4b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.LockMouse
	// FEventReply LockMouse(FEventReply& Reply, class UWidget* CapturingWidget);                                               // [0x29fa380] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.IsDragDropping
	// bool IsDragDropping();                                                                                                   // [0x29fa320] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.Handled
	// FEventReply Handled();                                                                                                   // [0x29fa2b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetSafeZonePadding
	// void GetSafeZonePadding(class UObject* WorldContextObject, FVector4& SafePadding, FVector2D& SafePaddingScale, FVector4& SpillOverPadding); // [0x29fa000] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetKeyEventFromAnalogInputEvent
	// FKeyEvent GetKeyEventFromAnalogInputEvent(FAnalogInputEvent& Event);                                                     // [0x29f9da0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetInputEventFromPointerEvent
	// FInputEvent GetInputEventFromPointerEvent(FPointerEvent& Event);                                                         // [0x29f9c50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetInputEventFromNavigationEvent
	// FInputEvent GetInputEventFromNavigationEvent(FNavigationEvent& Event);                                                   // [0x29f9b70] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetInputEventFromKeyEvent
	// FInputEvent GetInputEventFromKeyEvent(FKeyEvent& Event);                                                                 // [0x29f9a50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetInputEventFromCharacterEvent
	// FInputEvent GetInputEventFromCharacterEvent(FCharacterEvent& Event);                                                     // [0x29f9970] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetDynamicMaterial
	// class UMaterialInstanceDynamic* GetDynamicMaterial(FSlateBrush& Brush);                                                  // [0x29f9780] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetDragDroppingContent
	// class UDragDropOperation* GetDragDroppingContent();                                                                      // [0x29f96f0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetBrushResourceAsTexture2D
	// class UTexture2D* GetBrushResourceAsTexture2D(FSlateBrush& Brush);                                                       // [0x29f94c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetBrushResourceAsMaterial
	// class UMaterialInterface* GetBrushResourceAsMaterial(FSlateBrush& Brush);                                                // [0x29f92f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetBrushResource
	// class UObject* GetBrushResource(FSlateBrush& Brush);                                                                     // [0x29f9120] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetAllWidgetsWithInterface
	// void GetAllWidgetsWithInterface(class UObject* WorldContextObject, TArray<UUserWidget*>& FoundWidgets, class UClass* Interface, bool TopLevelOnly); // [0x29f8fb0] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetAllWidgetsOfClass
	// void GetAllWidgetsOfClass(class UObject* WorldContextObject, TArray<UUserWidget*>& FoundWidgets, class UClass* WidgetClass, bool TopLevelOnly); // [0x29f8e40] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.EndDragDrop
	// FEventReply EndDragDrop(FEventReply& Reply);                                                                             // [0x29f8d50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.DrawTextFormatted
	// void DrawTextFormatted(FPaintContext& Context, FText& Text, FVector2D Position, class UFont* Font, int32_t FontSize, FName FontTypeFace, FLinearColor Tint); // [0x29f8ad0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.DrawText
	// void DrawText(FPaintContext& Context, FString inString, FVector2D Position, FLinearColor Tint);                          // [0x29f8940] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.DrawLines
	// void DrawLines(FPaintContext& Context, TArray<FVector2D>& Points, FLinearColor Tint, bool bAntiAlias, float Thickness);  // [0x29f8760] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.DrawLine
	// void DrawLine(FPaintContext& Context, FVector2D PositionA, FVector2D PositionB, FLinearColor Tint, bool bAntiAlias, float Thickness); // [0x29f8550] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.DrawBox
	// void DrawBox(FPaintContext& Context, FVector2D Position, FVector2D Size, class USlateBrushAsset* Brush, FLinearColor Tint); // [0x29f8390] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.DismissAllMenus
	// void DismissAllMenus();                                                                                                  // [0x29f8370] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.DetectDragIfPressed
	// FEventReply DetectDragIfPressed(FPointerEvent& PointerEvent, class UWidget* WidgetDetectingDrag, FKey DragKey);          // [0x29f8120] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.DetectDrag
	// FEventReply DetectDrag(FEventReply& Reply, class UWidget* WidgetDetectingDrag, FKey DragKey);                            // [0x29f7f40] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.CreateDragDropOperation
	// class UDragDropOperation* CreateDragDropOperation(class UClass* OperationClass);                                         // [0x29f7a30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.Create
	// class UUserWidget* Create(class UObject* WorldContextObject, class UClass* WidgetType, class APlayerController* OwningPlayer); // [0x29f7930] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.ClearUserFocus
	// FEventReply ClearUserFocus(FEventReply& Reply, bool bInAllUsers);                                                        // [0x29f7800] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.CaptureMouse
	// FEventReply CaptureMouse(FEventReply& Reply, class UWidget* CapturingWidget);                                            // [0x29f76d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.CaptureJoystick
	// FEventReply CaptureJoystick(FEventReply& Reply, class UWidget* CapturingWidget, bool bInAllJoysticks);                   // [0x29f7560] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.CancelDragDrop
	// void CancelDragDrop();                                                                                                   // [0x29f7540] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/UMG.WidgetInteractionComponent
/// Size: 0x0208 (0x0001F8 - 0x000400)
class UWidgetInteractionComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
	SMember(FMulticastInlineDelegate)                  OnHoveredWidgetChanged                                      OFFSET(getStruct<T>, {0x1F8, 16, 0, 0})
	DMember(int32_t)                                   VirtualUserIndex                                            OFFSET(get<int32_t>, {0x218, 4, 0, 0})
	DMember(int32_t)                                   PointerIndex                                                OFFSET(get<int32_t>, {0x21C, 4, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            TraceChannel                                                OFFSET(get<T>, {0x220, 1, 0, 0})
	DMember(float)                                     InteractionDistance                                         OFFSET(get<float>, {0x224, 4, 0, 0})
	CMember(EWidgetInteractionSource)                  InteractionSource                                           OFFSET(get<T>, {0x228, 1, 0, 0})
	DMember(bool)                                      bEnableHitTesting                                           OFFSET(get<bool>, {0x229, 1, 0, 0})
	DMember(bool)                                      bShowDebug                                                  OFFSET(get<bool>, {0x22A, 1, 0, 0})
	DMember(float)                                     DebugSphereLineThickness                                    OFFSET(get<float>, {0x22C, 4, 0, 0})
	DMember(float)                                     DebugLineThickness                                          OFFSET(get<float>, {0x230, 4, 0, 0})
	SMember(FLinearColor)                              DebugColor                                                  OFFSET(getStruct<T>, {0x234, 16, 0, 0})
	SMember(FHitResult)                                CustomHitResult                                             OFFSET(getStruct<T>, {0x2C0, 140, 0, 0})
	SMember(FVector2D)                                 LocalHitLocation                                            OFFSET(getStruct<T>, {0x34C, 8, 0, 0})
	SMember(FVector2D)                                 LastLocalHitLocation                                        OFFSET(getStruct<T>, {0x354, 8, 0, 0})
	CMember(class UWidgetComponent*)                   HoveredWidgetComponent                                      OFFSET(get<T>, {0x360, 8, 0, 0})
	SMember(FHitResult)                                LastHitResult                                               OFFSET(getStruct<T>, {0x368, 140, 0, 0})
	DMember(bool)                                      bIsHoveredWidgetInteractable                                OFFSET(get<bool>, {0x3F4, 1, 0, 0})
	DMember(bool)                                      bIsHoveredWidgetFocusable                                   OFFSET(get<bool>, {0x3F5, 1, 0, 0})
	DMember(bool)                                      bIsHoveredWidgetHitTestVisible                              OFFSET(get<bool>, {0x3F6, 1, 0, 0})


	/// Functions
	// Function /Script/UMG.WidgetInteractionComponent.SetFocus
	// void SetFocus(class UWidget* FocusWidget);                                                                               // [0x29ff210] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetInteractionComponent.SetCustomHitResult
	// void SetCustomHitResult(FHitResult& HitResult);                                                                          // [0x29ff020] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.WidgetInteractionComponent.SendKeyChar
	// bool SendKeyChar(FString Characters, bool bRepeat);                                                                      // [0x29fee40] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetInteractionComponent.ScrollWheel
	// void ScrollWheel(float ScrollDelta);                                                                                     // [0x29fedb0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetInteractionComponent.ReleasePointerKey
	// void ReleasePointerKey(FKey Key);                                                                                        // [0x29fec40] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetInteractionComponent.ReleaseKey
	// bool ReleaseKey(FKey Key);                                                                                               // [0x29feb40] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetInteractionComponent.PressPointerKey
	// void PressPointerKey(FKey Key);                                                                                          // [0x29fe8e0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetInteractionComponent.PressKey
	// bool PressKey(FKey Key, bool bRepeat);                                                                                   // [0x29fe7a0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetInteractionComponent.PressAndReleaseKey
	// bool PressAndReleaseKey(FKey Key);                                                                                       // [0x29fe6a0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetInteractionComponent.IsOverInteractableWidget
	// bool IsOverInteractableWidget();                                                                                         // [0x29fe670] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetInteractionComponent.IsOverHitTestVisibleWidget
	// bool IsOverHitTestVisibleWidget();                                                                                       // [0x29fe640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetInteractionComponent.IsOverFocusableWidget
	// bool IsOverFocusableWidget();                                                                                            // [0x29fe610] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetInteractionComponent.GetLastHitResult
	// FHitResult GetLastHitResult();                                                                                           // [0x29fe020] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetInteractionComponent.GetHoveredWidgetComponent
	// class UWidgetComponent* GetHoveredWidgetComponent();                                                                     // [0x29fdff0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetInteractionComponent.Get2DHitLocation
	// FVector2D Get2DHitLocation();                                                                                            // [0x29fdf50] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.WidgetLayoutLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UWidgetLayoutLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsWrapBoxSlot
	// class UWrapBoxSlot* SlotAsWrapBoxSlot(class UWidget* Widget);                                                            // [0x2a00020] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsWidgetSwitcherSlot
	// class UWidgetSwitcherSlot* SlotAsWidgetSwitcherSlot(class UWidget* Widget);                                              // [0x29fff90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsVerticalBoxSlot
	// class UVerticalBoxSlot* SlotAsVerticalBoxSlot(class UWidget* Widget);                                                    // [0x29fff00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsUniformGridSlot
	// class UUniformGridSlot* SlotAsUniformGridSlot(class UWidget* Widget);                                                    // [0x29ffe70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsSizeBoxSlot
	// class USizeBoxSlot* SlotAsSizeBoxSlot(class UWidget* Widget);                                                            // [0x29ffde0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsScrollBoxSlot
	// class UScrollBoxSlot* SlotAsScrollBoxSlot(class UWidget* Widget);                                                        // [0x29ffd50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsScaleBoxSlot
	// class UScaleBoxSlot* SlotAsScaleBoxSlot(class UWidget* Widget);                                                          // [0x29ffcc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsSafeBoxSlot
	// class USafeZoneSlot* SlotAsSafeBoxSlot(class UWidget* Widget);                                                           // [0x29ffc30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsOverlaySlot
	// class UOverlaySlot* SlotAsOverlaySlot(class UWidget* Widget);                                                            // [0x29ffba0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsHorizontalBoxSlot
	// class UHorizontalBoxSlot* SlotAsHorizontalBoxSlot(class UWidget* Widget);                                                // [0x29ffb10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsGridSlot
	// class UGridSlot* SlotAsGridSlot(class UWidget* Widget);                                                                  // [0x29ffa80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsCanvasSlot
	// class UCanvasPanelSlot* SlotAsCanvasSlot(class UWidget* Widget);                                                         // [0x29ff9f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsBorderSlot
	// class UBorderSlot* SlotAsBorderSlot(class UWidget* Widget);                                                              // [0x29ff960] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.RemoveAllWidgets
	// void RemoveAllWidgets(class UObject* WorldContextObject);                                                                // [0x29fed30] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetLayoutLibrary.ProjectWorldLocationToWidgetPosition
	// bool ProjectWorldLocationToWidgetPosition(class APlayerController* PlayerController, FVector WorldLocation, FVector2D& ScreenPosition, bool bPlayerViewportRelative); // [0x29fe9d0] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.GetViewportWidgetGeometry
	// FGeometry GetViewportWidgetGeometry(class UObject* WorldContextObject);                                                  // [0x29fe4b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetLayoutLibrary.GetViewportSize
	// FVector2D GetViewportSize(class UObject* WorldContextObject);                                                            // [0x29fe420] Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.GetViewportScale
	// float GetViewportScale(class UObject* WorldContextObject);                                                               // [0x29fe390] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.GetPlayerScreenWidgetGeometry
	// FGeometry GetPlayerScreenWidgetGeometry(class APlayerController* PlayerController);                                      // [0x29fe2d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetLayoutLibrary.GetMousePositionScaledByDPI
	// bool GetMousePositionScaledByDPI(class APlayerController* Player, float& LocationX, float& LocationY);                   // [0x29fe180] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.GetMousePositionOnViewport
	// FVector2D GetMousePositionOnViewport(class UObject* WorldContextObject);                                                 // [0x29fe0f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetLayoutLibrary.GetMousePositionOnPlatform
	// FVector2D GetMousePositionOnPlatform();                                                                                  // [0x29fe0b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
};

/// Struct /Script/UMG.WidgetNavigationData
/// Size: 0x0024 (0x000000 - 0x000024)
class FWidgetNavigationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	CMember(EUINavigationRule)                         Rule                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FName)                                     WidgetToFocus                                               OFFSET(getStruct<T>, {0x4, 8, 0, 0})
	CMember(TWeakObjectPtr<class UWidget*>)            Widget                                                      OFFSET(get<T>, {0xC, 8, 0, 0})
	SMember(FDelegateProperty)                         CustomDelegate                                              OFFSET(getStruct<T>, {0x14, 16, 0, 0})
};

/// Class /Script/UMG.WidgetNavigation
/// Size: 0x00D8 (0x000028 - 0x000100)
class UWidgetNavigation : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FWidgetNavigationData)                     Up                                                          OFFSET(getStruct<T>, {0x28, 36, 0, 0})
	SMember(FWidgetNavigationData)                     Down                                                        OFFSET(getStruct<T>, {0x4C, 36, 0, 0})
	SMember(FWidgetNavigationData)                     Left                                                        OFFSET(getStruct<T>, {0x70, 36, 0, 0})
	SMember(FWidgetNavigationData)                     Right                                                       OFFSET(getStruct<T>, {0x94, 36, 0, 0})
	SMember(FWidgetNavigationData)                     Next                                                        OFFSET(getStruct<T>, {0xB8, 36, 0, 0})
	SMember(FWidgetNavigationData)                     Previous                                                    OFFSET(getStruct<T>, {0xDC, 36, 0, 0})
};

/// Class /Script/UMG.WidgetSwitcherSlot
/// Size: 0x0020 (0x000038 - 0x000058)
class UWidgetSwitcherSlot : public UPanelSlot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(TEnumAsByte<EHorizontalAlignment>)         HorizontalAlignment                                         OFFSET(get<T>, {0x50, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           VerticalAlignment                                           OFFSET(get<T>, {0x51, 1, 0, 0})


	/// Functions
	// Function /Script/UMG.WidgetSwitcherSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x29ff760] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetSwitcherSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x29ff520] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetSwitcherSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x29ff2a0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.WidgetTree
/// Size: 0x0008 (0x000028 - 0x000030)
class UWidgetTree : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UWidget*)                            RootWidget                                                  OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/UMG.WindowTitleBarArea
/// Size: 0x0020 (0x000140 - 0x000160)
class UWindowTitleBarArea : public UContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	DMember(bool)                                      bWindowButtonsEnabled                                       OFFSET(get<bool>, {0x140, 1, 0, 0})
	DMember(bool)                                      bDoubleClickTogglesFullscreen                               OFFSET(get<bool>, {0x141, 1, 0, 0})


	/// Functions
	// Function /Script/UMG.WindowTitleBarArea.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x29ff7e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WindowTitleBarArea.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x29ff5b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WindowTitleBarArea.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x29ff320] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.WindowTitleBarAreaSlot
/// Size: 0x0028 (0x000038 - 0x000060)
class UWindowTitleBarAreaSlot : public UPanelSlot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	CMember(TEnumAsByte<EHorizontalAlignment>)         HorizontalAlignment                                         OFFSET(get<T>, {0x48, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           VerticalAlignment                                           OFFSET(get<T>, {0x49, 1, 0, 0})


	/// Functions
	// Function /Script/UMG.WindowTitleBarAreaSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x29ff860] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WindowTitleBarAreaSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x29ff640] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WindowTitleBarAreaSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x29ff3a0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.WrapBox
/// Size: 0x0028 (0x000140 - 0x000168)
class UWrapBox : public UPanelWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	SMember(FVector2D)                                 InnerSlotPadding                                            OFFSET(getStruct<T>, {0x140, 8, 0, 0})
	DMember(float)                                     WrapWidth                                                   OFFSET(get<float>, {0x148, 4, 0, 0})
	DMember(float)                                     WrapSize                                                    OFFSET(get<float>, {0x14C, 4, 0, 0})
	DMember(bool)                                      bExplicitWrapWidth                                          OFFSET(get<bool>, {0x150, 1, 0, 0})
	DMember(bool)                                      bExplicitWrapSize                                           OFFSET(get<bool>, {0x151, 1, 0, 0})
	CMember(TEnumAsByte<EOrientation>)                 Orientation                                                 OFFSET(get<T>, {0x152, 1, 0, 0})


	/// Functions
	// Function /Script/UMG.WrapBox.SetInnerSlotPadding
	// void SetInnerSlotPadding(FVector2D InPadding);                                                                           // [0x29ff4a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WrapBox.AddChildToWrapBox
	// class UWrapBoxSlot* AddChildToWrapBox(class UWidget* Content);                                                           // [0x29fdeb0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.WrapBoxSlot
/// Size: 0x0028 (0x000038 - 0x000060)
class UWrapBoxSlot : public UPanelSlot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      bFillEmptySpace                                             OFFSET(get<bool>, {0x48, 1, 0, 0})
	DMember(float)                                     FillSpanWhenLessThan                                        OFFSET(get<float>, {0x4C, 4, 0, 0})
	CMember(TEnumAsByte<EHorizontalAlignment>)         HorizontalAlignment                                         OFFSET(get<T>, {0x50, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           VerticalAlignment                                           OFFSET(get<T>, {0x51, 1, 0, 0})


	/// Functions
	// Function /Script/UMG.WrapBoxSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x29ff8e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WrapBoxSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x29ff6d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WrapBoxSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x29ff420] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WrapBoxSlot.SetFillSpanWhenLessThan
	// void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);                                                              // [0x29ff190] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WrapBoxSlot.SetFillEmptySpace
	// void SetFillEmptySpace(bool InbFillEmptySpace);                                                                          // [0x29ff100] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/UMG.EventReply
/// Size: 0x00B8 (0x000000 - 0x0000B8)
class FEventReply : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
};

/// Struct /Script/UMG.PaintContext
/// Size: 0x0030 (0x000000 - 0x000030)
class FPaintContext : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/MovieScene.MovieSceneEvalTemplateBase
/// Size: 0x0010 (0x000000 - 0x000010)
class FMovieSceneEvalTemplateBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/MovieScene.MovieSceneEvalTemplate
/// Size: 0x0010 (0x000010 - 0x000020)
class FMovieSceneEvalTemplate : public FMovieSceneEvalTemplateBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(EMovieSceneCompletionMode)                 CompletionMode                                              OFFSET(get<T>, {0x10, 1, 0, 0})
	CMember(TWeakObjectPtr<class UMovieSceneSection*>) SourceSectionPtr                                            OFFSET(get<T>, {0x14, 8, 0, 0})
};

/// Struct /Script/MovieScene.MovieScenePropertySectionData
/// Size: 0x0018 (0x000000 - 0x000018)
class FMovieScenePropertySectionData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     PropertyName                                                OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FString)                                   PropertyPath                                                OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/MovieScene.MovieScenePropertySectionTemplate
/// Size: 0x0018 (0x000020 - 0x000038)
class FMovieScenePropertySectionTemplate : public FMovieSceneEvalTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FMovieScenePropertySectionData)            PropertyData                                                OFFSET(getStruct<T>, {0x20, 24, 0, 0})
};

/// Struct /Script/UMG.MovieSceneMarginSectionTemplate
/// Size: 0x0288 (0x000038 - 0x0002C0)
class FMovieSceneMarginSectionTemplate : public FMovieScenePropertySectionTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	SMember(FMovieSceneFloatChannel)                   TopCurve                                                    OFFSET(getStruct<T>, {0x38, 160, 0, 0})
	SMember(FMovieSceneFloatChannel)                   LeftCurve                                                   OFFSET(getStruct<T>, {0xD8, 160, 0, 0})
	SMember(FMovieSceneFloatChannel)                   RightCurve                                                  OFFSET(getStruct<T>, {0x178, 160, 0, 0})
	SMember(FMovieSceneFloatChannel)                   BottomCurve                                                 OFFSET(getStruct<T>, {0x218, 160, 0, 0})
	CMember(EMovieSceneBlendType)                      BlendType                                                   OFFSET(get<T>, {0x2B8, 1, 0, 0})
};

/// Struct /Script/MovieSceneTracks.ScalarParameterNameAndCurve
/// Size: 0x00A8 (0x000000 - 0x0000A8)
class FScalarParameterNameAndCurve : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FMovieSceneFloatChannel)                   ParameterCurve                                              OFFSET(getStruct<T>, {0x8, 160, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneBoolChannel
/// Size: 0x0088 (0x000008 - 0x000090)
class FMovieSceneBoolChannel : public FMovieSceneChannel
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<FFrameNumber>)                      Times                                                       OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(bool)                                      DefaultValue                                                OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(bool)                                      bHasDefaultValue                                            OFFSET(get<bool>, {0x19, 1, 0, 0})
	CMember(TArray<bool>)                              Values                                                      OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/MovieSceneTracks.BoolParameterNameAndCurve
/// Size: 0x0098 (0x000000 - 0x000098)
class FBoolParameterNameAndCurve : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FMovieSceneBoolChannel)                    ParameterCurve                                              OFFSET(getStruct<T>, {0x8, 144, 0, 0})
};

/// Struct /Script/MovieSceneTracks.Vector2DParameterNameAndCurves
/// Size: 0x0148 (0x000000 - 0x000148)
class FVector2DParameterNameAndCurves : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FMovieSceneFloatChannel)                   XCurve                                                      OFFSET(getStruct<T>, {0x8, 160, 0, 0})
	SMember(FMovieSceneFloatChannel)                   YCurve                                                      OFFSET(getStruct<T>, {0xA8, 160, 0, 0})
};

/// Struct /Script/MovieSceneTracks.VectorParameterNameAndCurves
/// Size: 0x01E8 (0x000000 - 0x0001E8)
class FVectorParameterNameAndCurves : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 488;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FMovieSceneFloatChannel)                   XCurve                                                      OFFSET(getStruct<T>, {0x8, 160, 0, 0})
	SMember(FMovieSceneFloatChannel)                   YCurve                                                      OFFSET(getStruct<T>, {0xA8, 160, 0, 0})
	SMember(FMovieSceneFloatChannel)                   ZCurve                                                      OFFSET(getStruct<T>, {0x148, 160, 0, 0})
};

/// Struct /Script/MovieSceneTracks.ColorParameterNameAndCurves
/// Size: 0x0288 (0x000000 - 0x000288)
class FColorParameterNameAndCurves : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FMovieSceneFloatChannel)                   RedCurve                                                    OFFSET(getStruct<T>, {0x8, 160, 0, 0})
	SMember(FMovieSceneFloatChannel)                   GreenCurve                                                  OFFSET(getStruct<T>, {0xA8, 160, 0, 0})
	SMember(FMovieSceneFloatChannel)                   BlueCurve                                                   OFFSET(getStruct<T>, {0x148, 160, 0, 0})
	SMember(FMovieSceneFloatChannel)                   AlphaCurve                                                  OFFSET(getStruct<T>, {0x1E8, 160, 0, 0})
};

/// Struct /Script/MovieSceneTracks.TransformParameterNameAndCurves
/// Size: 0x05A8 (0x000000 - 0x0005A8)
class FTransformParameterNameAndCurves : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1448;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FMovieSceneFloatChannel)                   Translation                                                 OFFSET(getStruct<T>, {0x8, 480, 0, 0})
	SMember(FMovieSceneFloatChannel)                   Rotation                                                    OFFSET(getStruct<T>, {0x1E8, 480, 0, 0})
	SMember(FMovieSceneFloatChannel)                   Scale                                                       OFFSET(getStruct<T>, {0x3C8, 480, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneParameterSectionTemplate
/// Size: 0x0060 (0x000020 - 0x000080)
class FMovieSceneParameterSectionTemplate : public FMovieSceneEvalTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TArray<FScalarParameterNameAndCurve>)      Scalars                                                     OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FBoolParameterNameAndCurve>)        Bools                                                       OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FVector2DParameterNameAndCurves>)   Vector2Ds                                                   OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FVectorParameterNameAndCurves>)     Vectors                                                     OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FColorParameterNameAndCurves>)      Colors                                                      OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<FTransformParameterNameAndCurves>)  Transforms                                                  OFFSET(get<T>, {0x70, 16, 0, 0})
};

/// Struct /Script/UMG.MovieSceneWidgetMaterialSectionTemplate
/// Size: 0x0010 (0x000080 - 0x000090)
class FMovieSceneWidgetMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<FName>)                             BrushPropertyNamePath                                       OFFSET(get<T>, {0x80, 16, 0, 0})
};

/// Struct /Script/UMG.RichTextStyleRow
/// Size: 0x0368 (0x000008 - 0x000370)
class FRichTextStyleRow : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	SMember(FTextBlockStyle)                           TextStyle                                                   OFFSET(getStruct<T>, {0x10, 864, 0, 0})
};

/// Struct /Script/UMG.RichImageRow
/// Size: 0x00D8 (0x000008 - 0x0000E0)
class FRichImageRow : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FSlateBrush)                               Brush                                                       OFFSET(getStruct<T>, {0x10, 208, 0, 0})
};

/// Struct /Script/UMG.WidgetComponentInstanceData
/// Size: 0x0010 (0x0000B8 - 0x0000C8)
class FWidgetComponentInstanceData : public FSceneComponentInstanceData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
};

/// Struct /Script/MovieScene.MovieSceneSequenceLoopCount
/// Size: 0x0004 (0x000000 - 0x000004)
class FMovieSceneSequenceLoopCount : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   Value                                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneSequencePlaybackSettings
/// Size: 0x0014 (0x000000 - 0x000014)
class FMovieSceneSequencePlaybackSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(bool)                                      bAutoPlay                                                   OFFSET(get<bool>, {0x0, 1, 1, 0})
	SMember(FMovieSceneSequenceLoopCount)              LoopCount                                                   OFFSET(getStruct<T>, {0x4, 4, 0, 0})
	DMember(float)                                     PlayRate                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     StartTime                                                   OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(bool)                                      bRandomStartTime                                            OFFSET(get<bool>, {0x10, 1, 1, 0})
	DMember(bool)                                      bRestoreState                                               OFFSET(get<bool>, {0x10, 1, 1, 1})
	DMember(bool)                                      bDisableMovementInput                                       OFFSET(get<bool>, {0x10, 1, 1, 2})
	DMember(bool)                                      bDisableLookAtInput                                         OFFSET(get<bool>, {0x10, 1, 1, 3})
	DMember(bool)                                      bHidePlayer                                                 OFFSET(get<bool>, {0x10, 1, 1, 4})
	DMember(bool)                                      bHideHud                                                    OFFSET(get<bool>, {0x10, 1, 1, 5})
	DMember(bool)                                      bDisableCameraCuts                                          OFFSET(get<bool>, {0x10, 1, 1, 6})
	DMember(bool)                                      bPauseAtEnd                                                 OFFSET(get<bool>, {0x10, 1, 1, 7})
};

/// Struct /Script/MovieScene.MovieSceneSequenceReplProperties
/// Size: 0x0010 (0x000000 - 0x000010)
class FMovieSceneSequenceReplProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FFrameTime)                                LastKnownPosition                                           OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<EMovieScenePlayerStatus>)      LastKnownStatus                                             OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(int32_t)                                   LastKnownNumLoops                                           OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Class /Script/MovieScene.MovieSceneSequencePlayer
/// Size: 0x0658 (0x000028 - 0x000680)
class UMovieSceneSequencePlayer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1664;

public:
	SMember(FMulticastInlineDelegate)                  OnPlay                                                      OFFSET(getStruct<T>, {0x410, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayReverse                                               OFFSET(getStruct<T>, {0x420, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnStop                                                      OFFSET(getStruct<T>, {0x430, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPause                                                     OFFSET(getStruct<T>, {0x440, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFinished                                                  OFFSET(getStruct<T>, {0x450, 16, 0, 0})
	CMember(TEnumAsByte<EMovieScenePlayerStatus>)      status                                                      OFFSET(get<T>, {0x460, 1, 0, 0})
	DMember(bool)                                      bReversePlayback                                            OFFSET(get<bool>, {0x464, 1, 1, 0})
	CMember(class UMovieSceneSequence*)                Sequence                                                    OFFSET(get<T>, {0x468, 8, 0, 0})
	SMember(FFrameNumber)                              StartTime                                                   OFFSET(getStruct<T>, {0x470, 4, 0, 0})
	DMember(int32_t)                                   DurationFrames                                              OFFSET(get<int32_t>, {0x474, 4, 0, 0})
	DMember(float)                                     DurationSubFrames                                           OFFSET(get<float>, {0x478, 4, 0, 0})
	DMember(int32_t)                                   CurrentNumLoops                                             OFFSET(get<int32_t>, {0x47C, 4, 0, 0})
	SMember(FMovieSceneSequencePlaybackSettings)       PlaybackSettings                                            OFFSET(getStruct<T>, {0x480, 20, 0, 0})
	SMember(FMovieSceneRootEvaluationTemplateInstance) RootTemplateInstance                                        OFFSET(getStruct<T>, {0x498, 232, 0, 0})
	SMember(FMovieSceneSequenceReplProperties)         NetSyncProps                                                OFFSET(getStruct<T>, {0x5E8, 16, 0, 0})
	CMember(TScriptInterface<Class>)                   PlaybackClient                                              OFFSET(get<T>, {0x5F8, 16, 0, 0})
	CMember(class UMovieSceneSequenceTickManager*)     TickManager                                                 OFFSET(get<T>, {0x608, 8, 0, 0})


	/// Functions
	// Function /Script/MovieScene.MovieSceneSequencePlayer.StopAtCurrentTime
	// void StopAtCurrentTime();                                                                                                // [0x27fcbd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.Stop
	// void Stop();                                                                                                             // [0x27fcbb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.SetTimeRange
	// void SetTimeRange(float StartTime, float Duration);                                                                      // [0x27fcae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.SetPlayRate
	// void SetPlayRate(float PlayRate);                                                                                        // [0x27fc790] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.SetPlaybackPosition
	// void SetPlaybackPosition(FMovieSceneSequencePlaybackParams PlaybackParams);                                              // [0x27fc810] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.SetFrameRate
	// void SetFrameRate(FFrameRate FrameRate);                                                                                 // [0x27fc550] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.SetFrameRange
	// void SetFrameRange(int32_t StartFrame, int32_t Duration, float SubFrames);                                               // [0x27fc440] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.SetDisableCameraCuts
	// void SetDisableCameraCuts(bool bInDisableCameraCuts);                                                                    // [0x27fc3b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.ScrubToSeconds
	// void ScrubToSeconds(float TimeInSeconds);                                                                                // [0x27fc200] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.ScrubToMarkedFrame
	// bool ScrubToMarkedFrame(FString InLabel);                                                                                // [0x27fc0f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.ScrubToFrame
	// void ScrubToFrame(FFrameTime NewPosition);                                                                               // [0x27fc040] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.Scrub
	// void Scrub();                                                                                                            // [0x27fc020] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.RPC_OnStopEvent
	// void RPC_OnStopEvent(FFrameTime StoppedTime);                                                                            // [0x27fbf80] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.RPC_ExplicitServerUpdateEvent
	// void RPC_ExplicitServerUpdateEvent(EUpdatePositionMethod method, FFrameTime RelevantTime);                               // [0x27fbea0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.PlayToSeconds
	// void PlayToSeconds(float TimeInSeconds);                                                                                 // [0x27fbdf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.PlayToMarkedFrame
	// bool PlayToMarkedFrame(FString InLabel);                                                                                 // [0x27fbce0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.PlayToFrame
	// void PlayToFrame(FFrameTime NewPosition);                                                                                // [0x27fbc30] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.PlayTo
	// void PlayTo(FMovieSceneSequencePlaybackParams PlaybackParams);                                                           // [0x27fbb10] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.PlayReverse
	// void PlayReverse();                                                                                                      // [0x27fbaf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.PlayLooping
	// void PlayLooping(int32_t NumLoops);                                                                                      // [0x27fba60] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.Play
	// void Play();                                                                                                             // [0x27fba40] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.Pause
	// void Pause();                                                                                                            // [0x27fba20] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.JumpToSeconds
	// void JumpToSeconds(float TimeInSeconds);                                                                                 // [0x27fb970] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.JumpToMarkedFrame
	// bool JumpToMarkedFrame(FString InLabel);                                                                                 // [0x27fb860] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.JumpToFrame
	// void JumpToFrame(FFrameTime NewPosition);                                                                                // [0x27fb7b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.IsReversed
	// bool IsReversed();                                                                                                       // [0x27fb780] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.IsPlaying
	// bool IsPlaying();                                                                                                        // [0x27fb750] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.IsPaused
	// bool IsPaused();                                                                                                         // [0x27fb720] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GoToEndAndStop
	// void GoToEndAndStop();                                                                                                   // [0x27fb6a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetStartTime
	// FQualifiedFrameTime GetStartTime();                                                                                      // [0x27fb650] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetPlayRate
	// float GetPlayRate();                                                                                                     // [0x27fb5e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetObjectBindings
	// TArray<FMovieSceneObjectBindingID> GetObjectBindings(class UObject* InObject);                                           // [0x27fb4e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetFrameRate
	// FFrameRate GetFrameRate();                                                                                               // [0x27fb4c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetFrameDuration
	// int32_t GetFrameDuration();                                                                                              // [0x27fb490] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetEndTime
	// FQualifiedFrameTime GetEndTime();                                                                                        // [0x27fb430] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetDuration
	// FQualifiedFrameTime GetDuration();                                                                                       // [0x27fb3f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetDisableCameraCuts
	// bool GetDisableCameraCuts();                                                                                             // [0x27fb3c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetCurrentTime
	// FQualifiedFrameTime GetCurrentTime();                                                                                    // [0x27fb380] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetBoundObjects
	// TArray<UObject*> GetBoundObjects(FMovieSceneObjectBindingID ObjectBinding);                                              // [0x27fb250] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.ChangePlaybackDirection
	// void ChangePlaybackDirection();                                                                                          // [0x27fb070] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/MovieScene.MovieSceneSectionParameters
/// Size: 0x0024 (0x000000 - 0x000024)
class FMovieSceneSectionParameters : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	SMember(FFrameNumber)                              StartFrameOffset                                            OFFSET(getStruct<T>, {0x0, 4, 0, 0})
	DMember(bool)                                      bCanLoop                                                    OFFSET(get<bool>, {0x4, 1, 0, 0})
	SMember(FFrameNumber)                              EndFrameOffset                                              OFFSET(getStruct<T>, {0x8, 4, 0, 0})
	SMember(FFrameNumber)                              FirstLoopStartFrameOffset                                   OFFSET(getStruct<T>, {0xC, 4, 0, 0})
	DMember(float)                                     TimeScale                                                   OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   HierarchicalBias                                            OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(float)                                     StartOffset                                                 OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     PrerollTime                                                 OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     PostrollTime                                                OFFSET(get<float>, {0x20, 4, 0, 0})
};

/// Class /Script/MovieScene.MovieSceneSubSection
/// Size: 0x0078 (0x0000E8 - 0x000160)
class UMovieSceneSubSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	SMember(FMovieSceneSectionParameters)              Parameters                                                  OFFSET(getStruct<T>, {0xE8, 36, 0, 0})
	DMember(float)                                     StartOffset                                                 OFFSET(get<float>, {0x10C, 4, 0, 0})
	DMember(float)                                     TimeScale                                                   OFFSET(get<float>, {0x110, 4, 0, 0})
	DMember(float)                                     PrerollTime                                                 OFFSET(get<float>, {0x114, 4, 0, 0})
	CMember(class UMovieSceneSequence*)                SubSequence                                                 OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(TLazyObjectPtr<class AActor*>)             ActorToRecord                                               OFFSET(get<T>, {0x120, 28, 0, 0})
	SMember(FString)                                   TargetSequenceName                                          OFFSET(getStruct<T>, {0x140, 16, 0, 0})
	SMember(FDirectoryPath)                            TargetPathToRecordTo                                        OFFSET(getStruct<T>, {0x150, 16, 0, 0})


	/// Functions
	// Function /Script/MovieScene.MovieSceneSubSection.SetSequence
	// void SetSequence(class UMovieSceneSequence* Sequence);                                                                   // [0x27ff6f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSubSection.GetSequence
	// class UMovieSceneSequence* GetSequence();                                                                                // [0x27ff6c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/MovieScene.MovieSceneSubTrack
/// Size: 0x0010 (0x000078 - 0x000088)
class UMovieSceneSubTrack : public UMovieSceneNameableTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<class UMovieSceneSection*>)         Sections                                                    OFFSET(get<T>, {0x78, 16, 0, 0})
};

/// Class /Script/MovieScene.MovieSceneCustomClockSource
/// Size: 0x0000 (0x000028 - 0x000028)
class UMovieSceneCustomClockSource : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/MovieScene.MovieSceneCustomClockSource.OnTick
	// void OnTick(float DeltaSeconds, float InPlayRate);                                                                       // [0x27f1c80] Native|Public        
	// Function /Script/MovieScene.MovieSceneCustomClockSource.OnStopPlaying
	// void OnStopPlaying(FQualifiedFrameTime& InStopTime);                                                                     // [0x27f1bd0] Native|Public|HasOutParms 
	// Function /Script/MovieScene.MovieSceneCustomClockSource.OnStartPlaying
	// void OnStartPlaying(FQualifiedFrameTime& InStartTime);                                                                   // [0x27f1b20] Native|Public|HasOutParms 
	// Function /Script/MovieScene.MovieSceneCustomClockSource.OnRequestCurrentTime
	// FFrameTime OnRequestCurrentTime(FQualifiedFrameTime& InCurrentTime, float InPlayRate);                                   // [0x27f1a20] Native|Public|HasOutParms 
};

/// Class /Script/MovieScene.MovieSceneEntityProvider
/// Size: 0x0000 (0x000028 - 0x000028)
class UMovieSceneEntityProvider : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/MovieScene.MovieScenePlaybackClient
/// Size: 0x0000 (0x000028 - 0x000028)
class UMovieScenePlaybackClient : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/MovieScene.MovieSceneTrackTemplateProducer
/// Size: 0x0000 (0x000028 - 0x000028)
class UMovieSceneTrackTemplateProducer : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/MovieScene.NodeAndChannelMappings
/// Size: 0x0000 (0x000028 - 0x000028)
class UNodeAndChannelMappings : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/MovieScene.MovieSceneNodeGroup
/// Size: 0x0000 (0x000028 - 0x000028)
class UMovieSceneNodeGroup : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/MovieScene.MovieSceneNodeGroupCollection
/// Size: 0x0000 (0x000028 - 0x000028)
class UMovieSceneNodeGroupCollection : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/MovieScene.MovieSceneSpawnable
/// Size: 0x0090 (0x000000 - 0x000090)
class FMovieSceneSpawnable : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FTransform)                                SpawnTransform                                              OFFSET(getStruct<T>, {0x0, 48, 0, 0})
	CMember(TArray<FName>)                             Tags                                                        OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(bool)                                      bContinuouslyRespawn                                        OFFSET(get<bool>, {0x40, 1, 0, 0})
	DMember(bool)                                      bEvaluateTracksWhenNotSpawned                               OFFSET(get<bool>, {0x41, 1, 0, 0})
	SMember(FGuid)                                     Guid                                                        OFFSET(getStruct<T>, {0x44, 16, 0, 0})
	SMember(FString)                                   Name                                                        OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	CMember(class UObject*)                            ObjectTemplate                                              OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(TArray<FGuid>)                             ChildPossessables                                           OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(ESpawnOwnership)                           Ownership                                                   OFFSET(get<T>, {0x80, 1, 0, 0})
	SMember(FName)                                     LevelName                                                   OFFSET(getStruct<T>, {0x84, 8, 0, 0})
};

/// Struct /Script/MovieScene.MovieScenePossessable
/// Size: 0x0048 (0x000000 - 0x000048)
class FMovieScenePossessable : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FName>)                             Tags                                                        OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FGuid)                                     Guid                                                        OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   Name                                                        OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	CMember(class UClass*)                             PossessedObjectClass                                        OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FGuid)                                     ParentGuid                                                  OFFSET(getStruct<T>, {0x38, 16, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneBinding
/// Size: 0x0030 (0x000000 - 0x000030)
class FMovieSceneBinding : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FGuid)                                     ObjectGuid                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   BindingName                                                 OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	CMember(TArray<class UMovieSceneTrack*>)           Tracks                                                      OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneObjectBindingID
/// Size: 0x0018 (0x000000 - 0x000018)
class FMovieSceneObjectBindingID : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   SequenceID                                                  OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(EMovieSceneObjectBindingSpace)             Space                                                       OFFSET(get<T>, {0x4, 1, 0, 0})
	SMember(FGuid)                                     Guid                                                        OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneObjectBindingIDs
/// Size: 0x0010 (0x000000 - 0x000010)
class FMovieSceneObjectBindingIDs : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FMovieSceneObjectBindingID>)        IDs                                                         OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneMarkedFrame
/// Size: 0x0018 (0x000000 - 0x000018)
class FMovieSceneMarkedFrame : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FFrameNumber)                              FrameNumber                                                 OFFSET(getStruct<T>, {0x0, 4, 0, 0})
	SMember(FString)                                   Label                                                       OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Class /Script/MovieScene.MovieScene
/// Size: 0x00F8 (0x000050 - 0x000148)
class UMovieScene : public UMovieSceneSignedObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	CMember(TArray<FMovieSceneSpawnable>)              Spawnables                                                  OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FMovieScenePossessable>)            Possessables                                                OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<FMovieSceneBinding>)                ObjectBindings                                              OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TMap<FName, FMovieSceneObjectBindingIDs>)  BindingGroups                                               OFFSET(get<T>, {0x80, 80, 0, 0})
	CMember(TArray<class UMovieSceneTrack*>)           MasterTracks                                                OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(class UMovieSceneTrack*)                   CameraCutTrack                                              OFFSET(get<T>, {0xE0, 8, 0, 0})
	SMember(FMovieSceneFrameRange)                     SelectionRange                                              OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	SMember(FMovieSceneFrameRange)                     PlaybackRange                                               OFFSET(getStruct<T>, {0xF8, 16, 0, 0})
	SMember(FFrameRate)                                TickResolution                                              OFFSET(getStruct<T>, {0x108, 8, 0, 0})
	SMember(FFrameRate)                                DisplayRate                                                 OFFSET(getStruct<T>, {0x110, 8, 0, 0})
	CMember(EMovieSceneEvaluationType)                 EvaluationType                                              OFFSET(get<T>, {0x118, 1, 0, 0})
	CMember(EUpdateClockSource)                        ClockSource                                                 OFFSET(get<T>, {0x119, 1, 0, 0})
	SMember(FSoftObjectPath)                           CustomClockSourcePath                                       OFFSET(getStruct<T>, {0x120, 24, 0, 0})
	CMember(TArray<FMovieSceneMarkedFrame>)            MarkedFrames                                                OFFSET(get<T>, {0x138, 16, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneBindingOverrideData
/// Size: 0x0024 (0x000000 - 0x000024)
class FMovieSceneBindingOverrideData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	SMember(FMovieSceneObjectBindingID)                ObjectBindingID                                             OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	CMember(TWeakObjectPtr<class UObject*>)            Object                                                      OFFSET(get<T>, {0x18, 8, 0, 0})
	DMember(bool)                                      bOverridesDefault                                           OFFSET(get<bool>, {0x20, 1, 0, 0})
};

/// Class /Script/MovieScene.MovieSceneBindingOverrides
/// Size: 0x0068 (0x000028 - 0x000090)
class UMovieSceneBindingOverrides : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<FMovieSceneBindingOverrideData>)    BindingData                                                 OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/MovieScene.MovieSceneBindingOwnerInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UMovieSceneBindingOwnerInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/MovieScene.MovieSceneBlenderSystem
/// Size: 0x0020 (0x000040 - 0x000060)
class UMovieSceneBlenderSystem : public UMovieSceneEntitySystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Class /Script/MovieScene.MovieSceneBoolSection
/// Size: 0x0098 (0x0000E8 - 0x000180)
class UMovieSceneBoolSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	DMember(bool)                                      DefaultValue                                                OFFSET(get<bool>, {0xE8, 1, 0, 0})
	SMember(FMovieSceneBoolChannel)                    BoolCurve                                                   OFFSET(getStruct<T>, {0xF0, 144, 0, 0})
};

/// Class /Script/MovieScene.MovieSceneEntityInstantiatorSystem
/// Size: 0x0000 (0x000040 - 0x000040)
class UMovieSceneEntityInstantiatorSystem : public UMovieSceneEntitySystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/MovieScene.MovieSceneGenericBoundObjectInstantiator
/// Size: 0x0000 (0x000040 - 0x000040)
class UMovieSceneGenericBoundObjectInstantiator : public UMovieSceneEntityInstantiatorSystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/MovieScene.MovieSceneBoundSceneComponentInstantiator
/// Size: 0x0000 (0x000040 - 0x000040)
class UMovieSceneBoundSceneComponentInstantiator : public UMovieSceneEntityInstantiatorSystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/MovieScene.MovieSceneSceneComponentImpersonator
/// Size: 0x0000 (0x000028 - 0x000028)
class UMovieSceneSceneComponentImpersonator : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/MovieScene.MovieSceneTrackIdentifier
/// Size: 0x0004 (0x000000 - 0x000004)
class FMovieSceneTrackIdentifier : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(uint32_t)                                  Value                                                       OFFSET(get<uint32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneEvalTemplatePtr
/// Size: 0x0088 (0x000000 - 0x000088)
class FMovieSceneEvalTemplatePtr : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
};

/// Struct /Script/MovieScene.MovieSceneTrackImplementationPtr
/// Size: 0x0038 (0x000000 - 0x000038)
class FMovieSceneTrackImplementationPtr : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Struct /Script/MovieScene.MovieSceneEvaluationTrack
/// Size: 0x0078 (0x000000 - 0x000078)
class FMovieSceneEvaluationTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FGuid)                                     ObjectBindingID                                             OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(uint16_t)                                  EvaluationPriority                                          OFFSET(get<uint16_t>, {0x10, 2, 0, 0})
	CMember(EEvaluationMethod)                         EvaluationMethod                                            OFFSET(get<T>, {0x12, 1, 0, 0})
	CMember(TWeakObjectPtr<class UMovieSceneTrack*>)   SourceTrack                                                 OFFSET(get<T>, {0x14, 8, 0, 0})
	CMember(TArray<FMovieSceneEvalTemplatePtr>)        ChildTemplates                                              OFFSET(get<T>, {0x20, 16, 0, 0})
	SMember(FMovieSceneTrackImplementationPtr)         TrackTemplate                                               OFFSET(getStruct<T>, {0x30, 56, 0, 0})
	SMember(FName)                                     EvaluationGroup                                             OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	DMember(bool)                                      bEvaluateInPreroll                                          OFFSET(get<bool>, {0x70, 1, 1, 0})
	DMember(bool)                                      bEvaluateInPostroll                                         OFFSET(get<bool>, {0x70, 1, 1, 1})
	DMember(bool)                                      bTearDownPriority                                           OFFSET(get<bool>, {0x70, 1, 1, 2})
};

/// Struct /Script/MovieScene.MovieSceneEvaluationTemplateSerialNumber
/// Size: 0x0004 (0x000000 - 0x000004)
class FMovieSceneEvaluationTemplateSerialNumber : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(uint32_t)                                  Value                                                       OFFSET(get<uint32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneTemplateGenerationLedger
/// Size: 0x00A8 (0x000000 - 0x0000A8)
class FMovieSceneTemplateGenerationLedger : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FMovieSceneTrackIdentifier)                LastTrackIdentifier                                         OFFSET(getStruct<T>, {0x0, 4, 0, 0})
	CMember(TMap<FGuid, FMovieSceneTrackIdentifier>)   TrackSignatureToTrackIdentifier                             OFFSET(get<T>, {0x8, 80, 0, 0})
	CMember(TMap<FGuid, FMovieSceneFrameRange>)        SubSectionRanges                                            OFFSET(get<T>, {0x58, 80, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneEvaluationTemplate
/// Size: 0x0160 (0x000000 - 0x000160)
class FMovieSceneEvaluationTemplate : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(TMap<FMovieSceneTrackIdentifier, FMovieSceneEvaluationTrack>) Tracks                                   OFFSET(get<T>, {0x0, 80, 0, 0})
	SMember(FGuid)                                     SequenceSignature                                           OFFSET(getStruct<T>, {0xA0, 16, 0, 0})
	SMember(FMovieSceneEvaluationTemplateSerialNumber) TemplateSerialNumber                                        OFFSET(getStruct<T>, {0xB0, 4, 0, 0})
	SMember(FMovieSceneTemplateGenerationLedger)       TemplateLedger                                              OFFSET(getStruct<T>, {0xB8, 168, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneSequenceHierarchyNode
/// Size: 0x0018 (0x000000 - 0x000018)
class FMovieSceneSequenceHierarchyNode : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FMovieSceneSequenceID)                     ParentID                                                    OFFSET(getStruct<T>, {0x0, 4, 0, 0})
	CMember(TArray<FMovieSceneSequenceID>)             Children                                                    OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneSubSequenceTree
/// Size: 0x0060 (0x000000 - 0x000060)
class FMovieSceneSubSequenceTree : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Struct /Script/MovieScene.MovieSceneTimeTransform
/// Size: 0x000C (0x000000 - 0x00000C)
class FMovieSceneTimeTransform : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     TimeScale                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FFrameTime)                                Offset                                                      OFFSET(getStruct<T>, {0x4, 8, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneTimeWarping
/// Size: 0x0008 (0x000000 - 0x000008)
class FMovieSceneTimeWarping : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FFrameNumber)                              Start                                                       OFFSET(getStruct<T>, {0x0, 4, 0, 0})
	SMember(FFrameNumber)                              End                                                         OFFSET(getStruct<T>, {0x4, 4, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneNestedSequenceTransform
/// Size: 0x0014 (0x000000 - 0x000014)
class FMovieSceneNestedSequenceTransform : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FMovieSceneTimeTransform)                  LinearTransform                                             OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FMovieSceneTimeWarping)                    Warping                                                     OFFSET(getStruct<T>, {0xC, 8, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneSequenceTransform
/// Size: 0x0020 (0x000000 - 0x000020)
class FMovieSceneSequenceTransform : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FMovieSceneTimeTransform)                  LinearTransform                                             OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	CMember(TArray<FMovieSceneNestedSequenceTransform>) NestedTransforms                                           OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneSequenceInstanceDataPtr
/// Size: 0x0018 (0x000000 - 0x000018)
class FMovieSceneSequenceInstanceDataPtr : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/MovieScene.MovieSceneSubSequenceData
/// Size: 0x00E8 (0x000000 - 0x0000E8)
class FMovieSceneSubSequenceData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FSoftObjectPath)                           Sequence                                                    OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FMovieSceneSequenceTransform)              RootToSequenceTransform                                     OFFSET(getStruct<T>, {0x18, 32, 0, 0})
	SMember(FFrameRate)                                TickResolution                                              OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FMovieSceneSequenceID)                     DeterministicSequenceID                                     OFFSET(getStruct<T>, {0x40, 4, 0, 0})
	SMember(FMovieSceneFrameRange)                     PlayRange                                                   OFFSET(getStruct<T>, {0x44, 16, 0, 0})
	SMember(FMovieSceneFrameRange)                     FullPlayRange                                               OFFSET(getStruct<T>, {0x54, 16, 0, 0})
	SMember(FMovieSceneFrameRange)                     UnwarpedPlayRange                                           OFFSET(getStruct<T>, {0x64, 16, 0, 0})
	SMember(FMovieSceneFrameRange)                     PreRollRange                                                OFFSET(getStruct<T>, {0x74, 16, 0, 0})
	SMember(FMovieSceneFrameRange)                     PostRollRange                                               OFFSET(getStruct<T>, {0x84, 16, 0, 0})
	DMember(int16_t)                                   HierarchicalBias                                            OFFSET(get<int16_t>, {0x94, 2, 0, 0})
	DMember(bool)                                      bHasHierarchicalEasing                                      OFFSET(get<bool>, {0x96, 1, 0, 0})
	SMember(FMovieSceneSequenceInstanceDataPtr)        InstanceData                                                OFFSET(getStruct<T>, {0x98, 24, 0, 0})
	SMember(FGuid)                                     SubSectionSignature                                         OFFSET(getStruct<T>, {0xB8, 16, 0, 0})
	SMember(FMovieSceneSequenceTransform)              OuterToInnerTransform                                       OFFSET(getStruct<T>, {0xC8, 32, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneSequenceHierarchy
/// Size: 0x0118 (0x000000 - 0x000118)
class FMovieSceneSequenceHierarchy : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	SMember(FMovieSceneSequenceHierarchyNode)          RootNode                                                    OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FMovieSceneSubSequenceTree)                Tree                                                        OFFSET(getStruct<T>, {0x18, 96, 0, 0})
	CMember(TMap<FMovieSceneSequenceID, FMovieSceneSubSequenceData>) SubSequences                                  OFFSET(get<T>, {0x78, 80, 0, 0})
	CMember(TMap<FMovieSceneSequenceID, FMovieSceneSequenceHierarchyNode>) Hierarchy                               OFFSET(get<T>, {0xC8, 80, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldEntityTree
/// Size: 0x0060 (0x000000 - 0x000060)
class FMovieSceneEvaluationFieldEntityTree : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldEntityKey
/// Size: 0x000C (0x000000 - 0x00000C)
class FMovieSceneEvaluationFieldEntityKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	CMember(TWeakObjectPtr<class UObject*>)            EntityOwner                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(uint32_t)                                  EntityID                                                    OFFSET(get<uint32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldEntity
/// Size: 0x0010 (0x000000 - 0x000010)
class FMovieSceneEvaluationFieldEntity : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FMovieSceneEvaluationFieldEntityKey)       Key                                                         OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(int32_t)                                   SharedMetaDataIndex                                         OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldEntityMetaData
/// Size: 0x000C (0x000000 - 0x00000C)
class FMovieSceneEvaluationFieldEntityMetaData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FFrameNumber)                              ForcedTime                                                  OFFSET(getStruct<T>, {0x0, 4, 0, 0})
	CMember(ESectionEvaluationFlags)                   Flags                                                       OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(bool)                                      bEvaluateInSequencePreRoll                                  OFFSET(get<bool>, {0x9, 1, 1, 0})
	DMember(bool)                                      bEvaluateInSequencePostRoll                                 OFFSET(get<bool>, {0x9, 1, 1, 1})
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldSharedEntityMetaData
/// Size: 0x0010 (0x000000 - 0x000010)
class FMovieSceneEvaluationFieldSharedEntityMetaData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FGuid)                                     ObjectBindingID                                             OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneEntityComponentField
/// Size: 0x00F0 (0x000000 - 0x0000F0)
class FMovieSceneEntityComponentField : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FMovieSceneEvaluationFieldEntityTree)      PersistentEntityTree                                        OFFSET(getStruct<T>, {0x0, 96, 0, 0})
	SMember(FMovieSceneEvaluationFieldEntityTree)      OneShotEntityTree                                           OFFSET(getStruct<T>, {0x60, 96, 0, 0})
	CMember(TArray<FMovieSceneEvaluationFieldEntity>)  Entities                                                    OFFSET(get<T>, {0xC0, 16, 0, 0})
	CMember(TArray<FMovieSceneEvaluationFieldEntityMetaData>) EntityMetaData                                       OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(TArray<FMovieSceneEvaluationFieldSharedEntityMetaData>) SharedMetaData                                 OFFSET(get<T>, {0xE0, 16, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneEvaluationGroupLUTIndex
/// Size: 0x0008 (0x000000 - 0x000008)
class FMovieSceneEvaluationGroupLUTIndex : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   NumInitPtrs                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   NumEvalPtrs                                                 OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldTrackPtr
/// Size: 0x0008 (0x000000 - 0x000008)
class FMovieSceneEvaluationFieldTrackPtr : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FMovieSceneSequenceID)                     SequenceID                                                  OFFSET(getStruct<T>, {0x0, 4, 0, 0})
	SMember(FMovieSceneTrackIdentifier)                TrackIdentifier                                             OFFSET(getStruct<T>, {0x4, 4, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneFieldEntry_EvaluationTrack
/// Size: 0x000C (0x000000 - 0x00000C)
class FMovieSceneFieldEntry_EvaluationTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FMovieSceneEvaluationFieldTrackPtr)        TrackPtr                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(uint16_t)                                  NumChildren                                                 OFFSET(get<uint16_t>, {0x8, 2, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneFieldEntry_ChildTemplate
/// Size: 0x0008 (0x000000 - 0x000008)
class FMovieSceneFieldEntry_ChildTemplate : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(uint16_t)                                  ChildIndex                                                  OFFSET(get<uint16_t>, {0x0, 2, 0, 0})
	CMember(ESectionEvaluationFlags)                   Flags                                                       OFFSET(get<T>, {0x2, 1, 0, 0})
	SMember(FFrameNumber)                              ForcedTime                                                  OFFSET(getStruct<T>, {0x4, 4, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneEvaluationGroup
/// Size: 0x0030 (0x000000 - 0x000030)
class FMovieSceneEvaluationGroup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<FMovieSceneEvaluationGroupLUTIndex>) LUTIndices                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FMovieSceneFieldEntry_EvaluationTrack>) TrackLUT                                                OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FMovieSceneFieldEntry_ChildTemplate>) SectionLUT                                                OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneEvaluationKey
/// Size: 0x000C (0x000000 - 0x00000C)
class FMovieSceneEvaluationKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FMovieSceneSequenceID)                     SequenceID                                                  OFFSET(getStruct<T>, {0x0, 4, 0, 0})
	SMember(FMovieSceneTrackIdentifier)                TrackIdentifier                                             OFFSET(getStruct<T>, {0x4, 4, 0, 0})
	DMember(uint32_t)                                  SectionIndex                                                OFFSET(get<uint32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneOrderedEvaluationKey
/// Size: 0x0010 (0x000000 - 0x000010)
class FMovieSceneOrderedEvaluationKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FMovieSceneEvaluationKey)                  Key                                                         OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(uint16_t)                                  SetupIndex                                                  OFFSET(get<uint16_t>, {0xC, 2, 0, 0})
	DMember(uint16_t)                                  TearDownIndex                                               OFFSET(get<uint16_t>, {0xE, 2, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneEvaluationMetaData
/// Size: 0x0020 (0x000000 - 0x000020)
class FMovieSceneEvaluationMetaData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FMovieSceneSequenceID>)             ActiveSequences                                             OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FMovieSceneOrderedEvaluationKey>)   ActiveEntities                                              OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneEvaluationField
/// Size: 0x0030 (0x000000 - 0x000030)
class FMovieSceneEvaluationField : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<FMovieSceneFrameRange>)             Ranges                                                      OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FMovieSceneEvaluationGroup>)        Groups                                                      OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FMovieSceneEvaluationMetaData>)     MetaData                                                    OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneSequenceCompilerMaskStruct
/// Size: 0x0001 (0x000000 - 0x000001)
class FMovieSceneSequenceCompilerMaskStruct : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(bool)                                      bHierarchy                                                  OFFSET(get<bool>, {0x0, 1, 1, 0})
	DMember(bool)                                      bEvaluationTemplate                                         OFFSET(get<bool>, {0x0, 1, 1, 1})
	DMember(bool)                                      bEvaluationTemplateField                                    OFFSET(get<bool>, {0x0, 1, 1, 2})
	DMember(bool)                                      bEntityComponentField                                       OFFSET(get<bool>, {0x0, 1, 1, 3})
};

/// Class /Script/MovieScene.MovieSceneCompiledData
/// Size: 0x03D0 (0x000028 - 0x0003F8)
class UMovieSceneCompiledData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1016;

public:
	SMember(FMovieSceneEvaluationTemplate)             EvaluationTemplate                                          OFFSET(getStruct<T>, {0x28, 352, 0, 0})
	SMember(FMovieSceneSequenceHierarchy)              Hierarchy                                                   OFFSET(getStruct<T>, {0x188, 280, 0, 0})
	SMember(FMovieSceneEntityComponentField)           EntityComponentField                                        OFFSET(getStruct<T>, {0x2A0, 240, 0, 0})
	SMember(FMovieSceneEvaluationField)                TrackTemplateField                                          OFFSET(getStruct<T>, {0x390, 48, 0, 0})
	CMember(TArray<FFrameTime>)                        DeterminismFences                                           OFFSET(get<T>, {0x3C0, 16, 0, 0})
	SMember(FGuid)                                     CompiledSignature                                           OFFSET(getStruct<T>, {0x3D0, 16, 0, 0})
	SMember(FGuid)                                     CompilerVersion                                             OFFSET(getStruct<T>, {0x3E0, 16, 0, 0})
	SMember(FMovieSceneSequenceCompilerMaskStruct)     AccumulatedMask                                             OFFSET(getStruct<T>, {0x3F0, 1, 0, 0})
	SMember(FMovieSceneSequenceCompilerMaskStruct)     AllocatedMask                                               OFFSET(getStruct<T>, {0x3F1, 1, 0, 0})
	CMember(EMovieSceneSequenceFlags)                  AccumulatedFlags                                            OFFSET(get<T>, {0x3F2, 1, 0, 0})
};

/// Class /Script/MovieScene.MovieSceneCompiledDataManager
/// Size: 0x0208 (0x000028 - 0x000230)
class UMovieSceneCompiledDataManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(TMap<int32_t, FMovieSceneSequenceHierarchy>) Hierarchies                                               OFFSET(get<T>, {0xD8, 80, 0, 0})
	CMember(TMap<int32_t, FMovieSceneEvaluationTemplate>) TrackTemplates                                           OFFSET(get<T>, {0x128, 80, 0, 0})
	CMember(TMap<int32_t, FMovieSceneEvaluationField>) TrackTemplateFields                                         OFFSET(get<T>, {0x178, 80, 0, 0})
	CMember(TMap<int32_t, FMovieSceneEntityComponentField>) EntityComponentFields                                  OFFSET(get<T>, {0x1C8, 80, 0, 0})
};

/// Class /Script/MovieScene.MovieSceneFloatDecomposer
/// Size: 0x0000 (0x000028 - 0x000028)
class UMovieSceneFloatDecomposer : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/MovieScene.MovieSceneBuiltInEasingFunction
/// Size: 0x0010 (0x000028 - 0x000038)
class UMovieSceneBuiltInEasingFunction : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(EMovieSceneBuiltInEasing)                  Type                                                        OFFSET(get<T>, {0x30, 1, 0, 0})
};

/// Class /Script/MovieScene.MovieSceneEasingExternalCurve
/// Size: 0x0010 (0x000028 - 0x000038)
class UMovieSceneEasingExternalCurve : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UCurveFloat*)                        Curve                                                       OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/MovieScene.MovieSceneEasingFunction
/// Size: 0x0000 (0x000028 - 0x000028)
class UMovieSceneEasingFunction : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/MovieScene.MovieSceneEasingFunction.OnEvaluate
	// float OnEvaluate(float Interp);                                                                                          // [0x198a600] Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
};

/// Struct /Script/MovieScene.MovieSceneEntitySystemGraphNodes
/// Size: 0x0038 (0x000000 - 0x000038)
class FMovieSceneEntitySystemGraphNodes : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Struct /Script/MovieScene.MovieSceneEntitySystemGraph
/// Size: 0x0138 (0x000000 - 0x000138)
class FMovieSceneEntitySystemGraph : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	SMember(FMovieSceneEntitySystemGraphNodes)         Nodes                                                       OFFSET(getStruct<T>, {0x80, 56, 0, 0})
};

/// Class /Script/MovieScene.MovieSceneEntitySystemLinker
/// Size: 0x0430 (0x000028 - 0x000458)
class UMovieSceneEntitySystemLinker : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1112;

public:
	SMember(FMovieSceneEntitySystemGraph)              SystemGraph                                                 OFFSET(getStruct<T>, {0x238, 312, 0, 0})
};

/// Class /Script/MovieScene.MovieSceneEvalTimeSystem
/// Size: 0x0010 (0x000040 - 0x000050)
class UMovieSceneEvalTimeSystem : public UMovieSceneEntitySystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/MovieScene.MovieSceneFolder
/// Size: 0x0048 (0x000028 - 0x000070)
class UMovieSceneFolder : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FName)                                     folderName                                                  OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	CMember(TArray<class UMovieSceneFolder*>)          ChildFolders                                                OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<class UMovieSceneTrack*>)           ChildMasterTracks                                           OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FString>)                           ChildObjectBindingStrings                                   OFFSET(get<T>, {0x50, 16, 0, 0})
};

/// Class /Script/MovieScene.MovieSceneKeyProxy
/// Size: 0x0000 (0x000028 - 0x000028)
class UMovieSceneKeyProxy : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/MovieScene.MovieSceneMasterInstantiatorSystem
/// Size: 0x0000 (0x000040 - 0x000040)
class UMovieSceneMasterInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/MovieScene.MovieScenePreAnimatedStateSystemInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UMovieScenePreAnimatedStateSystemInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/MovieScene.MovieSceneCachePreAnimatedStateSystem
/// Size: 0x0000 (0x000040 - 0x000040)
class UMovieSceneCachePreAnimatedStateSystem : public UMovieSceneEntityInstantiatorSystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/MovieScene.MovieSceneRestorePreAnimatedStateSystem
/// Size: 0x0000 (0x000040 - 0x000040)
class UMovieSceneRestorePreAnimatedStateSystem : public UMovieSceneEntityInstantiatorSystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/MovieScene.MovieSceneSequenceTickManager
/// Size: 0x00A8 (0x000028 - 0x0000D0)
class UMovieSceneSequenceTickManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(TArray<class AActor*>)                     SequenceActors                                              OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(class UMovieSceneEntitySystemLinker*)      Linker                                                      OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/MovieScene.MovieSceneSpawnablesSystem
/// Size: 0x0000 (0x000040 - 0x000040)
class UMovieSceneSpawnablesSystem : public UMovieSceneEntitySystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/MovieScene.MovieSceneSpawnSection
/// Size: 0x0008 (0x000180 - 0x000188)
class UMovieSceneSpawnSection : public UMovieSceneBoolSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
};

/// Class /Script/MovieScene.MovieSceneSpawnTrack
/// Size: 0x0020 (0x000078 - 0x000098)
class UMovieSceneSpawnTrack : public UMovieSceneTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(TArray<class UMovieSceneSection*>)         Sections                                                    OFFSET(get<T>, {0x78, 16, 0, 0})
	SMember(FGuid)                                     ObjectGuid                                                  OFFSET(getStruct<T>, {0x88, 16, 0, 0})
};

/// Class /Script/MovieScene.TestMovieSceneTrack
/// Size: 0x0020 (0x000078 - 0x000098)
class UTestMovieSceneTrack : public UMovieSceneTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	DMember(bool)                                      bHighPassFilter                                             OFFSET(get<bool>, {0x80, 1, 0, 0})
	CMember(TArray<class UMovieSceneSection*>)         SectionArray                                                OFFSET(get<T>, {0x88, 16, 0, 0})
};

/// Class /Script/MovieScene.TestMovieSceneSection
/// Size: 0x0000 (0x0000E8 - 0x0000E8)
class UTestMovieSceneSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
};

/// Class /Script/MovieScene.TestMovieSceneSequence
/// Size: 0x0008 (0x000060 - 0x000068)
class UTestMovieSceneSequence : public UMovieSceneSequence
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(class UMovieScene*)                        MovieScene                                                  OFFSET(get<T>, {0x60, 8, 0, 0})
};

/// Class /Script/MovieScene.TestMovieSceneSubTrack
/// Size: 0x0010 (0x000088 - 0x000098)
class UTestMovieSceneSubTrack : public UMovieSceneSubTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(TArray<class UMovieSceneSection*>)         SectionArray                                                OFFSET(get<T>, {0x88, 16, 0, 0})
};

/// Class /Script/MovieScene.TestMovieSceneSubSection
/// Size: 0x0000 (0x000160 - 0x000160)
class UTestMovieSceneSubSection : public UMovieSceneSubSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
};

/// Struct /Script/MovieScene.MovieSceneTrackInstanceInput
/// Size: 0x0010 (0x000000 - 0x000010)
class FMovieSceneTrackInstanceInput : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UMovieSceneSection*)                 Section                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/MovieScene.MovieSceneTrackInstance
/// Size: 0x0028 (0x000028 - 0x000050)
class UMovieSceneTrackInstance : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UObject*)                            AnimatedObject                                              OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      bIsMasterTrackInstance                                      OFFSET(get<bool>, {0x30, 1, 0, 0})
	CMember(class UMovieSceneEntitySystemLinker*)      Linker                                                      OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TArray<FMovieSceneTrackInstanceInput>)     Inputs                                                      OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/MovieScene.MovieSceneTrackInstanceInstantiator
/// Size: 0x00B0 (0x000040 - 0x0000F0)
class UMovieSceneTrackInstanceInstantiator : public UMovieSceneEntityInstantiatorSystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
};

/// Class /Script/MovieScene.MovieSceneTrackInstanceSystem
/// Size: 0x0008 (0x000040 - 0x000048)
class UMovieSceneTrackInstanceSystem : public UMovieSceneEntitySystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UMovieSceneTrackInstanceInstantiator*) Instantiator                                              OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneSequenceInstanceData
/// Size: 0x0008 (0x000000 - 0x000008)
class FMovieSceneSequenceInstanceData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/MovieScene.MovieSceneEvaluationOperand
/// Size: 0x0014 (0x000000 - 0x000014)
class FMovieSceneEvaluationOperand : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FGuid)                                     ObjectBindingID                                             OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FMovieSceneSequenceID)                     SequenceID                                                  OFFSET(getStruct<T>, {0x10, 4, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneIntegerChannel
/// Size: 0x0088 (0x000008 - 0x000090)
class FMovieSceneIntegerChannel : public FMovieSceneChannel
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<FFrameNumber>)                      Times                                                       OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   DefaultValue                                                OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(bool)                                      bHasDefaultValue                                            OFFSET(get<bool>, {0x1C, 1, 0, 0})
	CMember(TArray<int32_t>)                           Values                                                      OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneByteChannel
/// Size: 0x0090 (0x000008 - 0x000098)
class FMovieSceneByteChannel : public FMovieSceneChannel
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(TArray<FFrameNumber>)                      Times                                                       OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(char)                                      DefaultValue                                                OFFSET(get<char>, {0x18, 1, 0, 0})
	DMember(bool)                                      bHasDefaultValue                                            OFFSET(get<bool>, {0x19, 1, 0, 0})
	CMember(TArray<char>)                              Values                                                      OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(class UEnum*)                              Enum                                                        OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneTrackImplementation
/// Size: 0x0000 (0x000010 - 0x000010)
class FMovieSceneTrackImplementation : public FMovieSceneEvalTemplateBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/MovieScene.TrackInstanceInputComponent
/// Size: 0x0010 (0x000000 - 0x000010)
class FTrackInstanceInputComponent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UMovieSceneSection*)                 Section                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   OutputIndex                                                 OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneTrackInstanceComponent
/// Size: 0x0010 (0x000000 - 0x000010)
class FMovieSceneTrackInstanceComponent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UMovieSceneSection*)                 Owner                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UClass*)                             TrackInstanceClass                                          OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/MovieScene.EasingComponentData
/// Size: 0x0008 (0x000000 - 0x000008)
class FEasingComponentData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(class UMovieSceneSection*)                 Section                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneSectionGroup
/// Size: 0x0010 (0x000000 - 0x000010)
class FMovieSceneSectionGroup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<TWeakObjectPtr<UMovieSceneSection*>>) Sections                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneTrackLabels
/// Size: 0x0010 (0x000000 - 0x000010)
class FMovieSceneTrackLabels : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FString>)                           Strings                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneExpansionState
/// Size: 0x0001 (0x000000 - 0x000001)
class FMovieSceneExpansionState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(bool)                                      bExpanded                                                   OFFSET(get<bool>, {0x0, 1, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneEditorData
/// Size: 0x00F0 (0x000000 - 0x0000F0)
class FMovieSceneEditorData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	CMember(TMap<FString, FMovieSceneExpansionState>)  ExpansionStates                                             OFFSET(get<T>, {0x0, 80, 0, 0})
	CMember(TArray<FString>)                           PinnedNodes                                                 OFFSET(get<T>, {0x50, 16, 0, 0})
	DMember(double)                                    ViewStart                                                   OFFSET(get<double>, {0x60, 8, 0, 0})
	DMember(double)                                    ViewEnd                                                     OFFSET(get<double>, {0x68, 8, 0, 0})
	DMember(double)                                    WorkStart                                                   OFFSET(get<double>, {0x70, 8, 0, 0})
	DMember(double)                                    WorkEnd                                                     OFFSET(get<double>, {0x78, 8, 0, 0})
	CMember(TSet<FFrameNumber>)                        MarkedFrames                                                OFFSET(get<T>, {0x80, 80, 0, 0})
	SMember(FFloatRange)                               WorkingRange                                                OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	SMember(FFloatRange)                               ViewRange                                                   OFFSET(getStruct<T>, {0xE0, 16, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneTimecodeSource
/// Size: 0x0018 (0x000000 - 0x000018)
class FMovieSceneTimecodeSource : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FTimecode)                                 Timecode                                                    OFFSET(getStruct<T>, {0x0, 20, 0, 0})
	SMember(FFrameNumber)                              DeltaFrame                                                  OFFSET(getStruct<T>, {0x14, 4, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneEntitySystemGraphNode
/// Size: 0x0028 (0x000000 - 0x000028)
class FMovieSceneEntitySystemGraphNode : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class UMovieSceneEntitySystem*)            System                                                      OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneEmptyStruct
/// Size: 0x0001 (0x000000 - 0x000001)
class FMovieSceneEmptyStruct : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/MovieScene.MovieSceneSegmentIdentifier
/// Size: 0x0004 (0x000000 - 0x000004)
class FMovieSceneSegmentIdentifier : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   IdentifierIndex                                             OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldSegmentPtr
/// Size: 0x0004 (0x000008 - 0x00000C)
class FMovieSceneEvaluationFieldSegmentPtr : public FMovieSceneEvaluationFieldTrackPtr
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FMovieSceneSegmentIdentifier)              SegmentID                                                   OFFSET(getStruct<T>, {0x8, 4, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneSubSectionData
/// Size: 0x001C (0x000000 - 0x00001C)
class FMovieSceneSubSectionData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	CMember(TWeakObjectPtr<class UMovieSceneSubSection*>) Section                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FGuid)                                     ObjectBindingID                                             OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	CMember(ESectionEvaluationFlags)                   Flags                                                       OFFSET(get<T>, {0x18, 1, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneKeyStruct
/// Size: 0x0008 (0x000000 - 0x000008)
class FMovieSceneKeyStruct : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/MovieScene.MovieSceneKeyTimeStruct
/// Size: 0x0020 (0x000008 - 0x000028)
class FMovieSceneKeyTimeStruct : public FMovieSceneKeyStruct
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FFrameNumber)                              Time                                                        OFFSET(getStruct<T>, {0x8, 4, 0, 0})
};

/// Struct /Script/MovieScene.GeneratedMovieSceneKeyStruct
/// Size: 0x0050 (0x000000 - 0x000050)
class FGeneratedMovieSceneKeyStruct : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Struct /Script/MovieScene.MovieSceneObjectPathChannelKeyValue
/// Size: 0x0030 (0x000000 - 0x000030)
class FMovieSceneObjectPathChannelKeyValue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TWeakObjectPtr<class UObject*>)            SoftPtr                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UObject*)                            HardPtr                                                     OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneObjectPathChannel
/// Size: 0x00B8 (0x000008 - 0x0000C0)
class FMovieSceneObjectPathChannel : public FMovieSceneChannel
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(class UClass*)                             PropertyClass                                               OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(TArray<FFrameNumber>)                      Times                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FMovieSceneObjectPathChannelKeyValue>) Values                                                   OFFSET(get<T>, {0x20, 16, 0, 0})
	SMember(FMovieSceneObjectPathChannelKeyValue)      DefaultValue                                                OFFSET(getStruct<T>, {0x30, 48, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneSegment
/// Size: 0x0058 (0x000000 - 0x000058)
class FMovieSceneSegment : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Struct /Script/MovieScene.SectionEvaluationData
/// Size: 0x000C (0x000000 - 0x00000C)
class FSectionEvaluationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   ImplIndex                                                   OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FFrameNumber)                              ForcedTime                                                  OFFSET(getStruct<T>, {0x4, 4, 0, 0})
	CMember(ESectionEvaluationFlags)                   Flags                                                       OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneSubSequenceTreeEntry
/// Size: 0x0008 (0x000000 - 0x000008)
class FMovieSceneSubSequenceTreeEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/MovieScene.MovieSceneSequencePlaybackParams
/// Size: 0x0028 (0x000000 - 0x000028)
class FMovieSceneSequencePlaybackParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FFrameTime)                                Frame                                                       OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FString)                                   MarkedFrame                                                 OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	CMember(EMovieScenePositionType)                   PositionType                                                OFFSET(get<T>, {0x20, 1, 0, 0})
	CMember(EUpdatePositionMethod)                     UpdateMethod                                                OFFSET(get<T>, {0x21, 1, 0, 0})
};

/// Struct /Script/MovieScene.MovieSceneWarpCounter
/// Size: 0x0010 (0x000000 - 0x000010)
class FMovieSceneWarpCounter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<uint32_t>)                          WarpCounts                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/MovieScene.TestMovieSceneEvalTemplate
/// Size: 0x0000 (0x000020 - 0x000020)
class FTestMovieSceneEvalTemplate : public FMovieSceneEvalTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/MovieScene.MovieSceneTrackDisplayOptions
/// Size: 0x0004 (0x000000 - 0x000004)
class FMovieSceneTrackDisplayOptions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      bShowVerticalFrames                                         OFFSET(get<bool>, {0x0, 1, 1, 0})
};

/// Struct /Script/MovieScene.MovieSceneTrackInstanceEntry
/// Size: 0x0010 (0x000000 - 0x000010)
class FMovieSceneTrackInstanceEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UObject*)                            BoundObject                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UMovieSceneTrackInstance*)           TrackInstance                                               OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneParameterSection
/// Size: 0x0060 (0x0000E8 - 0x000148)
class UMovieSceneParameterSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	CMember(TArray<FBoolParameterNameAndCurve>)        BoolParameterNamesAndCurves                                 OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(TArray<FScalarParameterNameAndCurve>)      ScalarParameterNamesAndCurves                               OFFSET(get<T>, {0xF8, 16, 0, 0})
	CMember(TArray<FVector2DParameterNameAndCurves>)   Vector2DParameterNamesAndCurves                             OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(TArray<FVectorParameterNameAndCurves>)     VectorParameterNamesAndCurves                               OFFSET(get<T>, {0x118, 16, 0, 0})
	CMember(TArray<FColorParameterNameAndCurves>)      ColorParameterNamesAndCurves                                OFFSET(get<T>, {0x128, 16, 0, 0})
	CMember(TArray<FTransformParameterNameAndCurves>)  TransformParameterNamesAndCurves                            OFFSET(get<T>, {0x138, 16, 0, 0})


	/// Functions
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.RemoveVectorParameter
	// bool RemoveVectorParameter(FName InParameterName);                                                                       // [0x2907210] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.RemoveVector2DParameter
	// bool RemoveVector2DParameter(FName InParameterName);                                                                     // [0x2907170] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.RemoveTransformParameter
	// bool RemoveTransformParameter(FName InParameterName);                                                                    // [0x29070d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.RemoveScalarParameter
	// bool RemoveScalarParameter(FName InParameterName);                                                                       // [0x2907030] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.RemoveColorParameter
	// bool RemoveColorParameter(FName InParameterName);                                                                        // [0x2906f90] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.RemoveBoolParameter
	// bool RemoveBoolParameter(FName InParameterName);                                                                         // [0x2906ef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.GetParameterNames
	// void GetParameterNames(TSet<FName>& ParameterNames);                                                                     // [0x2906db0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.AddVectorParameterKey
	// void AddVectorParameterKey(FName InParameterName, FFrameNumber InTime, FVector InValue);                                 // [0x2906c90] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.AddVector2DParameterKey
	// void AddVector2DParameterKey(FName InParameterName, FFrameNumber InTime, FVector2D InValue);                             // [0x2906b80] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.AddTransformParameterKey
	// void AddTransformParameterKey(FName InParameterName, FFrameNumber InTime, FTransform& InValue);                          // [0x2906a20] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.AddScalarParameterKey
	// void AddScalarParameterKey(FName InParameterName, FFrameNumber InTime, float InValue);                                   // [0x2906900] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.AddColorParameterKey
	// void AddColorParameterKey(FName InParameterName, FFrameNumber InTime, FLinearColor InValue);                             // [0x29067e0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.AddBoolParameterKey
	// void AddBoolParameterKey(FName InParameterName, FFrameNumber InTime, bool InValue);                                      // [0x29066d0] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/MovieSceneTracks.FloatChannelEvaluatorSystem
/// Size: 0x0000 (0x000040 - 0x000040)
class UFloatChannelEvaluatorSystem : public UMovieSceneEntitySystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneTransformOrigin
/// Size: 0x0000 (0x000028 - 0x000028)
class UMovieSceneTransformOrigin : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/MovieSceneTracks.MovieSceneTransformOrigin.BP_GetTransformOrigin
	// FTransform BP_GetTransformOrigin();                                                                                      // [0x198a600] Event|Protected|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
};

/// Class /Script/MovieSceneTracks.MovieScene3DConstraintSection
/// Size: 0x0028 (0x0000E8 - 0x000110)
class UMovieScene3DConstraintSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FGuid)                                     ConstraintId                                                OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	SMember(FMovieSceneObjectBindingID)                ConstraintBindingID                                         OFFSET(getStruct<T>, {0xF8, 24, 0, 0})


	/// Functions
	// Function /Script/MovieSceneTracks.MovieScene3DConstraintSection.SetConstraintBindingID
	// void SetConstraintBindingID(FMovieSceneObjectBindingID& InConstraintBindingID);                                          // [0x28fc4a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/MovieSceneTracks.MovieScene3DConstraintSection.GetConstraintBindingID
	// FMovieSceneObjectBindingID GetConstraintBindingID();                                                                     // [0x28fc360] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/MovieSceneTracks.MovieScene3DAttachSection
/// Size: 0x0020 (0x000110 - 0x000130)
class UMovieScene3DAttachSection : public UMovieScene3DConstraintSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	SMember(FName)                                     AttachSocketName                                            OFFSET(getStruct<T>, {0x118, 8, 0, 0})
	SMember(FName)                                     AttachComponentName                                         OFFSET(getStruct<T>, {0x120, 8, 0, 0})
	CMember(EAttachmentRule)                           AttachmentLocationRule                                      OFFSET(get<T>, {0x128, 1, 0, 0})
	CMember(EAttachmentRule)                           AttachmentRotationRule                                      OFFSET(get<T>, {0x129, 1, 0, 0})
	CMember(EAttachmentRule)                           AttachmentScaleRule                                         OFFSET(get<T>, {0x12A, 1, 0, 0})
	CMember(EDetachmentRule)                           DetachmentLocationRule                                      OFFSET(get<T>, {0x12B, 1, 0, 0})
	CMember(EDetachmentRule)                           DetachmentRotationRule                                      OFFSET(get<T>, {0x12C, 1, 0, 0})
	CMember(EDetachmentRule)                           DetachmentScaleRule                                         OFFSET(get<T>, {0x12D, 1, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieScene3DConstraintTrack
/// Size: 0x0010 (0x000078 - 0x000088)
class UMovieScene3DConstraintTrack : public UMovieSceneTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<class UMovieSceneSection*>)         ConstraintSections                                          OFFSET(get<T>, {0x78, 16, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieScene3DAttachTrack
/// Size: 0x0000 (0x000088 - 0x000088)
class UMovieScene3DAttachTrack : public UMovieScene3DConstraintTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
};

/// Class /Script/MovieSceneTracks.MovieScene3DPathSection
/// Size: 0x00A8 (0x000110 - 0x0001B8)
class UMovieScene3DPathSection : public UMovieScene3DConstraintSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 440;

public:
	SMember(FMovieSceneFloatChannel)                   TimingCurve                                                 OFFSET(getStruct<T>, {0x110, 160, 0, 0})
	CMember(MovieScene3DPathSection_Axis)              FrontAxisEnum                                               OFFSET(get<T>, {0x1B0, 1, 0, 0})
	CMember(MovieScene3DPathSection_Axis)              UpAxisEnum                                                  OFFSET(get<T>, {0x1B1, 1, 0, 0})
	DMember(bool)                                      bFollow                                                     OFFSET(get<bool>, {0x1B4, 1, 1, 0})
	DMember(bool)                                      bReverse                                                    OFFSET(get<bool>, {0x1B4, 1, 1, 1})
	DMember(bool)                                      bForceUpright                                               OFFSET(get<bool>, {0x1B4, 1, 1, 2})
};

/// Class /Script/MovieSceneTracks.MovieScene3DPathTrack
/// Size: 0x0008 (0x000088 - 0x000090)
class UMovieScene3DPathTrack : public UMovieScene3DConstraintTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Class /Script/MovieSceneTracks.MovieScene3DTransformPropertySystem
/// Size: 0x0000 (0x000050 - 0x000050)
class UMovieScene3DTransformPropertySystem : public UMovieScenePropertySystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Struct /Script/MovieSceneTracks.MovieSceneTransformMask
/// Size: 0x0004 (0x000000 - 0x000004)
class FMovieSceneTransformMask : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(uint32_t)                                  Mask                                                        OFFSET(get<uint32_t>, {0x0, 4, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieScene3DTransformSection
/// Size: 0x0658 (0x0000E8 - 0x000740)
class UMovieScene3DTransformSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1856;

public:
	SMember(FMovieSceneTransformMask)                  TransformMask                                               OFFSET(getStruct<T>, {0xF0, 4, 0, 0})
	SMember(FMovieSceneFloatChannel)                   Translation                                                 OFFSET(getStruct<T>, {0xF8, 480, 0, 0})
	SMember(FMovieSceneFloatChannel)                   Rotation                                                    OFFSET(getStruct<T>, {0x2D8, 480, 0, 0})
	SMember(FMovieSceneFloatChannel)                   Scale                                                       OFFSET(getStruct<T>, {0x4B8, 480, 0, 0})
	SMember(FMovieSceneFloatChannel)                   ManualWeight                                                OFFSET(getStruct<T>, {0x698, 160, 0, 0})
	DMember(bool)                                      bUseQuaternionInterpolation                                 OFFSET(get<bool>, {0x738, 1, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieScene3DTransformTrack
/// Size: 0x0000 (0x0000A8 - 0x0000A8)
class UMovieScene3DTransformTrack : public UMovieScenePropertyTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
};

/// Struct /Script/MovieSceneTracks.MovieSceneActorReferenceKey
/// Size: 0x0028 (0x000000 - 0x000028)
class FMovieSceneActorReferenceKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FMovieSceneObjectBindingID)                Object                                                      OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FName)                                     ComponentName                                               OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneActorReferenceData
/// Size: 0x00A8 (0x000008 - 0x0000B0)
class FMovieSceneActorReferenceData : public FMovieSceneChannel
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(TArray<FFrameNumber>)                      KeyTimes                                                    OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<FMovieSceneActorReferenceKey>)      KeyValues                                                   OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneActorReferenceSection
/// Size: 0x0140 (0x0000E8 - 0x000228)
class UMovieSceneActorReferenceSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	SMember(FMovieSceneActorReferenceData)             ActorReferenceData                                          OFFSET(getStruct<T>, {0xE8, 176, 0, 0})
	SMember(FIntegralCurve)                            ActorGuidIndexCurve                                         OFFSET(getStruct<T>, {0x198, 128, 0, 0})
	CMember(TArray<FString>)                           ActorGuidStrings                                            OFFSET(get<T>, {0x218, 16, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneActorReferenceTrack
/// Size: 0x0008 (0x0000A8 - 0x0000B0)
class UMovieSceneActorReferenceTrack : public UMovieScenePropertyTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneAudioSection
/// Size: 0x0250 (0x0000E8 - 0x000338)
class UMovieSceneAudioSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	CMember(class USoundBase*)                         Sound                                                       OFFSET(get<T>, {0xE8, 8, 0, 0})
	SMember(FFrameNumber)                              StartFrameOffset                                            OFFSET(getStruct<T>, {0xF0, 4, 0, 0})
	DMember(float)                                     StartOffset                                                 OFFSET(get<float>, {0xF4, 4, 0, 0})
	DMember(float)                                     AudioStartTime                                              OFFSET(get<float>, {0xF8, 4, 0, 0})
	DMember(float)                                     AudioDilationFactor                                         OFFSET(get<float>, {0xFC, 4, 0, 0})
	DMember(float)                                     AudioVolume                                                 OFFSET(get<float>, {0x100, 4, 0, 0})
	SMember(FMovieSceneFloatChannel)                   SoundVolume                                                 OFFSET(getStruct<T>, {0x108, 160, 0, 0})
	SMember(FMovieSceneFloatChannel)                   PitchMultiplier                                             OFFSET(getStruct<T>, {0x1A8, 160, 0, 0})
	SMember(FMovieSceneActorReferenceData)             AttachActorData                                             OFFSET(getStruct<T>, {0x248, 176, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x2F8, 1, 0, 0})
	DMember(bool)                                      bSuppressSubtitles                                          OFFSET(get<bool>, {0x2F9, 1, 0, 0})
	DMember(bool)                                      bOverrideAttenuation                                        OFFSET(get<bool>, {0x2FA, 1, 0, 0})
	CMember(class USoundAttenuation*)                  AttenuationSettings                                         OFFSET(get<T>, {0x300, 8, 0, 0})
	SMember(FDelegateProperty)                         OnQueueSubtitles                                            OFFSET(getStruct<T>, {0x308, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAudioFinished                                             OFFSET(getStruct<T>, {0x318, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAudioPlaybackPercent                                      OFFSET(getStruct<T>, {0x328, 16, 0, 0})


	/// Functions
	// Function /Script/MovieSceneTracks.MovieSceneAudioSection.SetStartOffset
	// void SetStartOffset(FFrameNumber InStartOffset);                                                                         // [0x28fc5f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneAudioSection.SetSound
	// void SetSound(class USoundBase* InSound);                                                                                // [0x28fc560] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneAudioSection.GetStartOffset
	// FFrameNumber GetStartOffset();                                                                                           // [0x28fc3c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieSceneTracks.MovieSceneAudioSection.GetSound
	// class USoundBase* GetSound();                                                                                            // [0x28fc3a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/MovieSceneTracks.MovieSceneAudioTrack
/// Size: 0x0018 (0x000078 - 0x000090)
class UMovieSceneAudioTrack : public UMovieSceneNameableTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<class UMovieSceneSection*>)         AudioSections                                               OFFSET(get<T>, {0x80, 16, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneBaseValueEvaluatorSystem
/// Size: 0x0000 (0x000040 - 0x000040)
class UMovieSceneBaseValueEvaluatorSystem : public UMovieSceneEntitySystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneBoolTrack
/// Size: 0x0008 (0x0000A8 - 0x0000B0)
class UMovieSceneBoolTrack : public UMovieScenePropertyTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneByteSection
/// Size: 0x0098 (0x0000E8 - 0x000180)
class UMovieSceneByteSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	SMember(FMovieSceneByteChannel)                    ByteCurve                                                   OFFSET(getStruct<T>, {0xE8, 152, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneByteTrack
/// Size: 0x0010 (0x0000A8 - 0x0000B8)
class UMovieSceneByteTrack : public UMovieScenePropertyTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(class UEnum*)                              Enum                                                        OFFSET(get<T>, {0xB0, 8, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraAnimSectionData
/// Size: 0x0020 (0x000000 - 0x000020)
class FMovieSceneCameraAnimSectionData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UCameraAnim*)                        CameraAnim                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     PlayRate                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     PlayScale                                                   OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     BlendInTime                                                 OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     BlendOutTime                                                OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x18, 1, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraAnimSection
/// Size: 0x0040 (0x0000E8 - 0x000128)
class UMovieSceneCameraAnimSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	SMember(FMovieSceneCameraAnimSectionData)          AnimData                                                    OFFSET(getStruct<T>, {0xE8, 32, 0, 0})
	CMember(class UCameraAnim*)                        CameraAnim                                                  OFFSET(get<T>, {0x108, 8, 0, 0})
	DMember(float)                                     PlayRate                                                    OFFSET(get<float>, {0x110, 4, 0, 0})
	DMember(float)                                     PlayScale                                                   OFFSET(get<float>, {0x114, 4, 0, 0})
	DMember(float)                                     BlendInTime                                                 OFFSET(get<float>, {0x118, 4, 0, 0})
	DMember(float)                                     BlendOutTime                                                OFFSET(get<float>, {0x11C, 4, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x120, 1, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraAnimTrack
/// Size: 0x0018 (0x000078 - 0x000090)
class UMovieSceneCameraAnimTrack : public UMovieSceneNameableTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<class UMovieSceneSection*>)         CameraAnimSections                                          OFFSET(get<T>, {0x80, 16, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraCutSection
/// Size: 0x0078 (0x0000E8 - 0x000160)
class UMovieSceneCameraCutSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	DMember(bool)                                      bLockPreviousCamera                                         OFFSET(get<bool>, {0xF0, 1, 0, 0})
	SMember(FGuid)                                     CameraGuid                                                  OFFSET(getStruct<T>, {0xF4, 16, 0, 0})
	SMember(FMovieSceneObjectBindingID)                CameraBindingID                                             OFFSET(getStruct<T>, {0x104, 24, 0, 0})
	SMember(FTransform)                                InitialCameraCutTransform                                   OFFSET(getStruct<T>, {0x120, 48, 0, 0})
	DMember(bool)                                      bHasInitialCameraCutTransform                               OFFSET(get<bool>, {0x150, 1, 0, 0})


	/// Functions
	// Function /Script/MovieSceneTracks.MovieSceneCameraCutSection.SetCameraBindingID
	// void SetCameraBindingID(FMovieSceneObjectBindingID& InCameraBindingID);                                                  // [0x28fc3e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneCameraCutSection.GetCameraBindingID
	// FMovieSceneObjectBindingID GetCameraBindingID();                                                                         // [0x28fc320] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraCutTrack
/// Size: 0x0018 (0x000078 - 0x000090)
class UMovieSceneCameraCutTrack : public UMovieSceneNameableTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	DMember(bool)                                      bCanBlend                                                   OFFSET(get<bool>, {0x78, 1, 0, 0})
	CMember(TArray<class UMovieSceneSection*>)         Sections                                                    OFFSET(get<T>, {0x80, 16, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraCutTrackInstance
/// Size: 0x0068 (0x000050 - 0x0000B8)
class UMovieSceneCameraCutTrackInstance : public UMovieSceneTrackInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSectionData
/// Size: 0x0020 (0x000000 - 0x000020)
class FMovieSceneCameraShakeSectionData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UClass*)                             ShakeClass                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     PlayScale                                                   OFFSET(get<float>, {0x8, 4, 0, 0})
	CMember(ECameraShakePlaySpace)                     PlaySpace                                                   OFFSET(get<T>, {0xC, 1, 0, 0})
	SMember(FRotator)                                  UserDefinedPlaySpace                                        OFFSET(getStruct<T>, {0x10, 12, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeSection
/// Size: 0x0040 (0x0000E8 - 0x000128)
class UMovieSceneCameraShakeSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	SMember(FMovieSceneCameraShakeSectionData)         ShakeData                                                   OFFSET(getStruct<T>, {0xE8, 32, 0, 0})
	CMember(class UClass*)                             ShakeClass                                                  OFFSET(get<T>, {0x108, 8, 0, 0})
	DMember(float)                                     PlayScale                                                   OFFSET(get<float>, {0x110, 4, 0, 0})
	CMember(ECameraShakePlaySpace)                     PlaySpace                                                   OFFSET(get<T>, {0x114, 1, 0, 0})
	SMember(FRotator)                                  UserDefinedPlaySpace                                        OFFSET(getStruct<T>, {0x118, 12, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeSourceShakeSection
/// Size: 0x0020 (0x0000E8 - 0x000108)
class UMovieSceneCameraShakeSourceShakeSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FMovieSceneCameraShakeSectionData)         ShakeData                                                   OFFSET(getStruct<T>, {0xE8, 32, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeSourceShakeTrack
/// Size: 0x0018 (0x000078 - 0x000090)
class UMovieSceneCameraShakeSourceShakeTrack : public UMovieSceneNameableTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<class UMovieSceneSection*>)         CameraShakeSections                                         OFFSET(get<T>, {0x80, 16, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSourceTrigger
/// Size: 0x0020 (0x000000 - 0x000020)
class FMovieSceneCameraShakeSourceTrigger : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UClass*)                             ShakeClass                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     PlayScale                                                   OFFSET(get<float>, {0x8, 4, 0, 0})
	CMember(ECameraShakePlaySpace)                     PlaySpace                                                   OFFSET(get<T>, {0xC, 1, 0, 0})
	SMember(FRotator)                                  UserDefinedPlaySpace                                        OFFSET(getStruct<T>, {0x10, 12, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSourceTriggerChannel
/// Size: 0x0080 (0x000008 - 0x000088)
class FMovieSceneCameraShakeSourceTriggerChannel : public FMovieSceneChannel
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<FFrameNumber>)                      KeyTimes                                                    OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<FMovieSceneCameraShakeSourceTrigger>) KeyValues                                                 OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeSourceTriggerSection
/// Size: 0x0088 (0x0000E8 - 0x000170)
class UMovieSceneCameraShakeSourceTriggerSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	SMember(FMovieSceneCameraShakeSourceTriggerChannel) Channel                                                    OFFSET(getStruct<T>, {0xE8, 136, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeSourceTriggerTrack
/// Size: 0x0018 (0x000078 - 0x000090)
class UMovieSceneCameraShakeSourceTriggerTrack : public UMovieSceneTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<class UMovieSceneSection*>)         Sections                                                    OFFSET(get<T>, {0x80, 16, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeTrack
/// Size: 0x0018 (0x000078 - 0x000090)
class UMovieSceneCameraShakeTrack : public UMovieSceneNameableTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<class UMovieSceneSection*>)         CameraShakeSections                                         OFFSET(get<T>, {0x80, 16, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneCinematicShotSection
/// Size: 0x0028 (0x000160 - 0x000188)
class UMovieSceneCinematicShotSection : public UMovieSceneSubSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	SMember(FString)                                   ShotDisplayName                                             OFFSET(getStruct<T>, {0x160, 16, 0, 0})
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x170, 24, 0, 0})


	/// Functions
	// Function /Script/MovieSceneTracks.MovieSceneCinematicShotSection.SetShotDisplayName
	// void SetShotDisplayName(FString InShotDisplayName);                                                                      // [0x2901c60] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneCinematicShotSection.GetShotDisplayName
	// FString GetShotDisplayName();                                                                                            // [0x2901ac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/MovieSceneTracks.MovieSceneCinematicShotTrack
/// Size: 0x0000 (0x000088 - 0x000088)
class UMovieSceneCinematicShotTrack : public UMovieSceneSubTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneColorSection
/// Size: 0x0280 (0x0000E8 - 0x000368)
class UMovieSceneColorSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	SMember(FMovieSceneFloatChannel)                   RedCurve                                                    OFFSET(getStruct<T>, {0xE8, 160, 0, 0})
	SMember(FMovieSceneFloatChannel)                   GreenCurve                                                  OFFSET(getStruct<T>, {0x188, 160, 0, 0})
	SMember(FMovieSceneFloatChannel)                   BlueCurve                                                   OFFSET(getStruct<T>, {0x228, 160, 0, 0})
	SMember(FMovieSceneFloatChannel)                   AlphaCurve                                                  OFFSET(getStruct<T>, {0x2C8, 160, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneColorTrack
/// Size: 0x0010 (0x0000A8 - 0x0000B8)
class UMovieSceneColorTrack : public UMovieScenePropertyTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(bool)                                      bIsSlateColor                                               OFFSET(get<bool>, {0xB0, 1, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneComponentAttachmentInvalidatorSystem
/// Size: 0x0000 (0x000040 - 0x000040)
class UMovieSceneComponentAttachmentInvalidatorSystem : public UMovieSceneEntityInstantiatorSystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneComponentAttachmentSystem
/// Size: 0x0180 (0x000040 - 0x0001C0)
class UMovieSceneComponentAttachmentSystem : public UMovieSceneEntityInstantiatorSystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneComponentMobilitySystem
/// Size: 0x01E0 (0x000040 - 0x000220)
class UMovieSceneComponentMobilitySystem : public UMovieSceneEntityInstantiatorSystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
};

/// Class /Script/MovieSceneTracks.MovieScenePreAnimatedComponentTransformSystem
/// Size: 0x0180 (0x000040 - 0x0001C0)
class UMovieScenePreAnimatedComponentTransformSystem : public UMovieSceneEntityInstantiatorSystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneComponentTransformSystem
/// Size: 0x0000 (0x000050 - 0x000050)
class UMovieSceneComponentTransformSystem : public UMovieScenePropertySystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneEnumSection
/// Size: 0x0098 (0x0000E8 - 0x000180)
class UMovieSceneEnumSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	SMember(FMovieSceneByteChannel)                    EnumCurve                                                   OFFSET(getStruct<T>, {0xE8, 152, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneEnumTrack
/// Size: 0x0010 (0x0000A8 - 0x0000B8)
class UMovieSceneEnumTrack : public UMovieScenePropertyTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(class UEnum*)                              Enum                                                        OFFSET(get<T>, {0xB0, 8, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneEulerTransformPropertySystem
/// Size: 0x0000 (0x000050 - 0x000050)
class UMovieSceneEulerTransformPropertySystem : public UMovieScenePropertySystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneEulerTransformTrack
/// Size: 0x0000 (0x0000A8 - 0x0000A8)
class UMovieSceneEulerTransformTrack : public UMovieScenePropertyTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneEventSectionBase
/// Size: 0x0000 (0x0000E8 - 0x0000E8)
class UMovieSceneEventSectionBase : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventPtrs
/// Size: 0x0028 (0x000000 - 0x000028)
class FMovieSceneEventPtrs : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class UFunction*)                          Function                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneEvent
/// Size: 0x0028 (0x000000 - 0x000028)
class FMovieSceneEvent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FMovieSceneEventPtrs)                      Ptrs                                                        OFFSET(getStruct<T>, {0x0, 40, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneEventRepeaterSection
/// Size: 0x0030 (0x0000E8 - 0x000118)
class UMovieSceneEventRepeaterSection : public UMovieSceneEventSectionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	SMember(FMovieSceneEvent)                          Event                                                       OFFSET(getStruct<T>, {0xF0, 40, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventParameters
/// Size: 0x0028 (0x000000 - 0x000028)
class FMovieSceneEventParameters : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/MovieSceneTracks.EventPayload
/// Size: 0x0030 (0x000000 - 0x000030)
class FEventPayload : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FName)                                     EventName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FMovieSceneEventParameters)                Parameters                                                  OFFSET(getStruct<T>, {0x8, 40, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventSectionData
/// Size: 0x0080 (0x000008 - 0x000088)
class FMovieSceneEventSectionData : public FMovieSceneChannel
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<FFrameNumber>)                      Times                                                       OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<FEventPayload>)                     KeyValues                                                   OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneEventSection
/// Size: 0x0100 (0x0000E8 - 0x0001E8)
class UMovieSceneEventSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 488;

public:
	SMember(FNameCurve)                                Events                                                      OFFSET(getStruct<T>, {0xE8, 120, 0, 0})
	SMember(FMovieSceneEventSectionData)               EventData                                                   OFFSET(getStruct<T>, {0x160, 136, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneEventSystem
/// Size: 0x0050 (0x000040 - 0x000090)
class UMovieSceneEventSystem : public UMovieSceneEntitySystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Class /Script/MovieSceneTracks.MovieScenePreSpawnEventSystem
/// Size: 0x0000 (0x000090 - 0x000090)
class UMovieScenePreSpawnEventSystem : public UMovieSceneEventSystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Class /Script/MovieSceneTracks.MovieScenePostSpawnEventSystem
/// Size: 0x0000 (0x000090 - 0x000090)
class UMovieScenePostSpawnEventSystem : public UMovieSceneEventSystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Class /Script/MovieSceneTracks.MovieScenePostEvalEventSystem
/// Size: 0x0000 (0x000090 - 0x000090)
class UMovieScenePostEvalEventSystem : public UMovieSceneEventSystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneEventTrack
/// Size: 0x0020 (0x000078 - 0x000098)
class UMovieSceneEventTrack : public UMovieSceneNameableTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	DMember(bool)                                      bFireEventsWhenForwards                                     OFFSET(get<bool>, {0x80, 1, 1, 0})
	DMember(bool)                                      bFireEventsWhenBackwards                                    OFFSET(get<bool>, {0x80, 1, 1, 1})
	CMember(EFireEventsAtPosition)                     EventPosition                                               OFFSET(get<T>, {0x84, 1, 0, 0})
	CMember(TArray<class UMovieSceneSection*>)         Sections                                                    OFFSET(get<T>, {0x88, 16, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventChannel
/// Size: 0x0080 (0x000008 - 0x000088)
class FMovieSceneEventChannel : public FMovieSceneChannel
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<FFrameNumber>)                      KeyTimes                                                    OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<FMovieSceneEvent>)                  KeyValues                                                   OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneEventTriggerSection
/// Size: 0x0090 (0x0000E8 - 0x000178)
class UMovieSceneEventTriggerSection : public UMovieSceneEventSectionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	SMember(FMovieSceneEventChannel)                   EventChannel                                                OFFSET(getStruct<T>, {0xF0, 136, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneFadeSection
/// Size: 0x00B8 (0x0000E8 - 0x0001A0)
class UMovieSceneFadeSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	SMember(FMovieSceneFloatChannel)                   FloatCurve                                                  OFFSET(getStruct<T>, {0xE8, 160, 0, 0})
	SMember(FLinearColor)                              FadeColor                                                   OFFSET(getStruct<T>, {0x188, 16, 0, 0})
	DMember(bool)                                      bFadeAudio                                                  OFFSET(get<bool>, {0x198, 1, 1, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneFloatTrack
/// Size: 0x0000 (0x0000A8 - 0x0000A8)
class UMovieSceneFloatTrack : public UMovieScenePropertyTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneFadeTrack
/// Size: 0x0008 (0x0000A8 - 0x0000B0)
class UMovieSceneFadeTrack : public UMovieSceneFloatTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneFloatPropertySystem
/// Size: 0x0000 (0x000050 - 0x000050)
class UMovieSceneFloatPropertySystem : public UMovieScenePropertySystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneFloatSection
/// Size: 0x00A8 (0x0000E8 - 0x000190)
class UMovieSceneFloatSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	SMember(FMovieSceneFloatChannel)                   FloatCurve                                                  OFFSET(getStruct<T>, {0xF0, 160, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneHierarchicalBiasSystem
/// Size: 0x0000 (0x000040 - 0x000040)
class UMovieSceneHierarchicalBiasSystem : public UMovieSceneEntityInstantiatorSystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneIntegerSection
/// Size: 0x0090 (0x0000E8 - 0x000178)
class UMovieSceneIntegerSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	SMember(FMovieSceneIntegerChannel)                 IntegerCurve                                                OFFSET(getStruct<T>, {0xE8, 144, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneIntegerTrack
/// Size: 0x0008 (0x0000A8 - 0x0000B0)
class UMovieSceneIntegerTrack : public UMovieScenePropertyTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneInterrogatedPropertyInstantiatorSystem
/// Size: 0x01A8 (0x000040 - 0x0001E8)
class UMovieSceneInterrogatedPropertyInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 488;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneLevelVisibilitySection
/// Size: 0x0020 (0x0000E8 - 0x000108)
class UMovieSceneLevelVisibilitySection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	CMember(ELevelVisibility)                          Visibility                                                  OFFSET(get<T>, {0xF0, 1, 0, 0})
	CMember(TArray<FName>)                             LevelNames                                                  OFFSET(get<T>, {0xF8, 16, 0, 0})


	/// Functions
	// Function /Script/MovieSceneTracks.MovieSceneLevelVisibilitySection.SetVisibility
	// void SetVisibility(ELevelVisibility InVisibility);                                                                       // [0x2901d60] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneLevelVisibilitySection.SetLevelNames
	// void SetLevelNames(TArray<FName>& InLevelNames);                                                                         // [0x2901bb0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneLevelVisibilitySection.GetVisibility
	// ELevelVisibility GetVisibility();                                                                                        // [0x2901b80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieSceneTracks.MovieSceneLevelVisibilitySection.GetLevelNames
	// TArray<FName> GetLevelNames();                                                                                           // [0x2901a90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/MovieSceneTracks.MovieSceneLevelVisibilitySystem
/// Size: 0x0168 (0x000040 - 0x0001A8)
class UMovieSceneLevelVisibilitySystem : public UMovieSceneEntitySystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 424;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneLevelVisibilityTrack
/// Size: 0x0010 (0x000078 - 0x000088)
class UMovieSceneLevelVisibilityTrack : public UMovieSceneNameableTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<class UMovieSceneSection*>)         Sections                                                    OFFSET(get<T>, {0x78, 16, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneMaterialParameterCollectionTrack
/// Size: 0x0010 (0x000088 - 0x000098)
class UMovieSceneMaterialParameterCollectionTrack : public UMovieSceneMaterialTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(class UMaterialParameterCollection*)       MPC                                                         OFFSET(get<T>, {0x90, 8, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneComponentMaterialTrack
/// Size: 0x0010 (0x000088 - 0x000098)
class UMovieSceneComponentMaterialTrack : public UMovieSceneMaterialTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	DMember(int32_t)                                   MaterialIndex                                               OFFSET(get<int32_t>, {0x90, 4, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneObjectPropertySection
/// Size: 0x00C0 (0x0000E8 - 0x0001A8)
class UMovieSceneObjectPropertySection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 424;

public:
	SMember(FMovieSceneObjectPathChannel)              ObjectChannel                                               OFFSET(getStruct<T>, {0xE8, 192, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneObjectPropertyTrack
/// Size: 0x0010 (0x0000A8 - 0x0000B8)
class UMovieSceneObjectPropertyTrack : public UMovieScenePropertyTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(class UClass*)                             PropertyClass                                               OFFSET(get<T>, {0xB0, 8, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneParticleParameterTrack
/// Size: 0x0018 (0x000078 - 0x000090)
class UMovieSceneParticleParameterTrack : public UMovieSceneNameableTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<class UMovieSceneSection*>)         Sections                                                    OFFSET(get<T>, {0x80, 16, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneParticleChannel
/// Size: 0x0000 (0x000098 - 0x000098)
class FMovieSceneParticleChannel : public FMovieSceneByteChannel
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneParticleSection
/// Size: 0x0098 (0x0000E8 - 0x000180)
class UMovieSceneParticleSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	SMember(FMovieSceneParticleChannel)                ParticleKeys                                                OFFSET(getStruct<T>, {0xE8, 152, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneParticleTrack
/// Size: 0x0018 (0x000078 - 0x000090)
class UMovieSceneParticleTrack : public UMovieSceneNameableTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<class UMovieSceneSection*>)         ParticleSections                                            OFFSET(get<T>, {0x80, 16, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieScenePiecewiseFloatBlenderSystem
/// Size: 0x00C0 (0x000060 - 0x000120)
class UMovieScenePiecewiseFloatBlenderSystem : public UMovieSceneBlenderSystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
};

/// Class /Script/MovieSceneTracks.MovieScenePrimitiveMaterialSection
/// Size: 0x00C0 (0x0000E8 - 0x0001A8)
class UMovieScenePrimitiveMaterialSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 424;

public:
	SMember(FMovieSceneObjectPathChannel)              MaterialChannel                                             OFFSET(getStruct<T>, {0xE8, 192, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieScenePrimitiveMaterialTrack
/// Size: 0x0010 (0x0000A8 - 0x0000B8)
class UMovieScenePrimitiveMaterialTrack : public UMovieScenePropertyTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(int32_t)                                   MaterialIndex                                               OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieScenePropertyInstantiatorSystem
/// Size: 0x0250 (0x000040 - 0x000290)
class UMovieScenePropertyInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneQuaternionInterpolationRotationSystem
/// Size: 0x0000 (0x000040 - 0x000040)
class UMovieSceneQuaternionInterpolationRotationSystem : public UMovieSceneEntitySystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Struct /Script/MovieSceneTracks.MovieSceneSkeletalAnimationParams
/// Size: 0x00D8 (0x000000 - 0x0000D8)
class FMovieSceneSkeletalAnimationParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(class UAnimSequenceBase*)                  Animation                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FFrameNumber)                              FirstLoopStartFrameOffset                                   OFFSET(getStruct<T>, {0x8, 4, 0, 0})
	SMember(FFrameNumber)                              StartFrameOffset                                            OFFSET(getStruct<T>, {0xC, 4, 0, 0})
	SMember(FFrameNumber)                              EndFrameOffset                                              OFFSET(getStruct<T>, {0x10, 4, 0, 0})
	DMember(float)                                     PlayRate                                                    OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(bool)                                      bReverse                                                    OFFSET(get<bool>, {0x18, 1, 1, 0})
	SMember(FName)                                     SlotName                                                    OFFSET(getStruct<T>, {0x1C, 8, 0, 0})
	SMember(FMovieSceneFloatChannel)                   Weight                                                      OFFSET(getStruct<T>, {0x28, 160, 0, 0})
	DMember(bool)                                      bSkipAnimNotifiers                                          OFFSET(get<bool>, {0xC8, 1, 0, 0})
	DMember(bool)                                      bForceCustomMode                                            OFFSET(get<bool>, {0xC9, 1, 0, 0})
	DMember(float)                                     StartOffset                                                 OFFSET(get<float>, {0xCC, 4, 0, 0})
	DMember(float)                                     EndOffset                                                   OFFSET(get<float>, {0xD0, 4, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneSkeletalAnimationSection
/// Size: 0x0188 (0x0000E8 - 0x000270)
class UMovieSceneSkeletalAnimationSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	SMember(FMovieSceneSkeletalAnimationParams)        Params                                                      OFFSET(getStruct<T>, {0xE8, 216, 0, 0})
	CMember(class UAnimSequence*)                      AnimSequence                                                OFFSET(get<T>, {0x1C0, 8, 0, 0})
	CMember(class UAnimSequenceBase*)                  Animation                                                   OFFSET(get<T>, {0x1C8, 8, 0, 0})
	DMember(float)                                     StartOffset                                                 OFFSET(get<float>, {0x1D0, 4, 0, 0})
	DMember(float)                                     EndOffset                                                   OFFSET(get<float>, {0x1D4, 4, 0, 0})
	DMember(float)                                     PlayRate                                                    OFFSET(get<float>, {0x1D8, 4, 0, 0})
	DMember(bool)                                      bReverse                                                    OFFSET(get<bool>, {0x1DC, 1, 1, 0})
	SMember(FName)                                     SlotName                                                    OFFSET(getStruct<T>, {0x1E0, 8, 0, 0})
	SMember(FVector)                                   StartLocationOffset                                         OFFSET(getStruct<T>, {0x1E8, 12, 0, 0})
	SMember(FRotator)                                  StartRotationOffset                                         OFFSET(getStruct<T>, {0x1F4, 12, 0, 0})
	DMember(bool)                                      bMatchWithPrevious                                          OFFSET(get<bool>, {0x200, 1, 0, 0})
	SMember(FName)                                     MatchedBoneName                                             OFFSET(getStruct<T>, {0x204, 8, 0, 0})
	SMember(FVector)                                   MatchedLocationOffset                                       OFFSET(getStruct<T>, {0x20C, 12, 0, 0})
	SMember(FRotator)                                  MatchedRotationOffset                                       OFFSET(getStruct<T>, {0x218, 12, 0, 0})
	DMember(bool)                                      bMatchTranslation                                           OFFSET(get<bool>, {0x224, 1, 0, 0})
	DMember(bool)                                      bMatchIncludeZHeight                                        OFFSET(get<bool>, {0x225, 1, 0, 0})
	DMember(bool)                                      bMatchRotationYaw                                           OFFSET(get<bool>, {0x226, 1, 0, 0})
	DMember(bool)                                      bMatchRotationPitch                                         OFFSET(get<bool>, {0x227, 1, 0, 0})
	DMember(bool)                                      bMatchRotationRoll                                          OFFSET(get<bool>, {0x228, 1, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneSkeletalAnimRootMotionTrackParams
/// Size: 0x0030 (0x000000 - 0x000030)
class FMovieSceneSkeletalAnimRootMotionTrackParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneSkeletalAnimationTrack
/// Size: 0x0058 (0x000078 - 0x0000D0)
class UMovieSceneSkeletalAnimationTrack : public UMovieSceneNameableTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(TArray<class UMovieSceneSection*>)         AnimationSections                                           OFFSET(get<T>, {0x80, 16, 0, 0})
	DMember(bool)                                      bUseLegacySectionIndexBlend                                 OFFSET(get<bool>, {0x90, 1, 0, 0})
	SMember(FMovieSceneSkeletalAnimRootMotionTrackParams) RootMotionParams                                         OFFSET(getStruct<T>, {0x98, 48, 0, 0})
	DMember(bool)                                      bBlendFirstChildOfRoot                                      OFFSET(get<bool>, {0xC8, 1, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneSlomoSection
/// Size: 0x00A0 (0x0000E8 - 0x000188)
class UMovieSceneSlomoSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	SMember(FMovieSceneFloatChannel)                   FloatCurve                                                  OFFSET(getStruct<T>, {0xE8, 160, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneSlomoTrack
/// Size: 0x0008 (0x0000A8 - 0x0000B0)
class UMovieSceneSlomoTrack : public UMovieSceneFloatTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Struct /Script/MovieSceneTracks.MovieSceneStringChannel
/// Size: 0x0098 (0x000008 - 0x0000A0)
class FMovieSceneStringChannel : public FMovieSceneChannel
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(TArray<FFrameNumber>)                      Times                                                       OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<FString>)                           Values                                                      OFFSET(get<T>, {0x18, 16, 0, 0})
	SMember(FString)                                   DefaultValue                                                OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	DMember(bool)                                      bHasDefaultValue                                            OFFSET(get<bool>, {0x38, 1, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneStringSection
/// Size: 0x00A0 (0x0000E8 - 0x000188)
class UMovieSceneStringSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	SMember(FMovieSceneStringChannel)                  StringCurve                                                 OFFSET(getStruct<T>, {0xE8, 160, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneStringTrack
/// Size: 0x0008 (0x0000A8 - 0x0000B0)
class UMovieSceneStringTrack : public UMovieScenePropertyTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneTransformOriginSystem
/// Size: 0x0038 (0x000040 - 0x000078)
class UMovieSceneTransformOriginSystem : public UMovieSceneEntitySystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneTransformTrack
/// Size: 0x0000 (0x0000A8 - 0x0000A8)
class UMovieSceneTransformTrack : public UMovieScenePropertyTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneVectorSection
/// Size: 0x0288 (0x0000E8 - 0x000370)
class UMovieSceneVectorSection : public UMovieSceneSection
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	SMember(FMovieSceneFloatChannel)                   Curves                                                      OFFSET(getStruct<T>, {0xE8, 640, 0, 0})
	DMember(int32_t)                                   ChannelsUsed                                                OFFSET(get<int32_t>, {0x368, 4, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneVectorTrack
/// Size: 0x0010 (0x0000A8 - 0x0000B8)
class UMovieSceneVectorTrack : public UMovieScenePropertyTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(int32_t)                                   NumChannelsUsed                                             OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
};

/// Class /Script/MovieSceneTracks.MovieSceneVisibilityTrack
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMovieSceneVisibilityTrack : public UMovieSceneBoolTrack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/MovieSceneTracks.MovieSceneHierarchicalEasingInstantiatorSystem
/// Size: 0x0050 (0x000040 - 0x000090)
class UMovieSceneHierarchicalEasingInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Class /Script/MovieSceneTracks.WeightAndEasingEvaluatorSystem
/// Size: 0x0038 (0x000040 - 0x000078)
class UWeightAndEasingEvaluatorSystem : public UMovieSceneEntitySystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Struct /Script/MovieSceneTracks.MovieScene3DPathSectionTemplate
/// Size: 0x00C0 (0x000020 - 0x0000E0)
class FMovieScene3DPathSectionTemplate : public FMovieSceneEvalTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FMovieSceneObjectBindingID)                PathBindingID                                               OFFSET(getStruct<T>, {0x20, 24, 0, 0})
	SMember(FMovieSceneFloatChannel)                   TimingCurve                                                 OFFSET(getStruct<T>, {0x38, 160, 0, 0})
	CMember(MovieScene3DPathSection_Axis)              FrontAxisEnum                                               OFFSET(get<T>, {0xD8, 1, 0, 0})
	CMember(MovieScene3DPathSection_Axis)              UpAxisEnum                                                  OFFSET(get<T>, {0xD9, 1, 0, 0})
	DMember(bool)                                      bFollow                                                     OFFSET(get<bool>, {0xDC, 1, 1, 0})
	DMember(bool)                                      bReverse                                                    OFFSET(get<bool>, {0xDC, 1, 1, 1})
	DMember(bool)                                      bForceUpright                                               OFFSET(get<bool>, {0xDC, 1, 1, 2})
};

/// Struct /Script/MovieSceneTracks.MovieScene3DTransformKeyStruct
/// Size: 0x0040 (0x000008 - 0x000048)
class FMovieScene3DTransformKeyStruct : public FMovieSceneKeyStruct
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	SMember(FVector)                                   Scale                                                       OFFSET(getStruct<T>, {0x20, 12, 0, 0})
	SMember(FFrameNumber)                              Time                                                        OFFSET(getStruct<T>, {0x2C, 4, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieScene3DScaleKeyStruct
/// Size: 0x0028 (0x000008 - 0x000030)
class FMovieScene3DScaleKeyStruct : public FMovieSceneKeyStruct
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FVector)                                   Scale                                                       OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	SMember(FFrameNumber)                              Time                                                        OFFSET(getStruct<T>, {0x14, 4, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieScene3DRotationKeyStruct
/// Size: 0x0028 (0x000008 - 0x000030)
class FMovieScene3DRotationKeyStruct : public FMovieSceneKeyStruct
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	SMember(FFrameNumber)                              Time                                                        OFFSET(getStruct<T>, {0x14, 4, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieScene3DLocationKeyStruct
/// Size: 0x0028 (0x000008 - 0x000030)
class FMovieScene3DLocationKeyStruct : public FMovieSceneKeyStruct
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	SMember(FFrameNumber)                              Time                                                        OFFSET(getStruct<T>, {0x14, 4, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieScene3DTransformTemplateData
/// Size: 0x0650 (0x000000 - 0x000650)
class FMovieScene3DTransformTemplateData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1616;

public:
	SMember(FMovieSceneFloatChannel)                   TranslationCurve                                            OFFSET(getStruct<T>, {0x0, 480, 0, 0})
	SMember(FMovieSceneFloatChannel)                   RotationCurve                                               OFFSET(getStruct<T>, {0x1E0, 480, 0, 0})
	SMember(FMovieSceneFloatChannel)                   ScaleCurve                                                  OFFSET(getStruct<T>, {0x3C0, 480, 0, 0})
	SMember(FMovieSceneFloatChannel)                   ManualWeight                                                OFFSET(getStruct<T>, {0x5A0, 160, 0, 0})
	CMember(EMovieSceneBlendType)                      BlendType                                                   OFFSET(get<T>, {0x640, 1, 0, 0})
	SMember(FMovieSceneTransformMask)                  Mask                                                        OFFSET(getStruct<T>, {0x644, 4, 0, 0})
	DMember(bool)                                      bUseQuaternionInterpolation                                 OFFSET(get<bool>, {0x648, 1, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneActorReferenceSectionTemplate
/// Size: 0x00C8 (0x000020 - 0x0000E8)
class FMovieSceneActorReferenceSectionTemplate : public FMovieSceneEvalTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FMovieScenePropertySectionData)            PropertyData                                                OFFSET(getStruct<T>, {0x20, 24, 0, 0})
	SMember(FMovieSceneActorReferenceData)             ActorReferenceData                                          OFFSET(getStruct<T>, {0x38, 176, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneAudioSectionTemplate
/// Size: 0x0008 (0x000020 - 0x000028)
class FMovieSceneAudioSectionTemplate : public FMovieSceneEvalTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class UMovieSceneAudioSection*)            AudioSection                                                OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneAdditiveCameraAnimationTemplate
/// Size: 0x0000 (0x000020 - 0x000020)
class FMovieSceneAdditiveCameraAnimationTemplate : public FMovieSceneEvalTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSectionTemplate
/// Size: 0x0028 (0x000020 - 0x000048)
class FMovieSceneCameraShakeSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FMovieSceneCameraShakeSectionData)         SourceData                                                  OFFSET(getStruct<T>, {0x20, 32, 0, 0})
	SMember(FFrameNumber)                              SectionStartTime                                            OFFSET(getStruct<T>, {0x40, 4, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraAnimSectionTemplate
/// Size: 0x0028 (0x000020 - 0x000048)
class FMovieSceneCameraAnimSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FMovieSceneCameraAnimSectionData)          SourceData                                                  OFFSET(getStruct<T>, {0x20, 32, 0, 0})
	SMember(FFrameNumber)                              SectionStartTime                                            OFFSET(getStruct<T>, {0x40, 4, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSourceShakeSectionTemplate
/// Size: 0x0028 (0x000020 - 0x000048)
class FMovieSceneCameraShakeSourceShakeSectionTemplate : public FMovieSceneEvalTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FMovieSceneCameraShakeSectionData)         SourceData                                                  OFFSET(getStruct<T>, {0x20, 32, 0, 0})
	SMember(FFrameNumber)                              SectionStartTime                                            OFFSET(getStruct<T>, {0x40, 4, 0, 0})
	SMember(FFrameNumber)                              SectionEndTime                                              OFFSET(getStruct<T>, {0x44, 4, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSourceTriggerSectionTemplate
/// Size: 0x0020 (0x000020 - 0x000040)
class FMovieSceneCameraShakeSourceTriggerSectionTemplate : public FMovieSceneEvalTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FFrameNumber>)                      TriggerTimes                                                OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FMovieSceneCameraShakeSourceTrigger>) TriggerValues                                             OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneColorKeyStruct
/// Size: 0x0030 (0x000008 - 0x000038)
class FMovieSceneColorKeyStruct : public FMovieSceneKeyStruct
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FLinearColor)                              Color                                                       OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FFrameNumber)                              Time                                                        OFFSET(getStruct<T>, {0x18, 4, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneColorSectionTemplate
/// Size: 0x0288 (0x000038 - 0x0002C0)
class FMovieSceneColorSectionTemplate : public FMovieScenePropertySectionTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	SMember(FMovieSceneFloatChannel)                   Curves                                                      OFFSET(getStruct<T>, {0x38, 640, 0, 0})
	CMember(EMovieSceneBlendType)                      BlendType                                                   OFFSET(get<T>, {0x2B8, 1, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventPayloadVariable
/// Size: 0x0010 (0x000000 - 0x000010)
class FMovieSceneEventPayloadVariable : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FString)                                   Value                                                       OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventTriggerData
/// Size: 0x0048 (0x000000 - 0x000048)
class FMovieSceneEventTriggerData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FMovieSceneEventPtrs)                      Ptrs                                                        OFFSET(getStruct<T>, {0x0, 40, 0, 0})
	SMember(FGuid)                                     ObjectBindingID                                             OFFSET(getStruct<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventSectionTemplate
/// Size: 0x0090 (0x000020 - 0x0000B0)
class FMovieSceneEventSectionTemplate : public FMovieSceneEvalTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FMovieSceneEventSectionData)               EventData                                                   OFFSET(getStruct<T>, {0x20, 136, 0, 0})
	DMember(bool)                                      bFireEventsWhenForwards                                     OFFSET(get<bool>, {0xA8, 1, 1, 0})
	DMember(bool)                                      bFireEventsWhenBackwards                                    OFFSET(get<bool>, {0xA8, 1, 1, 1})
};

/// Struct /Script/MovieSceneTracks.MovieSceneFadeSectionTemplate
/// Size: 0x00B8 (0x000020 - 0x0000D8)
class FMovieSceneFadeSectionTemplate : public FMovieSceneEvalTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FMovieSceneFloatChannel)                   FadeCurve                                                   OFFSET(getStruct<T>, {0x20, 160, 0, 0})
	SMember(FLinearColor)                              FadeColor                                                   OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	DMember(bool)                                      bFadeAudio                                                  OFFSET(get<bool>, {0xD0, 1, 1, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneMaterialParameterCollectionTemplate
/// Size: 0x0008 (0x000080 - 0x000088)
class FMovieSceneMaterialParameterCollectionTemplate : public FMovieSceneParameterSectionTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(class UMaterialParameterCollection*)       MPC                                                         OFFSET(get<T>, {0x80, 8, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneObjectPropertyTemplate
/// Size: 0x00C0 (0x000038 - 0x0000F8)
class FMovieSceneObjectPropertyTemplate : public FMovieScenePropertySectionTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	SMember(FMovieSceneObjectPathChannel)              ObjectChannel                                               OFFSET(getStruct<T>, {0x38, 192, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneComponentMaterialSectionTemplate
/// Size: 0x0008 (0x000080 - 0x000088)
class FMovieSceneComponentMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	DMember(int32_t)                                   MaterialIndex                                               OFFSET(get<int32_t>, {0x80, 4, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneParticleParameterSectionTemplate
/// Size: 0x0000 (0x000080 - 0x000080)
class FMovieSceneParticleParameterSectionTemplate : public FMovieSceneParameterSectionTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Struct /Script/MovieSceneTracks.MovieSceneParticleSectionTemplate
/// Size: 0x0098 (0x000020 - 0x0000B8)
class FMovieSceneParticleSectionTemplate : public FMovieSceneEvalTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FMovieSceneParticleChannel)                ParticleKeys                                                OFFSET(getStruct<T>, {0x20, 152, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieScenePrimitiveMaterialTemplate
/// Size: 0x00C8 (0x000020 - 0x0000E8)
class FMovieScenePrimitiveMaterialTemplate : public FMovieSceneEvalTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	DMember(int32_t)                                   MaterialIndex                                               OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	SMember(FMovieSceneObjectPathChannel)              MaterialChannel                                             OFFSET(getStruct<T>, {0x28, 192, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneVectorPropertySectionTemplate
/// Size: 0x0288 (0x000038 - 0x0002C0)
class FMovieSceneVectorPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	SMember(FMovieSceneFloatChannel)                   ComponentCurves                                             OFFSET(getStruct<T>, {0x38, 640, 0, 0})
	DMember(int32_t)                                   NumChannelsUsed                                             OFFSET(get<int32_t>, {0x2B8, 4, 0, 0})
	CMember(EMovieSceneBlendType)                      BlendType                                                   OFFSET(get<T>, {0x2BC, 1, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneStringPropertySectionTemplate
/// Size: 0x00A0 (0x000038 - 0x0000D8)
class FMovieSceneStringPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FMovieSceneStringChannel)                  StringCurve                                                 OFFSET(getStruct<T>, {0x38, 160, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneIntegerPropertySectionTemplate
/// Size: 0x0098 (0x000038 - 0x0000D0)
class FMovieSceneIntegerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FMovieSceneIntegerChannel)                 IntegerCurve                                                OFFSET(getStruct<T>, {0x38, 144, 0, 0})
	CMember(EMovieSceneBlendType)                      BlendType                                                   OFFSET(get<T>, {0xC8, 1, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneEnumPropertySectionTemplate
/// Size: 0x0098 (0x000038 - 0x0000D0)
class FMovieSceneEnumPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FMovieSceneByteChannel)                    EnumCurve                                                   OFFSET(getStruct<T>, {0x38, 152, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneBytePropertySectionTemplate
/// Size: 0x0098 (0x000038 - 0x0000D0)
class FMovieSceneBytePropertySectionTemplate : public FMovieScenePropertySectionTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FMovieSceneByteChannel)                    ByteCurve                                                   OFFSET(getStruct<T>, {0x38, 152, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneBoolPropertySectionTemplate
/// Size: 0x0090 (0x000038 - 0x0000C8)
class FMovieSceneBoolPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FMovieSceneBoolChannel)                    BoolCurve                                                   OFFSET(getStruct<T>, {0x38, 144, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplateParameters
/// Size: 0x0008 (0x0000D8 - 0x0000E0)
class FMovieSceneSkeletalAnimationSectionTemplateParameters : public FMovieSceneSkeletalAnimationParams
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FFrameNumber)                              SectionStartTime                                            OFFSET(getStruct<T>, {0xD8, 4, 0, 0})
	SMember(FFrameNumber)                              SectionEndTime                                              OFFSET(getStruct<T>, {0xDC, 4, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplate
/// Size: 0x00E0 (0x000020 - 0x000100)
class FMovieSceneSkeletalAnimationSectionTemplate : public FMovieSceneEvalTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FMovieSceneSkeletalAnimationSectionTemplateParameters) Params                                          OFFSET(getStruct<T>, {0x20, 224, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneSlomoSectionTemplate
/// Size: 0x00A0 (0x000020 - 0x0000C0)
class FMovieSceneSlomoSectionTemplate : public FMovieSceneEvalTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FMovieSceneFloatChannel)                   SlomoCurve                                                  OFFSET(getStruct<T>, {0x20, 160, 0, 0})
};

/// Struct /Script/MovieSceneTracks.LevelVisibilityComponentData
/// Size: 0x0008 (0x000000 - 0x000008)
class FLevelVisibilityComponentData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(class UMovieSceneLevelVisibilitySection*)  Section                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneVectorKeyStructBase
/// Size: 0x0020 (0x000008 - 0x000028)
class FMovieSceneVectorKeyStructBase : public FMovieSceneKeyStruct
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FFrameNumber)                              Time                                                        OFFSET(getStruct<T>, {0x8, 4, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneVector4KeyStruct
/// Size: 0x0018 (0x000028 - 0x000040)
class FMovieSceneVector4KeyStruct : public FMovieSceneVectorKeyStructBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FVector4)                                  Vector                                                      OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneVectorKeyStruct
/// Size: 0x0010 (0x000028 - 0x000038)
class FMovieSceneVectorKeyStruct : public FMovieSceneVectorKeyStructBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FVector)                                   Vector                                                      OFFSET(getStruct<T>, {0x28, 12, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneVector2DKeyStruct
/// Size: 0x0008 (0x000028 - 0x000030)
class FMovieSceneVector2DKeyStruct : public FMovieSceneVectorKeyStructBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FVector2D)                                 Vector                                                      OFFSET(getStruct<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/MovieSceneTracks.MovieSceneVisibilitySectionTemplate
/// Size: 0x0000 (0x0000C8 - 0x0000C8)
class FMovieSceneVisibilitySectionTemplate : public FMovieSceneBoolPropertySectionTemplate
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
};

/// Enum /Script/AudioMixer.EMusicalNoteName
/// Size: 0x12
enum class EMusicalNoteName : uint8_t
{
	EMusicalNoteName__C                                                              = 0,
	EMusicalNoteName__Db                                                             = 1,
	EMusicalNoteName__D                                                              = 2,
	EMusicalNoteName__Eb                                                             = 3,
	EMusicalNoteName__E                                                              = 4,
	EMusicalNoteName__F                                                              = 5,
	EMusicalNoteName__Gb                                                             = 6,
	EMusicalNoteName__G                                                              = 7,
	EMusicalNoteName__Ab                                                             = 8,
	EMusicalNoteName__A                                                              = 9,
	EMusicalNoteName__Bb                                                             = 10,
	EMusicalNoteName__B                                                              = 11
};

/// Enum /Script/AudioMixer.ESubmixEffectDynamicsChannelLinkMode
/// Size: 0x04
enum class ESubmixEffectDynamicsChannelLinkMode : uint8_t
{
	ESubmixEffectDynamicsChannelLinkMode__Disabled                                   = 0,
	ESubmixEffectDynamicsChannelLinkMode__Average                                    = 1,
	ESubmixEffectDynamicsChannelLinkMode__Peak                                       = 2,
	ESubmixEffectDynamicsChannelLinkMode__Count                                      = 3
};

/// Enum /Script/AudioMixer.ESubmixEffectDynamicsPeakMode
/// Size: 0x04
enum class ESubmixEffectDynamicsPeakMode : uint8_t
{
	ESubmixEffectDynamicsPeakMode__MeanSquared                                       = 0,
	ESubmixEffectDynamicsPeakMode__RootMeanSquared                                   = 1,
	ESubmixEffectDynamicsPeakMode__Peak                                              = 2,
	ESubmixEffectDynamicsPeakMode__Count                                             = 3
};

/// Enum /Script/AudioMixer.ESubmixEffectDynamicsProcessorType
/// Size: 0x05
enum class ESubmixEffectDynamicsProcessorType : uint8_t
{
	ESubmixEffectDynamicsProcessorType__Compressor                                   = 0,
	ESubmixEffectDynamicsProcessorType__Limiter                                      = 1,
	ESubmixEffectDynamicsProcessorType__Expander                                     = 2,
	ESubmixEffectDynamicsProcessorType__Gate                                         = 3,
	ESubmixEffectDynamicsProcessorType__Count                                        = 4
};

/// Enum /Script/Engine.ETextGender
/// Size: 0x03
enum class ETextGender : uint8_t
{
	ETextGender__Masculine                                                           = 0,
	ETextGender__Feminine                                                            = 1,
	ETextGender__Neuter                                                              = 2
};

/// Enum /Script/Engine.EFormatArgumentType
/// Size: 0x06
enum class EFormatArgumentType : uint8_t
{
	EFormatArgumentType__Int                                                         = 0,
	EFormatArgumentType__UInt                                                        = 1,
	EFormatArgumentType__Float                                                       = 2,
	EFormatArgumentType__Double                                                      = 3,
	EFormatArgumentType__Text                                                        = 4,
	EFormatArgumentType__Gender                                                      = 5
};

/// Enum /Script/Engine.EEndPlayReason
/// Size: 0x05
enum class EEndPlayReason : uint8_t
{
	EEndPlayReason__Destroyed                                                        = 0,
	EEndPlayReason__LevelTransition                                                  = 1,
	EEndPlayReason__EndPlayInEditor                                                  = 2,
	EEndPlayReason__RemovedFromWorld                                                 = 3,
	EEndPlayReason__Quit                                                             = 4
};

/// Enum /Script/Engine.ETickingGroup
/// Size: 0x08
enum class ETickingGroup : uint8_t
{
	TG_PrePhysics                                                                    = 0,
	TG_StartPhysics                                                                  = 1,
	TG_DuringPhysics                                                                 = 2,
	TG_EndPhysics                                                                    = 3,
	TG_PostPhysics                                                                   = 4,
	TG_PostUpdateWork                                                                = 5,
	TG_LastDemotable                                                                 = 6,
	TG_NewlySpawned                                                                  = 7
};

/// Enum /Script/Engine.EComponentCreationMethod
/// Size: 0x04
enum class EComponentCreationMethod : uint8_t
{
	EComponentCreationMethod__Native                                                 = 0,
	EComponentCreationMethod__SimpleConstructionScript                               = 1,
	EComponentCreationMethod__UserConstructionScript                                 = 2,
	EComponentCreationMethod__Instance                                               = 3
};

/// Enum /Script/Engine.ETemperatureSeverityType
/// Size: 0x06
enum class ETemperatureSeverityType : uint8_t
{
	ETemperatureSeverityType__Unknown                                                = 0,
	ETemperatureSeverityType__Good                                                   = 1,
	ETemperatureSeverityType__Bad                                                    = 2,
	ETemperatureSeverityType__Serious                                                = 3,
	ETemperatureSeverityType__Critical                                               = 4,
	ETemperatureSeverityType__NumSeverities                                          = 5
};

/// Enum /Script/Engine.EQuartzCommandQuantization
/// Size: 0x19
enum class EQuartzCommandQuantization : uint8_t
{
	EQuartzCommandQuantization__Bar                                                  = 0,
	EQuartzCommandQuantization__Beat                                                 = 1,
	EQuartzCommandQuantization__ThirtySecondNote                                     = 2,
	EQuartzCommandQuantization__SixteenthNote                                        = 3,
	EQuartzCommandQuantization__EighthNote                                           = 4,
	EQuartzCommandQuantization__QuarterNote                                          = 5,
	EQuartzCommandQuantization__HalfNote                                             = 6,
	EQuartzCommandQuantization__WholeNote                                            = 7,
	EQuartzCommandQuantization__DottedSixteenthNote                                  = 8,
	EQuartzCommandQuantization__DottedEighthNote                                     = 9,
	EQuartzCommandQuantization__DottedQuarterNote                                    = 10,
	EQuartzCommandQuantization__DottedHalfNote                                       = 11,
	EQuartzCommandQuantization__DottedWholeNote                                      = 12,
	EQuartzCommandQuantization__SixteenthNoteTriplet                                 = 13,
	EQuartzCommandQuantization__EighthNoteTriplet                                    = 14,
	EQuartzCommandQuantization__QuarterNoteTriplet                                   = 15,
	EQuartzCommandQuantization__HalfNoteTriplet                                      = 16,
	EQuartzCommandQuantization__Tick                                                 = 17,
	EQuartzCommandQuantization__Count                                                = 18
};

/// Enum /Script/Engine.EQuartzCommandDelegateSubType
/// Size: 0x06
enum class EQuartzCommandDelegateSubType : uint8_t
{
	EQuartzCommandDelegateSubType__CommandOnFailedToQueue                            = 0,
	EQuartzCommandDelegateSubType__CommandOnQueued                                   = 1,
	EQuartzCommandDelegateSubType__CommandOnCanceled                                 = 2,
	EQuartzCommandDelegateSubType__CommandOnAboutToStart                             = 3,
	EQuartzCommandDelegateSubType__CommandOnStarted                                  = 4,
	EQuartzCommandDelegateSubType__Count                                             = 5
};

/// Enum /Script/Engine.EAudioComponentPlayState
/// Size: 0x06
enum class EAudioComponentPlayState : uint8_t
{
	EAudioComponentPlayState__Playing                                                = 0,
	EAudioComponentPlayState__Stopped                                                = 1,
	EAudioComponentPlayState__Paused                                                 = 2,
	EAudioComponentPlayState__FadingIn                                               = 3,
	EAudioComponentPlayState__FadingOut                                              = 4,
	EAudioComponentPlayState__Count                                                  = 5
};

/// Enum /Script/Engine.EPlaneConstraintAxisSetting
/// Size: 0x05
enum class EPlaneConstraintAxisSetting : uint8_t
{
	EPlaneConstraintAxisSetting__Custom                                              = 0,
	EPlaneConstraintAxisSetting__X                                                   = 1,
	EPlaneConstraintAxisSetting__Y                                                   = 2,
	EPlaneConstraintAxisSetting__Z                                                   = 3,
	EPlaneConstraintAxisSetting__UseGlobalPhysicsSetting                             = 4
};

/// Enum /Script/Engine.EInterpToBehaviourType
/// Size: 0x04
enum class EInterpToBehaviourType : uint8_t
{
	EInterpToBehaviourType__OneShot                                                  = 0,
	EInterpToBehaviourType__OneShot_Reverse                                          = 1,
	EInterpToBehaviourType__Loop_Reset                                               = 2,
	EInterpToBehaviourType__PingPong                                                 = 3
};

/// Enum /Script/Engine.ETeleportType
/// Size: 0x03
enum class ETeleportType : uint8_t
{
	ETeleportType__None                                                              = 0,
	ETeleportType__TeleportPhysics                                                   = 1,
	ETeleportType__ResetPhysics                                                      = 2
};

/// Enum /Script/Engine.EPlatformInterfaceDataType
/// Size: 0x06
enum class EPlatformInterfaceDataType : uint8_t
{
	PIDT_None                                                                        = 0,
	PIDT_Int                                                                         = 1,
	PIDT_Float                                                                       = 2,
	PIDT_String                                                                      = 3,
	PIDT_Object                                                                      = 4,
	PIDT_Custom                                                                      = 5
};

/// Enum /Script/Engine.EMovementMode
/// Size: 0x07
enum class EMovementMode : uint8_t
{
	MOVE_None                                                                        = 0,
	MOVE_Walking                                                                     = 1,
	MOVE_NavWalking                                                                  = 2,
	MOVE_Falling                                                                     = 3,
	MOVE_Swimming                                                                    = 4,
	MOVE_Flying                                                                      = 5,
	MOVE_Custom                                                                      = 6
};

/// Enum /Script/Engine.ENetworkFailure
/// Size: 0x11
enum class ENetworkFailure : uint8_t
{
	ENetworkFailure__NetDriverAlreadyExists                                          = 0,
	ENetworkFailure__NetDriverCreateFailure                                          = 1,
	ENetworkFailure__NetDriverListenFailure                                          = 2,
	ENetworkFailure__ConnectionLost                                                  = 3,
	ENetworkFailure__ConnectionTimeout                                               = 4,
	ENetworkFailure__FailureReceived                                                 = 5,
	ENetworkFailure__OutdatedClient                                                  = 6,
	ENetworkFailure__OutdatedServer                                                  = 7,
	ENetworkFailure__PendingConnectionFailure                                        = 8,
	ENetworkFailure__NetGuidMismatch                                                 = 9,
	ENetworkFailure__NetChecksumMismatch                                             = 10
};

/// Enum /Script/Engine.ETravelFailure
/// Size: 0x12
enum class ETravelFailure : uint8_t
{
	ETravelFailure__NoLevel                                                          = 0,
	ETravelFailure__LoadMapFailure                                                   = 1,
	ETravelFailure__InvalidURL                                                       = 2,
	ETravelFailure__PackageMissing                                                   = 3,
	ETravelFailure__PackageVersion                                                   = 4,
	ETravelFailure__NoDownload                                                       = 5,
	ETravelFailure__TravelFailure                                                    = 6,
	ETravelFailure__CheatCommands                                                    = 7,
	ETravelFailure__PendingNetGameCreateFailure                                      = 8,
	ETravelFailure__CloudSaveFailure                                                 = 9,
	ETravelFailure__ServerTravelFailure                                              = 10,
	ETravelFailure__ClientTravelFailure                                              = 11
};

/// Enum /Script/Engine.EScreenOrientation
/// Size: 0x07
enum class EScreenOrientation : uint8_t
{
	EScreenOrientation__Unknown                                                      = 0,
	EScreenOrientation__Portrait                                                     = 1,
	EScreenOrientation__PortraitUpsideDown                                           = 2,
	EScreenOrientation__LandscapeLeft                                                = 3,
	EScreenOrientation__LandscapeRight                                               = 4,
	EScreenOrientation__FaceUp                                                       = 5,
	EScreenOrientation__FaceDown                                                     = 6
};

/// Enum /Script/Engine.EApplicationState
/// Size: 0x04
enum class EApplicationState : uint8_t
{
	EApplicationState__Unknown                                                       = 0,
	EApplicationState__Inactive                                                      = 1,
	EApplicationState__Background                                                    = 2,
	EApplicationState__Active                                                        = 3
};

/// Enum /Script/Engine.EObjectTypeQuery
/// Size: 0x32
enum class EObjectTypeQuery : uint8_t
{
	ObjectTypeQuery1                                                                 = 0,
	ObjectTypeQuery2                                                                 = 1,
	ObjectTypeQuery3                                                                 = 2,
	ObjectTypeQuery4                                                                 = 3,
	ObjectTypeQuery5                                                                 = 4,
	ObjectTypeQuery6                                                                 = 5,
	ObjectTypeQuery7                                                                 = 6,
	ObjectTypeQuery8                                                                 = 7,
	ObjectTypeQuery9                                                                 = 8,
	ObjectTypeQuery10                                                                = 9,
	ObjectTypeQuery11                                                                = 10,
	ObjectTypeQuery12                                                                = 11,
	ObjectTypeQuery13                                                                = 12,
	ObjectTypeQuery14                                                                = 13,
	ObjectTypeQuery15                                                                = 14,
	ObjectTypeQuery16                                                                = 15,
	ObjectTypeQuery17                                                                = 16,
	ObjectTypeQuery18                                                                = 17,
	ObjectTypeQuery19                                                                = 18,
	ObjectTypeQuery20                                                                = 19,
	ObjectTypeQuery21                                                                = 20,
	ObjectTypeQuery22                                                                = 21,
	ObjectTypeQuery23                                                                = 22,
	ObjectTypeQuery24                                                                = 23,
	ObjectTypeQuery25                                                                = 24,
	ObjectTypeQuery26                                                                = 25,
	ObjectTypeQuery27                                                                = 26,
	ObjectTypeQuery28                                                                = 27,
	ObjectTypeQuery29                                                                = 28,
	ObjectTypeQuery30                                                                = 29,
	ObjectTypeQuery31                                                                = 30,
	ObjectTypeQuery32                                                                = 31
};

/// Enum /Script/Engine.EDrawDebugTrace
/// Size: 0x04
enum class EDrawDebugTrace : uint8_t
{
	EDrawDebugTrace__None                                                            = 0,
	EDrawDebugTrace__ForOneFrame                                                     = 1,
	EDrawDebugTrace__ForDuration                                                     = 2,
	EDrawDebugTrace__Persistent                                                      = 3
};

/// Enum /Script/Engine.ETraceTypeQuery
/// Size: 0x32
enum class ETraceTypeQuery : uint8_t
{
	TraceTypeQuery1                                                                  = 0,
	TraceTypeQuery2                                                                  = 1,
	TraceTypeQuery3                                                                  = 2,
	TraceTypeQuery4                                                                  = 3,
	TraceTypeQuery5                                                                  = 4,
	TraceTypeQuery6                                                                  = 5,
	TraceTypeQuery7                                                                  = 6,
	TraceTypeQuery8                                                                  = 7,
	TraceTypeQuery9                                                                  = 8,
	TraceTypeQuery10                                                                 = 9,
	TraceTypeQuery11                                                                 = 10,
	TraceTypeQuery12                                                                 = 11,
	TraceTypeQuery13                                                                 = 12,
	TraceTypeQuery14                                                                 = 13,
	TraceTypeQuery15                                                                 = 14,
	TraceTypeQuery16                                                                 = 15,
	TraceTypeQuery17                                                                 = 16,
	TraceTypeQuery18                                                                 = 17,
	TraceTypeQuery19                                                                 = 18,
	TraceTypeQuery20                                                                 = 19,
	TraceTypeQuery21                                                                 = 20,
	TraceTypeQuery22                                                                 = 21,
	TraceTypeQuery23                                                                 = 22,
	TraceTypeQuery24                                                                 = 23,
	TraceTypeQuery25                                                                 = 24,
	TraceTypeQuery26                                                                 = 25,
	TraceTypeQuery27                                                                 = 26,
	TraceTypeQuery28                                                                 = 27,
	TraceTypeQuery29                                                                 = 28,
	TraceTypeQuery30                                                                 = 29,
	TraceTypeQuery31                                                                 = 30,
	TraceTypeQuery32                                                                 = 31
};

/// Enum /Script/Engine.EMoveComponentAction
/// Size: 0x03
enum class EMoveComponentAction : uint8_t
{
	EMoveComponentAction__Move                                                       = 0,
	EMoveComponentAction__Stop                                                       = 1,
	EMoveComponentAction__Return                                                     = 2
};

/// Enum /Script/Engine.EQuitPreference
/// Size: 0x02
enum class EQuitPreference : uint8_t
{
	EQuitPreference__Quit                                                            = 0,
	EQuitPreference__Background                                                      = 1
};

/// Enum /Script/Engine.EInputEvent
/// Size: 0x05
enum class EInputEvent : uint8_t
{
	IE_Pressed                                                                       = 0,
	IE_Released                                                                      = 1,
	IE_Repeat                                                                        = 2,
	IE_DoubleClick                                                                   = 3,
	IE_Axis                                                                          = 4
};

/// Enum /Script/Engine.ERelativeTransformSpace
/// Size: 0x04
enum class ERelativeTransformSpace : uint8_t
{
	RTS_World                                                                        = 0,
	RTS_Actor                                                                        = 1,
	RTS_Component                                                                    = 2,
	RTS_ParentBoneSpace                                                              = 3
};

/// Enum /Script/Engine.EAttachLocation
/// Size: 0x04
enum class EAttachLocation : uint8_t
{
	EAttachLocation__KeepRelativeOffset                                              = 0,
	EAttachLocation__KeepWorldPosition                                               = 1,
	EAttachLocation__SnapToTarget                                                    = 2,
	EAttachLocation__SnapToTargetIncludingScale                                      = 3
};

/// Enum /Script/Engine.EAttachmentRule
/// Size: 0x03
enum class EAttachmentRule : uint8_t
{
	EAttachmentRule__KeepRelative                                                    = 0,
	EAttachmentRule__KeepWorld                                                       = 1,
	EAttachmentRule__SnapToTarget                                                    = 2
};

/// Enum /Script/Engine.EDetachmentRule
/// Size: 0x02
enum class EDetachmentRule : uint8_t
{
	EDetachmentRule__KeepRelative                                                    = 0,
	EDetachmentRule__KeepWorld                                                       = 1
};

/// Enum /Script/Engine.EComponentMobility
/// Size: 0x03
enum class EComponentMobility : uint8_t
{
	EComponentMobility__Static                                                       = 0,
	EComponentMobility__Stationary                                                   = 1,
	EComponentMobility__Movable                                                      = 2
};

/// Enum /Script/Engine.EDetailMode
/// Size: 0x03
enum class EDetailMode : uint8_t
{
	DM_Low                                                                           = 0,
	DM_Medium                                                                        = 1,
	DM_High                                                                          = 2
};

/// Enum /Script/Engine.ENetRole
/// Size: 0x04
enum class ENetRole : uint8_t
{
	ROLE_None                                                                        = 0,
	ROLE_SimulatedProxy                                                              = 1,
	ROLE_AutonomousProxy                                                             = 2,
	ROLE_Authority                                                                   = 3
};

/// Enum /Script/Engine.ENetDormancy
/// Size: 0x05
enum class ENetDormancy : uint8_t
{
	DORM_Never                                                                       = 0,
	DORM_Awake                                                                       = 1,
	DORM_DormantAll                                                                  = 2,
	DORM_DormantPartial                                                              = 3,
	DORM_Initial                                                                     = 4
};

/// Enum /Script/Engine.EAutoReceiveInput
/// Size: 0x09
enum class EAutoReceiveInput : uint8_t
{
	EAutoReceiveInput__Disabled                                                      = 0,
	EAutoReceiveInput__Player0                                                       = 1,
	EAutoReceiveInput__Player1                                                       = 2,
	EAutoReceiveInput__Player2                                                       = 3,
	EAutoReceiveInput__Player3                                                       = 4,
	EAutoReceiveInput__Player4                                                       = 5,
	EAutoReceiveInput__Player5                                                       = 6,
	EAutoReceiveInput__Player6                                                       = 7,
	EAutoReceiveInput__Player7                                                       = 8
};

/// Enum /Script/Engine.ESpawnActorCollisionHandlingMethod
/// Size: 0x05
enum class ESpawnActorCollisionHandlingMethod : uint8_t
{
	ESpawnActorCollisionHandlingMethod__Undefined                                    = 0,
	ESpawnActorCollisionHandlingMethod__AlwaysSpawn                                  = 1,
	ESpawnActorCollisionHandlingMethod__AdjustIfPossibleButAlwaysSpawn               = 2,
	ESpawnActorCollisionHandlingMethod__AdjustIfPossibleButDontSpawnIfColliding      = 3,
	ESpawnActorCollisionHandlingMethod__DontSpawnIfColliding                         = 4
};

/// Enum /Script/Engine.ERotatorQuantization
/// Size: 0x02
enum class ERotatorQuantization : uint8_t
{
	ERotatorQuantization__ByteComponents                                             = 0,
	ERotatorQuantization__ShortComponents                                            = 1
};

/// Enum /Script/Engine.EVectorQuantization
/// Size: 0x03
enum class EVectorQuantization : uint8_t
{
	EVectorQuantization__RoundWholeNumber                                            = 0,
	EVectorQuantization__RoundOneDecimal                                             = 1,
	EVectorQuantization__RoundTwoDecimals                                            = 2
};

/// Enum /Script/Engine.EActorUpdateOverlapsMethod
/// Size: 0x04
enum class EActorUpdateOverlapsMethod : uint8_t
{
	EActorUpdateOverlapsMethod__UseConfigDefault                                     = 0,
	EActorUpdateOverlapsMethod__AlwaysUpdate                                         = 1,
	EActorUpdateOverlapsMethod__OnlyUpdateMovable                                    = 2,
	EActorUpdateOverlapsMethod__NeverUpdate                                          = 3
};

/// Enum /Script/Engine.EMouseLockMode
/// Size: 0x04
enum class EMouseLockMode : uint8_t
{
	EMouseLockMode__DoNotLock                                                        = 0,
	EMouseLockMode__LockOnCapture                                                    = 1,
	EMouseLockMode__LockAlways                                                       = 2,
	EMouseLockMode__LockInFullscreen                                                 = 3
};

/// Enum /Script/Engine.EWindowTitleBarMode
/// Size: 0x02
enum class EWindowTitleBarMode : uint8_t
{
	EWindowTitleBarMode__Overlay                                                     = 0,
	EWindowTitleBarMode__VerticalBox                                                 = 1
};

/// Enum /Script/Engine.EAlphaBlendOption
/// Size: 0x15
enum class EAlphaBlendOption : uint8_t
{
	EAlphaBlendOption__Linear                                                        = 0,
	EAlphaBlendOption__Cubic                                                         = 1,
	EAlphaBlendOption__HermiteCubic                                                  = 2,
	EAlphaBlendOption__Sinusoidal                                                    = 3,
	EAlphaBlendOption__QuadraticInOut                                                = 4,
	EAlphaBlendOption__CubicInOut                                                    = 5,
	EAlphaBlendOption__QuarticInOut                                                  = 6,
	EAlphaBlendOption__QuinticInOut                                                  = 7,
	EAlphaBlendOption__CircularIn                                                    = 8,
	EAlphaBlendOption__CircularOut                                                   = 9,
	EAlphaBlendOption__CircularInOut                                                 = 10,
	EAlphaBlendOption__ExpIn                                                         = 11,
	EAlphaBlendOption__ExpOut                                                        = 12,
	EAlphaBlendOption__ExpInOut                                                      = 13,
	EAlphaBlendOption__Custom                                                        = 14
};

/// Enum /Script/Engine.EAnimSyncGroupScope
/// Size: 0x02
enum class EAnimSyncGroupScope : uint8_t
{
	EAnimSyncGroupScope__Local                                                       = 0,
	EAnimSyncGroupScope__Component                                                   = 1
};

/// Enum /Script/Engine.EAnimGroupRole
/// Size: 0x05
enum class EAnimGroupRole : uint8_t
{
	EAnimGroupRole__CanBeLeader                                                      = 0,
	EAnimGroupRole__AlwaysFollower                                                   = 1,
	EAnimGroupRole__AlwaysLeader                                                     = 2,
	EAnimGroupRole__TransitionLeader                                                 = 3,
	EAnimGroupRole__TransitionFollower                                               = 4
};

/// Enum /Script/Engine.EPreviewAnimationBlueprintApplicationMethod
/// Size: 0x02
enum class EPreviewAnimationBlueprintApplicationMethod : uint8_t
{
	EPreviewAnimationBlueprintApplicationMethod__LinkedLayers                        = 0,
	EPreviewAnimationBlueprintApplicationMethod__LinkedAnimGraph                     = 1
};

/// Enum /Script/Engine.AnimationKeyFormat
/// Size: 0x03
enum class AnimationKeyFormat : uint8_t
{
	AKF_ConstantKeyLerp                                                              = 0,
	AKF_VariableKeyLerp                                                              = 1,
	AKF_PerTrackCompression                                                          = 2
};

/// Enum /Script/Engine.ERawCurveTrackTypes
/// Size: 0x03
enum class ERawCurveTrackTypes : uint8_t
{
	ERawCurveTrackTypes__RCT_Float                                                   = 0,
	ERawCurveTrackTypes__RCT_Vector                                                  = 1,
	ERawCurveTrackTypes__RCT_Transform                                               = 2
};

/// Enum /Script/Engine.EAnimAssetCurveFlags
/// Size: 0x08
enum class EAnimAssetCurveFlags : uint8_t
{
	AACF_NONE                                                                        = 0,
	AACF_DriveMorphTarget_DEPRECATED                                                 = 1,
	AACF_DriveAttribute_DEPRECATED                                                   = 2,
	AACF_Editable                                                                    = 4,
	AACF_DriveMaterial_DEPRECATED                                                    = 8,
	AACF_Metadata                                                                    = 16,
	AACF_DriveTrack                                                                  = 32,
	AACF_Disabled                                                                    = 64
};

/// Enum /Script/Engine.AnimationCompressionFormat
/// Size: 0x07
enum class AnimationCompressionFormat : uint8_t
{
	ACF_None                                                                         = 0,
	ACF_Float96NoW                                                                   = 1,
	ACF_Fixed48NoW                                                                   = 2,
	ACF_IntervalFixed32NoW                                                           = 3,
	ACF_Fixed32NoW                                                                   = 4,
	ACF_Float32NoW                                                                   = 5,
	ACF_Identity                                                                     = 6
};

/// Enum /Script/Engine.EAdditiveBasePoseType
/// Size: 0x04
enum class EAdditiveBasePoseType : uint8_t
{
	ABPT_None                                                                        = 0,
	ABPT_RefPose                                                                     = 1,
	ABPT_AnimScaled                                                                  = 2,
	ABPT_AnimFrame                                                                   = 3
};

/// Enum /Script/Engine.ERootMotionMode
/// Size: 0x04
enum class ERootMotionMode : uint8_t
{
	ERootMotionMode__NoRootMotionExtraction                                          = 0,
	ERootMotionMode__IgnoreRootMotion                                                = 1,
	ERootMotionMode__RootMotionFromEverything                                        = 2,
	ERootMotionMode__RootMotionFromMontagesOnly                                      = 3
};

/// Enum /Script/Engine.ERootMotionRootLock
/// Size: 0x03
enum class ERootMotionRootLock : uint8_t
{
	ERootMotionRootLock__RefPose                                                     = 0,
	ERootMotionRootLock__AnimFirstFrame                                              = 1,
	ERootMotionRootLock__Zero                                                        = 2
};

/// Enum /Script/Engine.EMontagePlayReturnType
/// Size: 0x02
enum class EMontagePlayReturnType : uint8_t
{
	EMontagePlayReturnType__MontageLength                                            = 0,
	EMontagePlayReturnType__Duration                                                 = 1
};

/// Enum /Script/Engine.EDrawDebugItemType
/// Size: 0x05
enum class EDrawDebugItemType : uint8_t
{
	EDrawDebugItemType__DirectionalArrow                                             = 0,
	EDrawDebugItemType__Sphere                                                       = 1,
	EDrawDebugItemType__Line                                                         = 2,
	EDrawDebugItemType__OnScreenMessage                                              = 3,
	EDrawDebugItemType__CoordinateSystem                                             = 4
};

/// Enum /Script/Engine.EAnimLinkMethod
/// Size: 0x03
enum class EAnimLinkMethod : uint8_t
{
	EAnimLinkMethod__Absolute                                                        = 0,
	EAnimLinkMethod__Relative                                                        = 1,
	EAnimLinkMethod__Proportional                                                    = 2
};

/// Enum /Script/Engine.EMontageSubStepResult
/// Size: 0x04
enum class EMontageSubStepResult : uint8_t
{
	EMontageSubStepResult__Moved                                                     = 0,
	EMontageSubStepResult__NotMoved                                                  = 1,
	EMontageSubStepResult__InvalidSection                                            = 2,
	EMontageSubStepResult__InvalidMontage                                            = 3
};

/// Enum /Script/Engine.EAnimNotifyEventType
/// Size: 0x02
enum class EAnimNotifyEventType : uint8_t
{
	EAnimNotifyEventType__Begin                                                      = 0,
	EAnimNotifyEventType__End                                                        = 1
};

/// Enum /Script/Engine.EInertializationSpace
/// Size: 0x03
enum class EInertializationSpace : uint8_t
{
	EInertializationSpace__Default                                                   = 0,
	EInertializationSpace__WorldSpace                                                = 1,
	EInertializationSpace__WorldRotation                                             = 2
};

/// Enum /Script/Engine.EInertializationBoneState
/// Size: 0x03
enum class EInertializationBoneState : uint8_t
{
	EInertializationBoneState__Invalid                                               = 0,
	EInertializationBoneState__Valid                                                 = 1,
	EInertializationBoneState__Excluded                                              = 2
};

/// Enum /Script/Engine.EInertializationState
/// Size: 0x03
enum class EInertializationState : uint8_t
{
	EInertializationState__Inactive                                                  = 0,
	EInertializationState__Pending                                                   = 1,
	EInertializationState__Active                                                    = 2
};

/// Enum /Script/Engine.EEvaluatorMode
/// Size: 0x03
enum class EEvaluatorMode : uint8_t
{
	EEvaluatorMode__EM_Standard                                                      = 0,
	EEvaluatorMode__EM_Freeze                                                        = 1,
	EEvaluatorMode__EM_DelayedFreeze                                                 = 2
};

/// Enum /Script/Engine.EEvaluatorDataSource
/// Size: 0x02
enum class EEvaluatorDataSource : uint8_t
{
	EEvaluatorDataSource__EDS_SourcePose                                             = 0,
	EEvaluatorDataSource__EDS_DestinationPose                                        = 1
};

/// Enum /Script/Engine.EPostCopyOperation
/// Size: 0x02
enum class EPostCopyOperation : uint8_t
{
	EPostCopyOperation__None                                                         = 0,
	EPostCopyOperation__LogicalNegateBool                                            = 1
};

/// Enum /Script/Engine.EPinHidingMode
/// Size: 0x04
enum class EPinHidingMode : uint8_t
{
	EPinHidingMode__NeverAsPin                                                       = 0,
	EPinHidingMode__PinHiddenByDefault                                               = 1,
	EPinHidingMode__PinShownByDefault                                                = 2,
	EPinHidingMode__AlwaysAsPin                                                      = 3
};

/// Enum /Script/Engine.AnimPhysCollisionType
/// Size: 0x04
enum class AnimPhysCollisionType : uint8_t
{
	AnimPhysCollisionType__CoM                                                       = 0,
	AnimPhysCollisionType__CustomSphere                                              = 1,
	AnimPhysCollisionType__InnerSphere                                               = 2,
	AnimPhysCollisionType__OuterSphere                                               = 3
};

/// Enum /Script/Engine.AnimPhysTwistAxis
/// Size: 0x03
enum class AnimPhysTwistAxis : uint8_t
{
	AnimPhysTwistAxis__AxisX                                                         = 0,
	AnimPhysTwistAxis__AxisY                                                         = 1,
	AnimPhysTwistAxis__AxisZ                                                         = 2
};

/// Enum /Script/Engine.ETypeAdvanceAnim
/// Size: 0x03
enum class ETypeAdvanceAnim : uint8_t
{
	ETAA_Default                                                                     = 0,
	ETAA_Finished                                                                    = 1,
	ETAA_Looped                                                                      = 2
};

/// Enum /Script/Engine.ETransitionLogicType
/// Size: 0x03
enum class ETransitionLogicType : uint8_t
{
	ETransitionLogicType__TLT_StandardBlend                                          = 0,
	ETransitionLogicType__TLT_Inertialization                                        = 1,
	ETransitionLogicType__TLT_Custom                                                 = 2
};

/// Enum /Script/Engine.ETransitionBlendMode
/// Size: 0x02
enum class ETransitionBlendMode : uint8_t
{
	ETransitionBlendMode__TBM_Linear                                                 = 0,
	ETransitionBlendMode__TBM_Cubic                                                  = 1
};

/// Enum /Script/Engine.EComponentType
/// Size: 0x11
enum class EComponentType : uint8_t
{
	EComponentType__None                                                             = 0,
	EComponentType__TranslationX                                                     = 1,
	EComponentType__TranslationY                                                     = 2,
	EComponentType__TranslationZ                                                     = 3,
	EComponentType__RotationX                                                        = 4,
	EComponentType__RotationY                                                        = 5,
	EComponentType__RotationZ                                                        = 6,
	EComponentType__Scale                                                            = 7,
	EComponentType__ScaleX                                                           = 8,
	EComponentType__ScaleY                                                           = 9,
	EComponentType__ScaleZ                                                           = 10
};

/// Enum /Script/Engine.EAxisOption
/// Size: 0x07
enum class EAxisOption : uint8_t
{
	EAxisOption__X                                                                   = 0,
	EAxisOption__Y                                                                   = 1,
	EAxisOption__Z                                                                   = 2,
	EAxisOption__X_Neg                                                               = 3,
	EAxisOption__Y_Neg                                                               = 4,
	EAxisOption__Z_Neg                                                               = 5,
	EAxisOption__Custom                                                              = 6
};

/// Enum /Script/Engine.EAnimInterpolationType
/// Size: 0x02
enum class EAnimInterpolationType : uint8_t
{
	EAnimInterpolationType__Linear                                                   = 0,
	EAnimInterpolationType__Step                                                     = 1
};

/// Enum /Script/Engine.ECurveBlendOption
/// Size: 0x07
enum class ECurveBlendOption : uint8_t
{
	ECurveBlendOption__Override                                                      = 0,
	ECurveBlendOption__DoNotOverride                                                 = 1,
	ECurveBlendOption__NormalizeByWeight                                             = 2,
	ECurveBlendOption__BlendByWeight                                                 = 3,
	ECurveBlendOption__UseBasePose                                                   = 4,
	ECurveBlendOption__UseMaxValue                                                   = 5,
	ECurveBlendOption__UseMinValue                                                   = 6
};

/// Enum /Script/Engine.EAdditiveAnimationType
/// Size: 0x03
enum class EAdditiveAnimationType : uint8_t
{
	AAT_None                                                                         = 0,
	AAT_LocalSpaceBase                                                               = 1,
	AAT_RotationOffsetMeshSpace                                                      = 2
};

/// Enum /Script/Engine.ENotifyFilterType
/// Size: 0x02
enum class ENotifyFilterType : uint8_t
{
	ENotifyFilterType__NoFiltering                                                   = 0,
	ENotifyFilterType__LOD                                                           = 1
};

/// Enum /Script/Engine.EMontageNotifyTickType
/// Size: 0x02
enum class EMontageNotifyTickType : uint8_t
{
	EMontageNotifyTickType__Queued                                                   = 0,
	EMontageNotifyTickType__BranchingPoint                                           = 1
};

/// Enum /Script/Engine.EBoneRotationSource
/// Size: 0x03
enum class EBoneRotationSource : uint8_t
{
	BRS_KeepComponentSpaceRotation                                                   = 0,
	BRS_KeepLocalSpaceRotation                                                       = 1,
	BRS_CopyFromTarget                                                               = 2
};

/// Enum /Script/Engine.EBoneControlSpace
/// Size: 0x04
enum class EBoneControlSpace : uint8_t
{
	BCS_WorldSpace                                                                   = 0,
	BCS_ComponentSpace                                                               = 1,
	BCS_ParentBoneSpace                                                              = 2,
	BCS_BoneSpace                                                                    = 3
};

/// Enum /Script/Engine.EBoneAxis
/// Size: 0x03
enum class EBoneAxis : uint8_t
{
	BA_X                                                                             = 0,
	BA_Y                                                                             = 1,
	BA_Z                                                                             = 2
};

/// Enum /Script/Engine.EPrimaryAssetCookRule
/// Size: 0x05
enum class EPrimaryAssetCookRule : uint8_t
{
	EPrimaryAssetCookRule__Unknown                                                   = 0,
	EPrimaryAssetCookRule__NeverCook                                                 = 1,
	EPrimaryAssetCookRule__DevelopmentCook                                           = 2,
	EPrimaryAssetCookRule__DevelopmentAlwaysCook                                     = 3,
	EPrimaryAssetCookRule__AlwaysCook                                                = 4
};

/// Enum /Script/Engine.ENaturalSoundFalloffMode
/// Size: 0x03
enum class ENaturalSoundFalloffMode : uint8_t
{
	ENaturalSoundFalloffMode__Continues                                              = 0,
	ENaturalSoundFalloffMode__Silent                                                 = 1,
	ENaturalSoundFalloffMode__Hold                                                   = 2
};

/// Enum /Script/Engine.EAttenuationShape
/// Size: 0x04
enum class EAttenuationShape : uint8_t
{
	EAttenuationShape__Sphere                                                        = 0,
	EAttenuationShape__Capsule                                                       = 1,
	EAttenuationShape__Box                                                           = 2,
	EAttenuationShape__Cone                                                          = 3
};

/// Enum /Script/Engine.EAttenuationDistanceModel
/// Size: 0x06
enum class EAttenuationDistanceModel : uint8_t
{
	EAttenuationDistanceModel__Linear                                                = 0,
	EAttenuationDistanceModel__Logarithmic                                           = 1,
	EAttenuationDistanceModel__Inverse                                               = 2,
	EAttenuationDistanceModel__LogReverse                                            = 3,
	EAttenuationDistanceModel__NaturalSound                                          = 4,
	EAttenuationDistanceModel__Custom                                                = 5
};

/// Enum /Script/Engine.EAudioBusChannels
/// Size: 0x02
enum class EAudioBusChannels : uint8_t
{
	EAudioBusChannels__Mono                                                          = 0,
	EAudioBusChannels__Stereo                                                        = 1
};

/// Enum /Script/Engine.EAudioFaderCurve
/// Size: 0x05
enum class EAudioFaderCurve : uint8_t
{
	EAudioFaderCurve__Linear                                                         = 0,
	EAudioFaderCurve__Logarithmic                                                    = 1,
	EAudioFaderCurve__SCurve                                                         = 2,
	EAudioFaderCurve__Sin                                                            = 3,
	EAudioFaderCurve__Count                                                          = 4
};

/// Enum /Script/Engine.EAudioOutputTarget
/// Size: 0x03
enum class EAudioOutputTarget : uint8_t
{
	EAudioOutputTarget__Speaker                                                      = 0,
	EAudioOutputTarget__Controller                                                   = 1,
	EAudioOutputTarget__ControllerFallbackToSpeaker                                  = 2
};

/// Enum /Script/Engine.EMonoChannelUpmixMethod
/// Size: 0x03
enum class EMonoChannelUpmixMethod : uint8_t
{
	EMonoChannelUpmixMethod__Linear                                                  = 0,
	EMonoChannelUpmixMethod__EqualPower                                              = 1,
	EMonoChannelUpmixMethod__FullVolume                                              = 2
};

/// Enum /Script/Engine.EPanningMethod
/// Size: 0x02
enum class EPanningMethod : uint8_t
{
	EPanningMethod__Linear                                                           = 0,
	EPanningMethod__EqualPower                                                       = 1
};

/// Enum /Script/Engine.EVoiceSampleRate
/// Size: 0x02
enum class EVoiceSampleRate : uint32_t
{
	EVoiceSampleRate__Low16000Hz                                                     = 16000,
	EVoiceSampleRate__Normal24000Hz                                                  = 24000
};

/// Enum /Script/Engine.EAudioVolumeLocationState
/// Size: 0x02
enum class EAudioVolumeLocationState : uint8_t
{
	EAudioVolumeLocationState__InsideTheVolume                                       = 0,
	EAudioVolumeLocationState__OutsideTheVolume                                      = 1
};

/// Enum /Script/Engine.EBlendableLocation
/// Size: 0x09
enum class EBlendableLocation : uint8_t
{
	BL_AfterTonemapping                                                              = 0,
	BL_BeforeTonemapping                                                             = 1,
	BL_BeforeTranslucency                                                            = 2,
	BL_Distortion                                                                    = 3,
	BL_AfterUpscale                                                                  = 4,
	BL_BloomCombine                                                                  = 5,
	BL_HalfResSetup                                                                  = 6,
	BL_ReplacingTonemapper                                                           = 7,
	BL_SSRInput                                                                      = 8
};

/// Enum /Script/Engine.ENotifyTriggerMode
/// Size: 0x03
enum class ENotifyTriggerMode : uint8_t
{
	ENotifyTriggerMode__AllAnimations                                                = 0,
	ENotifyTriggerMode__HighestWeightedAnimation                                     = 1,
	ENotifyTriggerMode__None                                                         = 2
};

/// Enum /Script/Engine.EBlendSpaceAxis
/// Size: 0x04
enum class EBlendSpaceAxis : uint8_t
{
	BSA_None                                                                         = 0,
	BSA_X                                                                            = 1,
	BSA_Y                                                                            = 2,
	BSA_Max                                                                          = 3
};

/// Enum /Script/Engine.EBlueprintNativizationFlag
/// Size: 0x03
enum class EBlueprintNativizationFlag : uint8_t
{
	EBlueprintNativizationFlag__Disabled                                             = 0,
	EBlueprintNativizationFlag__Dependency                                           = 1,
	EBlueprintNativizationFlag__ExplicitlyEnabled                                    = 2
};

/// Enum /Script/Engine.EBlueprintCompileMode
/// Size: 0x03
enum class EBlueprintCompileMode : uint8_t
{
	EBlueprintCompileMode__Default                                                   = 0,
	EBlueprintCompileMode__Development                                               = 1,
	EBlueprintCompileMode__FinalRelease                                              = 2
};

/// Enum /Script/Engine.EBlueprintType
/// Size: 0x06
enum class EBlueprintType : uint8_t
{
	BPTYPE_Normal                                                                    = 0,
	BPTYPE_Const                                                                     = 1,
	BPTYPE_MacroLibrary                                                              = 2,
	BPTYPE_Interface                                                                 = 3,
	BPTYPE_LevelScript                                                               = 4,
	BPTYPE_FunctionLibrary                                                           = 5
};

/// Enum /Script/Engine.EBlueprintStatus
/// Size: 0x06
enum class EBlueprintStatus : uint8_t
{
	BS_Unknown                                                                       = 0,
	BS_Dirty                                                                         = 1,
	BS_Error                                                                         = 2,
	BS_UpToDate                                                                      = 3,
	BS_BeingCreated                                                                  = 4,
	BS_UpToDateWithWarnings                                                          = 5
};

/// Enum /Script/Engine.EDOFMode
/// Size: 0x07
enum class EDOFMode : uint8_t
{
	EDOFMode__Default                                                                = 0,
	EDOFMode__SixDOF                                                                 = 1,
	EDOFMode__YZPlane                                                                = 2,
	EDOFMode__XZPlane                                                                = 3,
	EDOFMode__XYPlane                                                                = 4,
	EDOFMode__CustomPlane                                                            = 5,
	EDOFMode__None                                                                   = 6
};

/// Enum /Script/Engine.EBrushType
/// Size: 0x03
enum class EBrushType : uint8_t
{
	Brush_Default                                                                    = 0,
	Brush_Add                                                                        = 1,
	Brush_Subtract                                                                   = 2
};

/// Enum /Script/Engine.ECsgOper
/// Size: 0x06
enum class ECsgOper : uint8_t
{
	CSG_Active                                                                       = 0,
	CSG_Add                                                                          = 1,
	CSG_Subtract                                                                     = 2,
	CSG_Intersect                                                                    = 3,
	CSG_Deintersect                                                                  = 4,
	CSG_None                                                                         = 5
};

/// Enum /Script/Engine.EInitialOscillatorOffset
/// Size: 0x02
enum class EInitialOscillatorOffset : uint8_t
{
	EOO_OffsetRandom                                                                 = 0,
	EOO_OffsetZero                                                                   = 1
};

/// Enum /Script/Engine.EOscillatorWaveform
/// Size: 0x02
enum class EOscillatorWaveform : uint8_t
{
	EOscillatorWaveform__SineWave                                                    = 0,
	EOscillatorWaveform__PerlinNoise                                                 = 1
};

/// Enum /Script/Engine.ECameraShakeDurationType
/// Size: 0x03
enum class ECameraShakeDurationType : uint8_t
{
	ECameraShakeDurationType__Fixed                                                  = 0,
	ECameraShakeDurationType__Infinite                                               = 1,
	ECameraShakeDurationType__Custom                                                 = 2
};

/// Enum /Script/Engine.ECameraShakeUpdateResultFlags
/// Size: 0x04
enum class ECameraShakeUpdateResultFlags : uint8_t
{
	ECameraShakeUpdateResultFlags__ApplyAsAbsolute                                   = 1,
	ECameraShakeUpdateResultFlags__SkipAutoScale                                     = 2,
	ECameraShakeUpdateResultFlags__SkipAutoPlaySpace                                 = 4,
	ECameraShakeUpdateResultFlags__Default                                           = 0
};

/// Enum /Script/Engine.ECameraShakeAttenuation
/// Size: 0x02
enum class ECameraShakeAttenuation : uint8_t
{
	ECameraShakeAttenuation__Linear                                                  = 0,
	ECameraShakeAttenuation__Quadratic                                               = 1
};

/// Enum /Script/Engine.ECameraAlphaBlendMode
/// Size: 0x02
enum class ECameraAlphaBlendMode : uint8_t
{
	ECameraAlphaBlendMode__CABM_Linear                                               = 0,
	ECameraAlphaBlendMode__CABM_Cubic                                                = 1
};

/// Enum /Script/Engine.ECameraShakePlaySpace
/// Size: 0x03
enum class ECameraShakePlaySpace : uint8_t
{
	ECameraShakePlaySpace__CameraLocal                                               = 0,
	ECameraShakePlaySpace__World                                                     = 1,
	ECameraShakePlaySpace__UserDefined                                               = 2
};

/// Enum /Script/Engine.ECameraProjectionMode
/// Size: 0x02
enum class ECameraProjectionMode : uint8_t
{
	ECameraProjectionMode__Perspective                                               = 0,
	ECameraProjectionMode__Orthographic                                              = 1
};

/// Enum /Script/Engine.ECloudStorageDelegate
/// Size: 0x07
enum class ECloudStorageDelegate : uint8_t
{
	CSD_KeyValueReadComplete                                                         = 0,
	CSD_KeyValueWriteComplete                                                        = 1,
	CSD_ValueChanged                                                                 = 2,
	CSD_DocumentQueryComplete                                                        = 3,
	CSD_DocumentReadComplete                                                         = 4,
	CSD_DocumentWriteComplete                                                        = 5,
	CSD_DocumentConflictDetected                                                     = 6
};

/// Enum /Script/Engine.EAngularDriveMode
/// Size: 0x02
enum class EAngularDriveMode : uint8_t
{
	EAngularDriveMode__SLERP                                                         = 0,
	EAngularDriveMode__TwistAndSwing                                                 = 1
};

/// Enum /Script/Engine.ECurveTableMode
/// Size: 0x03
enum class ECurveTableMode : uint8_t
{
	ECurveTableMode__Empty                                                           = 0,
	ECurveTableMode__SimpleCurves                                                    = 1,
	ECurveTableMode__RichCurves                                                      = 2
};

/// Enum /Script/Engine.ECustomAttributeBlendType
/// Size: 0x02
enum class ECustomAttributeBlendType : uint8_t
{
	ECustomAttributeBlendType__Override                                              = 0,
	ECustomAttributeBlendType__Blend                                                 = 1
};

/// Enum /Script/Engine.EEvaluateCurveTableResult
/// Size: 0x02
enum class EEvaluateCurveTableResult : uint8_t
{
	EEvaluateCurveTableResult__RowFound                                              = 0,
	EEvaluateCurveTableResult__RowNotFound                                           = 1
};

/// Enum /Script/Engine.EGrammaticalNumber
/// Size: 0x02
enum class EGrammaticalNumber : uint8_t
{
	EGrammaticalNumber__Singular                                                     = 0,
	EGrammaticalNumber__Plural                                                       = 1
};

/// Enum /Script/Engine.EGrammaticalGender
/// Size: 0x04
enum class EGrammaticalGender : uint8_t
{
	EGrammaticalGender__Neuter                                                       = 0,
	EGrammaticalGender__Masculine                                                    = 1,
	EGrammaticalGender__Feminine                                                     = 2,
	EGrammaticalGender__Mixed                                                        = 3
};

/// Enum /Script/Engine.DistributionParamMode
/// Size: 0x03
enum class DistributionParamMode : uint8_t
{
	DPM_Normal                                                                       = 0,
	DPM_Abs                                                                          = 1,
	DPM_Direct                                                                       = 2
};

/// Enum /Script/Engine.EDistributionVectorMirrorFlags
/// Size: 0x03
enum class EDistributionVectorMirrorFlags : uint8_t
{
	EDVMF_Same                                                                       = 0,
	EDVMF_Different                                                                  = 1,
	EDVMF_Mirror                                                                     = 2
};

/// Enum /Script/Engine.EDistributionVectorLockFlags
/// Size: 0x05
enum class EDistributionVectorLockFlags : uint8_t
{
	EDVLF_None                                                                       = 0,
	EDVLF_XY                                                                         = 1,
	EDVLF_XZ                                                                         = 2,
	EDVLF_YZ                                                                         = 3,
	EDVLF_XYZ                                                                        = 4
};

/// Enum /Script/Engine.ENodeEnabledState
/// Size: 0x03
enum class ENodeEnabledState : uint8_t
{
	ENodeEnabledState__Enabled                                                       = 0,
	ENodeEnabledState__Disabled                                                      = 1,
	ENodeEnabledState__DevelopmentOnly                                               = 2
};

/// Enum /Script/Engine.ENodeAdvancedPins
/// Size: 0x03
enum class ENodeAdvancedPins : uint8_t
{
	ENodeAdvancedPins__NoPins                                                        = 0,
	ENodeAdvancedPins__Shown                                                         = 1,
	ENodeAdvancedPins__Hidden                                                        = 2
};

/// Enum /Script/Engine.ENodeTitleType
/// Size: 0x05
enum class ENodeTitleType : uint8_t
{
	ENodeTitleType__FullTitle                                                        = 0,
	ENodeTitleType__ListView                                                         = 1,
	ENodeTitleType__EditableTitle                                                    = 2,
	ENodeTitleType__MenuTitle                                                        = 3,
	ENodeTitleType__MAX_TitleTypes                                                   = 4
};

/// Enum /Script/Engine.EPinContainerType
/// Size: 0x04
enum class EPinContainerType : uint8_t
{
	EPinContainerType__None                                                          = 0,
	EPinContainerType__Array                                                         = 1,
	EPinContainerType__Set                                                           = 2,
	EPinContainerType__Map                                                           = 3
};

/// Enum /Script/Engine.EEdGraphPinDirection
/// Size: 0x02
enum class EEdGraphPinDirection : uint8_t
{
	EGPD_Input                                                                       = 0,
	EGPD_Output                                                                      = 1
};

/// Enum /Script/Engine.EBlueprintPinStyleType
/// Size: 0x02
enum class EBlueprintPinStyleType : uint8_t
{
	BPST_Original                                                                    = 0,
	BPST_VariantA                                                                    = 1
};

/// Enum /Script/Engine.ECanCreateConnectionResponse
/// Size: 0x06
enum class ECanCreateConnectionResponse : uint8_t
{
	CONNECT_RESPONSE_MAKE                                                            = 0,
	CONNECT_RESPONSE_DISALLOW                                                        = 1,
	CONNECT_RESPONSE_BREAK_OTHERS_A                                                  = 2,
	CONNECT_RESPONSE_BREAK_OTHERS_B                                                  = 3,
	CONNECT_RESPONSE_BREAK_OTHERS_AB                                                 = 4,
	CONNECT_RESPONSE_MAKE_WITH_CONVERSION_NODE                                       = 5
};

/// Enum /Script/Engine.EGraphType
/// Size: 0x05
enum class EGraphType : uint8_t
{
	GT_Function                                                                      = 0,
	GT_Ubergraph                                                                     = 1,
	GT_Macro                                                                         = 2,
	GT_Animation                                                                     = 3,
	GT_StateMachine                                                                  = 4
};

/// Enum /Script/Engine.ETransitionType
/// Size: 0x07
enum class ETransitionType : uint8_t
{
	ETransitionType__None                                                            = 0,
	ETransitionType__Paused                                                          = 1,
	ETransitionType__Loading                                                         = 2,
	ETransitionType__Saving                                                          = 3,
	ETransitionType__Connecting                                                      = 4,
	ETransitionType__Precaching                                                      = 5,
	ETransitionType__WaitingToConnect                                                = 6
};

/// Enum /Script/Engine.EFullyLoadPackageType
/// Size: 0x05
enum class EFullyLoadPackageType : uint8_t
{
	FULLYLOAD_Map                                                                    = 0,
	FULLYLOAD_Game_PreLoadClass                                                      = 1,
	FULLYLOAD_Game_PostLoadClass                                                     = 2,
	FULLYLOAD_Always                                                                 = 3,
	FULLYLOAD_Mutator                                                                = 4
};

/// Enum /Script/Engine.EViewModeIndex
/// Size: 0x28
enum class EViewModeIndex : uint8_t
{
	VMI_BrushWireframe                                                               = 0,
	VMI_Wireframe                                                                    = 1,
	VMI_Unlit                                                                        = 2,
	VMI_Lit                                                                          = 3,
	VMI_Lit_DetailLighting                                                           = 4,
	VMI_LightingOnly                                                                 = 5,
	VMI_LightComplexity                                                              = 6,
	VMI_ShaderComplexity                                                             = 8,
	VMI_LightmapDensity                                                              = 9,
	VMI_LitLightmapDensity                                                           = 10,
	VMI_ReflectionOverride                                                           = 11,
	VMI_VisualizeBuffer                                                              = 12,
	VMI_StationaryLightOverlap                                                       = 14,
	VMI_CollisionPawn                                                                = 15,
	VMI_CollisionVisibility                                                          = 16,
	VMI_LODColoration                                                                = 18,
	VMI_QuadOverdraw                                                                 = 19,
	VMI_PrimitiveDistanceAccuracy                                                    = 20,
	VMI_MeshUVDensityAccuracy                                                        = 21,
	VMI_ShaderComplexityWithQuadOverdraw                                             = 22,
	VMI_HLODColoration                                                               = 23,
	VMI_GroupLODColoration                                                           = 24,
	VMI_MaterialTextureScaleAccuracy                                                 = 25,
	VMI_RequiredTextureResolution                                                    = 26,
	VMI_PathTracing                                                                  = 27,
	VMI_RayTracingDebug                                                              = 28,
	VMI_Max                                                                          = 29,
	VMI_Unknown                                                                      = 255
};

/// Enum /Script/Engine.EDemoPlayFailure
/// Size: 0x09
enum class EDemoPlayFailure : uint8_t
{
	EDemoPlayFailure__Generic                                                        = 0,
	EDemoPlayFailure__DemoNotFound                                                   = 1,
	EDemoPlayFailure__Corrupt                                                        = 2,
	EDemoPlayFailure__InvalidVersion                                                 = 3,
	EDemoPlayFailure__InitBase                                                       = 4,
	EDemoPlayFailure__GameSpecificHeader                                             = 5,
	EDemoPlayFailure__ReplayStreamerInternal                                         = 6,
	EDemoPlayFailure__LoadMap                                                        = 7,
	EDemoPlayFailure__Serialization                                                  = 8
};

/// Enum /Script/Engine.ETravelType
/// Size: 0x03
enum class ETravelType : uint8_t
{
	TRAVEL_Absolute                                                                  = 0,
	TRAVEL_Partial                                                                   = 1,
	TRAVEL_Relative                                                                  = 2
};

/// Enum /Script/Engine.ENetworkLagState
/// Size: 0x02
enum class ENetworkLagState : uint8_t
{
	ENetworkLagState__NotLagging                                                     = 0,
	ENetworkLagState__Lagging                                                        = 1
};

/// Enum /Script/Engine.EMouseCaptureMode
/// Size: 0x05
enum class EMouseCaptureMode : uint8_t
{
	EMouseCaptureMode__NoCapture                                                     = 0,
	EMouseCaptureMode__CapturePermanently                                            = 1,
	EMouseCaptureMode__CapturePermanently_IncludingInitialMouseDown                  = 2,
	EMouseCaptureMode__CaptureDuringMouseDown                                        = 3,
	EMouseCaptureMode__CaptureDuringRightMouseDown                                   = 4
};

/// Enum /Script/Engine.ECustomTimeStepSynchronizationState
/// Size: 0x04
enum class ECustomTimeStepSynchronizationState : uint8_t
{
	ECustomTimeStepSynchronizationState__Closed                                      = 0,
	ECustomTimeStepSynchronizationState__Error                                       = 1,
	ECustomTimeStepSynchronizationState__Synchronized                                = 2,
	ECustomTimeStepSynchronizationState__Synchronizing                               = 3
};

/// Enum /Script/Engine.EMeshBufferAccess
/// Size: 0x02
enum class EMeshBufferAccess : uint8_t
{
	EMeshBufferAccess__Default                                                       = 0,
	EMeshBufferAccess__ForceCPUAndGPU                                                = 1
};

/// Enum /Script/Engine.EComponentSocketType
/// Size: 0x03
enum class EComponentSocketType : uint8_t
{
	EComponentSocketType__Invalid                                                    = 0,
	EComponentSocketType__Bone                                                       = 1,
	EComponentSocketType__Socket                                                     = 2
};

/// Enum /Script/Engine.EPhysicalMaterialMaskColor
/// Size: 0x08
enum class EPhysicalMaterialMaskColor : uint8_t
{
	EPhysicalMaterialMaskColor__Red                                                  = 0,
	EPhysicalMaterialMaskColor__Green                                                = 1,
	EPhysicalMaterialMaskColor__Blue                                                 = 2,
	EPhysicalMaterialMaskColor__Cyan                                                 = 3,
	EPhysicalMaterialMaskColor__Magenta                                              = 4,
	EPhysicalMaterialMaskColor__Yellow                                               = 5,
	EPhysicalMaterialMaskColor__White                                                = 6,
	EPhysicalMaterialMaskColor__Black                                                = 7
};

/// Enum /Script/Engine.EWalkableSlopeBehavior
/// Size: 0x05
enum class EWalkableSlopeBehavior : uint8_t
{
	WalkableSlope_Default                                                            = 0,
	WalkableSlope_Increase                                                           = 1,
	WalkableSlope_Decrease                                                           = 2,
	WalkableSlope_Unwalkable                                                         = 3,
	WalkableSlope_Max                                                                = 4
};

/// Enum /Script/Engine.EAutoPossessAI
/// Size: 0x04
enum class EAutoPossessAI : uint8_t
{
	EAutoPossessAI__Disabled                                                         = 0,
	EAutoPossessAI__PlacedInWorld                                                    = 1,
	EAutoPossessAI__Spawned                                                          = 2,
	EAutoPossessAI__PlacedInWorldOrSpawned                                           = 3
};

/// Enum /Script/Engine.EUpdateRateShiftBucket
/// Size: 0x07
enum class EUpdateRateShiftBucket : uint8_t
{
	EUpdateRateShiftBucket__ShiftBucket0                                             = 0,
	EUpdateRateShiftBucket__ShiftBucket1                                             = 1,
	EUpdateRateShiftBucket__ShiftBucket2                                             = 2,
	EUpdateRateShiftBucket__ShiftBucket3                                             = 3,
	EUpdateRateShiftBucket__ShiftBucket4                                             = 4,
	EUpdateRateShiftBucket__ShiftBucket5                                             = 5,
	EUpdateRateShiftBucket__ShiftBucketMax                                           = 6
};

/// Enum /Script/Engine.EShadowMapFlags
/// Size: 0x02
enum class EShadowMapFlags : uint8_t
{
	SMF_None                                                                         = 0,
	SMF_Streamed                                                                     = 1
};

/// Enum /Script/Engine.ELightMapPaddingType
/// Size: 0x03
enum class ELightMapPaddingType : uint8_t
{
	LMPT_NormalPadding                                                               = 0,
	LMPT_PrePadding                                                                  = 1,
	LMPT_NoPadding                                                                   = 2
};

/// Enum /Script/Engine.ECollisionEnabled
/// Size: 0x04
enum class ECollisionEnabled : uint8_t
{
	ECollisionEnabled__NoCollision                                                   = 0,
	ECollisionEnabled__QueryOnly                                                     = 1,
	ECollisionEnabled__PhysicsOnly                                                   = 2,
	ECollisionEnabled__QueryAndPhysics                                               = 3
};

/// Enum /Script/Engine.ETimelineSigType
/// Size: 0x05
enum class ETimelineSigType : uint8_t
{
	ETS_EventSignature                                                               = 0,
	ETS_FloatSignature                                                               = 1,
	ETS_VectorSignature                                                              = 2,
	ETS_LinearColorSignature                                                         = 3,
	ETS_InvalidSignature                                                             = 4
};

/// Enum /Script/Engine.EFilterInterpolationType
/// Size: 0x03
enum class EFilterInterpolationType : uint8_t
{
	BSIT_Average                                                                     = 0,
	BSIT_Linear                                                                      = 1,
	BSIT_Cubic                                                                       = 2
};

/// Enum /Script/Engine.ECollisionResponse
/// Size: 0x03
enum class ECollisionResponse : uint8_t
{
	ECR_Ignore                                                                       = 0,
	ECR_Overlap                                                                      = 1,
	ECR_Block                                                                        = 2
};

/// Enum /Script/Engine.EOverlapFilterOption
/// Size: 0x03
enum class EOverlapFilterOption : uint8_t
{
	OverlapFilter_All                                                                = 0,
	OverlapFilter_DynamicOnly                                                        = 1,
	OverlapFilter_StaticOnly                                                         = 2
};

/// Enum /Script/Engine.ECollisionChannel
/// Size: 0x33
enum class ECollisionChannel : uint8_t
{
	ECC_WorldStatic                                                                  = 0,
	ECC_WorldDynamic                                                                 = 1,
	ECC_Pawn                                                                         = 2,
	ECC_Visibility                                                                   = 3,
	ECC_Camera                                                                       = 4,
	ECC_PhysicsBody                                                                  = 5,
	ECC_Vehicle                                                                      = 6,
	ECC_Destructible                                                                 = 7,
	ECC_EngineTraceChannel1                                                          = 8,
	ECC_EngineTraceChannel2                                                          = 9,
	ECC_EngineTraceChannel3                                                          = 10,
	ECC_EngineTraceChannel4                                                          = 11,
	ECC_EngineTraceChannel5                                                          = 12,
	ECC_EngineTraceChannel6                                                          = 13,
	ECC_GameTraceChannel1                                                            = 14,
	ECC_GameTraceChannel2                                                            = 15,
	ECC_GameTraceChannel3                                                            = 16,
	ECC_GameTraceChannel4                                                            = 17,
	ECC_GameTraceChannel5                                                            = 18,
	ECC_GameTraceChannel6                                                            = 19,
	ECC_GameTraceChannel7                                                            = 20,
	ECC_GameTraceChannel8                                                            = 21,
	ECC_GameTraceChannel9                                                            = 22,
	ECC_GameTraceChannel10                                                           = 23,
	ECC_GameTraceChannel11                                                           = 24,
	ECC_GameTraceChannel12                                                           = 25,
	ECC_GameTraceChannel13                                                           = 26,
	ECC_GameTraceChannel14                                                           = 27,
	ECC_GameTraceChannel15                                                           = 28,
	ECC_GameTraceChannel16                                                           = 29,
	ECC_GameTraceChannel17                                                           = 30,
	ECC_GameTraceChannel18                                                           = 31,
	ECC_OverlapAll_Deprecated                                                        = 32
};

/// Enum /Script/Engine.ENetworkSmoothingMode
/// Size: 0x04
enum class ENetworkSmoothingMode : uint8_t
{
	ENetworkSmoothingMode__Disabled                                                  = 0,
	ENetworkSmoothingMode__Linear                                                    = 1,
	ENetworkSmoothingMode__Exponential                                               = 2,
	ENetworkSmoothingMode__Replay                                                    = 3
};

/// Enum /Script/Engine.ELightingBuildQuality
/// Size: 0x04
enum class ELightingBuildQuality : uint8_t
{
	Quality_Preview                                                                  = 0,
	Quality_Medium                                                                   = 1,
	Quality_High                                                                     = 2,
	Quality_Production                                                               = 3
};

/// Enum /Script/Engine.EMaterialShadingRate
/// Size: 0x08
enum class EMaterialShadingRate : uint8_t
{
	MSR_1x1                                                                          = 0,
	MSR_2x1                                                                          = 1,
	MSR_1x2                                                                          = 2,
	MSR_2x2                                                                          = 3,
	MSR_4x2                                                                          = 4,
	MSR_2x4                                                                          = 5,
	MSR_4x4                                                                          = 6,
	MSR_Count                                                                        = 7
};

/// Enum /Script/Engine.EMaterialStencilCompare
/// Size: 0x09
enum class EMaterialStencilCompare : uint8_t
{
	MSC_Less                                                                         = 0,
	MSC_LessEqual                                                                    = 1,
	MSC_Greater                                                                      = 2,
	MSC_GreaterEqual                                                                 = 3,
	MSC_Equal                                                                        = 4,
	MSC_NotEqual                                                                     = 5,
	MSC_Never                                                                        = 6,
	MSC_Always                                                                       = 7,
	MSC_Count                                                                        = 8
};

/// Enum /Script/Engine.EMaterialSamplerType
/// Size: 0x17
enum class EMaterialSamplerType : uint8_t
{
	SAMPLERTYPE_Color                                                                = 0,
	SAMPLERTYPE_Grayscale                                                            = 1,
	SAMPLERTYPE_Alpha                                                                = 2,
	SAMPLERTYPE_Normal                                                               = 3,
	SAMPLERTYPE_Masks                                                                = 4,
	SAMPLERTYPE_DistanceFieldFont                                                    = 5,
	SAMPLERTYPE_LinearColor                                                          = 6,
	SAMPLERTYPE_LinearGrayscale                                                      = 7,
	SAMPLERTYPE_Data                                                                 = 8,
	SAMPLERTYPE_External                                                             = 9,
	SAMPLERTYPE_VirtualColor                                                         = 10,
	SAMPLERTYPE_VirtualGrayscale                                                     = 11,
	SAMPLERTYPE_VirtualAlpha                                                         = 12,
	SAMPLERTYPE_VirtualNormal                                                        = 13,
	SAMPLERTYPE_VirtualMasks                                                         = 14,
	SAMPLERTYPE_VirtualLinearColor                                                   = 15,
	SAMPLERTYPE_VirtualLinearGrayscale                                               = 16
};

/// Enum /Script/Engine.EMaterialTessellationMode
/// Size: 0x03
enum class EMaterialTessellationMode : uint8_t
{
	MTM_NoTessellation                                                               = 0,
	MTM_FlatTessellation                                                             = 1,
	MTM_PNTriangles                                                                  = 2
};

/// Enum /Script/Engine.EMaterialShadingModel
/// Size: 0x14
enum class EMaterialShadingModel : uint8_t
{
	MSM_Unlit                                                                        = 0,
	MSM_DefaultLit                                                                   = 1,
	MSM_Subsurface                                                                   = 2,
	MSM_PreintegratedSkin                                                            = 3,
	MSM_ClearCoat                                                                    = 4,
	MSM_SubsurfaceProfile                                                            = 5,
	MSM_TwoSidedFoliage                                                              = 6,
	MSM_Hair                                                                         = 7,
	MSM_Cloth                                                                        = 8,
	MSM_Eye                                                                          = 9,
	MSM_SingleLayerWater                                                             = 10,
	MSM_ThinTranslucent                                                              = 11,
	MSM_NUM                                                                          = 12,
	MSM_FromMaterialExpression                                                       = 13
};

/// Enum /Script/Engine.EParticleCollisionMode
/// Size: 0x02
enum class EParticleCollisionMode : uint8_t
{
	EParticleCollisionMode__SceneDepth                                               = 0,
	EParticleCollisionMode__DistanceField                                            = 1
};

/// Enum /Script/Engine.ETrailWidthMode
/// Size: 0x03
enum class ETrailWidthMode : uint8_t
{
	ETrailWidthMode_FromCentre                                                       = 0,
	ETrailWidthMode_FromFirst                                                        = 1,
	ETrailWidthMode_FromSecond                                                       = 2
};

/// Enum /Script/Engine.EGBufferFormat
/// Size: 0x04
enum class EGBufferFormat : uint8_t
{
	EGBufferFormat__Force8BitsPerChannel                                             = 0,
	EGBufferFormat__Default                                                          = 1,
	EGBufferFormat__HighPrecisionNormals                                             = 3,
	EGBufferFormat__Force16BitsPerChannel                                            = 5
};

/// Enum /Script/Engine.ESceneCaptureCompositeMode
/// Size: 0x03
enum class ESceneCaptureCompositeMode : uint8_t
{
	SCCM_Overwrite                                                                   = 0,
	SCCM_Additive                                                                    = 1,
	SCCM_Composite                                                                   = 2
};

/// Enum /Script/Engine.ESceneCaptureSource
/// Size: 0x10
enum class ESceneCaptureSource : uint8_t
{
	SCS_SceneColorHDR                                                                = 0,
	SCS_SceneColorHDRNoAlpha                                                         = 1,
	SCS_FinalColorLDR                                                                = 2,
	SCS_SceneColorSceneDepth                                                         = 3,
	SCS_SceneDepth                                                                   = 4,
	SCS_DeviceDepth                                                                  = 5,
	SCS_Normal                                                                       = 6,
	SCS_BaseColor                                                                    = 7,
	SCS_FinalColorHDR                                                                = 8,
	SCS_FinalToneCurveHDR                                                            = 9
};

/// Enum /Script/Engine.ETranslucentSortPolicy
/// Size: 0x03
enum class ETranslucentSortPolicy : uint8_t
{
	ETranslucentSortPolicy__SortByDistance                                           = 0,
	ETranslucentSortPolicy__SortByProjectedZ                                         = 1,
	ETranslucentSortPolicy__SortAlongAxis                                            = 2
};

/// Enum /Script/Engine.ERefractionMode
/// Size: 0x02
enum class ERefractionMode : uint8_t
{
	RM_IndexOfRefraction                                                             = 0,
	RM_PixelNormalOffset                                                             = 1
};

/// Enum /Script/Engine.ETranslucencyLightingMode
/// Size: 0x06
enum class ETranslucencyLightingMode : uint8_t
{
	TLM_VolumetricNonDirectional                                                     = 0,
	TLM_VolumetricDirectional                                                        = 1,
	TLM_VolumetricPerVertexNonDirectional                                            = 2,
	TLM_VolumetricPerVertexDirectional                                               = 3,
	TLM_Surface                                                                      = 4,
	TLM_SurfacePerPixelLighting                                                      = 5
};

/// Enum /Script/Engine.ESamplerSourceMode
/// Size: 0x03
enum class ESamplerSourceMode : uint8_t
{
	SSM_FromTextureAsset                                                             = 0,
	SSM_Wrap_WorldGroupSettings                                                      = 1,
	SSM_Clamp_WorldGroupSettings                                                     = 2
};

/// Enum /Script/Engine.EMobileMaterialType
/// Size: 0x22
enum class EMobileMaterialType : uint8_t
{
	MMT_Default                                                                      = 0,
	MMT_PBR                                                                          = 1,
	MMT_Metal                                                                        = 2,
	MMT_Skin                                                                         = 3,
	MMT_Face                                                                         = 4,
	MMT_Hair                                                                         = 5,
	MMT_Eye                                                                          = 6,
	MMT_Cel                                                                          = 7,
	MMT_Sheen                                                                        = 8,
	MMT_Fabric                                                                       = 9,
	MMT_Foliage                                                                      = 10,
	MMT_Particle                                                                     = 11,
	MMT_Water                                                                        = 12,
	MMT_PlaceHold0                                                                   = 13,
	MMT_PlaceHold1                                                                   = 14,
	MMT_PlaceHold2                                                                   = 15,
	MMT_PlaceHold3                                                                   = 16,
	MMT_PlaceHold4                                                                   = 17,
	MMT_PlaceHold5                                                                   = 18,
	MMT_Outline                                                                      = 19,
	MMT_DualNormal                                                                   = 20,
	MMT_Billboard                                                                    = 21
};

/// Enum /Script/Engine.EBlendMode
/// Size: 0x07
enum class EBlendMode : uint8_t
{
	BLEND_Opaque                                                                     = 0,
	BLEND_Masked                                                                     = 1,
	BLEND_Translucent                                                                = 2,
	BLEND_Additive                                                                   = 3,
	BLEND_Modulate                                                                   = 4,
	BLEND_AlphaComposite                                                             = 5,
	BLEND_AlphaHoldout                                                               = 6
};

/// Enum /Script/Engine.EOcclusionCombineMode
/// Size: 0x02
enum class EOcclusionCombineMode : uint8_t
{
	OCM_Minimum                                                                      = 0,
	OCM_Multiply                                                                     = 1
};

/// Enum /Script/Engine.ELightmapType
/// Size: 0x03
enum class ELightmapType : uint8_t
{
	ELightmapType__Default                                                           = 0,
	ELightmapType__ForceSurface                                                      = 1,
	ELightmapType__ForceVolumetric                                                   = 2
};

/// Enum /Script/Engine.EIndirectLightingCacheQuality
/// Size: 0x03
enum class EIndirectLightingCacheQuality : uint8_t
{
	ILCQ_Off                                                                         = 0,
	ILCQ_Point                                                                       = 1,
	ILCQ_Volume                                                                      = 2
};

/// Enum /Script/Engine.ESceneDepthPriorityGroup
/// Size: 0x02
enum class ESceneDepthPriorityGroup : uint8_t
{
	SDPG_World                                                                       = 0,
	SDPG_Foreground                                                                  = 1
};

/// Enum /Script/Engine.EAspectRatioAxisConstraint
/// Size: 0x03
enum class EAspectRatioAxisConstraint : uint8_t
{
	AspectRatio_MaintainYFOV                                                         = 0,
	AspectRatio_MaintainXFOV                                                         = 1,
	AspectRatio_MajorAxisFOV                                                         = 2
};

/// Enum /Script/Engine.EFontCacheType
/// Size: 0x02
enum class EFontCacheType : uint8_t
{
	EFontCacheType__Offline                                                          = 0,
	EFontCacheType__Runtime                                                          = 1
};

/// Enum /Script/Engine.EFontImportCharacterSet
/// Size: 0x03
enum class EFontImportCharacterSet : uint8_t
{
	FontICS_Default                                                                  = 0,
	FontICS_Ansi                                                                     = 1,
	FontICS_Symbol                                                                   = 2
};

/// Enum /Script/Engine.EStandbyType
/// Size: 0x03
enum class EStandbyType : uint8_t
{
	STDBY_Rx                                                                         = 0,
	STDBY_Tx                                                                         = 1,
	STDBY_BadPing                                                                    = 2
};

/// Enum /Script/Engine.ESuggestProjVelocityTraceOption
/// Size: 0x03
enum class ESuggestProjVelocityTraceOption : uint8_t
{
	ESuggestProjVelocityTraceOption__DoNotTrace                                      = 0,
	ESuggestProjVelocityTraceOption__TraceFullPath                                   = 1,
	ESuggestProjVelocityTraceOption__OnlyTraceWhileAscending                         = 2
};

/// Enum /Script/Engine.EWindowMode
/// Size: 0x03
enum class EWindowMode : uint8_t
{
	EWindowMode__Fullscreen                                                          = 0,
	EWindowMode__WindowedFullscreen                                                  = 1,
	EWindowMode__Windowed                                                            = 2
};

/// Enum /Script/Engine.EHitProxyPriority
/// Size: 0x04
enum class EHitProxyPriority : uint8_t
{
	HPP_World                                                                        = 0,
	HPP_Wireframe                                                                    = 1,
	HPP_Foreground                                                                   = 2,
	HPP_UI                                                                           = 3
};

/// Enum /Script/Engine.EImportanceWeight
/// Size: 0x05
enum class EImportanceWeight : uint8_t
{
	EImportanceWeight__Luminance                                                     = 0,
	EImportanceWeight__Red                                                           = 1,
	EImportanceWeight__Green                                                         = 2,
	EImportanceWeight__Blue                                                          = 3,
	EImportanceWeight__Alpha                                                         = 4
};

/// Enum /Script/Engine.EAdManagerDelegate
/// Size: 0x02
enum class EAdManagerDelegate : uint8_t
{
	AMD_ClickedBanner                                                                = 0,
	AMD_UserClosedAd                                                                 = 1
};

/// Enum /Script/Engine.EControllerAnalogStick
/// Size: 0x02
enum class EControllerAnalogStick : uint8_t
{
	EControllerAnalogStick__CAS_LeftStick                                            = 0,
	EControllerAnalogStick__CAS_RightStick                                           = 1
};

/// Enum /Script/Engine.EAnimAlphaInputType
/// Size: 0x03
enum class EAnimAlphaInputType : uint8_t
{
	EAnimAlphaInputType__Float                                                       = 0,
	EAnimAlphaInputType__Bool                                                        = 1,
	EAnimAlphaInputType__Curve                                                       = 2
};

/// Enum /Script/Engine.ETrackActiveCondition
/// Size: 0x03
enum class ETrackActiveCondition : uint8_t
{
	ETAC_Always                                                                      = 0,
	ETAC_GoreEnabled                                                                 = 1,
	ETAC_GoreDisabled                                                                = 2
};

/// Enum /Script/Engine.EInterpTrackMoveRotMode
/// Size: 0x03
enum class EInterpTrackMoveRotMode : uint8_t
{
	IMR_Keyframed                                                                    = 0,
	IMR_LookAtGroup                                                                  = 1,
	IMR_Ignore                                                                       = 2
};

/// Enum /Script/Engine.EInterpMoveAxis
/// Size: 0x06
enum class EInterpMoveAxis : uint8_t
{
	AXIS_TranslationX                                                                = 0,
	AXIS_TranslationY                                                                = 1,
	AXIS_TranslationZ                                                                = 2,
	AXIS_RotationX                                                                   = 3,
	AXIS_RotationY                                                                   = 4,
	AXIS_RotationZ                                                                   = 5
};

/// Enum /Script/Engine.ETrackToggleAction
/// Size: 0x04
enum class ETrackToggleAction : uint8_t
{
	ETTA_Off                                                                         = 0,
	ETTA_On                                                                          = 1,
	ETTA_Toggle                                                                      = 2,
	ETTA_Trigger                                                                     = 3
};

/// Enum /Script/Engine.EVisibilityTrackCondition
/// Size: 0x03
enum class EVisibilityTrackCondition : uint8_t
{
	EVTC_Always                                                                      = 0,
	EVTC_GoreEnabled                                                                 = 1,
	EVTC_GoreDisabled                                                                = 2
};

/// Enum /Script/Engine.EVisibilityTrackAction
/// Size: 0x03
enum class EVisibilityTrackAction : uint8_t
{
	EVTA_Hide                                                                        = 0,
	EVTA_Show                                                                        = 1,
	EVTA_Toggle                                                                      = 2
};

/// Enum /Script/Engine.ESlateGesture
/// Size: 0x06
enum class ESlateGesture : uint8_t
{
	ESlateGesture__None                                                              = 0,
	ESlateGesture__Scroll                                                            = 1,
	ESlateGesture__Magnify                                                           = 2,
	ESlateGesture__Swipe                                                             = 3,
	ESlateGesture__Rotate                                                            = 4,
	ESlateGesture__LongPress                                                         = 5
};

/// Enum /Script/Engine.EMIDCreationFlags
/// Size: 0x02
enum class EMIDCreationFlags : uint8_t
{
	EMIDCreationFlags__None                                                          = 0,
	EMIDCreationFlags__Transient                                                     = 1
};

/// Enum /Script/Engine.EMatrixColumns
/// Size: 0x04
enum class EMatrixColumns : uint8_t
{
	EMatrixColumns__First                                                            = 0,
	EMatrixColumns__Second                                                           = 1,
	EMatrixColumns__Third                                                            = 2,
	EMatrixColumns__Fourth                                                           = 3
};

/// Enum /Script/Engine.ELerpInterpolationMode
/// Size: 0x03
enum class ELerpInterpolationMode : uint8_t
{
	ELerpInterpolationMode__QuatInterp                                               = 0,
	ELerpInterpolationMode__EulerInterp                                              = 1,
	ELerpInterpolationMode__DualQuatInterp                                           = 2
};

/// Enum /Script/Engine.EEasingFunc
/// Size: 0x14
enum class EEasingFunc : uint8_t
{
	EEasingFunc__Linear                                                              = 0,
	EEasingFunc__Step                                                                = 1,
	EEasingFunc__SinusoidalIn                                                        = 2,
	EEasingFunc__SinusoidalOut                                                       = 3,
	EEasingFunc__SinusoidalInOut                                                     = 4,
	EEasingFunc__EaseIn                                                              = 5,
	EEasingFunc__EaseOut                                                             = 6,
	EEasingFunc__EaseInOut                                                           = 7,
	EEasingFunc__ExpoIn                                                              = 8,
	EEasingFunc__ExpoOut                                                             = 9,
	EEasingFunc__ExpoInOut                                                           = 10,
	EEasingFunc__CircularIn                                                          = 11,
	EEasingFunc__CircularOut                                                         = 12,
	EEasingFunc__CircularInOut                                                       = 13
};

/// Enum /Script/Engine.ERoundingMode
/// Size: 0x07
enum class ERoundingMode : uint8_t
{
	HalfToEven                                                                       = 0,
	HalfFromZero                                                                     = 1,
	HalfToZero                                                                       = 2,
	FromZero                                                                         = 3,
	ToZero                                                                           = 4,
	ToNegativeInfinity                                                               = 5,
	ToPositiveInfinity                                                               = 6
};

/// Enum /Script/Engine.EStreamingVolumeUsage
/// Size: 0x05
enum class EStreamingVolumeUsage : uint8_t
{
	SVB_Loading                                                                      = 0,
	SVB_LoadingAndVisibility                                                         = 1,
	SVB_VisibilityBlockingOnLoad                                                     = 2,
	SVB_BlockingOnLoad                                                               = 3,
	SVB_LoadingNotVisible                                                            = 4
};

/// Enum /Script/Engine.ESyncOption
/// Size: 0x03
enum class ESyncOption : uint8_t
{
	ESyncOption__Drive                                                               = 0,
	ESyncOption__Passive                                                             = 1,
	ESyncOption__Disabled                                                            = 2
};

/// Enum /Script/Engine.EMaterialDecalResponse
/// Size: 0x08
enum class EMaterialDecalResponse : uint8_t
{
	MDR_None                                                                         = 0,
	MDR_ColorNormalRoughness                                                         = 1,
	MDR_Color                                                                        = 2,
	MDR_ColorNormal                                                                  = 3,
	MDR_ColorRoughness                                                               = 4,
	MDR_Normal                                                                       = 5,
	MDR_NormalRoughness                                                              = 6,
	MDR_Roughness                                                                    = 7
};

/// Enum /Script/Engine.EDecalBlendMode
/// Size: 0x17
enum class EDecalBlendMode : uint8_t
{
	DBM_Translucent                                                                  = 0,
	DBM_Stain                                                                        = 1,
	DBM_Normal                                                                       = 2,
	DBM_Emissive                                                                     = 3,
	DBM_DBuffer_ColorNormalRoughness                                                 = 4,
	DBM_DBuffer_Color                                                                = 5,
	DBM_DBuffer_ColorNormal                                                          = 6,
	DBM_DBuffer_ColorRoughness                                                       = 7,
	DBM_DBuffer_Normal                                                               = 8,
	DBM_DBuffer_NormalRoughness                                                      = 9,
	DBM_DBuffer_Roughness                                                            = 10,
	DBM_DBuffer_Emissive                                                             = 11,
	DBM_DBuffer_AlphaComposite                                                       = 12,
	DBM_DBuffer_EmissiveAlphaComposite                                               = 13,
	DBM_Volumetric_DistanceFunction                                                  = 14,
	DBM_AlphaComposite                                                               = 15,
	DBM_AmbientOcclusion                                                             = 16
};

/// Enum /Script/Engine.ETextureColorChannel
/// Size: 0x04
enum class ETextureColorChannel : uint8_t
{
	TCC_Red                                                                          = 0,
	TCC_Green                                                                        = 1,
	TCC_Blue                                                                         = 2,
	TCC_Alpha                                                                        = 3
};

/// Enum /Script/Engine.EMaterialAttributeBlend
/// Size: 0x03
enum class EMaterialAttributeBlend : uint8_t
{
	EMaterialAttributeBlend__Blend                                                   = 0,
	EMaterialAttributeBlend__UseA                                                    = 1,
	EMaterialAttributeBlend__UseB                                                    = 2
};

/// Enum /Script/Engine.EChannelMaskParameterColor
/// Size: 0x04
enum class EChannelMaskParameterColor : uint8_t
{
	EChannelMaskParameterColor__Red                                                  = 0,
	EChannelMaskParameterColor__Green                                                = 1,
	EChannelMaskParameterColor__Blue                                                 = 2,
	EChannelMaskParameterColor__Alpha                                                = 3
};

/// Enum /Script/Engine.EClampMode
/// Size: 0x03
enum class EClampMode : uint8_t
{
	CMODE_Clamp                                                                      = 0,
	CMODE_ClampMin                                                                   = 1,
	CMODE_ClampMax                                                                   = 2
};

/// Enum /Script/Engine.ECustomMaterialOutputType
/// Size: 0x05
enum class ECustomMaterialOutputType : uint8_t
{
	CMOT_Float1                                                                      = 0,
	CMOT_Float2                                                                      = 1,
	CMOT_Float3                                                                      = 2,
	CMOT_Float4                                                                      = 3,
	CMOT_MaterialAttributes                                                          = 4
};

/// Enum /Script/Engine.EDepthOfFieldFunctionValue
/// Size: 0x04
enum class EDepthOfFieldFunctionValue : uint8_t
{
	TDOF_NearAndFarMask                                                              = 0,
	TDOF_NearMask                                                                    = 1,
	TDOF_FarMask                                                                     = 2,
	TDOF_CircleOfConfusionRadius                                                     = 3
};

/// Enum /Script/Engine.EFunctionInputType
/// Size: 0x11
enum class EFunctionInputType : uint8_t
{
	FunctionInput_Scalar                                                             = 0,
	FunctionInput_Vector2                                                            = 1,
	FunctionInput_Vector3                                                            = 2,
	FunctionInput_Vector4                                                            = 3,
	FunctionInput_Texture2D                                                          = 4,
	FunctionInput_TextureCube                                                        = 5,
	FunctionInput_Texture2DArray                                                     = 6,
	FunctionInput_VolumeTexture                                                      = 7,
	FunctionInput_StaticBool                                                         = 8,
	FunctionInput_MaterialAttributes                                                 = 9,
	FunctionInput_TextureExternal                                                    = 10
};

/// Enum /Script/Engine.ENoiseFunction
/// Size: 0x06
enum class ENoiseFunction : uint8_t
{
	NOISEFUNCTION_SimplexTex                                                         = 0,
	NOISEFUNCTION_GradientTex                                                        = 1,
	NOISEFUNCTION_GradientTex3D                                                      = 2,
	NOISEFUNCTION_GradientALU                                                        = 3,
	NOISEFUNCTION_ValueALU                                                           = 4,
	NOISEFUNCTION_VoronoiALU                                                         = 5
};

/// Enum /Script/Engine.ERuntimeVirtualTextureTextureAddressMode
/// Size: 0x02
enum class ERuntimeVirtualTextureTextureAddressMode : uint8_t
{
	RVTTA_Clamp                                                                      = 0,
	RVTTA_Wrap                                                                       = 1
};

/// Enum /Script/Engine.ERuntimeVirtualTextureMipValueMode
/// Size: 0x03
enum class ERuntimeVirtualTextureMipValueMode : uint8_t
{
	RVTMVM_None                                                                      = 0,
	RVTMVM_MipLevel                                                                  = 1,
	RVTMVM_MipBias                                                                   = 2
};

/// Enum /Script/Engine.EMaterialSceneAttributeInputMode
/// Size: 0x02
enum class EMaterialSceneAttributeInputMode : uint8_t
{
	EMaterialSceneAttributeInputMode__Coordinates                                    = 0,
	EMaterialSceneAttributeInputMode__OffsetFraction                                 = 1
};

/// Enum /Script/Engine.ESpeedTreeLODType
/// Size: 0x02
enum class ESpeedTreeLODType : uint8_t
{
	STLOD_Pop                                                                        = 0,
	STLOD_Smooth                                                                     = 1
};

/// Enum /Script/Engine.ESpeedTreeWindType
/// Size: 0x07
enum class ESpeedTreeWindType : uint8_t
{
	STW_None                                                                         = 0,
	STW_Fastest                                                                      = 1,
	STW_Fast                                                                         = 2,
	STW_Better                                                                       = 3,
	STW_Best                                                                         = 4,
	STW_Palm                                                                         = 5,
	STW_BestPlus                                                                     = 6
};

/// Enum /Script/Engine.ESpeedTreeGeometryType
/// Size: 0x05
enum class ESpeedTreeGeometryType : uint8_t
{
	STG_Branch                                                                       = 0,
	STG_Frond                                                                        = 1,
	STG_Leaf                                                                         = 2,
	STG_FacingLeaf                                                                   = 3,
	STG_Billboard                                                                    = 4
};

/// Enum /Script/Engine.EMaterialExposedTextureProperty
/// Size: 0x02
enum class EMaterialExposedTextureProperty : uint8_t
{
	TMTM_TextureSize                                                                 = 0,
	TMTM_TexelSize                                                                   = 1
};

/// Enum /Script/Engine.ETextureMipValueMode
/// Size: 0x04
enum class ETextureMipValueMode : uint8_t
{
	TMVM_None                                                                        = 0,
	TMVM_MipLevel                                                                    = 1,
	TMVM_MipBias                                                                     = 2,
	TMVM_Derivative                                                                  = 3
};

/// Enum /Script/Engine.EMaterialVectorCoordTransform
/// Size: 0x06
enum class EMaterialVectorCoordTransform : uint8_t
{
	TRANSFORM_Tangent                                                                = 0,
	TRANSFORM_Local                                                                  = 1,
	TRANSFORM_World                                                                  = 2,
	TRANSFORM_View                                                                   = 3,
	TRANSFORM_Camera                                                                 = 4,
	TRANSFORM_ParticleWorld                                                          = 5
};

/// Enum /Script/Engine.EMaterialVectorCoordTransformSource
/// Size: 0x06
enum class EMaterialVectorCoordTransformSource : uint8_t
{
	TRANSFORMSOURCE_Tangent                                                          = 0,
	TRANSFORMSOURCE_Local                                                            = 1,
	TRANSFORMSOURCE_World                                                            = 2,
	TRANSFORMSOURCE_View                                                             = 3,
	TRANSFORMSOURCE_Camera                                                           = 4,
	TRANSFORMSOURCE_ParticleWorld                                                    = 5
};

/// Enum /Script/Engine.EMaterialPositionTransformSource
/// Size: 0x06
enum class EMaterialPositionTransformSource : uint8_t
{
	TRANSFORMPOSSOURCE_Local                                                         = 0,
	TRANSFORMPOSSOURCE_World                                                         = 1,
	TRANSFORMPOSSOURCE_TranslatedWorld                                               = 2,
	TRANSFORMPOSSOURCE_View                                                          = 3,
	TRANSFORMPOSSOURCE_Camera                                                        = 4,
	TRANSFORMPOSSOURCE_Particle                                                      = 5
};

/// Enum /Script/Engine.EVectorNoiseFunction
/// Size: 0x05
enum class EVectorNoiseFunction : uint8_t
{
	VNF_CellnoiseALU                                                                 = 0,
	VNF_VectorALU                                                                    = 1,
	VNF_GradientALU                                                                  = 2,
	VNF_CurlALU                                                                      = 3,
	VNF_VoronoiALU                                                                   = 4
};

/// Enum /Script/Engine.EMaterialExposedViewProperty
/// Size: 0x14
enum class EMaterialExposedViewProperty : uint8_t
{
	MEVP_BufferSize                                                                  = 0,
	MEVP_FieldOfView                                                                 = 1,
	MEVP_TanHalfFieldOfView                                                          = 2,
	MEVP_ViewSize                                                                    = 3,
	MEVP_WorldSpaceViewPosition                                                      = 4,
	MEVP_WorldSpaceCameraPosition                                                    = 5,
	MEVP_ViewportOffset                                                              = 6,
	MEVP_TemporalSampleCount                                                         = 7,
	MEVP_TemporalSampleIndex                                                         = 8,
	MEVP_TemporalSampleOffset                                                        = 9,
	MEVP_RuntimeVirtualTextureOutputLevel                                            = 10,
	MEVP_RuntimeVirtualTextureOutputDerivative                                       = 11,
	MEVP_PreExposure                                                                 = 12,
	MEVP_RuntimeVirtualTextureMaxLevel                                               = 13
};

/// Enum /Script/Engine.EWorldPositionIncludedOffsets
/// Size: 0x04
enum class EWorldPositionIncludedOffsets : uint8_t
{
	WPT_Default                                                                      = 0,
	WPT_ExcludeAllShaderOffsets                                                      = 1,
	WPT_CameraRelative                                                               = 2,
	WPT_CameraRelativeNoOffsets                                                      = 3
};

/// Enum /Script/Engine.EMaterialFunctionUsage
/// Size: 0x03
enum class EMaterialFunctionUsage : uint8_t
{
	EMaterialFunctionUsage__Default                                                  = 0,
	EMaterialFunctionUsage__MaterialLayer                                            = 1,
	EMaterialFunctionUsage__MaterialLayerBlend                                       = 2
};

/// Enum /Script/Engine.EMaterialUsage
/// Size: 0x18
enum class EMaterialUsage : uint8_t
{
	MATUSAGE_SkeletalMesh                                                            = 0,
	MATUSAGE_ParticleSprites                                                         = 1,
	MATUSAGE_BeamTrails                                                              = 2,
	MATUSAGE_MeshParticles                                                           = 3,
	MATUSAGE_StaticLighting                                                          = 4,
	MATUSAGE_MorphTargets                                                            = 5,
	MATUSAGE_SplineMesh                                                              = 6,
	MATUSAGE_InstancedStaticMeshes                                                   = 7,
	MATUSAGE_GeometryCollections                                                     = 8,
	MATUSAGE_Clothing                                                                = 9,
	MATUSAGE_NiagaraSprites                                                          = 10,
	MATUSAGE_NiagaraRibbons                                                          = 11,
	MATUSAGE_NiagaraMeshParticles                                                    = 12,
	MATUSAGE_GeometryCache                                                           = 13,
	MATUSAGE_Water                                                                   = 14,
	MATUSAGE_HairStrands                                                             = 15,
	MATUSAGE_LidarPointCloud                                                         = 16,
	MATUSAGE_VirtualHeightfieldMesh                                                  = 17
};

/// Enum /Script/Engine.EMaterialLayerLinkState
/// Size: 0x04
enum class EMaterialLayerLinkState : uint8_t
{
	EMaterialLayerLinkState__Uninitialized                                           = 0,
	EMaterialLayerLinkState__LinkedToParent                                          = 1,
	EMaterialLayerLinkState__UnlinkedFromParent                                      = 2,
	EMaterialLayerLinkState__NotFromParent                                           = 3
};

/// Enum /Script/Engine.EMaterialParameterAssociation
/// Size: 0x03
enum class EMaterialParameterAssociation : uint8_t
{
	LayerParameter                                                                   = 0,
	BlendParameter                                                                   = 1,
	GlobalParameter                                                                  = 2
};

/// Enum /Script/Engine.EMaterialMergeType
/// Size: 0x02
enum class EMaterialMergeType : uint8_t
{
	MaterialMergeType_Default                                                        = 0,
	MaterialMergeType_Simplygon                                                      = 1
};

/// Enum /Script/Engine.ETextureSizingType
/// Size: 0x04
enum class ETextureSizingType : uint8_t
{
	TextureSizingType_UseSingleTextureSize                                           = 0,
	TextureSizingType_UseAutomaticBiasedSizes                                        = 1,
	TextureSizingType_UseManualOverrideTextureSize                                   = 2,
	TextureSizingType_UseSimplygonAutomaticSizing                                    = 3
};

/// Enum /Script/Engine.ESceneTextureId
/// Size: 0x31
enum class ESceneTextureId : uint8_t
{
	PPI_SceneColor                                                                   = 0,
	PPI_SceneDepth                                                                   = 1,
	PPI_DiffuseColor                                                                 = 2,
	PPI_SpecularColor                                                                = 3,
	PPI_SubsurfaceColor                                                              = 4,
	PPI_BaseColor                                                                    = 5,
	PPI_Specular                                                                     = 6,
	PPI_Metallic                                                                     = 7,
	PPI_WorldNormal                                                                  = 8,
	PPI_SeparateTranslucency                                                         = 9,
	PPI_Opacity                                                                      = 10,
	PPI_Roughness                                                                    = 11,
	PPI_MaterialAO                                                                   = 12,
	PPI_CustomDepth                                                                  = 13,
	PPI_PostProcessInput0                                                            = 14,
	PPI_PostProcessInput1                                                            = 15,
	PPI_PostProcessInput2                                                            = 16,
	PPI_PostProcessInput3                                                            = 17,
	PPI_PostProcessInput4                                                            = 18,
	PPI_PostProcessInput5                                                            = 19,
	PPI_PostProcessInput6                                                            = 20,
	PPI_DecalMask                                                                    = 21,
	PPI_ShadingModelColor                                                            = 22,
	PPI_ShadingModelID                                                               = 23,
	PPI_AmbientOcclusion                                                             = 24,
	PPI_CustomStencil                                                                = 25,
	PPI_StoredBaseColor                                                              = 26,
	PPI_StoredSpecular                                                               = 27,
	PPI_Velocity                                                                     = 28,
	PPI_WorldTangent                                                                 = 29,
	PPI_Anisotropy                                                                   = 30
};

/// Enum /Script/Engine.EMaterialDomain
/// Size: 0x07
enum class EMaterialDomain : uint8_t
{
	MD_Surface                                                                       = 0,
	MD_DeferredDecal                                                                 = 1,
	MD_LightFunction                                                                 = 2,
	MD_Volume                                                                        = 3,
	MD_PostProcess                                                                   = 4,
	MD_UI                                                                            = 5,
	MD_RuntimeVirtualTexture                                                         = 6
};

/// Enum /Script/Engine.EMeshInstancingReplacementMethod
/// Size: 0x02
enum class EMeshInstancingReplacementMethod : uint8_t
{
	EMeshInstancingReplacementMethod__RemoveOriginalActors                           = 0,
	EMeshInstancingReplacementMethod__KeepOriginalActorsAsEditorOnly                 = 1
};

/// Enum /Script/Engine.EUVOutput
/// Size: 0x02
enum class EUVOutput : uint8_t
{
	EUVOutput__DoNotOutputChannel                                                    = 0,
	EUVOutput__OutputChannel                                                         = 1
};

/// Enum /Script/Engine.EMeshMergeType
/// Size: 0x02
enum class EMeshMergeType : uint8_t
{
	EMeshMergeType__MeshMergeType_Default                                            = 0,
	EMeshMergeType__MeshMergeType_MergeActor                                         = 1
};

/// Enum /Script/Engine.EMeshLODSelectionType
/// Size: 0x04
enum class EMeshLODSelectionType : uint8_t
{
	EMeshLODSelectionType__AllLODs                                                   = 0,
	EMeshLODSelectionType__SpecificLOD                                               = 1,
	EMeshLODSelectionType__CalculateLOD                                              = 2,
	EMeshLODSelectionType__LowestDetailLOD                                           = 3
};

/// Enum /Script/Engine.EProxyNormalComputationMethod
/// Size: 0x03
enum class EProxyNormalComputationMethod : uint8_t
{
	EProxyNormalComputationMethod__AngleWeighted                                     = 0,
	EProxyNormalComputationMethod__AreaWeighted                                      = 1,
	EProxyNormalComputationMethod__EqualWeighted                                     = 2
};

/// Enum /Script/Engine.ELandscapeCullingPrecision
/// Size: 0x03
enum class ELandscapeCullingPrecision : uint8_t
{
	ELandscapeCullingPrecision__High                                                 = 0,
	ELandscapeCullingPrecision__Medium                                               = 1,
	ELandscapeCullingPrecision__Low                                                  = 2
};

/// Enum /Script/Engine.EStaticMeshReductionTerimationCriterion
/// Size: 0x03
enum class EStaticMeshReductionTerimationCriterion : uint8_t
{
	EStaticMeshReductionTerimationCriterion__Triangles                               = 0,
	EStaticMeshReductionTerimationCriterion__Vertices                                = 1,
	EStaticMeshReductionTerimationCriterion__Any                                     = 2
};

/// Enum /Script/Engine.EMeshFeatureImportance
/// Size: 0x06
enum class EMeshFeatureImportance : uint8_t
{
	EMeshFeatureImportance__Off                                                      = 0,
	EMeshFeatureImportance__Lowest                                                   = 1,
	EMeshFeatureImportance__Low                                                      = 2,
	EMeshFeatureImportance__Normal                                                   = 3,
	EMeshFeatureImportance__High                                                     = 4,
	EMeshFeatureImportance__Highest                                                  = 5
};

/// Enum /Script/Engine.EVertexPaintAxis
/// Size: 0x03
enum class EVertexPaintAxis : uint8_t
{
	EVertexPaintAxis__X                                                              = 0,
	EVertexPaintAxis__Y                                                              = 1,
	EVertexPaintAxis__Z                                                              = 2
};

/// Enum /Script/Engine.EMicroTransactionResult
/// Size: 0x04
enum class EMicroTransactionResult : uint8_t
{
	MTR_Succeeded                                                                    = 0,
	MTR_Failed                                                                       = 1,
	MTR_Canceled                                                                     = 2,
	MTR_RestoredFromServer                                                           = 3
};

/// Enum /Script/Engine.EMicroTransactionDelegate
/// Size: 0x02
enum class EMicroTransactionDelegate : uint8_t
{
	MTD_PurchaseQueryComplete                                                        = 0,
	MTD_PurchaseComplete                                                             = 1
};

/// Enum /Script/Engine.FNavigationSystemRunMode
/// Size: 0x06
enum class FNavigationSystemRunMode : uint8_t
{
	FNavigationSystemRunMode__InvalidMode                                            = 0,
	FNavigationSystemRunMode__GameMode                                               = 1,
	FNavigationSystemRunMode__EditorMode                                             = 2,
	FNavigationSystemRunMode__SimulationMode                                         = 3,
	FNavigationSystemRunMode__PIEMode                                                = 4,
	FNavigationSystemRunMode__InferFromWorldMode                                     = 5
};

/// Enum /Script/Engine.ENavigationQueryResult
/// Size: 0x04
enum class ENavigationQueryResult : uint8_t
{
	ENavigationQueryResult__Invalid                                                  = 0,
	ENavigationQueryResult__Error                                                    = 1,
	ENavigationQueryResult__Fail                                                     = 2,
	ENavigationQueryResult__Success                                                  = 3
};

/// Enum /Script/Engine.ENavPathEvent
/// Size: 0x08
enum class ENavPathEvent : uint8_t
{
	ENavPathEvent__Cleared                                                           = 0,
	ENavPathEvent__NewPath                                                           = 1,
	ENavPathEvent__UpdatedDueToGoalMoved                                             = 2,
	ENavPathEvent__UpdatedDueToNavigationChanged                                     = 3,
	ENavPathEvent__Invalidated                                                       = 4,
	ENavPathEvent__RePathFailed                                                      = 5,
	ENavPathEvent__MetaPathUpdate                                                    = 6,
	ENavPathEvent__Custom                                                            = 7
};

/// Enum /Script/Engine.ENavDataGatheringModeConfig
/// Size: 0x03
enum class ENavDataGatheringModeConfig : uint8_t
{
	ENavDataGatheringModeConfig__Invalid                                             = 0,
	ENavDataGatheringModeConfig__Instant                                             = 1,
	ENavDataGatheringModeConfig__Lazy                                                = 2
};

/// Enum /Script/Engine.ENavDataGatheringMode
/// Size: 0x03
enum class ENavDataGatheringMode : uint8_t
{
	ENavDataGatheringMode__Default                                                   = 0,
	ENavDataGatheringMode__Instant                                                   = 1,
	ENavDataGatheringMode__Lazy                                                      = 2
};

/// Enum /Script/Engine.ENavigationOptionFlag
/// Size: 0x03
enum class ENavigationOptionFlag : uint8_t
{
	ENavigationOptionFlag__Default                                                   = 0,
	ENavigationOptionFlag__Enable                                                    = 1,
	ENavigationOptionFlag__Disable                                                   = 2
};

/// Enum /Script/Engine.ENavLinkDirection
/// Size: 0x03
enum class ENavLinkDirection : uint8_t
{
	ENavLinkDirection__BothWays                                                      = 0,
	ENavLinkDirection__LeftToRight                                                   = 1,
	ENavLinkDirection__RightToLeft                                                   = 2
};

/// Enum /Script/Engine.EFastArraySerializerDeltaFlags
/// Size: 0x04
enum class EFastArraySerializerDeltaFlags : uint8_t
{
	EFastArraySerializerDeltaFlags__None                                             = 0,
	EFastArraySerializerDeltaFlags__HasBeenSerialized                                = 1,
	EFastArraySerializerDeltaFlags__HasDeltaBeenRequested                            = 2,
	EFastArraySerializerDeltaFlags__IsUsingDeltaSerialization                        = 4
};

/// Enum /Script/Engine.EEmitterRenderMode
/// Size: 0x05
enum class EEmitterRenderMode : uint8_t
{
	ERM_Normal                                                                       = 0,
	ERM_Point                                                                        = 1,
	ERM_Cross                                                                        = 2,
	ERM_LightsOnly                                                                   = 3,
	ERM_None                                                                         = 4
};

/// Enum /Script/Engine.EParticleSubUVInterpMethod
/// Size: 0x05
enum class EParticleSubUVInterpMethod : uint8_t
{
	PSUVIM_None                                                                      = 0,
	PSUVIM_Linear                                                                    = 1,
	PSUVIM_Linear_Blend                                                              = 2,
	PSUVIM_Random                                                                    = 3,
	PSUVIM_Random_Blend                                                              = 4
};

/// Enum /Script/Engine.EParticleBurstMethod
/// Size: 0x02
enum class EParticleBurstMethod : uint8_t
{
	EPBM_Instant                                                                     = 0,
	EPBM_Interpolated                                                                = 1
};

/// Enum /Script/Engine.EParticleSystemInsignificanceReaction
/// Size: 0x05
enum class EParticleSystemInsignificanceReaction : uint8_t
{
	EParticleSystemInsignificanceReaction__Auto                                      = 0,
	EParticleSystemInsignificanceReaction__Complete                                  = 1,
	EParticleSystemInsignificanceReaction__DisableTick                               = 2,
	EParticleSystemInsignificanceReaction__DisableTickAndKill                        = 3,
	EParticleSystemInsignificanceReaction__Num                                       = 4
};

/// Enum /Script/Engine.EParticleSignificanceLevel
/// Size: 0x05
enum class EParticleSignificanceLevel : uint8_t
{
	EParticleSignificanceLevel__Low                                                  = 0,
	EParticleSignificanceLevel__Medium                                               = 1,
	EParticleSignificanceLevel__High                                                 = 2,
	EParticleSignificanceLevel__Critical                                             = 3,
	EParticleSignificanceLevel__Num                                                  = 4
};

/// Enum /Script/Engine.EParticleDetailMode
/// Size: 0x03
enum class EParticleDetailMode : uint8_t
{
	PDM_Low                                                                          = 0,
	PDM_Medium                                                                       = 1,
	PDM_High                                                                         = 2
};

/// Enum /Script/Engine.EParticleSourceSelectionMethod
/// Size: 0x02
enum class EParticleSourceSelectionMethod : uint8_t
{
	EPSSM_Random                                                                     = 0,
	EPSSM_Sequential                                                                 = 1
};

/// Enum /Script/Engine.EModuleType
/// Size: 0x09
enum class EModuleType : uint8_t
{
	EPMT_General                                                                     = 0,
	EPMT_TypeData                                                                    = 1,
	EPMT_Beam                                                                        = 2,
	EPMT_Trail                                                                       = 3,
	EPMT_Spawn                                                                       = 4,
	EPMT_Required                                                                    = 5,
	EPMT_Event                                                                       = 6,
	EPMT_Light                                                                       = 7,
	EPMT_SubUV                                                                       = 8
};

/// Enum /Script/Engine.EAttractorParticleSelectionMethod
/// Size: 0x02
enum class EAttractorParticleSelectionMethod : uint8_t
{
	EAPSM_Random                                                                     = 0,
	EAPSM_Sequential                                                                 = 1
};

/// Enum /Script/Engine.Beam2SourceTargetTangentMethod
/// Size: 0x04
enum class Beam2SourceTargetTangentMethod : uint8_t
{
	PEB2STTM_Direct                                                                  = 0,
	PEB2STTM_UserSet                                                                 = 1,
	PEB2STTM_Distribution                                                            = 2,
	PEB2STTM_Emitter                                                                 = 3
};

/// Enum /Script/Engine.Beam2SourceTargetMethod
/// Size: 0x05
enum class Beam2SourceTargetMethod : uint8_t
{
	PEB2STM_Default                                                                  = 0,
	PEB2STM_UserSet                                                                  = 1,
	PEB2STM_Emitter                                                                  = 2,
	PEB2STM_Particle                                                                 = 3,
	PEB2STM_Actor                                                                    = 4
};

/// Enum /Script/Engine.BeamModifierType
/// Size: 0x02
enum class BeamModifierType : uint8_t
{
	PEB2MT_Source                                                                    = 0,
	PEB2MT_Target                                                                    = 1
};

/// Enum /Script/Engine.EParticleCameraOffsetUpdateMethod
/// Size: 0x03
enum class EParticleCameraOffsetUpdateMethod : uint8_t
{
	EPCOUM_DirectSet                                                                 = 0,
	EPCOUM_Additive                                                                  = 1,
	EPCOUM_Scalar                                                                    = 2
};

/// Enum /Script/Engine.EParticleCollisionComplete
/// Size: 0x06
enum class EParticleCollisionComplete : uint8_t
{
	EPCC_Kill                                                                        = 0,
	EPCC_Freeze                                                                      = 1,
	EPCC_HaltCollisions                                                              = 2,
	EPCC_FreezeTranslation                                                           = 3,
	EPCC_FreezeRotation                                                              = 4,
	EPCC_FreezeMovement                                                              = 5
};

/// Enum /Script/Engine.EParticleCollisionResponse
/// Size: 0x03
enum class EParticleCollisionResponse : uint8_t
{
	EParticleCollisionResponse__Bounce                                               = 0,
	EParticleCollisionResponse__Stop                                                 = 1,
	EParticleCollisionResponse__Kill                                                 = 2
};

/// Enum /Script/Engine.ELocationBoneSocketSelectionMethod
/// Size: 0x02
enum class ELocationBoneSocketSelectionMethod : uint8_t
{
	BONESOCKETSEL_Sequential                                                         = 0,
	BONESOCKETSEL_Random                                                             = 1
};

/// Enum /Script/Engine.ELocationBoneSocketSource
/// Size: 0x02
enum class ELocationBoneSocketSource : uint8_t
{
	BONESOCKETSOURCE_Bones                                                           = 0,
	BONESOCKETSOURCE_Sockets                                                         = 1
};

/// Enum /Script/Engine.ELocationEmitterSelectionMethod
/// Size: 0x02
enum class ELocationEmitterSelectionMethod : uint8_t
{
	ELESM_Random                                                                     = 0,
	ELESM_Sequential                                                                 = 1
};

/// Enum /Script/Engine.CylinderHeightAxis
/// Size: 0x03
enum class CylinderHeightAxis : uint8_t
{
	PMLPC_HEIGHTAXIS_X                                                               = 0,
	PMLPC_HEIGHTAXIS_Y                                                               = 1,
	PMLPC_HEIGHTAXIS_Z                                                               = 2
};

/// Enum /Script/Engine.ELocationSkelVertSurfaceSource
/// Size: 0x02
enum class ELocationSkelVertSurfaceSource : uint8_t
{
	VERTSURFACESOURCE_Vert                                                           = 0,
	VERTSURFACESOURCE_Surface                                                        = 1
};

/// Enum /Script/Engine.EOrbitChainMode
/// Size: 0x03
enum class EOrbitChainMode : uint8_t
{
	EOChainMode_Add                                                                  = 0,
	EOChainMode_Scale                                                                = 1,
	EOChainMode_Link                                                                 = 2
};

/// Enum /Script/Engine.EParticleAxisLock
/// Size: 0x10
enum class EParticleAxisLock : uint8_t
{
	EPAL_NONE                                                                        = 0,
	EPAL_X                                                                           = 1,
	EPAL_Y                                                                           = 2,
	EPAL_Z                                                                           = 3,
	EPAL_NEGATIVE_X                                                                  = 4,
	EPAL_NEGATIVE_Y                                                                  = 5,
	EPAL_NEGATIVE_Z                                                                  = 6,
	EPAL_ROTATE_X                                                                    = 7,
	EPAL_ROTATE_Y                                                                    = 8,
	EPAL_ROTATE_Z                                                                    = 9
};

/// Enum /Script/Engine.EEmitterDynamicParameterValue
/// Size: 0x06
enum class EEmitterDynamicParameterValue : uint8_t
{
	EDPV_UserSet                                                                     = 0,
	EDPV_AutoSet                                                                     = 1,
	EDPV_VelocityX                                                                   = 2,
	EDPV_VelocityY                                                                   = 3,
	EDPV_VelocityZ                                                                   = 4,
	EDPV_VelocityMag                                                                 = 5
};

/// Enum /Script/Engine.EEmitterNormalsMode
/// Size: 0x03
enum class EEmitterNormalsMode : uint8_t
{
	ENM_CameraFacing                                                                 = 0,
	ENM_Spherical                                                                    = 1,
	ENM_Cylindrical                                                                  = 2
};

/// Enum /Script/Engine.EParticleSortMode
/// Size: 0x05
enum class EParticleSortMode : uint8_t
{
	PSORTMODE_None                                                                   = 0,
	PSORTMODE_ViewProjDepth                                                          = 1,
	PSORTMODE_DistanceToView                                                         = 2,
	PSORTMODE_Age_OldestFirst                                                        = 3,
	PSORTMODE_Age_NewestFirst                                                        = 4
};

/// Enum /Script/Engine.EParticleUVFlipMode
/// Size: 0x08
enum class EParticleUVFlipMode : uint8_t
{
	EParticleUVFlipMode__None                                                        = 0,
	EParticleUVFlipMode__FlipUV                                                      = 1,
	EParticleUVFlipMode__FlipUOnly                                                   = 2,
	EParticleUVFlipMode__FlipVOnly                                                   = 3,
	EParticleUVFlipMode__RandomFlipUV                                                = 4,
	EParticleUVFlipMode__RandomFlipUOnly                                             = 5,
	EParticleUVFlipMode__RandomFlipVOnly                                             = 6,
	EParticleUVFlipMode__RandomFlipUVIndependent                                     = 7
};

/// Enum /Script/Engine.ETrail2SourceMethod
/// Size: 0x03
enum class ETrail2SourceMethod : uint8_t
{
	PET2SRCM_Default                                                                 = 0,
	PET2SRCM_Particle                                                                = 1,
	PET2SRCM_Actor                                                                   = 2
};

/// Enum /Script/Engine.EBeamTaperMethod
/// Size: 0x03
enum class EBeamTaperMethod : uint8_t
{
	PEBTM_None                                                                       = 0,
	PEBTM_Full                                                                       = 1,
	PEBTM_Partial                                                                    = 2
};

/// Enum /Script/Engine.EBeam2Method
/// Size: 0x03
enum class EBeam2Method : uint8_t
{
	PEB2M_Distance                                                                   = 0,
	PEB2M_Target                                                                     = 1,
	PEB2M_Branch                                                                     = 2
};

/// Enum /Script/Engine.EMeshCameraFacingOptions
/// Size: 0x13
enum class EMeshCameraFacingOptions : uint8_t
{
	XAxisFacing_NoUp                                                                 = 0,
	XAxisFacing_ZUp                                                                  = 1,
	XAxisFacing_NegativeZUp                                                          = 2,
	XAxisFacing_YUp                                                                  = 3,
	XAxisFacing_NegativeYUp                                                          = 4,
	LockedAxis_ZAxisFacing                                                           = 5,
	LockedAxis_NegativeZAxisFacing                                                   = 6,
	LockedAxis_YAxisFacing                                                           = 7,
	LockedAxis_NegativeYAxisFacing                                                   = 8,
	VelocityAligned_ZAxisFacing                                                      = 9,
	VelocityAligned_NegativeZAxisFacing                                              = 10,
	VelocityAligned_YAxisFacing                                                      = 11,
	VelocityAligned_NegativeYAxisFacing                                              = 12
};

/// Enum /Script/Engine.EMeshCameraFacingUpAxis
/// Size: 0x05
enum class EMeshCameraFacingUpAxis : uint8_t
{
	CameraFacing_NoneUP                                                              = 0,
	CameraFacing_ZUp                                                                 = 1,
	CameraFacing_NegativeZUp                                                         = 2,
	CameraFacing_YUp                                                                 = 3,
	CameraFacing_NegativeYUp                                                         = 4
};

/// Enum /Script/Engine.EMeshScreenAlignment
/// Size: 0x03
enum class EMeshScreenAlignment : uint8_t
{
	PSMA_MeshFaceCameraWithRoll                                                      = 0,
	PSMA_MeshFaceCameraWithSpin                                                      = 1,
	PSMA_MeshFaceCameraWithLockedAxis                                                = 2
};

/// Enum /Script/Engine.ETrailsRenderAxisOption
/// Size: 0x03
enum class ETrailsRenderAxisOption : uint8_t
{
	Trails_CameraUp                                                                  = 0,
	Trails_SourceUp                                                                  = 1,
	Trails_WorldUp                                                                   = 2
};

/// Enum /Script/Engine.EParticleScreenAlignment
/// Size: 0x07
enum class EParticleScreenAlignment : uint8_t
{
	PSA_FacingCameraPosition                                                         = 0,
	PSA_Square                                                                       = 1,
	PSA_Rectangle                                                                    = 2,
	PSA_Velocity                                                                     = 3,
	PSA_AwayFromCenter                                                               = 4,
	PSA_TypeSpecific                                                                 = 5,
	PSA_FacingCameraDistanceBlend                                                    = 6
};

/// Enum /Script/Engine.EParticleSystemOcclusionBoundsMethod
/// Size: 0x03
enum class EParticleSystemOcclusionBoundsMethod : uint8_t
{
	EPSOBM_None                                                                      = 0,
	EPSOBM_ParticleBounds                                                            = 1,
	EPSOBM_CustomBounds                                                              = 2
};

/// Enum /Script/Engine.ParticleSystemLODMethod
/// Size: 0x03
enum class ParticleSystemLODMethod : uint8_t
{
	PARTICLESYSTEMLODMETHOD_Automatic                                                = 0,
	PARTICLESYSTEMLODMETHOD_DirectSet                                                = 1,
	PARTICLESYSTEMLODMETHOD_ActivateAutomatic                                        = 2
};

/// Enum /Script/Engine.EParticleSystemUpdateMode
/// Size: 0x02
enum class EParticleSystemUpdateMode : uint8_t
{
	EPSUM_RealTime                                                                   = 0,
	EPSUM_FixedTime                                                                  = 1
};

/// Enum /Script/Engine.EParticleEventType
/// Size: 0x06
enum class EParticleEventType : uint8_t
{
	EPET_Any                                                                         = 0,
	EPET_Spawn                                                                       = 1,
	EPET_Death                                                                       = 2,
	EPET_Collision                                                                   = 3,
	EPET_Burst                                                                       = 4,
	EPET_Blueprint                                                                   = 5
};

/// Enum /Script/Engine.ParticleReplayState
/// Size: 0x03
enum class ParticleReplayState : uint8_t
{
	PRS_Disabled                                                                     = 0,
	PRS_Capturing                                                                    = 1,
	PRS_Replaying                                                                    = 2
};

/// Enum /Script/Engine.EParticleSysParamType
/// Size: 0x09
enum class EParticleSysParamType : uint8_t
{
	PSPT_None                                                                        = 0,
	PSPT_Scalar                                                                      = 1,
	PSPT_ScalarRand                                                                  = 2,
	PSPT_Vector                                                                      = 3,
	PSPT_VectorRand                                                                  = 4,
	PSPT_Color                                                                       = 5,
	PSPT_Actor                                                                       = 6,
	PSPT_Material                                                                    = 7,
	PSPT_VectorUnitRand                                                              = 8
};

/// Enum /Script/Engine.ESettingsLockedAxis
/// Size: 0x05
enum class ESettingsLockedAxis : uint8_t
{
	ESettingsLockedAxis__None                                                        = 0,
	ESettingsLockedAxis__X                                                           = 1,
	ESettingsLockedAxis__Y                                                           = 2,
	ESettingsLockedAxis__Z                                                           = 3,
	ESettingsLockedAxis__Invalid                                                     = 4
};

/// Enum /Script/Engine.ESettingsDOF
/// Size: 0x04
enum class ESettingsDOF : uint8_t
{
	ESettingsDOF__Full3D                                                             = 0,
	ESettingsDOF__YZPlane                                                            = 1,
	ESettingsDOF__XZPlane                                                            = 2,
	ESettingsDOF__XYPlane                                                            = 3
};

/// Enum /Script/Engine.EViewTargetBlendFunction
/// Size: 0x05
enum class EViewTargetBlendFunction : uint8_t
{
	VTBlend_Linear                                                                   = 0,
	VTBlend_Cubic                                                                    = 1,
	VTBlend_EaseIn                                                                   = 2,
	VTBlend_EaseOut                                                                  = 3,
	VTBlend_EaseInOut                                                                = 4
};

/// Enum /Script/Engine.EDynamicForceFeedbackAction
/// Size: 0x03
enum class EDynamicForceFeedbackAction : uint8_t
{
	EDynamicForceFeedbackAction__Start                                               = 0,
	EDynamicForceFeedbackAction__Update                                              = 1,
	EDynamicForceFeedbackAction__Stop                                                = 2
};

/// Enum /Script/Engine.EMobileReflectionType
/// Size: 0x04
enum class EMobileReflectionType : uint8_t
{
	EMobileReflectionType__Default                                                   = 0,
	EMobileReflectionType__OnlySkyLight                                              = 1,
	EMobileReflectionType__OnlyDetail                                                = 2,
	EMobileReflectionType__SpecifiedCapture                                          = 3
};

/// Enum /Script/Engine.ERendererStencilMask
/// Size: 0x10
enum class ERendererStencilMask : uint8_t
{
	ERendererStencilMask__ERSM_Default                                               = 0,
	ERendererStencilMask__ERSM                                                       = 1,
	ERendererStencilMask__ERSM3                                                      = 2,
	ERendererStencilMask__ERSM4                                                      = 3,
	ERendererStencilMask__ERSM5                                                      = 4,
	ERendererStencilMask__ERSM6                                                      = 5,
	ERendererStencilMask__ERSM7                                                      = 6,
	ERendererStencilMask__ERSM8                                                      = 7,
	ERendererStencilMask__ERSM9                                                      = 8,
	ERendererStencilMask__ERSM10                                                     = 9
};

/// Enum /Script/Engine.EHasCustomNavigableGeometry
/// Size: 0x04
enum class EHasCustomNavigableGeometry : uint8_t
{
	EHasCustomNavigableGeometry__No                                                  = 0,
	EHasCustomNavigableGeometry__Yes                                                 = 1,
	EHasCustomNavigableGeometry__EvenIfNotCollidable                                 = 2,
	EHasCustomNavigableGeometry__DontExport                                          = 3
};

/// Enum /Script/Engine.ECanBeCharacterBase
/// Size: 0x03
enum class ECanBeCharacterBase : uint8_t
{
	ECB_No                                                                           = 0,
	ECB_Yes                                                                          = 1,
	ECB_Owner                                                                        = 2
};

/// Enum /Script/Engine.EQuarztQuantizationReference
/// Size: 0x04
enum class EQuarztQuantizationReference : uint8_t
{
	EQuarztQuantizationReference__BarRelative                                        = 0,
	EQuarztQuantizationReference__TransportRelative                                  = 1,
	EQuarztQuantizationReference__CurrentTimeRelative                                = 2,
	EQuarztQuantizationReference__Count                                              = 3
};

/// Enum /Script/Engine.EQuartzDelegateType
/// Size: 0x03
enum class EQuartzDelegateType : uint8_t
{
	EQuartzDelegateType__MetronomeTick                                               = 0,
	EQuartzDelegateType__CommandEvent                                                = 1,
	EQuartzDelegateType__Count                                                       = 2
};

/// Enum /Script/Engine.EQuartzTimeSignatureQuantization
/// Size: 0x06
enum class EQuartzTimeSignatureQuantization : uint8_t
{
	EQuartzTimeSignatureQuantization__HalfNote                                       = 0,
	EQuartzTimeSignatureQuantization__QuarterNote                                    = 1,
	EQuartzTimeSignatureQuantization__EighthNote                                     = 2,
	EQuartzTimeSignatureQuantization__SixteenthNote                                  = 3,
	EQuartzTimeSignatureQuantization__ThirtySecondNote                               = 4,
	EQuartzTimeSignatureQuantization__Count                                          = 5
};

/// Enum /Script/Engine.ERichCurveExtrapolation
/// Size: 0x06
enum class ERichCurveExtrapolation : uint8_t
{
	RCCE_Cycle                                                                       = 0,
	RCCE_CycleWithOffset                                                             = 1,
	RCCE_Oscillate                                                                   = 2,
	RCCE_Linear                                                                      = 3,
	RCCE_Constant                                                                    = 4,
	RCCE_None                                                                        = 5
};

/// Enum /Script/Engine.ERichCurveInterpMode
/// Size: 0x04
enum class ERichCurveInterpMode : uint8_t
{
	RCIM_Linear                                                                      = 0,
	RCIM_Constant                                                                    = 1,
	RCIM_Cubic                                                                       = 2,
	RCIM_None                                                                        = 3
};

/// Enum /Script/Engine.EMobileReflectionLevel
/// Size: 0x02
enum class EMobileReflectionLevel : uint8_t
{
	EMobileReflectionLevel__SkyLight                                                 = 0,
	EMobileReflectionLevel__Detail                                                   = 1
};

/// Enum /Script/Engine.EMobileReflectionCompression
/// Size: 0x03
enum class EMobileReflectionCompression : uint8_t
{
	EMobileReflectionCompression__Default                                            = 0,
	EMobileReflectionCompression__On                                                 = 1,
	EMobileReflectionCompression__Off                                                = 2
};

/// Enum /Script/Engine.EReflectionSourceType
/// Size: 0x02
enum class EReflectionSourceType : uint8_t
{
	EReflectionSourceType__CapturedScene                                             = 0,
	EReflectionSourceType__SpecifiedCubemap                                          = 1
};

/// Enum /Script/Engine.EDefaultBackBufferPixelFormat
/// Size: 0x05
enum class EDefaultBackBufferPixelFormat : uint8_t
{
	EDefaultBackBufferPixelFormat__DBBPF_B8G8R8A8                                    = 0,
	EDefaultBackBufferPixelFormat__DBBPF_A16B16G16R16_DEPRECATED                     = 1,
	EDefaultBackBufferPixelFormat__DBBPF_FloatRGB_DEPRECATED                         = 2,
	EDefaultBackBufferPixelFormat__DBBPF_FloatRGBA                                   = 3,
	EDefaultBackBufferPixelFormat__DBBPF_A2B10G10R10                                 = 4
};

/// Enum /Script/Engine.EAutoExposureMethodUI
/// Size: 0x03
enum class EAutoExposureMethodUI : uint8_t
{
	EAutoExposureMethodUI__AEM_Histogram                                             = 0,
	EAutoExposureMethodUI__AEM_Basic                                                 = 1,
	EAutoExposureMethodUI__AEM_Manual                                                = 2
};

/// Enum /Script/Engine.EAlphaChannelMode
/// Size: 0x03
enum class EAlphaChannelMode : uint8_t
{
	EAlphaChannelMode__Disabled                                                      = 0,
	EAlphaChannelMode__LinearColorSpaceOnly                                          = 1,
	EAlphaChannelMode__AllowThroughTonemapper                                        = 2
};

/// Enum /Script/Engine.EEarlyZPass
/// Size: 0x04
enum class EEarlyZPass : uint8_t
{
	EEarlyZPass__None                                                                = 0,
	EEarlyZPass__OpaqueOnly                                                          = 1,
	EEarlyZPass__OpaqueAndMasked                                                     = 2,
	EEarlyZPass__Auto                                                                = 3
};

/// Enum /Script/Engine.ECustomDepthStencil
/// Size: 0x04
enum class ECustomDepthStencil : uint8_t
{
	ECustomDepthStencil__Disabled                                                    = 0,
	ECustomDepthStencil__Enabled                                                     = 1,
	ECustomDepthStencil__EnabledOnDemand                                             = 2,
	ECustomDepthStencil__EnabledWithStencil                                          = 3
};

/// Enum /Script/Engine.EMobileMSAASampleCount
/// Size: 0x04
enum class EMobileMSAASampleCount : uint8_t
{
	EMobileMSAASampleCount__One                                                      = 1,
	EMobileMSAASampleCount__Two                                                      = 2,
	EMobileMSAASampleCount__Four                                                     = 4,
	EMobileMSAASampleCount__Eight                                                    = 8
};

/// Enum /Script/Engine.ECompositingSampleCount
/// Size: 0x04
enum class ECompositingSampleCount : uint8_t
{
	ECompositingSampleCount__One                                                     = 1,
	ECompositingSampleCount__Two                                                     = 2,
	ECompositingSampleCount__Four                                                    = 4,
	ECompositingSampleCount__Eight                                                   = 8
};

/// Enum /Script/Engine.EClearSceneOptions
/// Size: 0x03
enum class EClearSceneOptions : uint8_t
{
	EClearSceneOptions__NoClear                                                      = 0,
	EClearSceneOptions__HardwareClear                                                = 1,
	EClearSceneOptions__QuadAtMaxZ                                                   = 2
};

/// Enum /Script/Engine.EReporterLineStyle
/// Size: 0x02
enum class EReporterLineStyle : uint8_t
{
	EReporterLineStyle__Line                                                         = 0,
	EReporterLineStyle__Dash                                                         = 1
};

/// Enum /Script/Engine.ELegendPosition
/// Size: 0x02
enum class ELegendPosition : uint8_t
{
	ELegendPosition__Outside                                                         = 0,
	ELegendPosition__Inside                                                          = 1
};

/// Enum /Script/Engine.EGraphDataStyle
/// Size: 0x02
enum class EGraphDataStyle : uint8_t
{
	EGraphDataStyle__Lines                                                           = 0,
	EGraphDataStyle__Filled                                                          = 1
};

/// Enum /Script/Engine.EGraphAxisStyle
/// Size: 0x03
enum class EGraphAxisStyle : uint8_t
{
	EGraphAxisStyle__Lines                                                           = 0,
	EGraphAxisStyle__Notches                                                         = 1,
	EGraphAxisStyle__Grid                                                            = 2
};

/// Enum /Script/Engine.ReverbPreset
/// Size: 0x23
enum class ReverbPreset : uint8_t
{
	REVERB_Default                                                                   = 0,
	REVERB_Bathroom                                                                  = 1,
	REVERB_StoneRoom                                                                 = 2,
	REVERB_Auditorium                                                                = 3,
	REVERB_ConcertHall                                                               = 4,
	REVERB_Cave                                                                      = 5,
	REVERB_Hallway                                                                   = 6,
	REVERB_StoneCorridor                                                             = 7,
	REVERB_Alley                                                                     = 8,
	REVERB_Forest                                                                    = 9,
	REVERB_City                                                                      = 10,
	REVERB_Mountains                                                                 = 11,
	REVERB_Quarry                                                                    = 12,
	REVERB_Plain                                                                     = 13,
	REVERB_ParkingLot                                                                = 14,
	REVERB_SewerPipe                                                                 = 15,
	REVERB_Underwater                                                                = 16,
	REVERB_SmallRoom                                                                 = 17,
	REVERB_MediumRoom                                                                = 18,
	REVERB_LargeRoom                                                                 = 19,
	REVERB_MediumHall                                                                = 20,
	REVERB_LargeHall                                                                 = 21,
	REVERB_Plate                                                                     = 22
};

/// Enum /Script/Engine.ERichCurveKeyTimeCompressionFormat
/// Size: 0x02
enum class ERichCurveKeyTimeCompressionFormat : uint8_t
{
	RCKTCF_uint16                                                                    = 0,
	RCKTCF_float32                                                                   = 1
};

/// Enum /Script/Engine.ERichCurveCompressionFormat
/// Size: 0x06
enum class ERichCurveCompressionFormat : uint8_t
{
	RCCF_Empty                                                                       = 0,
	RCCF_Constant                                                                    = 1,
	RCCF_Linear                                                                      = 2,
	RCCF_Cubic                                                                       = 3,
	RCCF_Mixed                                                                       = 4,
	RCCF_Weighted                                                                    = 5
};

/// Enum /Script/Engine.ERichCurveTangentWeightMode
/// Size: 0x04
enum class ERichCurveTangentWeightMode : uint8_t
{
	RCTWM_WeightedNone                                                               = 0,
	RCTWM_WeightedArrive                                                             = 1,
	RCTWM_WeightedLeave                                                              = 2,
	RCTWM_WeightedBoth                                                               = 3
};

/// Enum /Script/Engine.ERichCurveTangentMode
/// Size: 0x04
enum class ERichCurveTangentMode : uint8_t
{
	RCTM_Auto                                                                        = 0,
	RCTM_User                                                                        = 1,
	RCTM_Break                                                                       = 2,
	RCTM_None                                                                        = 3
};

/// Enum /Script/Engine.EConstraintTransform
/// Size: 0x02
enum class EConstraintTransform : uint8_t
{
	EConstraintTransform__Absolute                                                   = 0,
	EConstraintTransform__Relative                                                   = 1
};

/// Enum /Script/Engine.EControlConstraint
/// Size: 0x02
enum class EControlConstraint : uint8_t
{
	EControlConstraint__Orientation                                                  = 0,
	EControlConstraint__Translation                                                  = 1
};

/// Enum /Script/Engine.ERootMotionFinishVelocityMode
/// Size: 0x03
enum class ERootMotionFinishVelocityMode : uint8_t
{
	ERootMotionFinishVelocityMode__MaintainLastRootMotionVelocity                    = 0,
	ERootMotionFinishVelocityMode__SetVelocity                                       = 1,
	ERootMotionFinishVelocityMode__ClampVelocity                                     = 2
};

/// Enum /Script/Engine.ERootMotionSourceSettingsFlags
/// Size: 0x03
enum class ERootMotionSourceSettingsFlags : uint8_t
{
	ERootMotionSourceSettingsFlags__UseSensitiveLiftoffCheck                         = 1,
	ERootMotionSourceSettingsFlags__DisablePartialEndTick                            = 2,
	ERootMotionSourceSettingsFlags__IgnoreZAccumulate                                = 4
};

/// Enum /Script/Engine.ERootMotionSourceStatusFlags
/// Size: 0x03
enum class ERootMotionSourceStatusFlags : uint8_t
{
	ERootMotionSourceStatusFlags__Prepared                                           = 1,
	ERootMotionSourceStatusFlags__Finished                                           = 2,
	ERootMotionSourceStatusFlags__MarkedForRemoval                                   = 4
};

/// Enum /Script/Engine.ERootMotionAccumulateMode
/// Size: 0x02
enum class ERootMotionAccumulateMode : uint8_t
{
	ERootMotionAccumulateMode__Override                                              = 0,
	ERootMotionAccumulateMode__Additive                                              = 1
};

/// Enum /Script/Engine.ERuntimeVirtualTextureMainPassType
/// Size: 0x03
enum class ERuntimeVirtualTextureMainPassType : uint8_t
{
	ERuntimeVirtualTextureMainPassType__Never                                        = 0,
	ERuntimeVirtualTextureMainPassType__Exclusive                                    = 1,
	ERuntimeVirtualTextureMainPassType__Always                                       = 2
};

/// Enum /Script/Engine.ERuntimeVirtualTextureMaterialType
/// Size: 0x07
enum class ERuntimeVirtualTextureMaterialType : uint8_t
{
	ERuntimeVirtualTextureMaterialType__BaseColor                                    = 0,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal_DEPRECATED                  = 1,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal_Specular                    = 2,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal_Specular_YCoCg              = 3,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal_Specular_Mask_YCoCg         = 4,
	ERuntimeVirtualTextureMaterialType__WorldHeight                                  = 5,
	ERuntimeVirtualTextureMaterialType__Count                                        = 6
};

/// Enum /Script/Engine.EMobilePixelProjectedReflectionQuality
/// Size: 0x04
enum class EMobilePixelProjectedReflectionQuality : uint8_t
{
	EMobilePixelProjectedReflectionQuality__Disabled                                 = 0,
	EMobilePixelProjectedReflectionQuality__BestPerformance                          = 1,
	EMobilePixelProjectedReflectionQuality__BetterQuality                            = 2,
	EMobilePixelProjectedReflectionQuality__BestQuality                              = 3
};

/// Enum /Script/Engine.EMobilePlanarReflectionMode
/// Size: 0x03
enum class EMobilePlanarReflectionMode : uint8_t
{
	EMobilePlanarReflectionMode__Usual                                               = 0,
	EMobilePlanarReflectionMode__MobilePPRExclusive                                  = 1,
	EMobilePlanarReflectionMode__MobilePPR                                           = 2
};

/// Enum /Script/Engine.EReflectedAndRefractedRayTracedShadows
/// Size: 0x03
enum class EReflectedAndRefractedRayTracedShadows : uint8_t
{
	EReflectedAndRefractedRayTracedShadows__Disabled                                 = 0,
	EReflectedAndRefractedRayTracedShadows__Hard_shadows                             = 1,
	EReflectedAndRefractedRayTracedShadows__Area_shadows                             = 2
};

/// Enum /Script/Engine.ERayTracingGlobalIlluminationType
/// Size: 0x03
enum class ERayTracingGlobalIlluminationType : uint8_t
{
	ERayTracingGlobalIlluminationType__Disabled                                      = 0,
	ERayTracingGlobalIlluminationType__BruteForce                                    = 1,
	ERayTracingGlobalIlluminationType__FinalGather                                   = 2
};

/// Enum /Script/Engine.ETranslucencyType
/// Size: 0x02
enum class ETranslucencyType : uint8_t
{
	ETranslucencyType__Raster                                                        = 0,
	ETranslucencyType__RayTracing                                                    = 1
};

/// Enum /Script/Engine.EReflectionsType
/// Size: 0x02
enum class EReflectionsType : uint8_t
{
	EReflectionsType__ScreenSpace                                                    = 0,
	EReflectionsType__RayTracing                                                     = 1
};

/// Enum /Script/Engine.ELightUnits
/// Size: 0x03
enum class ELightUnits : uint8_t
{
	ELightUnits__Unitless                                                            = 0,
	ELightUnits__Candelas                                                            = 1,
	ELightUnits__Lumens                                                              = 2
};

/// Enum /Script/Engine.EBloomMethod
/// Size: 0x02
enum class EBloomMethod : uint8_t
{
	BM_SOG                                                                           = 0,
	BM_FFT                                                                           = 1
};

/// Enum /Script/Engine.EAutoExposureMethod
/// Size: 0x03
enum class EAutoExposureMethod : uint8_t
{
	AEM_Histogram                                                                    = 0,
	AEM_Basic                                                                        = 1,
	AEM_Manual                                                                       = 2
};

/// Enum /Script/Engine.EAntiAliasingMethod
/// Size: 0x04
enum class EAntiAliasingMethod : uint8_t
{
	AAM_None                                                                         = 0,
	AAM_FXAA                                                                         = 1,
	AAM_TemporalAA                                                                   = 2,
	AAM_MSAA                                                                         = 3
};

/// Enum /Script/Engine.EDepthOfFieldMethod
/// Size: 0x03
enum class EDepthOfFieldMethod : uint8_t
{
	DOFM_BokehDOF                                                                    = 0,
	DOFM_Gaussian                                                                    = 1,
	DOFM_CircleDOF                                                                   = 2
};

/// Enum /Script/Engine.ESceneCapturePrimitiveRenderMode
/// Size: 0x03
enum class ESceneCapturePrimitiveRenderMode : uint8_t
{
	ESceneCapturePrimitiveRenderMode__PRM_LegacySceneCapture                         = 0,
	ESceneCapturePrimitiveRenderMode__PRM_RenderScenePrimitives                      = 1,
	ESceneCapturePrimitiveRenderMode__PRM_UseShowOnlyList                            = 2
};

/// Enum /Script/Engine.EMaterialProperty
/// Size: 0x32
enum class EMaterialProperty : uint8_t
{
	MP_EmissiveColor                                                                 = 0,
	MP_Opacity                                                                       = 1,
	MP_OpacityMask                                                                   = 2,
	MP_DiffuseColor                                                                  = 3,
	MP_SpecularColor                                                                 = 4,
	MP_BaseColor                                                                     = 5,
	MP_Metallic                                                                      = 6,
	MP_Specular                                                                      = 7,
	MP_Roughness                                                                     = 8,
	MP_Anisotropy                                                                    = 9,
	MP_Normal                                                                        = 10,
	MP_Tangent                                                                       = 11,
	MP_WorldPositionOffset                                                           = 12,
	MP_WorldDisplacement                                                             = 13,
	MP_TessellationMultiplier                                                        = 14,
	MP_SubsurfaceColor                                                               = 15,
	MP_CustomData0                                                                   = 16,
	MP_CustomData1                                                                   = 17,
	MP_AmbientOcclusion                                                              = 18,
	MP_Refraction                                                                    = 19,
	MP_CustomizedUVs0                                                                = 20,
	MP_CustomizedUVs1                                                                = 21,
	MP_CustomizedUVs2                                                                = 22,
	MP_CustomizedUVs3                                                                = 23,
	MP_CustomizedUVs4                                                                = 24,
	MP_CustomizedUVs5                                                                = 25,
	MP_CustomizedUVs6                                                                = 26,
	MP_CustomizedUVs7                                                                = 27,
	MP_PixelDepthOffset                                                              = 28,
	MP_ShadingModel                                                                  = 29,
	MP_MaterialAttributes                                                            = 30,
	MP_CustomOutput                                                                  = 31
};

/// Enum /Script/Engine.ESkinCacheDefaultBehavior
/// Size: 0x02
enum class ESkinCacheDefaultBehavior : uint8_t
{
	ESkinCacheDefaultBehavior__Exclusive                                             = 0,
	ESkinCacheDefaultBehavior__Inclusive                                             = 1
};

/// Enum /Script/Engine.ESkinCacheUsage
/// Size: 0x03
enum class ESkinCacheUsage : uint8_t
{
	ESkinCacheUsage__Auto                                                            = 0,
	ESkinCacheUsage__Disabled                                                        = 255,
	ESkinCacheUsage__Enabled                                                         = 1
};

/// Enum /Script/Engine.EPhysicsTransformUpdateMode
/// Size: 0x02
enum class EPhysicsTransformUpdateMode : uint8_t
{
	EPhysicsTransformUpdateMode__SimulationUpatesComponentTransform                  = 0,
	EPhysicsTransformUpdateMode__ComponentTransformIsKinematic                       = 1
};

/// Enum /Script/Engine.EAnimationMode
/// Size: 0x03
enum class EAnimationMode : uint8_t
{
	EAnimationMode__AnimationBlueprint                                               = 0,
	EAnimationMode__AnimationSingleNode                                              = 1,
	EAnimationMode__AnimationCustomMode                                              = 2
};

/// Enum /Script/Engine.EKinematicBonesUpdateToPhysics
/// Size: 0x02
enum class EKinematicBonesUpdateToPhysics : uint8_t
{
	EKinematicBonesUpdateToPhysics__SkipSimulatingBones                              = 0,
	EKinematicBonesUpdateToPhysics__SkipAllBones                                     = 1
};

/// Enum /Script/Engine.ECustomBoneAttributeLookup
/// Size: 0x03
enum class ECustomBoneAttributeLookup : uint8_t
{
	ECustomBoneAttributeLookup__BoneOnly                                             = 0,
	ECustomBoneAttributeLookup__ImmediateParent                                      = 1,
	ECustomBoneAttributeLookup__ParentHierarchy                                      = 2
};

/// Enum /Script/Engine.EClothMassMode
/// Size: 0x04
enum class EClothMassMode : uint8_t
{
	EClothMassMode__UniformMass                                                      = 0,
	EClothMassMode__TotalMass                                                        = 1,
	EClothMassMode__Density                                                          = 2,
	EClothMassMode__MaxClothMassMode                                                 = 3
};

/// Enum /Script/Engine.EAnimCurveType
/// Size: 0x04
enum class EAnimCurveType : uint8_t
{
	EAnimCurveType__AttributeCurve                                                   = 0,
	EAnimCurveType__MaterialCurve                                                    = 1,
	EAnimCurveType__MorphTargetCurve                                                 = 2,
	EAnimCurveType__MaxAnimCurveType                                                 = 3
};

/// Enum /Script/Engine.ESkeletalMeshSkinningImportVersions
/// Size: 0x04
enum class ESkeletalMeshSkinningImportVersions : uint8_t
{
	ESkeletalMeshSkinningImportVersions__Before_Versionning                          = 0,
	ESkeletalMeshSkinningImportVersions__SkeletalMeshBuildRefactor                   = 1,
	ESkeletalMeshSkinningImportVersions__VersionPlusOne                              = 2,
	ESkeletalMeshSkinningImportVersions__LatestVersion                               = 1
};

/// Enum /Script/Engine.ESkeletalMeshGeoImportVersions
/// Size: 0x04
enum class ESkeletalMeshGeoImportVersions : uint8_t
{
	ESkeletalMeshGeoImportVersions__Before_Versionning                               = 0,
	ESkeletalMeshGeoImportVersions__SkeletalMeshBuildRefactor                        = 1,
	ESkeletalMeshGeoImportVersions__VersionPlusOne                                   = 2,
	ESkeletalMeshGeoImportVersions__LatestVersion                                    = 1
};

/// Enum /Script/Engine.EBoneFilterActionOption
/// Size: 0x03
enum class EBoneFilterActionOption : uint8_t
{
	EBoneFilterActionOption__Remove                                                  = 0,
	EBoneFilterActionOption__Keep                                                    = 1,
	EBoneFilterActionOption__Invalid                                                 = 2
};

/// Enum /Script/Engine.SkeletalMeshOptimizationImportance
/// Size: 0x06
enum class SkeletalMeshOptimizationImportance : uint8_t
{
	SMOI_Off                                                                         = 0,
	SMOI_Lowest                                                                      = 1,
	SMOI_Low                                                                         = 2,
	SMOI_Normal                                                                      = 3,
	SMOI_High                                                                        = 4,
	SMOI_Highest                                                                     = 5
};

/// Enum /Script/Engine.SkeletalMeshOptimizationType
/// Size: 0x03
enum class SkeletalMeshOptimizationType : uint8_t
{
	SMOT_NumOfTriangles                                                              = 0,
	SMOT_MaxDeviation                                                                = 1,
	SMOT_TriangleOrDeviation                                                         = 2
};

/// Enum /Script/Engine.SkeletalMeshTerminationCriterion
/// Size: 0x06
enum class SkeletalMeshTerminationCriterion : uint8_t
{
	SMTC_NumOfTriangles                                                              = 0,
	SMTC_NumOfVerts                                                                  = 1,
	SMTC_TriangleOrVert                                                              = 2,
	SMTC_AbsNumOfTriangles                                                           = 3,
	SMTC_AbsNumOfVerts                                                               = 4,
	SMTC_AbsTriangleOrVert                                                           = 5
};

/// Enum /Script/Engine.EBoneTranslationRetargetingMode
/// Size: 0x05
enum class EBoneTranslationRetargetingMode : uint8_t
{
	EBoneTranslationRetargetingMode__Animation                                       = 0,
	EBoneTranslationRetargetingMode__Skeleton                                        = 1,
	EBoneTranslationRetargetingMode__AnimationScaled                                 = 2,
	EBoneTranslationRetargetingMode__AnimationRelative                               = 3,
	EBoneTranslationRetargetingMode__OrientAndScale                                  = 4
};

/// Enum /Script/Engine.EVertexOffsetUsageType
/// Size: 0x03
enum class EVertexOffsetUsageType : uint8_t
{
	EVertexOffsetUsageType__None                                                     = 0,
	EVertexOffsetUsageType__PreSkinningOffset                                        = 1,
	EVertexOffsetUsageType__PostSkinningOffset                                       = 2
};

/// Enum /Script/Engine.EBoneSpaces
/// Size: 0x02
enum class EBoneSpaces : uint8_t
{
	EBoneSpaces__WorldSpace                                                          = 0,
	EBoneSpaces__ComponentSpace                                                      = 1
};

/// Enum /Script/Engine.EVisibilityBasedAnimTickOption
/// Size: 0x04
enum class EVisibilityBasedAnimTickOption : uint8_t
{
	EVisibilityBasedAnimTickOption__AlwaysTickPoseAndRefreshBones                    = 0,
	EVisibilityBasedAnimTickOption__AlwaysTickPose                                   = 1,
	EVisibilityBasedAnimTickOption__OnlyTickMontagesWhenNotRendered                  = 2,
	EVisibilityBasedAnimTickOption__OnlyTickPoseWhenRendered                         = 3
};

/// Enum /Script/Engine.EPhysBodyOp
/// Size: 0x02
enum class EPhysBodyOp : uint8_t
{
	PBO_None                                                                         = 0,
	PBO_Term                                                                         = 1
};

/// Enum /Script/Engine.EBoneVisibilityStatus
/// Size: 0x03
enum class EBoneVisibilityStatus : uint8_t
{
	BVS_HiddenByParent                                                               = 0,
	BVS_Visible                                                                      = 1,
	BVS_ExplicitlyHidden                                                             = 2
};

/// Enum /Script/Engine.ESkyAtmosphereTransformMode
/// Size: 0x03
enum class ESkyAtmosphereTransformMode : uint8_t
{
	ESkyAtmosphereTransformMode__PlanetTopAtAbsoluteWorldOrigin                      = 0,
	ESkyAtmosphereTransformMode__PlanetTopAtComponentTransform                       = 1,
	ESkyAtmosphereTransformMode__PlanetCenterAtComponentTransform                    = 2
};

/// Enum /Script/Engine.ESkyLightSourceType
/// Size: 0x02
enum class ESkyLightSourceType : uint8_t
{
	SLS_CapturedScene                                                                = 0,
	SLS_SpecifiedCubemap                                                             = 1
};

/// Enum /Script/Engine.EPriorityAttenuationMethod
/// Size: 0x03
enum class EPriorityAttenuationMethod : uint8_t
{
	EPriorityAttenuationMethod__Linear                                               = 0,
	EPriorityAttenuationMethod__CustomCurve                                          = 1,
	EPriorityAttenuationMethod__Manual                                               = 2
};

/// Enum /Script/Engine.ESubmixSendMethod
/// Size: 0x03
enum class ESubmixSendMethod : uint8_t
{
	ESubmixSendMethod__Linear                                                        = 0,
	ESubmixSendMethod__CustomCurve                                                   = 1,
	ESubmixSendMethod__Manual                                                        = 2
};

/// Enum /Script/Engine.EReverbSendMethod
/// Size: 0x03
enum class EReverbSendMethod : uint8_t
{
	EReverbSendMethod__Linear                                                        = 0,
	EReverbSendMethod__CustomCurve                                                   = 1,
	EReverbSendMethod__Manual                                                        = 2
};

/// Enum /Script/Engine.EAirAbsorptionMethod
/// Size: 0x02
enum class EAirAbsorptionMethod : uint8_t
{
	EAirAbsorptionMethod__Linear                                                     = 0,
	EAirAbsorptionMethod__CustomCurve                                                = 1
};

/// Enum /Script/Engine.ESoundSpatializationAlgorithm
/// Size: 0x02
enum class ESoundSpatializationAlgorithm : uint8_t
{
	SPATIALIZATION_Default                                                           = 0,
	SPATIALIZATION_HRTF                                                              = 1
};

/// Enum /Script/Engine.ESoundDistanceCalc
/// Size: 0x04
enum class ESoundDistanceCalc : uint8_t
{
	SOUNDDISTANCE_Normal                                                             = 0,
	SOUNDDISTANCE_InfiniteXYPlane                                                    = 1,
	SOUNDDISTANCE_InfiniteXZPlane                                                    = 2,
	SOUNDDISTANCE_InfiniteYZPlane                                                    = 3
};

/// Enum /Script/Engine.EVirtualizationMode
/// Size: 0x03
enum class EVirtualizationMode : uint8_t
{
	EVirtualizationMode__Disabled                                                    = 0,
	EVirtualizationMode__PlayWhenSilent                                              = 1,
	EVirtualizationMode__Restart                                                     = 2
};

/// Enum /Script/Engine.EConcurrencyVolumeScaleMode
/// Size: 0x03
enum class EConcurrencyVolumeScaleMode : uint32_t
{
	EConcurrencyVolumeScaleMode__Default                                             = 0,
	EConcurrencyVolumeScaleMode__Distance                                            = 1,
	EConcurrencyVolumeScaleMode__Priority                                            = 2
};

/// Enum /Script/Engine.EMaxConcurrentResolutionRule
/// Size: 0x08
enum class EMaxConcurrentResolutionRule : uint8_t
{
	EMaxConcurrentResolutionRule__PreventNew                                         = 0,
	EMaxConcurrentResolutionRule__StopOldest                                         = 1,
	EMaxConcurrentResolutionRule__StopFarthestThenPreventNew                         = 2,
	EMaxConcurrentResolutionRule__StopFarthestThenOldest                             = 3,
	EMaxConcurrentResolutionRule__StopLowestPriority                                 = 4,
	EMaxConcurrentResolutionRule__StopQuietest                                       = 5,
	EMaxConcurrentResolutionRule__StopLowestPriorityThenPreventNew                   = 6,
	EMaxConcurrentResolutionRule__Count                                              = 7
};

/// Enum /Script/Engine.ESoundGroup
/// Size: 0x25
enum class ESoundGroup : uint8_t
{
	SOUNDGROUP_Default                                                               = 0,
	SOUNDGROUP_Effects                                                               = 1,
	SOUNDGROUP_UI                                                                    = 2,
	SOUNDGROUP_Music                                                                 = 3,
	SOUNDGROUP_Voice                                                                 = 4,
	SOUNDGROUP_GameSoundGroup1                                                       = 5,
	SOUNDGROUP_GameSoundGroup2                                                       = 6,
	SOUNDGROUP_GameSoundGroup3                                                       = 7,
	SOUNDGROUP_GameSoundGroup4                                                       = 8,
	SOUNDGROUP_GameSoundGroup5                                                       = 9,
	SOUNDGROUP_GameSoundGroup6                                                       = 10,
	SOUNDGROUP_GameSoundGroup7                                                       = 11,
	SOUNDGROUP_GameSoundGroup8                                                       = 12,
	SOUNDGROUP_GameSoundGroup9                                                       = 13,
	SOUNDGROUP_GameSoundGroup10                                                      = 14,
	SOUNDGROUP_GameSoundGroup11                                                      = 15,
	SOUNDGROUP_GameSoundGroup12                                                      = 16,
	SOUNDGROUP_GameSoundGroup13                                                      = 17,
	SOUNDGROUP_GameSoundGroup14                                                      = 18,
	SOUNDGROUP_GameSoundGroup15                                                      = 19,
	SOUNDGROUP_GameSoundGroup16                                                      = 20,
	SOUNDGROUP_GameSoundGroup17                                                      = 21,
	SOUNDGROUP_GameSoundGroup18                                                      = 22,
	SOUNDGROUP_GameSoundGroup19                                                      = 23,
	SOUNDGROUP_GameSoundGroup20                                                      = 24
};

/// Enum /Script/Engine.EModulationRouting
/// Size: 0x03
enum class EModulationRouting : uint8_t
{
	EModulationRouting__Disable                                                      = 0,
	EModulationRouting__Inherit                                                      = 1,
	EModulationRouting__Override                                                     = 2
};

/// Enum /Script/Engine.ModulationParamMode
/// Size: 0x03
enum class ModulationParamMode : uint8_t
{
	MPM_Normal                                                                       = 0,
	MPM_Abs                                                                          = 1,
	MPM_Direct                                                                       = 2
};

/// Enum /Script/Engine.ESourceBusChannels
/// Size: 0x02
enum class ESourceBusChannels : uint8_t
{
	ESourceBusChannels__Mono                                                         = 0,
	ESourceBusChannels__Stereo                                                       = 1
};

/// Enum /Script/Engine.ESourceBusSendLevelControlMethod
/// Size: 0x03
enum class ESourceBusSendLevelControlMethod : uint8_t
{
	ESourceBusSendLevelControlMethod__Linear                                         = 0,
	ESourceBusSendLevelControlMethod__CustomCurve                                    = 1,
	ESourceBusSendLevelControlMethod__Manual                                         = 2
};

/// Enum /Script/Engine.EGainParamMode
/// Size: 0x02
enum class EGainParamMode : uint8_t
{
	EGainParamMode__Linear                                                           = 0,
	EGainParamMode__Decibels                                                         = 1
};

/// Enum /Script/Engine.EAudioSpectrumType
/// Size: 0x03
enum class EAudioSpectrumType : uint8_t
{
	EAudioSpectrumType__MagnitudeSpectrum                                            = 0,
	EAudioSpectrumType__PowerSpectrum                                                = 1,
	EAudioSpectrumType__Decibel                                                      = 2
};

/// Enum /Script/Engine.EFFTWindowType
/// Size: 0x04
enum class EFFTWindowType : uint8_t
{
	EFFTWindowType__None                                                             = 0,
	EFFTWindowType__Hamming                                                          = 1,
	EFFTWindowType__Hann                                                             = 2,
	EFFTWindowType__Blackman                                                         = 3
};

/// Enum /Script/Engine.EFFTPeakInterpolationMethod
/// Size: 0x04
enum class EFFTPeakInterpolationMethod : uint8_t
{
	EFFTPeakInterpolationMethod__NearestNeighbor                                     = 0,
	EFFTPeakInterpolationMethod__Linear                                              = 1,
	EFFTPeakInterpolationMethod__Quadratic                                           = 2,
	EFFTPeakInterpolationMethod__ConstantQ                                           = 3
};

/// Enum /Script/Engine.EFFTSize
/// Size: 0x07
enum class EFFTSize : uint8_t
{
	EFFTSize__DefaultSize                                                            = 0,
	EFFTSize__Min                                                                    = 1,
	EFFTSize__Small                                                                  = 2,
	EFFTSize__Medium                                                                 = 3,
	EFFTSize__Large                                                                  = 4,
	EFFTSize__VeryLarge                                                              = 5,
	EFFTSize__Max                                                                    = 6
};

/// Enum /Script/Engine.ESubmixSendStage
/// Size: 0x02
enum class ESubmixSendStage : uint8_t
{
	ESubmixSendStage__PostDistanceAttenuation                                        = 0,
	ESubmixSendStage__PreDistanceAttenuation                                         = 1
};

/// Enum /Script/Engine.ESendLevelControlMethod
/// Size: 0x03
enum class ESendLevelControlMethod : uint8_t
{
	ESendLevelControlMethod__Linear                                                  = 0,
	ESendLevelControlMethod__CustomCurve                                             = 1,
	ESendLevelControlMethod__Manual                                                  = 2
};

/// Enum /Script/Engine.EAudioRecordingExportType
/// Size: 0x02
enum class EAudioRecordingExportType : uint8_t
{
	EAudioRecordingExportType__SoundWave                                             = 0,
	EAudioRecordingExportType__WavFile                                               = 1
};

/// Enum /Script/Engine.EAudioSpectrumBandPresetType
/// Size: 0x04
enum class EAudioSpectrumBandPresetType : uint8_t
{
	EAudioSpectrumBandPresetType__KickDrum                                           = 0,
	EAudioSpectrumBandPresetType__SnareDrum                                          = 1,
	EAudioSpectrumBandPresetType__Voice                                              = 2,
	EAudioSpectrumBandPresetType__Cymbals                                            = 3
};

/// Enum /Script/Engine.ESoundWaveFFTSize
/// Size: 0x05
enum class ESoundWaveFFTSize : uint8_t
{
	ESoundWaveFFTSize__VerySmall                                                     = 0,
	ESoundWaveFFTSize__Small                                                         = 1,
	ESoundWaveFFTSize__Medium                                                        = 2,
	ESoundWaveFFTSize__Large                                                         = 3,
	ESoundWaveFFTSize__VeryLarge                                                     = 4
};

/// Enum /Script/Engine.EDecompressionType
/// Size: 0x08
enum class EDecompressionType : uint8_t
{
	DTYPE_Setup                                                                      = 0,
	DTYPE_Invalid                                                                    = 1,
	DTYPE_Preview                                                                    = 2,
	DTYPE_Native                                                                     = 3,
	DTYPE_RealTime                                                                   = 4,
	DTYPE_Procedural                                                                 = 5,
	DTYPE_Xenon                                                                      = 6,
	DTYPE_Streaming                                                                  = 7
};

/// Enum /Script/Engine.ESoundWaveLoadingBehavior
/// Size: 0x06
enum class ESoundWaveLoadingBehavior : uint8_t
{
	ESoundWaveLoadingBehavior__Inherited                                             = 0,
	ESoundWaveLoadingBehavior__RetainOnLoad                                          = 1,
	ESoundWaveLoadingBehavior__PrimeOnLoad                                           = 2,
	ESoundWaveLoadingBehavior__LoadOnDemand                                          = 3,
	ESoundWaveLoadingBehavior__ForceInline                                           = 4,
	ESoundWaveLoadingBehavior__Uninitialized                                         = 255
};

/// Enum /Script/Engine.ESplineCoordinateSpace
/// Size: 0x02
enum class ESplineCoordinateSpace : uint8_t
{
	ESplineCoordinateSpace__Local                                                    = 0,
	ESplineCoordinateSpace__World                                                    = 1
};

/// Enum /Script/Engine.ESplinePointType
/// Size: 0x05
enum class ESplinePointType : uint8_t
{
	ESplinePointType__Linear                                                         = 0,
	ESplinePointType__Curve                                                          = 1,
	ESplinePointType__Constant                                                       = 2,
	ESplinePointType__CurveClamped                                                   = 3,
	ESplinePointType__CurveCustomTangent                                             = 4
};

/// Enum /Script/Engine.ESplineMeshAxis
/// Size: 0x03
enum class ESplineMeshAxis : uint8_t
{
	ESplineMeshAxis__X                                                               = 0,
	ESplineMeshAxis__Y                                                               = 1,
	ESplineMeshAxis__Z                                                               = 2
};

/// Enum /Script/Engine.EOptimizationType
/// Size: 0x02
enum class EOptimizationType : uint8_t
{
	OT_NumOfTriangles                                                                = 0,
	OT_MaxDeviation                                                                  = 1
};

/// Enum /Script/Engine.EImportanceLevel
/// Size: 0x07
enum class EImportanceLevel : uint8_t
{
	IL_Off                                                                           = 0,
	IL_Lowest                                                                        = 1,
	IL_Low                                                                           = 2,
	IL_Normal                                                                        = 3,
	IL_High                                                                          = 4,
	IL_Highest                                                                       = 5,
	TEMP_BROKEN2                                                                     = 6
};

/// Enum /Script/Engine.ENormalMode
/// Size: 0x05
enum class ENormalMode : uint8_t
{
	NM_PreserveSmoothingGroups                                                       = 0,
	NM_RecalculateNormals                                                            = 1,
	NM_RecalculateNormalsSmooth                                                      = 2,
	NM_RecalculateNormalsHard                                                        = 3,
	TEMP_BROKEN                                                                      = 4
};

/// Enum /Script/Engine.EStereoLayerShape
/// Size: 0x04
enum class EStereoLayerShape : uint8_t
{
	SLSH_QuadLayer                                                                   = 0,
	SLSH_CylinderLayer                                                               = 1,
	SLSH_CubemapLayer                                                                = 2,
	SLSH_EquirectLayer                                                               = 3
};

/// Enum /Script/Engine.EStereoLayerType
/// Size: 0x03
enum class EStereoLayerType : uint8_t
{
	SLT_WorldLocked                                                                  = 0,
	SLT_TrackerLocked                                                                = 1,
	SLT_FaceLocked                                                                   = 2
};

/// Enum /Script/Engine.EOpacitySourceMode
/// Size: 0x05
enum class EOpacitySourceMode : uint8_t
{
	OSM_Alpha                                                                        = 0,
	OSM_ColorBrightness                                                              = 1,
	OSM_RedChannel                                                                   = 2,
	OSM_GreenChannel                                                                 = 3,
	OSM_BlueChannel                                                                  = 4
};

/// Enum /Script/Engine.ESubUVBoundingVertexCount
/// Size: 0x02
enum class ESubUVBoundingVertexCount : uint8_t
{
	BVC_FourVertices                                                                 = 0,
	BVC_EightVertices                                                                = 1
};

/// Enum /Script/Engine.EVerticalTextAligment
/// Size: 0x04
enum class EVerticalTextAligment : uint8_t
{
	EVRTA_TextTop                                                                    = 0,
	EVRTA_TextCenter                                                                 = 1,
	EVRTA_TextBottom                                                                 = 2,
	EVRTA_QuadTop                                                                    = 3
};

/// Enum /Script/Engine.EHorizTextAligment
/// Size: 0x03
enum class EHorizTextAligment : uint8_t
{
	EHTA_Left                                                                        = 0,
	EHTA_Center                                                                      = 1,
	EHTA_Right                                                                       = 2
};

/// Enum /Script/Engine.ETextureLossyCompressionAmount
/// Size: 0x07
enum class ETextureLossyCompressionAmount : uint8_t
{
	TLCA_Default                                                                     = 0,
	TLCA_None                                                                        = 1,
	TLCA_Lowest                                                                      = 2,
	TLCA_Low                                                                         = 3,
	TLCA_Medium                                                                      = 4,
	TLCA_High                                                                        = 5,
	TLCA_Highest                                                                     = 6
};

/// Enum /Script/Engine.ETextureCompressionQuality
/// Size: 0x06
enum class ETextureCompressionQuality : uint8_t
{
	TCQ_Default                                                                      = 0,
	TCQ_Lowest                                                                       = 1,
	TCQ_Low                                                                          = 2,
	TCQ_Medium                                                                       = 3,
	TCQ_High                                                                         = 4,
	TCQ_Highest                                                                      = 5
};

/// Enum /Script/Engine.ETextureSourceFormat
/// Size: 0x10
enum class ETextureSourceFormat : uint8_t
{
	TSF_Invalid                                                                      = 0,
	TSF_G8                                                                           = 1,
	TSF_BGRA8                                                                        = 2,
	TSF_BGRE8                                                                        = 3,
	TSF_RGBA16                                                                       = 4,
	TSF_RGBA16F                                                                      = 5,
	TSF_R11G11B10F                                                                   = 6,
	TSF_RGBA8                                                                        = 7,
	TSF_RGBE8                                                                        = 8,
	TSF_G16                                                                          = 9
};

/// Enum /Script/Engine.ETextureSourceArtType
/// Size: 0x03
enum class ETextureSourceArtType : uint8_t
{
	TSAT_Uncompressed                                                                = 0,
	TSAT_PNGCompressed                                                               = 1,
	TSAT_DDSFile                                                                     = 2
};

/// Enum /Script/Engine.ETextureMipCount
/// Size: 0x03
enum class ETextureMipCount : uint8_t
{
	TMC_ResidentMips                                                                 = 0,
	TMC_AllMips                                                                      = 1,
	TMC_AllMipsBiased                                                                = 2
};

/// Enum /Script/Engine.ECompositeTextureMode
/// Size: 0x05
enum class ECompositeTextureMode : uint8_t
{
	CTM_Disabled                                                                     = 0,
	CTM_NormalRoughnessToRed                                                         = 1,
	CTM_NormalRoughnessToGreen                                                       = 2,
	CTM_NormalRoughnessToBlue                                                        = 3,
	CTM_NormalRoughnessToAlpha                                                       = 4
};

/// Enum /Script/Engine.TextureAddress
/// Size: 0x03
enum class TextureAddress : uint8_t
{
	TA_Wrap                                                                          = 0,
	TA_Clamp                                                                         = 1,
	TA_Mirror                                                                        = 2
};

/// Enum /Script/Engine.TextureFilter
/// Size: 0x04
enum class TextureFilter : uint8_t
{
	TF_Nearest                                                                       = 0,
	TF_Bilinear                                                                      = 1,
	TF_Trilinear                                                                     = 2,
	TF_Default                                                                       = 3
};

/// Enum /Script/Engine.TextureCompressionSettings
/// Size: 0x14
enum class TextureCompressionSettings : uint8_t
{
	TC_Default                                                                       = 0,
	TC_Normalmap                                                                     = 1,
	TC_Masks                                                                         = 2,
	TC_Grayscale                                                                     = 3,
	TC_Displacementmap                                                               = 4,
	TC_VectorDisplacementmap                                                         = 5,
	TC_HDR                                                                           = 6,
	TC_EditorIcon                                                                    = 7,
	TC_Alpha                                                                         = 8,
	TC_DistanceFieldFont                                                             = 9,
	TC_HDR_Compressed                                                                = 10,
	TC_BC7                                                                           = 11,
	TC_HalfFloat                                                                     = 12,
	TC_ReflectionCapture                                                             = 13
};

/// Enum /Script/Engine.ETextureDownscaleOptions
/// Size: 0x19
enum class ETextureDownscaleOptions : uint8_t
{
	ETextureDownscaleOptions__Default                                                = 0,
	ETextureDownscaleOptions__Unfiltered                                             = 1,
	ETextureDownscaleOptions__SimpleAverage                                          = 2,
	ETextureDownscaleOptions__Sharpen0                                               = 3,
	ETextureDownscaleOptions__Sharpen1                                               = 4,
	ETextureDownscaleOptions__Sharpen2                                               = 5,
	ETextureDownscaleOptions__Sharpen3                                               = 6,
	ETextureDownscaleOptions__Sharpen4                                               = 7,
	ETextureDownscaleOptions__Sharpen5                                               = 8,
	ETextureDownscaleOptions__Sharpen6                                               = 9,
	ETextureDownscaleOptions__Sharpen7                                               = 10,
	ETextureDownscaleOptions__Sharpen8                                               = 11,
	ETextureDownscaleOptions__Sharpen9                                               = 12,
	ETextureDownscaleOptions__Sharpen10                                              = 13,
	ETextureDownscaleOptions__Blur1                                                  = 14,
	ETextureDownscaleOptions__Blur2                                                  = 15,
	ETextureDownscaleOptions__Blur3                                                  = 16,
	ETextureDownscaleOptions__Blur4                                                  = 17,
	ETextureDownscaleOptions__Blur5                                                  = 18
};

/// Enum /Script/Engine.ETextureMipLoadOptions
/// Size: 0x03
enum class ETextureMipLoadOptions : uint8_t
{
	ETextureMipLoadOptions__Default                                                  = 0,
	ETextureMipLoadOptions__AllMips                                                  = 1,
	ETextureMipLoadOptions__OnlyFirstMip                                             = 2
};

/// Enum /Script/Engine.ETextureSamplerFilter
/// Size: 0x05
enum class ETextureSamplerFilter : uint8_t
{
	ETextureSamplerFilter__Point                                                     = 0,
	ETextureSamplerFilter__Bilinear                                                  = 1,
	ETextureSamplerFilter__Trilinear                                                 = 2,
	ETextureSamplerFilter__AnisotropicPoint                                          = 3,
	ETextureSamplerFilter__AnisotropicLinear                                         = 4
};

/// Enum /Script/Engine.ETexturePowerOfTwoSetting
/// Size: 0x05
enum class ETexturePowerOfTwoSetting : uint8_t
{
	ETexturePowerOfTwoSetting__None                                                  = 0,
	ETexturePowerOfTwoSetting__PadToPowerOfTwo                                       = 1,
	ETexturePowerOfTwoSetting__PadToSquarePowerOfTwo                                 = 2,
	ETexturePowerOfTwoSetting__ResizeToPowerOfTwo                                    = 3,
	ETexturePowerOfTwoSetting__ResizeToFitTextureCompression                         = 4
};

/// Enum /Script/Engine.TextureMipGenSettings
/// Size: 0x22
enum class TextureMipGenSettings : uint8_t
{
	TMGS_FromTextureGroup                                                            = 0,
	TMGS_SimpleAverage                                                               = 1,
	TMGS_Lanczos                                                                     = 2,
	TMGS_Sharpen0                                                                    = 3,
	TMGS_Sharpen1                                                                    = 4,
	TMGS_Sharpen2                                                                    = 5,
	TMGS_Sharpen3                                                                    = 6,
	TMGS_Sharpen4                                                                    = 7,
	TMGS_Sharpen5                                                                    = 8,
	TMGS_Sharpen6                                                                    = 9,
	TMGS_Sharpen7                                                                    = 10,
	TMGS_Sharpen8                                                                    = 11,
	TMGS_Sharpen9                                                                    = 12,
	TMGS_Sharpen10                                                                   = 13,
	TMGS_NoMipmaps                                                                   = 14,
	TMGS_LeaveExistingMips                                                           = 15,
	TMGS_Blur1                                                                       = 16,
	TMGS_Blur2                                                                       = 17,
	TMGS_Blur3                                                                       = 18,
	TMGS_Blur4                                                                       = 19,
	TMGS_Blur5                                                                       = 20,
	TMGS_Unfiltered                                                                  = 21
};

/// Enum /Script/Engine.TextureGroup
/// Size: 0x49
enum class TextureGroup : uint8_t
{
	TEXTUREGROUP_World                                                               = 0,
	TEXTUREGROUP_WorldNormalMap                                                      = 1,
	TEXTUREGROUP_WorldSpecular                                                       = 2,
	TEXTUREGROUP_Character                                                           = 3,
	TEXTUREGROUP_CharacterNormalMap                                                  = 4,
	TEXTUREGROUP_CharacterSpecular                                                   = 5,
	TEXTUREGROUP_Weapon                                                              = 6,
	TEXTUREGROUP_WeaponNormalMap                                                     = 7,
	TEXTUREGROUP_WeaponSpecular                                                      = 8,
	TEXTUREGROUP_Vehicle                                                             = 9,
	TEXTUREGROUP_VehicleNormalMap                                                    = 10,
	TEXTUREGROUP_VehicleSpecular                                                     = 11,
	TEXTUREGROUP_Cinematic                                                           = 12,
	TEXTUREGROUP_Effects                                                             = 13,
	TEXTUREGROUP_EffectsNotFiltered                                                  = 14,
	TEXTUREGROUP_Skybox                                                              = 15,
	TEXTUREGROUP_UI                                                                  = 16,
	TEXTUREGROUP_Lightmap                                                            = 17,
	TEXTUREGROUP_RenderTarget                                                        = 18,
	TEXTUREGROUP_MobileFlattened                                                     = 19,
	TEXTUREGROUP_ProcBuilding_Face                                                   = 20,
	TEXTUREGROUP_ProcBuilding_LightMap                                               = 21,
	TEXTUREGROUP_Shadowmap                                                           = 22,
	TEXTUREGROUP_ColorLookupTable                                                    = 23,
	TEXTUREGROUP_Terrain_Heightmap                                                   = 24,
	TEXTUREGROUP_Terrain_Weightmap                                                   = 25,
	TEXTUREGROUP_Bokeh                                                               = 26,
	TEXTUREGROUP_IESLightProfile                                                     = 27,
	TEXTUREGROUP_Pixels2D                                                            = 28,
	TEXTUREGROUP_HierarchicalLOD                                                     = 29,
	TEXTUREGROUP_Impostor                                                            = 30,
	TEXTUREGROUP_ImpostorNormalDepth                                                 = 31,
	TEXTUREGROUP_8BitData                                                            = 32,
	TEXTUREGROUP_16BitData                                                           = 33,
	TEXTUREGROUP_Project01                                                           = 34,
	TEXTUREGROUP_Project02                                                           = 35,
	TEXTUREGROUP_Project03                                                           = 36,
	TEXTUREGROUP_Project04                                                           = 37,
	TEXTUREGROUP_Project05                                                           = 38,
	TEXTUREGROUP_Project06                                                           = 39,
	TEXTUREGROUP_Project07                                                           = 40,
	TEXTUREGROUP_Project08                                                           = 41,
	TEXTUREGROUP_Project09                                                           = 42,
	TEXTUREGROUP_Project10                                                           = 43,
	TEXTUREGROUP_Project11                                                           = 44,
	TEXTUREGROUP_Project12                                                           = 45,
	TEXTUREGROUP_Project13                                                           = 46,
	TEXTUREGROUP_Project14                                                           = 47,
	TEXTUREGROUP_Project15                                                           = 48
};

/// Enum /Script/Engine.ETextureRenderTargetFormat
/// Size: 0x11
enum class ETextureRenderTargetFormat : uint8_t
{
	RTF_R8                                                                           = 0,
	RTF_RG8                                                                          = 1,
	RTF_RGBA8                                                                        = 2,
	RTF_RGBA8_SRGB                                                                   = 3,
	RTF_R16f                                                                         = 4,
	RTF_RG16f                                                                        = 5,
	RTF_RGBA16f                                                                      = 6,
	RTF_R32f                                                                         = 7,
	RTF_RG32f                                                                        = 8,
	RTF_RGBA32f                                                                      = 9,
	RTF_RGB10A2                                                                      = 10
};

/// Enum /Script/Engine.ETimecodeProviderSynchronizationState
/// Size: 0x04
enum class ETimecodeProviderSynchronizationState : uint8_t
{
	ETimecodeProviderSynchronizationState__Closed                                    = 0,
	ETimecodeProviderSynchronizationState__Error                                     = 1,
	ETimecodeProviderSynchronizationState__Synchronized                              = 2,
	ETimecodeProviderSynchronizationState__Synchronizing                             = 3
};

/// Enum /Script/Engine.ETimelineDirection
/// Size: 0x02
enum class ETimelineDirection : uint8_t
{
	ETimelineDirection__Forward                                                      = 0,
	ETimelineDirection__Backward                                                     = 1
};

/// Enum /Script/Engine.ETimelineLengthMode
/// Size: 0x02
enum class ETimelineLengthMode : uint8_t
{
	TL_TimelineLength                                                                = 0,
	TL_LastKeyFrame                                                                  = 1
};

/// Enum /Script/Engine.ETimeStretchCurveMapping
/// Size: 0x03
enum class ETimeStretchCurveMapping : uint8_t
{
	ETimeStretchCurveMapping__T_Original                                             = 0,
	ETimeStretchCurveMapping__T_TargetMin                                            = 1,
	ETimeStretchCurveMapping__T_TargetMax                                            = 2
};

/// Enum /Script/Engine.ETwitterIntegrationDelegate
/// Size: 0x03
enum class ETwitterIntegrationDelegate : uint8_t
{
	TID_AuthorizeComplete                                                            = 0,
	TID_TweetUIComplete                                                              = 1,
	TID_RequestComplete                                                              = 2
};

/// Enum /Script/Engine.ETwitterRequestMethod
/// Size: 0x03
enum class ETwitterRequestMethod : uint8_t
{
	TRM_Get                                                                          = 0,
	TRM_Post                                                                         = 1,
	TRM_Delete                                                                       = 2
};

/// Enum /Script/Engine.EUserDefinedStructureStatus
/// Size: 0x04
enum class EUserDefinedStructureStatus : uint8_t
{
	UDSS_UpToDate                                                                    = 0,
	UDSS_Dirty                                                                       = 1,
	UDSS_Error                                                                       = 2,
	UDSS_Duplicate                                                                   = 3
};

/// Enum /Script/Engine.EUIScalingRule
/// Size: 0x06
enum class EUIScalingRule : uint8_t
{
	EUIScalingRule__ShortestSide                                                     = 0,
	EUIScalingRule__LongestSide                                                      = 1,
	EUIScalingRule__Horizontal                                                       = 2,
	EUIScalingRule__Vertical                                                         = 3,
	EUIScalingRule__ScaleToFit                                                       = 4,
	EUIScalingRule__Custom                                                           = 5
};

/// Enum /Script/Engine.ERenderFocusRule
/// Size: 0x04
enum class ERenderFocusRule : uint8_t
{
	ERenderFocusRule__Always                                                         = 0,
	ERenderFocusRule__NonPointer                                                     = 1,
	ERenderFocusRule__NavigationOnly                                                 = 2,
	ERenderFocusRule__Never                                                          = 3
};

/// Enum /Script/Engine.EVectorFieldConstructionOp
/// Size: 0x02
enum class EVectorFieldConstructionOp : uint8_t
{
	VFCO_Extrude                                                                     = 0,
	VFCO_Revolve                                                                     = 1
};

/// Enum /Script/Engine.EWindSourceType
/// Size: 0x02
enum class EWindSourceType : uint8_t
{
	EWindSourceType__Directional                                                     = 0,
	EWindSourceType__Point                                                           = 1
};

/// Enum /Script/Engine.EPSCPoolMethod
/// Size: 0x05
enum class EPSCPoolMethod : uint8_t
{
	EPSCPoolMethod__None                                                             = 0,
	EPSCPoolMethod__AutoRelease                                                      = 1,
	EPSCPoolMethod__ManualRelease                                                    = 2,
	EPSCPoolMethod__ManualRelease_OnComplete                                         = 3,
	EPSCPoolMethod__FreeInPool                                                       = 4
};

/// Enum /Script/Engine.EVolumeLightingMethod
/// Size: 0x02
enum class EVolumeLightingMethod : uint8_t
{
	VLM_VolumetricLightmap                                                           = 0,
	VLM_SparseVolumeLightingSamples                                                  = 1
};

/// Enum /Script/Engine.EVisibilityAggressiveness
/// Size: 0x04
enum class EVisibilityAggressiveness : uint8_t
{
	VIS_LeastAggressive                                                              = 0,
	VIS_ModeratelyAggressive                                                         = 1,
	VIS_MostAggressive                                                               = 2,
	VIS_Max                                                                          = 3
};

/// Enum /Script/UMG.ESlateAccessibleBehavior
/// Size: 0x05
enum class ESlateAccessibleBehavior : uint8_t
{
	ESlateAccessibleBehavior__NotAccessible                                          = 0,
	ESlateAccessibleBehavior__Auto                                                   = 1,
	ESlateAccessibleBehavior__Summary                                                = 2,
	ESlateAccessibleBehavior__Custom                                                 = 3,
	ESlateAccessibleBehavior__ToolTip                                                = 4
};

/// Enum /Script/UMG.ESlateVisibility
/// Size: 0x05
enum class ESlateVisibility : uint8_t
{
	ESlateVisibility__Visible                                                        = 0,
	ESlateVisibility__Collapsed                                                      = 1,
	ESlateVisibility__Hidden                                                         = 2,
	ESlateVisibility__HitTestInvisible                                               = 3,
	ESlateVisibility__SelfHitTestInvisible                                           = 4
};

/// Enum /Script/UMG.EWidgetVertexEffectType
/// Size: 0x03
enum class EWidgetVertexEffectType : uint8_t
{
	EWidgetVertexEffectType__Default                                                 = 0,
	EWidgetVertexEffectType__PerspectX                                               = 1,
	EWidgetVertexEffectType__PerspectY                                               = 2
};

/// Enum /Script/UMG.EVirtualKeyboardType
/// Size: 0x06
enum class EVirtualKeyboardType : uint8_t
{
	EVirtualKeyboardType__Default                                                    = 0,
	EVirtualKeyboardType__Number                                                     = 1,
	EVirtualKeyboardType__Web                                                        = 2,
	EVirtualKeyboardType__Email                                                      = 3,
	EVirtualKeyboardType__Password                                                   = 4,
	EVirtualKeyboardType__AlphaNumeric                                               = 5
};

/// Enum /Script/UMG.EDragPivot
/// Size: 0x10
enum class EDragPivot : uint8_t
{
	EDragPivot__MouseDown                                                            = 0,
	EDragPivot__TopLeft                                                              = 1,
	EDragPivot__TopCenter                                                            = 2,
	EDragPivot__TopRight                                                             = 3,
	EDragPivot__CenterLeft                                                           = 4,
	EDragPivot__CenterCenter                                                         = 5,
	EDragPivot__CenterRight                                                          = 6,
	EDragPivot__BottomLeft                                                           = 7,
	EDragPivot__BottomCenter                                                         = 8,
	EDragPivot__BottomRight                                                          = 9
};

/// Enum /Script/UMG.EDynamicBoxType
/// Size: 0x06
enum class EDynamicBoxType : uint8_t
{
	EDynamicBoxType__Horizontal                                                      = 0,
	EDynamicBoxType__Vertical                                                        = 1,
	EDynamicBoxType__Wrap                                                            = 2,
	EDynamicBoxType__VerticalWrap                                                    = 3,
	EDynamicBoxType__Radial                                                          = 4,
	EDynamicBoxType__Overlay                                                         = 5
};

/// Enum /Script/UMG.ESlateSizeRule
/// Size: 0x02
enum class ESlateSizeRule : uint8_t
{
	ESlateSizeRule__Automatic                                                        = 0,
	ESlateSizeRule__Fill                                                             = 1
};

/// Enum /Script/UMG.EUMGSequencePlayMode
/// Size: 0x03
enum class EUMGSequencePlayMode : uint8_t
{
	EUMGSequencePlayMode__Forward                                                    = 0,
	EUMGSequencePlayMode__Reverse                                                    = 1,
	EUMGSequencePlayMode__PingPong                                                   = 2
};

/// Enum /Script/UMG.EWidgetAnimationEvent
/// Size: 0x02
enum class EWidgetAnimationEvent : uint8_t
{
	EWidgetAnimationEvent__Started                                                   = 0,
	EWidgetAnimationEvent__Finished                                                  = 1
};

/// Enum /Script/UMG.EWidgetTickFrequency
/// Size: 0x02
enum class EWidgetTickFrequency : uint8_t
{
	EWidgetTickFrequency__Never                                                      = 0,
	EWidgetTickFrequency__Auto                                                       = 1
};

/// Enum /Script/UMG.EWidgetDesignFlags
/// Size: 0x04
enum class EWidgetDesignFlags : uint8_t
{
	EWidgetDesignFlags__None                                                         = 0,
	EWidgetDesignFlags__Designing                                                    = 1,
	EWidgetDesignFlags__ShowOutline                                                  = 2,
	EWidgetDesignFlags__ExecutePreConstruct                                          = 4
};

/// Enum /Script/UMG.EBindingKind
/// Size: 0x02
enum class EBindingKind : uint8_t
{
	EBindingKind__Function                                                           = 0,
	EBindingKind__Property                                                           = 1
};

/// Enum /Script/UMG.ETickMode
/// Size: 0x03
enum class ETickMode : uint8_t
{
	ETickMode__Disabled                                                              = 0,
	ETickMode__Enabled                                                               = 1,
	ETickMode__Automatic                                                             = 2
};

/// Enum /Script/UMG.EWindowVisibility
/// Size: 0x02
enum class EWindowVisibility : uint8_t
{
	EWindowVisibility__Visible                                                       = 0,
	EWindowVisibility__SelfHitTestInvisible                                          = 1
};

/// Enum /Script/UMG.EWidgetGeometryMode
/// Size: 0x02
enum class EWidgetGeometryMode : uint8_t
{
	EWidgetGeometryMode__Plane                                                       = 0,
	EWidgetGeometryMode__Cylinder                                                    = 1
};

/// Enum /Script/UMG.EWidgetBlendMode
/// Size: 0x03
enum class EWidgetBlendMode : uint8_t
{
	EWidgetBlendMode__Opaque                                                         = 0,
	EWidgetBlendMode__Masked                                                         = 1,
	EWidgetBlendMode__Transparent                                                    = 2
};

/// Enum /Script/UMG.EWidgetTimingPolicy
/// Size: 0x02
enum class EWidgetTimingPolicy : uint8_t
{
	EWidgetTimingPolicy__RealTime                                                    = 0,
	EWidgetTimingPolicy__GameTime                                                    = 1
};

/// Enum /Script/UMG.EWidgetSpace
/// Size: 0x02
enum class EWidgetSpace : uint8_t
{
	EWidgetSpace__World                                                              = 0,
	EWidgetSpace__Screen                                                             = 1
};

/// Enum /Script/UMG.EWidgetInteractionSource
/// Size: 0x04
enum class EWidgetInteractionSource : uint8_t
{
	EWidgetInteractionSource__World                                                  = 0,
	EWidgetInteractionSource__Mouse                                                  = 1,
	EWidgetInteractionSource__CenterScreen                                           = 2,
	EWidgetInteractionSource__Custom                                                 = 3
};

/// Enum /Script/MovieScene.EMovieSceneKeyInterpolation
/// Size: 0x05
enum class EMovieSceneKeyInterpolation : uint8_t
{
	EMovieSceneKeyInterpolation__Auto                                                = 0,
	EMovieSceneKeyInterpolation__User                                                = 1,
	EMovieSceneKeyInterpolation__Break                                               = 2,
	EMovieSceneKeyInterpolation__Linear                                              = 3,
	EMovieSceneKeyInterpolation__Constant                                            = 4
};

/// Enum /Script/MovieScene.EMovieSceneBlendType
/// Size: 0x05
enum class EMovieSceneBlendType : uint8_t
{
	EMovieSceneBlendType__Invalid                                                    = 0,
	EMovieSceneBlendType__Absolute                                                   = 1,
	EMovieSceneBlendType__Additive                                                   = 2,
	EMovieSceneBlendType__Relative                                                   = 4,
	EMovieSceneBlendType__AdditiveFromBase                                           = 8
};

/// Enum /Script/MovieScene.EMovieSceneCompletionMode
/// Size: 0x03
enum class EMovieSceneCompletionMode : uint8_t
{
	EMovieSceneCompletionMode__KeepState                                             = 0,
	EMovieSceneCompletionMode__RestoreState                                          = 1,
	EMovieSceneCompletionMode__ProjectDefault                                        = 2
};

/// Enum /Script/MovieScene.EMovieSceneBuiltInEasing
/// Size: 0x22
enum class EMovieSceneBuiltInEasing : uint8_t
{
	EMovieSceneBuiltInEasing__Linear                                                 = 0,
	EMovieSceneBuiltInEasing__SinIn                                                  = 1,
	EMovieSceneBuiltInEasing__SinOut                                                 = 2,
	EMovieSceneBuiltInEasing__SinInOut                                               = 3,
	EMovieSceneBuiltInEasing__QuadIn                                                 = 4,
	EMovieSceneBuiltInEasing__QuadOut                                                = 5,
	EMovieSceneBuiltInEasing__QuadInOut                                              = 6,
	EMovieSceneBuiltInEasing__CubicIn                                                = 7,
	EMovieSceneBuiltInEasing__CubicOut                                               = 8,
	EMovieSceneBuiltInEasing__CubicInOut                                             = 9,
	EMovieSceneBuiltInEasing__QuartIn                                                = 10,
	EMovieSceneBuiltInEasing__QuartOut                                               = 11,
	EMovieSceneBuiltInEasing__QuartInOut                                             = 12,
	EMovieSceneBuiltInEasing__QuintIn                                                = 13,
	EMovieSceneBuiltInEasing__QuintOut                                               = 14,
	EMovieSceneBuiltInEasing__QuintInOut                                             = 15,
	EMovieSceneBuiltInEasing__ExpoIn                                                 = 16,
	EMovieSceneBuiltInEasing__ExpoOut                                                = 17,
	EMovieSceneBuiltInEasing__ExpoInOut                                              = 18,
	EMovieSceneBuiltInEasing__CircIn                                                 = 19,
	EMovieSceneBuiltInEasing__CircOut                                                = 20,
	EMovieSceneBuiltInEasing__CircInOut                                              = 21
};

/// Enum /Script/MovieScene.EEvaluationMethod
/// Size: 0x02
enum class EEvaluationMethod : uint8_t
{
	EEvaluationMethod__Static                                                        = 0,
	EEvaluationMethod__Swept                                                         = 1
};

/// Enum /Script/MovieScene.EMovieSceneSequenceFlags
/// Size: 0x04
enum class EMovieSceneSequenceFlags : uint8_t
{
	EMovieSceneSequenceFlags__None                                                   = 0,
	EMovieSceneSequenceFlags__Volatile                                               = 1,
	EMovieSceneSequenceFlags__BlockingEvaluation                                     = 2,
	EMovieSceneSequenceFlags__InheritedFlags                                         = 1
};

/// Enum /Script/MovieScene.EUpdateClockSource
/// Size: 0x06
enum class EUpdateClockSource : uint8_t
{
	EUpdateClockSource__Tick                                                         = 0,
	EUpdateClockSource__Platform                                                     = 1,
	EUpdateClockSource__Audio                                                        = 2,
	EUpdateClockSource__RelativeTimecode                                             = 3,
	EUpdateClockSource__Timecode                                                     = 4,
	EUpdateClockSource__Custom                                                       = 5
};

/// Enum /Script/MovieScene.EMovieSceneEvaluationType
/// Size: 0x02
enum class EMovieSceneEvaluationType : uint8_t
{
	EMovieSceneEvaluationType__FrameLocked                                           = 0,
	EMovieSceneEvaluationType__WithSubFrames                                         = 1
};

/// Enum /Script/MovieScene.EMovieScenePlayerStatus
/// Size: 0x07
enum class EMovieScenePlayerStatus : uint8_t
{
	EMovieScenePlayerStatus__Stopped                                                 = 0,
	EMovieScenePlayerStatus__Playing                                                 = 1,
	EMovieScenePlayerStatus__Recording                                               = 2,
	EMovieScenePlayerStatus__Scrubbing                                               = 3,
	EMovieScenePlayerStatus__Jumping                                                 = 4,
	EMovieScenePlayerStatus__Stepping                                                = 5,
	EMovieScenePlayerStatus__Paused                                                  = 6
};

/// Enum /Script/MovieScene.EMovieSceneObjectBindingSpace
/// Size: 0x02
enum class EMovieSceneObjectBindingSpace : uint8_t
{
	EMovieSceneObjectBindingSpace__Local                                             = 0,
	EMovieSceneObjectBindingSpace__Root                                              = 1
};

/// Enum /Script/MovieScene.ESectionEvaluationFlags
/// Size: 0x03
enum class ESectionEvaluationFlags : uint8_t
{
	ESectionEvaluationFlags__None                                                    = 0,
	ESectionEvaluationFlags__PreRoll                                                 = 1,
	ESectionEvaluationFlags__PostRoll                                                = 2
};

/// Enum /Script/MovieScene.EMovieScenePositionType
/// Size: 0x03
enum class EMovieScenePositionType : uint8_t
{
	EMovieScenePositionType__Frame                                                   = 0,
	EMovieScenePositionType__Time                                                    = 1,
	EMovieScenePositionType__MarkedFrame                                             = 2
};

/// Enum /Script/MovieScene.EUpdatePositionMethod
/// Size: 0x03
enum class EUpdatePositionMethod : uint8_t
{
	EUpdatePositionMethod__Play                                                      = 0,
	EUpdatePositionMethod__Jump                                                      = 1,
	EUpdatePositionMethod__Scrub                                                     = 2
};

/// Enum /Script/MovieScene.ESpawnOwnership
/// Size: 0x03
enum class ESpawnOwnership : uint8_t
{
	ESpawnOwnership__InnerSequence                                                   = 0,
	ESpawnOwnership__MasterSequence                                                  = 1,
	ESpawnOwnership__External                                                        = 2
};

/// Enum /Script/MovieSceneTracks.MovieScene3DPathSection_Axis
/// Size: 0x06
enum class MovieScene3DPathSection_Axis : uint8_t
{
	MovieScene3DPathSection_Axis__X                                                  = 0,
	MovieScene3DPathSection_Axis__Y                                                  = 1,
	MovieScene3DPathSection_Axis__Z                                                  = 2,
	MovieScene3DPathSection_Axis__NEG_X                                              = 3,
	MovieScene3DPathSection_Axis__NEG_Y                                              = 4,
	MovieScene3DPathSection_Axis__NEG_Z                                              = 5
};

/// Enum /Script/MovieSceneTracks.EFireEventsAtPosition
/// Size: 0x03
enum class EFireEventsAtPosition : uint8_t
{
	EFireEventsAtPosition__AtStartOfEvaluation                                       = 0,
	EFireEventsAtPosition__AtEndOfEvaluation                                         = 1,
	EFireEventsAtPosition__AfterSpawn                                                = 2
};

/// Enum /Script/MovieSceneTracks.ELevelVisibility
/// Size: 0x02
enum class ELevelVisibility : uint8_t
{
	ELevelVisibility__Visible                                                        = 0,
	ELevelVisibility__Hidden                                                         = 1
};

/// Enum /Script/MovieSceneTracks.EParticleKey
/// Size: 0x03
enum class EParticleKey : uint8_t
{
	EParticleKey__Activate                                                           = 0,
	EParticleKey__Deactivate                                                         = 1,
	EParticleKey__Trigger                                                            = 2
};

